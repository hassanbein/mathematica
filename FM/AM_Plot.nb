(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    337189,       6066]
NotebookOptionsPosition[    334165,       6004]
NotebookOutlinePosition[    334697,       6024]
CellTagsIndexPosition[    334654,       6021]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"2", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"0.5", "*", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", "*", "Pi", "*", "1000", "*", "t"}], "]"}]}]}], ")"}], 
     "*", 
     RowBox[{"Cos", "[", 
      RowBox[{"2", "*", "Pi", "*", 
       RowBox[{"(", "100000", ")"}], "*", "t"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", 
      FractionBox["1", "1000"]}], "}"}]}], "]"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Tm", "=", 
     RowBox[{"1", "/", "1000"}]}], ";", 
    RowBox[{"Tp", "=", 
     RowBox[{"1", "/", "100000"}]}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.8784030960230894`*^9, 3.878403178393833*^9}, {
  3.878403210335088*^9, 3.8784032896058903`*^9}, {3.8784033232037363`*^9, 
  3.8784033677743945`*^9}, {3.878403502768652*^9, 3.8784035127732887`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"75d98150-680f-4f25-beca-e4b5fd78aefb"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
I4W2fxPDsMF1wevtR1nIvPU297z8PMjpGMz+KJaF+gghq4N3V+GMvZLr8HdZ
CMr/3rKrcgtC73EOkxtkoSCsMI3hLA2Wk7VuJ9shCwtUrqOtD4hY15++DqPh
Hf6Ltb+nZ4kY0/ovi8tzshDlHvdQ9w4R0xbLaQzflAWx8iGObyY0mKPhM5OM
XXJwST9G/PX7LXhyNeBnFYccCBWYt9C7rgL+xPHQuLAc9LLx0VlwzsNUkclX
Rnk5sCg7VHO9dRgEejS0FTXl4Am2kP6XqQGM6AXzj2FywBMiLFz3sAZ5KdKq
XDWWg8aWvqYc7yH06tTYu4dn5KBvdb3ZxXEO1fs0SGbZyUHwzau/LctW0ObL
z0l1rnIwfDPSMnn3FpL/nsQ/7b3zfMgzCWkaGvzs+J2YPSFycPKby+XbGBEP
Y7vGSnkkB7vdcvQtPxHx3L3mD07EywHOSLlIe46I95zXob/+eocP8ZheiSYN
zhwqEfT44068Ls/brG+20P4Mho2cYjm4GbH9bO/DVeRUP+vV+F0OiPqTIW3W
8+jpUuvsXL0clPJPLrfljKBpvbRh9WE5+MW9NWNqWwmClx/Zn56Tg5hXnveS
yINwNPJmp+emHMjvOqI/+2oWvD9Zn43ZJQ93SWaXqzaX4XX7oaZPHPIQ9aoi
6YrxJjTQKJg2C8vDomrYhMk7ArYlw/5rSU4eHhubdmfO02CKpquHeDTlwar2
xeF/XkTM0rPn615MHp5oNBKDlYjYneeV2meN5SFR+MU1BQEaLB/Pyvc5Iw9U
eLHE/mwLeodiVOLt5MFSODlvOH0VWJhvZxS5ysOpj2wRxOR5OKB+UarNWx7C
V27zHwsaBWdL4+S1YHloDJ6tmbH+C7EBagICj+Qhea8Xqe14GSp/wxd7IF4e
zkkw8S0n9KOZagKb9Wt5GG3c2C/RP4OE54Yf+H2UhyCH357V2svImPc3fWKx
PBzRFkp6G7GBfKgFQaXf5aHsXNj95BMEXEU5qlC0Xh7GLz7NqH9Kgw8Juex8
eHnQU1scaFMm4onM+hLDAzt6aR/r7+Mj4qc3hSyPTstDp/YJNVpzGpxxcvnR
h1V5OEu8xvqnaRuVdTRUsNIpAJ+nv21F9Tr6ryZz7QaLAviz0yfpFi0h1ZIw
SguvAsSTxu4l186gkcwLjvslFMDzZ4b+79ABlPxCOyFRSQEyL5Sa/SqsQhYP
OBoJ+xTgfdjcgdWHtcBya5J8UU8B9gpPlWTJDMJ3l0rdymMKIP67kG6ZaRb8
rFJuyFsowI/84PTmriVQP3rr3UM7BZhWcuKIa1iHMW3z7pkrCjAgU5L179M2
pMipcJ32UgDC54Z1PXUa7CzfbuPCQAV4e33jDtcgDbZnd38g/wMFkMfd+FdG
abAfKyUFt2MUYHtVPpekR4PdHomd6ElSgCs2NWlFw9ug0eourp+hAJunvX8V
8W7AeOXRs2n5CqAeR7xrqrMMqYWSjxiQAmT7PeNsDJoFy7St8qu/FOCJX3RB
w8EhYI1rXa1vUgCVbdL2k/MNUHknV0WjSwH6In0d7/ysQP5eEZfiRhSgtY+G
brStD2k6Or5Ym1OA9lnXhfbKaTRhjjWc31SA0SNGP4y/LqLXh/nJ38iK4F+z
K9eyYg2d01zQkWRXBLO8BN+N71uIXarO466gIvAw+e0L2OnfqjjT08ekFeE7
j+GsbhwNHkQX3GWiqghxpNu/Zj7R4PsWznHmHFCEl89xQrEcDT7dr3mU00AR
3nM7BFrNbKO3TXsCvU8ogk4wdUbJagOdLx/91GalCEoqgs/35C8jzrzycd1L
itDXmyx9UmEOVacmiqW4KUJUgVzBzfFhFBztbUH3nyJgD9iLaKl/kXbwyYdO
oYpgylmtecj9M8xcVyiveqQIaVgO5WFcD6TZkVaV4hWh+t1oFc2tSbA52a38
+JUiHHAgV+4MxMB1sOjiwocd/NuCRLNPq1BDefLc4rMijOwRzlVv3IQQ0av1
xWWKsFpl86HSkYDtZzWkF65VhEOrivKPD9Ngs9uiOkEtinD1xK3fFrdpsPTp
tesDvYpAZnTkO8ZEg13o/pNmOKEINxP0TFcmt4H7d1ZnxpIiZC6xdh6J2oC6
r/c4WGiUIP1HZkGk6AqEZdkfuc6oBMsmnlNsVXOg81In4A+XEnSQmjXddvb/
wkPuT3tFlYAkQ5exb6MVMm/PjD2XV4LS9aKSV+svkf3VKtEtDSVoct+r0VrS
gfjOvz5jB0pwx82afFxjHNUf84+oOKIEj87oH1r1n0d3dc6WyZxWgtMvz7xg
fLOCqIpqK/dtlKB4O6V9V/sGciUtdBY5K8FY9pT34vg2iu/6VD7ioQStlnk8
5aME/Eeh9zue20ogXkbZZ4zR4AtR2pEGd5XA4rLgeMESARd3Wfe8+VgJ2oMo
LCt7CPjxQ6VWr18oQaAxx3E7uU3kJxiANb1RAlGXm09xqVWUsYhJE7N37ldU
F6H9C6i1jsikWqwEn3gGHpQpTiJSesXshQolKNrfwfO0rQfZWhmVlrYqQdnD
yzQrCo3wUJ3h1USfEjhw8H4PLh+EYqaaewKTSrBSZtOP18/AyODDa0eXlUDM
XoEgLbYEXOj4aV8aZYh88a9uNmUN9J6x7U9nVIasiuUiXG4L3K83ibRwKQM1
bPa6xDEClng0hkQvqgzYytuKL+MErErCYlxDXhnCn+6+Ij1FwFY2eBscNJTh
Yqziw6dmBEyqua0gmqoMq2Ziu+sObe3U9YSEb0bKMPWjOGjs5xoE3rMJnjml
DHXZt/cesliCLDtRZ5HzypAqfVDdn3cW2vf3mZg6KUMP93sm7VtDoDV5ie/9
LWVw4nv/bna0AF38IbPdFqYMn+5HojrZbvQ4aXRgd5QyuJEEzh/8NI6++mRW
7XuuDPOjo3drnebRxMmr2U6vlSG590GKH3UF8SuoxMZmKUPZ/d9GkmobyJBu
9tb3z8rA6vk89Z7wNvLszLVbKFMGVSbVyRBPAp5a4GkoUasMe82+mf/ACfjv
SC2lUy3K8JXT+1TkdQK+4bzCHtSrDIYmhfyMnNtIXq945eO4MggnpPq+kdpA
FgJ+XV2LykAQ+HcrRX0FhS7oVjATVABpdLgxO8yj3NrtdzoMKlDk4XFj4ts4
YgoMuflcWAU+PuDPW3u9kxKWh8/9klUB/7Q78tSeRnBSIx9cUVOBjJonCW6F
g/CU8Ze0jK4KHLn3qLwhbgbKBu4znTFUAVp3/1XbwkWYKT02F3pSBfhK/X2V
GNdAKI6lNe+cChBKv857XdmEo+71pX2XVEA/JL7LrmgbfI5Ev2JzV4GYt98K
d7kTsLfip8Ox/1SgNhVXznUhYE3rXG5uoTt4uh5lJs+3gfC35fTLRyrg2zjP
Vrl/E5Sz4vfXPlOBB+/etp6rXQXru+dEN1JVYLDHJMPMYxHCbYXoFT6ogNyP
a8rBp2agQLt73LJQBea4JmajDgzCAHtKw71vO89L6leckWoEtgn7wsLqHbz/
9jvcl/yCqN8lE4f+qkDvIc+ORtdu5PpyKJirRwUkJVyV89zHUbx3urP+mApo
mEpS/TjmEfd/OiMnFlVARuj+uSruFXSEOpKnTKBA2OJ20WfWDXQPcufzSRSI
iRV0d2/eQj8wP/UDjBQoaD/4Vk6KgNPpGdz4xkrZqb/LTAnKBFzvEGueITcF
hO88Dt61ZxsF6rfN1QpQoPXCf/LF1zYQOvxa7bQYBcLLWVJfxa+gLYNrHm3S
FFgNflqvUTyPdIz25doqUuCq4XtdPaYJ9N8R4tyQKgWiToVVUWe60OejNapX
91JgseSATh5LLloyjr0+r0MB/OQlr8NMzaBpYpvjq0eB9VczHT11w+BpKj+7
bUiBH36kgGc/ZiH3+ALljgkFCrsqFr/1LMHMia/uTGYUoEsMH8jcWgPlU/ey
o89S4MDjVKu5+U1wNTs1w2tDAWmOosWJ5G3IPC1ISXKgwKbZ1H2ahW0YMx9y
k7pMgW/d62XWY1sga5H9MfMaBV4OBgvu3qnnjmf/m1b1pEDxHPGjw/YKvLbU
V/nsSwGxi6/nFy4sQJ8Vixs1gAIJe7Flz1+TIGbdmlURSoGHF98Kjj7pBdvz
qVNH71PA0IhiFPC0DF7auCo3RFLg8T5CefdYPeq4oHXNIoYCF4otG0sUBxG/
HSGr8zkF2i+aBonfmkFn7asmHZIp0OEnIL2avojiHJ4qjb2hgL4DC9/34VXU
fNHmqnsmBapj0/oKdm8iTkfZD0vZFJDDyzgPTG6hU05zE34FFKA1H9tl77+N
opxLFGlLKNCtVcqcW7iF6i7fcQ3/RgGX/ECbc6kbiPnKifd7KikQsr+PWGO+
io658k/E1FBAI6P0XvrSArp/dUBBsHHHz5/thi4u0+jntawrqS0U+COWnBMU
24/o3X0yZTt3+AYXW5jUViP963rjWX0UGHp9bfVMUyWEeDApaI5Q4BwdVr8r
pg/KbjS7fJmkgPvv7365DlNAuJmccXCeAseZBQYOuC8A1ctlrHKFAlf6DfL/
1KyAn7eGvOkWBX7p7qG/v9NvFftsXf5Dqwo6VK7PGypbsOr7853VblUYSP6e
Q7u5BftuRY/2sKjCYsNpz1jvLfDys5Zz4lQFFzsBRqG3G5B/W/ryJJ8qGPre
MBRPXIU5/5n0GyKqUImeT13xXwRKYPHIqqQqSPtusoR4z4BbUKhsoLwqGNe5
JfgGDEJWsKkzPUUVHtL7v7xk0QgTIbzpEZqqsD+KerFSvgTJh/UNsx9Qhajm
znq63T3I+c57mXhMFcC3SHO4eRy9vevlJGKgCjUGr7ETe+fR4D0s7Y2xKhQ+
bH+WlrWMJO8zDCucVIU6lvx/WmLryP7BH+ncM6pw9dbmy7nLm+jSLE/Fv3Oq
MIZnRVle3kLOFufsaOxUgTDE8eCw4RZyLX25JeuoCnF3UnIjSZvITaLvxYkr
qhBfzB5Qmr2GPMKltH3cVWGKmrk/9MIy8pp2bk66qQpzCcfnxlXnka/5+xuV
/6mCe9S7/zSSJ5Dfl2nW6QBVqCL3MqQ09KIAMfUs7jBVYL05e9D+9i8UfNfL
mHpfFRwMn19Xkf4OdyaLRi5FqsLWKfu/ksU9EG62GfbwqSoo9jAFt4eNQ0QR
JvEpXhWW1Jxl972agyiRULzjpSoEOj3I6P29BE/CKs/TvVYFbRc6nUSxNYgd
Z1hXeKcKt3SvZ5/y3YD4k6bPzLJU4azGlZmD3zYhofCx5q28Hb0Rn6tqJjch
WehvY+pnVZAyt2fr2dyAVyG87lWlqnA5c7/pytoavB09xzxXpgoxnC+4y1aW
IeN4UgbfT1WgMRHFLTkX4MOnPsODtapw8sz6M4ehKcgWkB50blQFnmwfG/OQ
AcgLuhwc1aIKbTYPWt98b4SC4fcinzt2+BaMzivcy0bFJjMl3b2qcKlhhO5K
cxsqzVO3Ig+rQjlxsm8cRhDO572sPKEKGeRXOnqcs6gioPjpmVlVuDh56lqG
wyKqHNxU9V/awb/7uitqcAVVGR/8/WZ9x/+3OWIsvuuoNifUtZagBk6jka+k
6DdRPc/P3YskNXiVL9D/2n8T/bnNmCbIqAZPa9RU3nRtoJZ+U319VjUwO/bH
IFNxHbUdie69wqUGHddD+x18V1DXx7/+T/jVgOx/t3+7awH1cvEJfhFRgxyr
XdZagTNo4JZ1UZ+kGjRtn7CdYB5Gw71JZxjk1cDyzzz98QetaMywf15VRQ0Y
IkP7tUeS0dQH6ceWGjt48deIjpZ/YJbDRTlIWw0ovVsKejSDsOD7oTqdqgZ7
Xgquee+ahpXuGef6Q2qAdUwdLJmdh/XDGvQrRmpgePf1owtJy7CV6f1KxFQN
RK9ULj1zWQMa9i+YoZkaRG+KuptrbwCdz1bntbNq0Jv5lm16bQN2dR28FXte
DZob43R+pG8Ao34Y71d7NTCScKTcMlgHloyfnwad1GD8jQPfj94VYGdlMmO+
qgaSiHx0+vEicHkdn9HwUAOZS74dE16zwNsR/dDaWw3umlxMt3YfBUG9ZvlQ
PzXwWp70ucvUBSLpfD8zg9TABTA5xmM4iLOcv9R0Z0evEr2IHl0NkvZMJq4/
2OHjatiYXNOL5Nr6k8Qfq4HVlMBFvdFxpIjJ6B6NVYOid2I+SbfmEOWtS9v1
F2rgG8z7OfLEElJnyvKOT1aDlRcvbC4fX0Vdd9p6Vd6qAcfQslu43zq6R0M+
9iNTDfrS/zwrurmB1P3UC6xz1GCEw3mzgbKBupYuiM4XqMHrkvfdD3PWUPj1
iPvhJWoQQ7PSYrl7BWlMfF4QKVODyq4a2/AzC6jbcdCmoFINtKQdvq+GTaP7
vWy/jtWqgUdL8MlIukGkaU1V729UA7/DgjUZuk2op9kl0bdVDVS/HTwlap0D
D07GkVm71CAsqJr5yod20Kopv/62Xw0uciy0J/eMQK/BTLvOqBqcpGtc13Wa
hYhvggZNU2rAe/7VaY74RdircyT78oIahGKmS94tK9BXcJOfsKYGdHnnJqt2
zvuHqqmhsdtqUO+esTtjeR32va+bUiSpQ9WJm+HThevQL71+tpxBHTDB0NsC
h9bgUYpMuSWrOsRwHH8rmbEM2oKnlWa41KG5+4paHsMCDMQGxt0RUIf9q9nJ
CQLT8IjtA42QmDrkZYcc56kZAO2If1fypNVh5QEHu7lmEwzQ0zcfUVSHg/OG
McL5H9GjIDWsR1Ud6gJPL9iMtCHtDZsMr73qYHlIWpxyYgQNeD3gZNZVh8tf
Sa46jLMocrbQ/5WeOqjvnbh/QmkR7XcdGNE2Ugdx73t3MmxX0OAQq1m9iTrM
fxw+IBG8hqLsdEsdzdRhSiAVe/bfOjrQcVlm86w6xL4ebx6CdTR0JvbxE5sd
vKiOg+Z/V9HjhrJ1uYvqkK+Vru1ovIx0jk1fwi+rw4ySUxUvmkfDPwTqz7ip
w80b/Jn7c6ZQ9EGj/ZOeO/gLfROCTwbQsFYKC3+gOpwume8s+fEeonNqfbLD
1MG9O3JjSroNdBTX+gweqEP3nii2zm/DMPxW2qQzSh1yJgm+jtkzEC1mVngj
Vh2OVFT8+lW2ALoJAWIMCergnx96VnB8GUa43z9ITlEHNn3/8Gz6NXjyuHVR
K00d3inaE17v+EtlItnWvt/hYyjc0bIzX43eUa1yyFWHSNqyeUvnVXhKY6Ox
VqgOIcjmz/7JJQC/+y+jStWhOtziQ+ONeRhbKtglU64Od57Pmq0bTEHM9X6P
0p/q4Ds7Z1xiOQDYxJ5Oszp1iFecbuwVboKYXuecwH/qYKu4+zvl8j+EWccI
8HSrwz3iNoY0h9FY87ewDwPqoN3AU1t7ZgbFnJyaPjSmDs4HH/2JsVxAWA2/
Vdu0OqituR0d8VpG4waGFe6LO/GMIl9FRayi2G83lMnr6hBk/a9oImQNHdRJ
fpZI0IC+O2PH+06toYmCGqIGvQaIvGxSMdpYQaekJ/WzGTWALast2D1xCX2O
Yb6ryKYBz2uTsfpj80iYpPwrnVsDXtm+Ez9wfgqFepoySglqQMNZy9i93QNo
rP+aSYqYBvCanv3VxPQXnTCLjBSS0QDX8WMvFPP8oaDsY0O8ogYMKjv3usz8
BUG1eg5uNQ04b7a/8o3WIASnzJhH79UA9vYc6db7UzDCyvaMRVcDijhqySFG
82AaqNp2X08DNnqSrJp9lyB/+qQg2UgDWnwKdz8qXAH+Cx42ISYaUHpag198
bBUC66KTt09pACdLsN9J0hoM6eb13Tq7o2dIjitp1yqYfGiSXDmvAXhV9tzx
7R08wQVHTwcN+PUB3zO+PQ/8EZzvZpw1wOnxyxOYwgwErmuMu17TgEu3vy4Q
zwzDkIu50ugNDThc+2xiFrXBsbabbpd8NeDntkLpa0Ih5B6Jzen139FzwuRy
UW8d4i0qmD8fqgGsxyUNI5d7kb9si2ZbuAaENtgdNHMbRwNxy95nIjUg5UbE
B0rnLDpK5i1ufKoBqSmjWSLYIsr22rdh+lwDmr12VQaWLCPuobPU6qQdvNQ3
nBL7VpGfuW+g4RsN8CHT+GW9WkV9FfFl5RkawB9VLqG3voKMNIrpsGwNuD42
fSjOYBllvWozKPmkAUYniAJpzxYQJ8f6vX1fNODA0XrBVpZZ9F+wQHU+vqPn
5JEtr6RR1DN7gFn1hwYwmxoMNbD3IAM76+Mfqnf4v/t73cyvEr2v93ss16AB
tXN6JrFaZcCOJTa9adaAz6UncexOJ/h8LOUS79CAv5GXT+SbjUCXcJfFy14N
8H/X+tvTdQb0H23F8w9rgMFZrKZnfR4yNoU7Yic0YPLDJP/B3CVgvQrCHHMa
kMs9+2rSYwW8Oi7YRi5rQH9lWnOKwip0GAemMm7u+J+72rz/7wrofUkeuEvU
hN+7OoI2byxDuvw3abpdmlA1XZZsx7MILM97nQOZNaHrKHfdxX+z4LmbmLnB
rglsn/jU/hWPQ5uP+KQPrybQDiTY3Evsg7cWDtevS2iChybT8qm0NMRUGZI3
KasJuQ1P933f14I8tF4vXlbWhGcpobFmBwZR65uKvUPqmrA+gabEZiYRlWvQ
115bE2w3hVs7s+bQ61BSSRdVE3p9amaCny8ihgWpLSt9TSi5KXSBI2EZuTsY
YC1HNMEydlD1/ssV1NzoGGx2XBMi7nh4vI1bQTp6dyt+n9aE2EWL/lP3llFq
Thr9MStNSLMJuRDjt4h2if00+nlBE77ecfpL/2AOuUWN3Ne/pAkKJt+K89Im
0fOLwfL2LprweuJRjn3CIKrYJ1gV4KYJbfk2puWx/xB/7/HdX3w1wZhQo5tx
oRIOfxpNb/XXhJd28SNLS53gHh5itBSyg5fC9ubDw2F4cV5ohCNcEy5xa/K9
pE7DD9XCu6qPNOFt+FvPy/1zMEs6KXP8iSbQz3QUjHougmDb2A/XZ5ogW5i3
oKCzDIZZoY73EzVhc4tyaEt2BTyChenTUzWh/hA/UUN9BRLPfH7zPU0Txipm
6ietluGn/KnD/e81IWWEKfNJ+iLMb40PEHI1IXAP66MgxXkQbgoLFS7UhAu1
3N+bNqbhSJqIpE6JJuz7fUJm2GcEPG8VlVt+24nXIHl7H2cPVElMEmOqNYGf
Zj99c3Y2Wly+k5pbrwmn9s3di7dvRqI1onr1fzWhNbup8XlXPzJOLu6dbNvR
5+B5lrV2HHl5ng5i7NEE1uDvuu6WsyjFaEpUbnAn34KFzzDILqAawXu4wdjO
+xcpDdf2LaHlGTHbi9Oa8Af2p3/2Xkbi379sBy1oQoWb1tHctmVkEm+elLSq
CQWSqjL7bZaRz9VpaumWJhz598blHHkJvToY3tVGqwXOax6y/P3zqI5Lwn9l
lxYcoRYzLZJm0epoiRA3ixbM/4+C646n+v/CkhQNZaSEr1FGRoVwuTx3qjRE
JYmKSpOMSkkLkZI0SIkykkpStsqbyipC9sze3HvNEvW7vz8/r8/nnPc5z/Oc
8z7nn49g8WvG0gGyMsf6o66EPnLnaXQsVu0gXk43pl3k9CFGDaFE1yaQZ0Yr
Hwcp6ePysQvzfVpKUb4ox/ilqj5Ur5CM3HWt+NO+u7FQUx/HVofZOln0QiWD
59W1Th+tAX8jJ/04sLx5U2a2Af+8Fb6PcgtH4L1/VbYCVR+xtVmTd1aM47ku
2WNK18epfS7PghIm8GPunt97zfQRFLJcPerAJGYaR8LPb9YH88R7Wz+TSagl
Bxk+2K6Pfjb9xmz6BHb4qdSl7tJHr+0e54rTY7hkk+v5w1YfOSYe+ev7efx7
3Faau18ffg7uRUXuQ6gSGEtfeFgf2Wd33taa1Y1/VbesNY7rw+B+1LmMm41Y
/UJ1YuMpfRyi9jH1KF+w62JeqNNpfWjfofdpR+aQK5Z71/ud18db2bGZm8vr
yatV41XRl/ThuPsEM/BbJ6n5HXya+Oqjs9cpYQFzkMz6ribZfF0fxyc4gVxr
HtGM+ZQydYvvP9TeeWPvKNl91m7Hsnv66OnMZHR8HCc+5hMj68P18QTyHgKF
E+S1fMjdHZH8fK95HXWcmiB1I+o6bjH60Oz7XvTUeoIIFn6uCH6uj0pLPYN1
7WNEK8LeLTFRHxIvddxVXo0QAb/WZsN3+ggbbj39ZRaH/Dh50Dw/Qx/rYpbc
/rO3hzzb1Z1u+VEfCwQTdL94NJNzpseUWz7pQ9J45e41g/nEXHXw9vEifVQL
LboRVEkgt/jU9ESpPpqVbOd8824A9xfvqG+lPn7tOsD519+FT22nq8Xq9fGx
fbhzTfQQ7n+dpD9u0UeApeoTW+ERHEnxSlLr1Me3YoFTTR5jMHo8I5PWp48s
lQvL2v+OY8G1KwF0Dp+/3PimP2ETaHGePVY6po87Odv26+lP4K21/wHbKX3c
1XxZvrltDH4QKe3+p4+Jpv0rLz4fgbVaEMVjjgGMtg1sfMrkQG2JWPw/UQO8
W2ECgc4e/Pl9RzxosQFWqvzUWCT0E0+/PRiIW2GAHsGVnIEz6cQjVcZmnaIB
/uQyVWa6a4lZZOSXjyoGWC1fc9bwdidZ5q+wzlzTAJwSx9IbfH4HXGIja9YZ
INmxRlJhH4/k7FYRPWhggKG1oXIe9aMkhPbiLIdqgKz5uXrd58bJQXXNjgsM
A1gnSa5aqTFB9MXfWMzbaIC0iPmZEn38/vxn3Yf7Ww3woSYs/L/0MdLYkaqm
uMMAkWLP9ok+HSFJJQahr20MsG3R/oZobw65kpY9y2ifARSjXfayHHuJVZSJ
S8FBA3xyDQ7koJWsCshtsDpmgGfpB83/5JSSX6eYG366GCAi3m5GsOwlvtoU
pJw4bQC5ecTO8WA1IumbFH6dN4DtqrG3e4074Lq6JMjvsgEeHViqvHWwHwwJ
i9+Lrxngu58IWZ/JhdR0xeHIGwYgqx327aONordz5w/1EAM4brrXsH50DNml
tabpoQb4xeIUBuWM41a67StGhAEuj1g4rHs0jgNPmqXLnhqge0P8C+b1Mehc
P+C3N94AAic7aqRDRzDHrYPb88oAHX83KFi+5qBuj5P96bcG0JJtSjGt7cVL
Rl+xQIYBWB/6VaZHW+GtcVL/1gcD+A+I1rSllcNCkhOz/JMBlsQoHpjz+C5R
mnETiy80QJPqX/0u3g8y1jV2QaeU76/v8JJLnDZS8N2zN+eHASyCTB+8iOgj
DzOmdm6uMwBi7/77JMklJ59ezKttNsByRt1wRcIIMQ0U0D7UYQAXVSPeIpcx
stjd9xG31wCLzy0zvGA5TjpshedeHDaA/EObE7Wbxkk6M9BDZMwAat1f7862
GSPXNRe0hv7m67HW3pnjP0L2St3eovTPALM+9m8yrOEQ7b9LspKEDLGheL3s
cWYfEei5v8pY1BB3Tp5l3otqI5Vl0ncLxQzxZNuspMZzP8hxOUm7cUlDxP14
0rVRMJoInlisoixjCA1LL7pZQAkeZS7gbv/PEPXLdgymS7VAR1gk+9JKQ7wx
dCgw29+Nrzvm+CWqG0Lv17OFsvWDcIieta1B2xD5X14Z28vx8Gt4RnqeniEy
yHWxO2qjCKFOta2nGEK7renRgNcY1G5MvDpoaoihYfeFKvPGQWpHztxhGiLr
ZUuw47cxWK/igGw0RLbNUKV14SiG3QdEhrb+Pz+5X1r8/uCf21Mps8MQDfNv
FrF1OJBb1Bm50cYQisdjTiWt6UPq3tYjZ+0NsX9VpX2DaTu2vGhaF+fIj0f0
rmQauxqdE3V/Ko4YoveZv/lKtTRcYFXn/ztpiNVbxjVpGflE/G7FbS13Q8DP
J9QmpIG8/Fm6Z6+nIQ5VZEi3RXUShtZX5UBvQ/4a15RfozFA6r0KhtKvGqJZ
t1lnlw2XuBZ9yuj0N0TJfY3Wy94jZN5SclU8yBAXbyZMGA6PkqcH32+m3TGE
c+U3sXlPx4jB2wwplzBD9Ghetkq8OUa+/035GRFhCPtGL++d70aJ05bkF8VP
DfFFpfDqbdkR8vdhosfkM0MU+lr8HkzhkNCeBJNVr/jfPxt5pDKrn2iufzZ3
R7IhlhrPj5Cw6SBffKIrrqQZYo3nXOE1I7XErjwyIinbEJsvce8tfJ1LRuUe
HW4ihvh9eQsrSycHN06ErRHNN0STXsgkR74WSll3fxt8NcTWOp1lQV3tyBa+
/flwmSEWHr5U4enTB8udN2/dqzKEjbf0Yz1VDnqjA3bn1Rui5VxUgWQZD1c4
voqcFkOUnjyz/P6+USwzuTIg22mIowQeF3XH8OaGd5p5nyG+3bQZNzIbg1nd
ucvnhg3h8a0s6UrYKFpWndkUP2qIXcuvBG/WGMFZDzeJql98+5QfFx+Jc7Ew
z7l51l9DCPgHtBfl9SNu0fHna2ZTcGyy/Hz0gU5Q7Zzc7OdR8NC6XKHrUgOq
Xjga31xIwctYj1+zggpwYnLfnCxxClb/msnL2PuWCLL3lnVLUxC5a5vfVF4l
eXR390NJOQouXY5KfqfbRnRadxxkKFEQFFSne7e5hxRrbddyVaXA4vrRpEVP
hsiBC1smIzUp4LXmu2Yq8Mivoo1539ZRsNHp9ttTJSMkZCn75m99CuyjBxP+
fholqofou1SpFFzcUm18/c8oyXlr8t8uOgXOH/+JWp0eJdb/KH0+ZhQkbjJk
VeiMkOEt+inJmynIr1O77s7kkmuPdC62bKdg4fNdbFP3ASLbq71hgTWFv0de
jZ23p4ukrtdYYrSXgtSFIY+CB5vI6IPFCTUHKHh1uMvr2fNiojM1burhRIFw
8B7WWYckuNk1VoudpOBuDuvMMsMqJOfknkx0o2AmY6HB08Y2cBTiZ2/ypEC/
qHpDd2kvtH1vPurypuC1Q+UqtWfDcOlyXefjQ8EjOZf3q0J4eL3Bukj+OgXp
XJUHlcKjGHxhvP/9LQrUHHZ9vx8/Cs0FihO771FwIePKu8ajozjhInxrLJyC
25SfWg3bR/CyfED5ThQFZWv9HWxOcNGnU5GtFUdBfMMlQTwegFpouuXXF3w+
zyQ4/9PqwpHJiF6nNxR8lKSJ8l40In7P1cuz0/j8+C+oOHKnEF3vnZY+zabg
6FPTJwGW78hK+S2vqbn88+0dtg2kVpGDV9ax6vMpcNQ2Ey3mtZGY9qWNZ75R
EHak7rXg+17Sxpp2E6+g4MNZ2waD48NE4XnbvDc1FOTcNt8ifIBHDogUPtnc
RIHDsH2FUcEIeXIiUb+3jYL5X8uYTjajpKX0TqlfDwX1uzIu3V48SuTXeh5S
HKLA+15/4K4RHrG/a/fn4wgFh3RGo/NEueTxGP2u7S8KdGcJtez72U8arVXV
J2cocK8YeBJ3sZPIZC3IvTfbCHWtn0pvujWQ8Iu1QyWLjPC6bMXiFps01P78
4HdM0gi3zRyOFmtVYykjZoWwjBEEZCgKzLnt2BUX8C7mPyPYmWfv+pLQi/vC
zpuwyghe074dlHXDqDxq1dq42gjxjvIRF9bxIP7NwPPcWiP8e3HyYG7ACKy0
5BZJ6RthWcPr84ULRnHntuCzt8ZGOGdk+5/q+xGU83qMt9GNMMKMj+8J42Hx
ztIf/WZGWC7nqxhjy4FF+rtjAVuMkMrKORut1o/gZeECK62MIChtSpn+0YFS
r4sPcncbQWLglKYqsx4Lmh217e2N8KWnxUX7wWfciNayCztqBG1aidq62GpS
PFtiVMfFCJlG/Xt2yraTeU6/Ass8jFDwdzzh9INesrGoWeHkeSPck6zu8pwa
IgGrP2fMu2wElYNa3AQhHikIStj2zM8Ilru3nvXbPEKEObe66DeMMNsiZ17V
5xHCtvTwbrltBBvWCofMoyPEL8VG4kKoEa63Ft58Ysojn6VMX0pH8OOZGLop
Gz9MBM8p01OfGmHPLlcP4XN9hN4wr257vBHi6lYcmNDqIFeowy5Dr4zwzsuq
75p8HSFRlXNuvDWCkuWV7sa3eeSvQNZjlQwjJF71Lh1QfA/Tg1G6nz8Y4a3Y
9SWxUjW4mO/7df8nI1iprhxlrGvHOVl7SnuhEcZ6NTUVTvbC3UM/4VCpEX7e
jC3nPhrCya9i0j0/jGAwsSLy3ycunBT7rh2rM8LhszmhqbNGcODcp7GBZn6+
W6tjT3mPYG9ZxEGXDiPMe5Vy0F6bPz+rnPnB7eXry+bojPYKHrZf3Eb3GDbC
m5Q9jY2RwzCvUk0eHzUCo2dtYX92H1gas/4799sIaSaJKtqfO2Dq03Br6q8R
wnTfkUpOPSj1KdPeQsZgG18w7eD3Y721t078EzFG8NdQydS3SUQ7wKnhqpgx
zt7yufEn7wdRa8EmISljHO9gFt9wbiVK65dn+ssYY9oihVz40k1kg0ZURBSM
YWsU8vCA4iBZ2vEt9OYqY4hKfFOnr+KSxUbPhBZpGENHkDfwPJBH5t+55BGy
1hgrh4tuy63h8927u11c3xhPXp+x/L2Ivx9hnWWosTFCLl0SG1/NI1OhornS
dGN8NTxM0ZLhkLHBDu1HZsa4n2nFuhTcT4aZHyNltxjjYtMSwW+dnaT3UdiC
J5bG+NSpO7g4vYm0805dUNxtjGXUq2Lr20tI88ZN/bF2xvBqvNpB8fZC3ROl
PSqOxnBcO38Dw+M7fkz8KUw4Yoydc+qLNts3o2Rrtb6GszFM9JZsGZLrQkFc
0rPX7sZgPLXWU3rWj9w/AZJrzxmj5qLdvrR5HGRbOfi+u8iP9+ikWuECHlJf
GI3o+Rpj6S11U59GHt4ISDpkXOfnG91wXK6Xh5e7h8oowcbw0E4sPaLDQ1xS
gemHe8Y4uHHnnzr+vh415+lr04fGSDa0UV2zfQDhdudl86KMocxQq5o/3oW7
KVY3mXHGyI369EnW7iduiWpO5b8wxqvA8c7Tlytw3WHOsY1vjPHAxlGowOY5
fDJbar+mGiM9PiZoxK+QeItlmm3NNsaRG/mBk3315KzTnbQyYoz13w89FD7f
QVw/Hl9plW+MyElJ2wGVPnJCknWv6qsxzBnjxsfzhojTCTnB3eXG6Ji3+Kff
TS458GnCtb7aGI/XKopL+fCI7fLyn3sbjUFZq9ZHy+aRna4vtrW0GmMR9eLu
3+t4ZFuhz8cD3Xx9pXz49qaFQzbJ22l2DBjjpamf8DuBQcI6sz7iMM8Y0Va1
dVfHuolpySLR3gljvI9vzDvIayWGyr3njk8bY2z9q+wJtyqi45XXMziLCvES
xcW/YjOJZsUj61NzqVibMcgIy8qFqtrpfN4CKsbSZVa8v1oDpctb9U6LU8ER
Fo1j1LRBtkYldkKair3avPN7n/dgqZaA+Hk5KhwOEo79mUEs9qu/8keJivEH
CTvNhbkog+bW/9SoOCW916ZLiofgP5eWM7WokM/wf5bgy8O2jIouJx0qymnH
HPM387DQY+W7GwZUpCUJDd5w5aJE2/NSEpWKqJAHeyLHhhDUX2z+g07FrXNa
evrDfdgcLys9YUbFKkPZGsuxTog6nupYvoWKlU7TNlEnW1As9+mNiSUVxMs7
9VQ1n+96SW8HaypW82z2VB57h42hRzZe20tFfliQulZwHplrmS354gAVS5sN
tmaVV5OCBQvbSg5TQU2yJCmz24h/0f7X3ONUXPgUWDHHu5uw/d6dl3SlQixx
FbNNboAI0eaYGZ6hYsNRZXbFx2Hy+c9ucTsvKsyVMl9OPeYSn4yXLZcvU9F/
dkNDlAmPMDxmXsb6UXGdrItRMOaRWWu2exYGUkE3+i/wRyiX5PbHMAeCqYh9
ntq+JGGYXIkfFxO7T0Xfa9vNmbMHCBw3Nuk8pGJSx0LqqEM3+SsXkWAdRcV+
V/U45lAr+Vg/dNorlopdBVb3DNKriXcojR6VQEVuhse9RXfziLHlvYWfXlNx
Jzw5LPDrW0wt6K7vesfXg3j07Dh+fWQVGcaLZFL59f8nJre9Gef8brprfaRC
cY7+o9B7nTCktZhafqLimNXYh2NufZj8s3b+mUIqOtIFRFXsh5Ce4VsbXkJF
YzQLIsu5/Hm5JvZDBRULr6nldPdzsX6NumtrDT8+bZL2VJaHsf4LVKEmKhbv
OJ34IJGLlPjv89TaqJBpiQvfZMqBu6Ni9eZuKk5uvvCgeXoA6+RPR58aoMLM
Yvuaxak94NYXON/j8vFfL9GYEtSON6HLjTLGqeCu6ykPOFUPF8uTwo1TVISd
23Z6y7tiaC8kP/7+oyI0uddoiHaMDBUteaI0xwQl19/LL3H9ShL9Dp0wEzWB
iUbejqMf6slJWobBcTET3FAMb/4c1040pkWEgiVNMOvdq6RNWT2kP8Ou/O1y
EwjXTu39NzBAXni8eVwtbwJVgT3rfKU45OgawWO/lU3Q16X+fGUQl6gN7Fwv
p24C+/A9X2u5XNIT/3wWXdsEzfph0rvSuCTecar0kK4JIsfWnxbM5BAn+a2P
rhuaoKLn3/iqhkGyquGJU6KJCTwXTScHDPaSztARnXKGCbQbFfiLQieJtWT/
G91ggrLS8SWlAs3EcWH4N+mtJjgivetaTnE5afMzObR/twlWD3Rx4ifz8JQW
stbXzgQi5SE/H4dV48B0+3S8gwmKx+/Hlia34r/M9cVfnUwQ7LxiqmyiCy0e
10OHT5hgX6Sow9sT/WCzvmhfdTOB1JunFqPKw0iUFCiS8DTBw8CEDbpmXEh0
GTvEe5tgk9Wgn30+F15pnlOGPiYw4L0U0L7BRdu1lHvfAkwgxltwpVWbg43W
HM19t0xw+N9ioyLOAJJUNAq4d01gvk1E8PqFHkhNOu33DTeB8zbJMO7sdngX
xvySijLBJX3fI7ODatH+oOVOQqwJXpeUzZ8r9wWbjspoGL8wwaf1q0/7VSWR
ZEPrL6VJJsgytd+cdL+CSIvctT+QaoInXbe++wS0kEv1pRMjWSYI5XCZBUu6
SNcLkZBrxAQOYbWBamN9ZIsXW31Zvgl0ergYTx0iKeZXP738asKfhz4+OyHF
JTIrPu41Kefns8hm/alILrk68GusrNoEPkJOf36c5JLe93rBjo0mOKW9oub7
fA6xCHJVHW81wR0954DCrgGSbpeYG9BtAqZbVnfnjR4iq9W7R2bQBNxRjfZq
jXbiO6M8msgzwQPhTePCInWkv3R/ECZNYPFWc23l4XyyPSpi1Y9pE1SuGW/6
8C4BGS61OYcETbH379mHd7PKIQ8Jm8m5pmicw5jr/KQZ18QseIELTTEr4vnr
M487Mfjzxg1ZCVP4vXJ7Wc7fr3ckFyi/WWYK7r9bT55sGUL2FcGPdHlT5GbG
bfqvnANFS1PrKmVT/OQMhLWc4+K6ohfHSd0U23VsODFWXHB4add/a5vij3Xx
oaPDw7D+xFMM0jPF4vIBdmDrAD7e1Xovb2SKm2rSm3sie7Dy4LGdb8G371F9
t8K6HTd0nw0x2aYw44ZqLbxeB97sNv8ac1OEi2yc8yexADZVsgrHtpuioaPL
ru91DMmJs8n6s8sUGeceeZwpLiOrzty3Ct7Lj+/ei8PTpIkEscsHFBxMsf9B
87bzmp1kVGrBtRQnU/S993h0X7qP2HZvkDc7ycdnr+/X/v5Bkpfum1Hnxsdj
jlU2y5tD1ALI9hOeplivtDkwbTeX3N79p2/G2xQsFzvpJGMumVA18A3xMcXj
NL+JupphYvfLXVb5uimSjzzLZLQOkM9FSWlpt/jnrf6Y8C21h6x+2L9t4z1T
LBFwVJnt205Cjqn0NoSbInaL84rHIvVkn2iUjECcKSjO919v9HuI/Ib6lLsv
TBEff9DJWeM7NF9JbV31xhSihzce+tHbiHsXLLszUk1x9bz748S8DkxtvnXZ
PNsUDofKxOze9cJBtnhZMzHFkwSXD99uD6JoUOjdqXxTVCZH7zBfw4H2R9pm
wW+m2MHr1JumcBF6y7vzfrkp7s0qFZutxkXup3WNRdWmOBHMVLXsH8bgZHfF
dIMpHA94NrnvGcQyrcdFa1tN4XoqJep8ei9YjpbkUJcpikoOiZau7ITrA+H0
8H5T7Fz9vO5ldDMel7xPLOGYQptaFRveVIExfZVHelN8PM5LdiTUfiAKJxtD
jv4zRU2dpMfJkEqyJTok4LEQEHRIOfWwxk9yroZ9qVwEMOVO6Zp/4/e/+X9O
C4kBebJK22P1+8h3WvIJQ0mgN6XeXeL1IJk6c9jx5HKAViXeSlnIISqvZPY8
lQey2pzfKyhwiVVrmUWVMjD9et+cfXJccknqmtk8dWAJyaCJzQyTl+ZGJlRt
4Hp6aYfLvUFSc5mj66oLKJKs34ek+sistLjVcYaAQkDCusG4TqLZv0exzgRI
lqquNm9oITb/iS1bwARG5Ptyj9ErSXLg+TmntwKyR8XL5genoylHe/q5FXBD
trvH5m8F5o11jDTuBoSNZCwMXjRDT/1hn5g9kFR/Lfnx8k7s37etlekIfD/h
qGYc0Ysb92bXeh4BRH9IaQxpDSK9KLP01UngzbGYSoM3w2ifcf7y0w3Q/hPf
f3E2F4t0ld9LeAI7bKnV2pJcGB2te7vBGzhvZvaEJs6BU+SthAtXAYH6bf9t
LxvE3R+MJ2/8gYFX/lNhZ/rwce6v0I6bgKZ+dVzCqi70Ul8HSd8B6kXzIw6J
tELS3dF3cxiwzZk6SOKqcLKpxDXlKfBnNfU/xs5kEr7E50jPM2BMTCGU5VZO
vpgZ7Fvxim9ffH1up2YT4V4Y3GmRDEjKayauOdFBVryN3uybBtx9mhW9cXYv
Meu2ZmRkAz5FR2St3g0Q9xULKPwpCRH7L7il7xwmUdvz1vyXD+hHHE9aUMEh
X6+dVdnxFSh55/nNfwG/XrM15ALK+HhLqJfKruYQJW6rxPsqQGfrwN8DC4fI
tlVhovw1ET99hw2P1/aR87abZyn/BNbMX//92PMuEndb4Jd1Jz++hQIus+Nb
SfmXtOEbfYD10dDia3NriNoahaaRUaBA+eqJM1vjsPNQ9Q+V33x/W8+sSS8v
xZWHN4pt/wIrF+5a/SatAdY9/x0onEVDrvjhFamkHYNXvfY6CNEgJHG5M9il
Bz6y1dZ/hGnIZ15tXm40gGUZa6xCRWjw6/ppGDszhCTLG1vXLKDhV+LKpeei
OGAOdm4sXkTD358b1Dz487n+Vcpa6yU0HNU9vixjMwerlwZLd0jQ4Hx+/gH1
I0OQe9X+99RSGgQfHTEYcu3HYppB9/QyGjhLxaWe+XVDqPpmaeAKGpasOi/T
WdCGyWOtqUvlafDZKez6rrAOLfcCfdcq07C8O0ugMiUYP9Rajn9cRcOiiEaK
hFsByf+oY2WuRoPyLKffL2dqSKZVAKV2NQ02aWPVMhOtJLGnUeGQFg231yrM
rC/rIk+9187jreH7YzY4ijb3kXtLrnEu6tCgcCd+X9vvQeIfX18jup4fr2Fe
W9E8DvEy1s55YEBD7aWmgKcTHOJS7vNspRENe3ye079lc4jD4dqgt1Qavsqf
Vr28e5jsnNI4bQoaFhfdDUmuHyAbb1/Z+41OAzPvt95Dm15CXVnNsGHRkJ13
NffnWAdZk6W+usuMBgM5q1NlSc1EadulJe6baNiuzPZ6sf8Hf9//8evvZhpG
dnIunQvLIqLnVFtvbqOhYfDYbz1kYGaBd+EySxpmfIXsB79XgBtdnvRsBw3+
1uqLF6k1o1N/VZiONQ2biFVLfmYH6r6dv0hsaOh3XbuhfFUvvh34fmjLXhq8
KoRtRt4OIGdcaUu9Pf/7C0pLVKjDeHfDU9fpAA1x991eFiRyEP9ficyoIw2u
Ee1hJyc4eJiqIHjlMA31CZM4vpSDoE1n+hYcpWHbPhtep+QQrrQUlz88ToNe
atiCQKF+nPaQz1RxpoG9aK1Z06xuHJnn8STlFA1OpQupejptsI0s9Ke503D+
cKRkul8ttunIupSepmHIZHIy614hGIWuu2w9abib9fC+13tPst4un9pzngaH
F1fP9c0rJmq85StPe9MQ752HqPV1RNbfZf6syzRUL77IzvdpI2IrPo/cukqD
zhwYftnQTQSTpRtk/GgIS1zuvN+kn0ywTuY996eh97GeQKrpEOmrz03QC6TB
/aHB+tw1HNLkIhWSd5OGk9MF+47+5ZDy2cc9twXTcGRbzJv/Yjnkc3jOvsYQ
Gq4dXVOurThM0rUkzI7eo6Hrb2VcqP8AefnpiNZ4KL++htX2Bg70kMjdHyR9
wmkoayUe99w6SMjg4ulFETRklR7qTPFrIn5XD3dERPLtDxSLGspWkHNLs7+q
PaXhD/dcYaBFKjnxatG7tBga5jfYL1t55wP20Q4+ZDzj24tKSfjJVMKqOuNK
2XO+PiyiOUf3t8Ds+IKjdi9pkNeXTvrH6gTl3wGLvkQalsbzBAoje6F5P03/
7BsatJ8PWvsvGYSCuqj87Hc0nDWOeD7/yjCObKw8UZhKwxO3OuPKNg6SjjzO
uplBw4UI54kj3RxM+B+euz2bhhUXNdyu3BqGSbz2LsmPNBirPw8v6BqAX/5k
TB2hYfrP+ErDBb0o6czlPv5Eg0DEtTX9qzsgIXTD1CGfhmAn8S9eww2wVd4R
tKqI7288xn1PTgmiGbINfV9pOHDwduqRpffQ69ClmlTK7z+/NEzFpYrI2qtJ
Z9zL+Xg9ilib+LmOeD71/KxfSQNLTvziFoN2kkNoS/5U8/vF2Qi3VHYPEf4p
sp/U0fCqUXo6fNcA2fr3R6JvIw1B3894HjQaJvflHk9taKHBWyuyglXFIY3U
wxsXtNGgbvshoHgelyjZaYeVd9Cg0tkgHcQZJscvTHbc76bh5Zio4xmvQfL2
Ue66PX00OB4elZUu7SW/sgIvyw3SoLTU4mS4WCeh1VuVtg3T0GT3cdPdgSYS
8GvFingeDUmld47Xni8n36W7jh4fo8GSXqd09s5LImWQlK49SUNjjcHmTxOf
YWftKTT6m8/naORipeYaxJ2hWWVM07BxWvXtmGMbBu6LPL3wj4bv6mqsOw+7
oZP6YwiCdCiLeknp1vfDqzLCWGgOHXoeZ86vHR1C3sihwKK5dHRw3MWP53Mw
T1y7NkiUjir5BJE2OS4s1k2utFxIh8Hmw3umtnMQtj3XXWoxHW4BJV85i4bQ
ciowt16cjoQnsXvWBvdh1W2rRVFSdAi6mstzxzpxMmmFneMyOi6qvsqs6G9B
amnnC5UVdNwr0tlz4sEPMBZ4st8o0KG9/xAj/SkhgRq0ex7KdCx4o51gNFJF
ys1F2gxU6Oh+spKyL6iVLDv+Q3tajY51/an3KQNdZH9ghHeuBh2OeauoH237
SXzCoa9+2nSE91M9NV4OkeFCrWWb1tHRUj/tKJ7GIet7Jg4v1KMj0cvY10WH
S7yFc1Mq9OnIenekueQtv55XBc4Ko/CfW80kLWOHiCjbysKWSofEiN7TDIt+
YnVoRaQ86Kh9Kuxp3NhFHvp29rfT+f5ifyl5nW0lrTGvDZ+z6Cjf+t/gp8wq
ovbprP+JDXRELKU/2n8xh6QLiCiNbaHjmRL1y8SsSvz978epTAs6ZrX92rPC
6SfYiPjobcXH5ynPxNioC0H7Ds2n76LDrPocKuv7UHVRa88cGzp2aC+zFtw/
hBWRE/HFtnTMcM4oz4rlwPEDGbtlT8fRYs+4/fz9+WXjdYbVATri24rNpudx
wZuyDFl6kI7eZubaBINhPCqpDXp1mA5jBXV1R8sBsKLsA2lH6bCzL5Mlh3sw
fKrjWvVxOnqyhtlTD9sRTj/mc9yZDrljhYqOBg1gSHAu/TtFR1K73Id87xIM
dJ6+cN+dDvqLczcE3kbA9PqV0zmedHSdnptxaEEt6d0j7LbDiw4Fq4Xvx9e1
kbsaQc693vz8pi0Gko26CXVmyfGLl+nYv6z+op5rP+n6/sBJ3IeODSocZVU+
n8FP5Q4+96Ojn9Frdb2YQwzdY/dTA+jQunF0zpAdl7Qz1e0qAunY2axrPmrI
JUFSb2ycgujYk6j9WWZsmOj36O36E0zH1fvDG9y2DZLWzGzLkDt0NA7szOM8
7CU3btC2rbpPxw1RuZ3ZvzuIrl2BeXYYHQ8i7IRv6TaTJq0tGywe8vU/GELx
sK0g/v8qmJ0RdDw0SS5dciiFNMQ0UxdF02HV2Oo+xqyC3+mDlNhYvn53O1pk
c35C26xvvWE8nT9/WZyJ0u9CnfQpndIEOiR7C47OS+zD1b4xbcdXdFDKE8/v
1RrC6vdeGpOv6dAJXj+7N5yDqiABtaBkOuYm2nESTnBxaZ//SsUUOg4tPdhm
6MKF2toFiulpdBzrcun79pyDH7Puym3OpEOm8uy5B6wheFdKy7Rm02Fa8meT
dXEfVJ5FLj3zkY7DTe1NAru7UHZWWUI0l47R3h7Kd+lWnNv4QuzJJzpW1BQl
ml2ogpLMmgV6+XQ0SY/qdgjk4uxHozn7vtLBOWQyUHGsgijczp01WkKHk2cL
L86pmXw9YPY3oIyOSvXWzC6VTnJap2RK9gcdTI0QAY/GXiInZDX5toqO+W84
95piB0lBde2oWS0dv6ebZQv3cojrc3tuYz2/fm3dzl84zSUy5zsGXZvoaBuJ
v6MSxSVfzI/1zflJB0tHbo+WOpe4yHK6HrXx+4HWmQt+usNk2fDp9jWddNyp
YiB9tJ98IlMtX7rpSN818Oj5225y4s6Vxj19dGhWfSvMCm0jkgeF64YH+Pqd
55vIe1pLcvSCqnyH+e+PzFCNDhYQ8boHpa9H6TgS0qSWNVWCDy/kvjIm6Cj8
Mduls7ABThdiC2p/8fWwvPiwxPwOLN6q/vnkHz6fjq3i4zM9yJJ/Q2b9paP1
ZvV35YWDcOTqfQgTYMCW93zr4yUcLPiUnakxm4Ey98Jlip5cpN+jpeXOYeDR
48UO3kVcHDhc8HbXPAZCfRZffnGei315uZJK8xmogETcwa5h7JV77zm8kG+v
JP3ioPcAbM6nNWQvZkC1+xVFvqUb1tVvTAIkGDBm9SiNm7Rh57qXT3csZSDX
83aReVo1LG/FzVZYzoDRd/lN+5oItrAfFmfK85/LqPtzBKqIefQ9zWuKDCQ7
WT13vdJKNszcum25kgGLk1MPEjZ1E9ae6yNyqgx0sMfZgzIDhJHms6tfnYF7
nsm7uz8O82/ji5npmgxQTMPfpflxiamz5wrfNQyszC/rf8bjEmqx2yULHQaW
/8kzIk+5hLLqZNuK9QycdxO7EMbfr/SvOrF6DRhw+60acjltgOg1H3ieasSA
VQE7wmdeD9Gh7BW9asJAYtci4ajdbWRt6C7nrTQGfHckRwd8qSbaPIvy5Uy+
FqR0aKl+hGhsNdftZjOgtu/M7LaLWVB7wQp7t5GBFYKFTcS+Cipz8PvSZgZe
x8wssclpxUoHit3mbQxUT2ttO3W/G4ofdYm0JQMB3hHfPU4NQH65tlLnDgZ0
dwfYPVrGgewZtWvJ1gzMPT1lrJfChUyFUq/3HgaChJ4tZP/Hg7SW3OZNdgw0
q6avu/yNC8lA6SSp/QxMvEXarbMciHctWdLuwIAjXZXnOzaAxfQFp5MOMRCu
+sH7rUEPFkYK13odYeDCsePCOafbIPpbwGjDcf75B/cuJbXVmLfrz2MJZwZu
ze4d9VxLIPx2/N/PUwxI/Zx7Qsctm8xeyHVMdGdgaYDu7+W5VUTgWH/+uTMM
DEdPO+4QaCN/v3Sqsc8xcGlGX9a3s5tMK/y8ueQCA9SjNrfYXwfIb+/64eaL
DFi/uRu5zYtDJuoqLV9eYUDJZuiYUxeXjOl9Tz3ry7cX+fUqejuPjIQUSTP9
GTCJWe/S9JtLOIOfvMQCGVgiKjeoxe/ngxs/NjfeZOD99VUrd1EGSX9cBi0h
mAGh0y90Q070kF6Bd7Gn7/Dz159IpPLrtcsuUZh+n4HVvm+aCoarSatkdEn9
QwaeNekdFnd5jxbXiDXxjxlYn7emu061Go0loXfdnzDQffNxlqNZG+rUQsZN
YxjIilVc0ULpQY3fDZv5zxjwbnpRuktjEFWtfu9rnzPglVkiOdLOQQX1snzc
SwZGtn93pq/g4Xv4+auurxk46vlV+c01HkrGPDqpyQxs3bhEpFiDh6/bXTaI
pDBwfSt7ltYSLooSj76sTmPg7z0D0RrfQRTMO7gwJpOB3ZR3w4JxPfh8yN7V
5T0DQwORmQJZbZB/b0m0chho8r4+1GheA68lZouGchmg5/+tc7XNRfURI/vE
zwzMX3VWYMIoi6zN0U48UcDAwxkMRAVVkZuSyn9WFzMw7WwzuPZ3K+k+Lm3e
/43P35V9h50nuwk9b/7DF98ZyDuo+YT7b4A8lhboPVrBwJv2OZv6Gzlk0nlM
X43fO71M6+zurOURqy+913pqGKh8PcTuzOKR1zLNVfH1DMzk30mr8OWReW4V
yk5NDFwpX+9iEcIlBwvz3Vf9ZEBQ5Gpz/I8hkiOXndfZxsC3y2+Da2l9ROZ0
0uK4Tr5+tzYfnve4g5z5GrP/YA8DCVUFH/3oDaRc4UGSUj8DIrTu9EarIqLp
eXOmbZCBvc86pX58ikVA6eUt0RwGtCqVq7rnVKBd+XTEgREGnt8brf3Z1gIT
r6P9/43z8XAItpN434XwcjvKz0kGrs2xHpCWG8CoiuX1qCkGYqkGMk52HGy7
yK61n+HjHZKptGkVDy8qKSpyAkxEN+1vf9XBg9Bq7TNNgkzccfs5628rD/uv
KH2JmMPExHZVtTlyPGTXLJXYO48J+96lKgfAgZTWfEeZ+Uyohj9XCuT1w9X3
X3L9QiaOhR42dbvUhZL60X/hi5lwv2+pMkFrgera3m02EkzYic9TlzMsh49/
U6T0UiZ+bFnN2/zgAVqaygdrljGRcn6PYXfGV0LRzTcOW8GEltyrxd+eN5L7
gVk3dskz8SU5eV3ckU7C+fm6XlKRCYXllpQ6xX5irh+jVqXMhNOmC246X4bJ
s6Awz3sqTEjMX5c9fxGPCHTcKLBSZ+LSxyXzDgmOkL2Uy1LimkxIfVno6aU3
QtJvexyq0GaifPcf8ZpoHlnSfSQlZB0Tu7yCdTdv55KTVDvB7XpMzFxeU34l
YpAU3t1uKWbAxFKvA7KG+3uIUh/r6XcKE0rjRWvylNvIJVA4t6hM3Phytnm2
TRWpD9Uy3QomBM7s1I6QTid6g4q3FjCYUHuf+0xc/jNCGEubvrGYWJnGGWpj
1mEgXFTj5gYmQoQm9n2YbocZ5+95c3Mmrrw/ywle2Ido9miRyFYmHFu+TXqI
D2M6oke62IIJ9fkW3jv6udg90uh03YqJ3b9FfE9LjeDdxvK0DbuYuBBoEBpz
cQQLn3wRmmvD5O9XXXrL5EdwdDxzR4EtE0sCFD29p7j4vPl1zDV7Jo4z7Xde
NhmGfEw0j3WAr4fnAdlUkz6c/xVKEzrIxIn7hkVP1DtQte3G7c+HmdinM7ok
LqAON/+4azFOMBEedbY/4FI62Si0UuOHMxOXZ5d06WRUEuGF1WqOrkxs86bL
d99qJV+k/FVG3JlYLb/90s3n3cRH3mClzxkmZpsXFDcNDxCaaq+i+DkmOsS+
B3Qv45KZNQ//i/Fi4ueqa2WdsTySbWgup3ORibwtgxJRgSPkHP2PzKfLTHg/
7ZLdkTdC9M0Tl1n5MPGvTffLs40jZNTKfmm7HxPX85abvlPmkeS9iyTdA/h6
8TWYqckaJi6HyBLBG0z0BP9s8BTpJ5rOrmJ3g5goFKM8bHToJH1nFBcq3WZC
hJqo7MtpJIcCfOcx7jOhI+ux19jdE0ohesI/wvj1lBI7mPioFD/Du2Y7PmRi
Pmd827XMJjyODps1EsHX/+MjW8W+d8L25YZ/V6OYsFghvVb7cj+WpfyaXhLN
hGjlWG0KhYOa9y+momOZYL/TOb/rKA/3v9j+WhfPhINkVOnPkBFYls6fyEtg
YtZBajZz/igW1XwYtXzFhNu1Baqvf4ygpMWZ1/aaiQXHpsLre3m40SPPcUtm
wrNui9B8ay42cssGZ6UwEfN54K6X5SCEf1/pv5PGBGXUdYLe343Ps3R6FTP5
et693jk3oRVXRDu63mYzsff5d/OK4EqYStzvoH9k4vlFnapt61MxvYLdVkGY
+Gqh8/71rs8ka+VEi8Mnvj5WtkxuEKsjZ7WeN/G+MGF6q9tGr6Sd6OnbNFwt
5Osv4pa9QUcvGTEVqVvylYnWfQIQkRgmbzZkV0eXMLFc6Ph5PSkeObn9ROW6
Mr6/V/daVl0dIav3yFbkVTBxS2T31wSMkl6H0u+WVfz+dliD3xNGybPjl0ra
apjw8z92KSFyhDh6rPnqVs+Ex7/fQocZPKLg3Vo4q4mJLYo5T8SuD5MWvzv5
d1qYsBy46j77eB95fIvxWbGNiUpm8y9j2w5iGzaa+7aDCUOionBfqZ5IP4nL
oXczce2zoeYzo3xS9XzXh4pefn9iDNQEb3mLu8nC2Q4DTAQIXHJ2VarE9qyM
DN4QEwmGk3r3Ylqx6NPRtKtcJhSD+/6OyfSg5OvylCWjTCRnmDtofRxEYOXX
5Ohxfn52Xiu7X3Bh1nQhad0vvv+yLSbBe0Yg1KWZmDfFxJ4dk60O9qP4NNT8
wnKGCa8e79ver0ZxeSL4eds/JoyD3r+MoY2C+g/P3ARZYGQ7bDioMIKpubyY
WXNYCOdIqU/t5CJzcczTO3NZ+PCfYGFX8wDOLN8RpSjKwprqY5UKIt3QURJ6
/HYBC5UGdXJTn1vAXZ32kC7Ggtl73b9WW8shmNMwM0+cheit6wq4tjuIhKWA
Y7kk31/TXGNb73KysnNVwQNpFqpni+pIyrYSfc/Nq/fLsFDlEXpFc0sP2SDq
Fqwix0LHdY3Tdy4NEZvIsJGh/1g4FG8+LGHAI8fXfrBOU2Lh8O9XmuW8EXLh
c1u29yoWsip9XHmNoyTIeu5/LDW+vYm6Smf/KInq0/Sdr8GC1f5n+gFyo+SN
t1XPDy0WYqYLG028eSRX7NzmR2tZ8P/DPr923TD5ERP5xkGXBZGVNtmay3tJ
x/rPEur6LGjohcTJjLaSsaJeT64hPz+FDSP9Mj+IsN2ipgxjFqIWrnvn3/WA
LOPo0i6bspAjsSXtpOt3qPvsiTOjs1AqdN1/yOInjKQuz1vEYmFhxMuT+vN7
sCUh7mS1GQu7aF1rcz2GsM/4a/njTSyEhO7UX7yVh1PfOXqHtvDfl6xW2KE0
iisOUg81LFiwH8osHls5hrtjRjMjliy4jC8xsNg0hriAAw7ZO1mw8Qq8vv3W
KNJk/POv7mbhRvAvhwe/eCh4/Up9ky0/viMvT2405KCOVnFrsT0L63dE09jK
feirnODV7mehMMysNW6sDVNOstZPHFkoaF+32G2iEnK3jshrH2XBgfcoklb2
jWgr3PIZP873v1przXe7FkJLedf9wZmFBVpnUJ7fTSzN6sz9XFmgvPx55+3h
IeJYP5O02YMFA8mk5csdeeT0SWUJibMs2DZ1ZYVbjZJr/zZ6Npxjodc1YtTD
ZYyE3XVpjL7AQnwwCe9PGCMJq+7j2CUWrpzbfnDk7yjJzsyKXXuVhd3n5jD2
eY6Qb5t/zv3ly8ejbP3TcCUuaWoROkn8WdAzCqvr1u0nw26ry/0D+fpLzHdb
PdNOBOZs19sWxAInIegCtbWaLAk/Ey51m4UKJXf116tTiF5O7oG4+ywMHON4
CO9rhpll95cTD1hgq28xvnWhG7s756vrPuLrbU9b3MiOIf7cvO7W1GMW2oXl
3MbO8OAlupuX94QF0XfJ4Ud9RnEz0ntXYAwLTsVpqUaZY3i8NiZr+zMWMne0
uFwXGUfS50K5ZQl8fZbPoWxwHwOxHrr68yULJy7YV539NYLyPvHu+Nd8/V+9
3d35iot2b0Nzl2QW3FqSh+du5s9/YvuS1qewQP+oW5i1oBNCsb7iM2ksNPdx
e8PrarFU/8XZL5ks1H09qbpoeTZUi7833HzPgqPb0A0ZkwJiaDdmuiOHheDP
8ap1Vk3EnLM8ViaPhT02IjRBzW6Sozed9u4zn6+q9LrC74NEx6ulyLyAhTEN
V5nUNTwST3Ib24tYWDqz51nZjlEiMyd22Osbv/5vBfxNzRkjwebXZkl8Z4F5
v0nU0nGcCIYckXxVzoK4yqH3oobj5Gz1JlVmJQv6yw82CNPHSJ+MplFjNQv7
pRusFf1HiN2BRVs96lgQa3Fd9ViaS8qfcffPb2RBbW6+/sLl/YQ18MM9tpmF
LxOP0/Nnd5DMtWnXjFtZkPpV8pLtVEM0zz4Ir2zn9yva3LuVIRnk6fvzr050
sRD3veREC8mH5Cy7nNm9fD1USaSFsxpx3cy0IqKfBS+6eO/7XV2YvqnQqTvE
wraCzxlZGIRrheDkNw4LZQZYdG8RD51Lu0QOjbCACnrnSdtR2NgVyk6PsdDD
c9/cNziGkugXa+5PstCkGGRwNn0ctJ6bDM0pFux2174TfTOOVE2XXV+mWbj+
QeTRuZoxqLpvP2r3j6+Pf48K3PVG8ShD58LYLDZ+il2kb6jjYtGMZHCQEBsR
LY29T5IH4MOYfLpyLhuhkQmapjGdmAioT/kgwsYVraA7H+7U43jp+4KdC/jf
B9erCZE8tIhH1Q8u4vszK5c8fzCXWNlcGfRbwoZuvOGThzN1pCDS8Z+sJBuj
dNvySddOYtTBEk9byoYW9ZT0hZgBkqSmumrrcjZmU7rOf+nmEiUXEcOuFWzo
LKOkzt07SsJSBswvyrPx3/mZqwJLx4no71J7KUU2dlcNBYcKT5BLpsmur5XZ
0D/TkMtUniAjvnd92Sp8f/bOjEvHx8nh4tNhzWpsrHG+9CevfZTULdr94owG
G2oqr27vfcQjW3ZSPizUZuO76MLSz1uHSO7DFWXP1rJheEpDt2pjN9H7OdNm
ostG8+Ec8CqaSMLK1rHq9Wxci+2PiuguJLLHP811MeTH66rw5svTNIS8iZMR
NmbD5u27gOMPayA07q8VZcLG0QdilUYXO3DO6BhNn8aGhURspNtEPwYvb97x
ncFG7NP5h4YzuDiQr+XkxGbj82VGOHXXKCpFF5//u4GN3+rmZnco4zDbPnIz
zJyNvDzhNKbVBLJDq6K0t7JxYs3ri1vuT0C7Mf1tgQUb0f9es1KnxxGj8PDL
Pis2xrKfc1JDxrDU6ULtxE42vkwXDty0H8GNV/b9wbvZ4H3tVvjLGcZfLmZU
bNlYJH179brJHrjrKy0mdmwEzP2cwJBoRfcFIeXd+9loeVnkvQzfYZvXvZ7j
wIbSLGqH1rI4Qt/yau9/R9h4cKxfTcKrnYgHBdi+PMYGZ+94h+zSftL57eCe
9SfZaK2Lst/qyCVp82k2uS58/NI3tNxUHiX+m2V3b3ZjAwbrnQb1xonNzV+7
ajzYSHw9Kt3mM0HUv1XtdDjLRkLL/nudApNkSvTtjsFzbKj/0/rNezFBSsxv
WXleYGOenURCxpVxEnXjmKXgJTbYBubpPrdHyamv7O23rvD5lwj/2NHDJTRR
JYtlvmzk3+82VWANEHHzv1tjr7GR7ow00cwO0hnYsEX7Ohvah1i69W01JK04
fXPWDTaispU3fa5LIzabTm0qu82G2ZPdTk3uzVgduHmj7V02fJqW+Zn9/w8p
Raobuu6zEfRlqcmM8jBK5gmZuT7g5//fkOD6NSOI2tjK+vOQz7dFpEDEszG4
Xv/A9H/MxsHiG4v+2U+AXhTOWPKEDVqbb9fsjZMQn3eG/jiajZrl/0Q+2E6i
c4MlTTWODZL+X45A6ATSA7TwLp6NoTnWYldnxhBQKGJq8oKNi8v9N1+PGYHN
3G5q0Ss2kvy33f+jw8HqDZ+MdySxMefwn/ns6R788Y8yaklmQ0LzSPLWgp8o
KfCiHEth46rsNvdvRSU4ZaZrcDmTjX7Psx1zj1QTmr+Yvuh7NvoUdkxcYXQQ
8YIBvdCPbMx9HHWoUHmAdMwp0lXI5Z8/LvFpTJhHUtlxOq8+8fGccXug2Mrn
+9qVdfr5bFi6NM68FJwgu/Pt1uYVsmGaqpi633aSqM2hrNnylY1l/WTL3gY+
3ywp7doSNg7VqX2/enGSlPjxNB3L+HhmK3ukmE2QyC+lGkMVbBRw+3zSaWPE
Rejl6nNVbMQZve6svcgjNJa/+uxaNiZ+uHvc1B4k4n6OasH1bHycV/Z8h00n
6fhsqrq8iQ1j78qytT61xJ85uXJNGxsmDa9KpD4Ww8a3Ujm7gw27BUbORrkt
UP/8RondzcZfcjjBs7AHU4JBiuW9bBS+vOSssJuDEsZRhb0DbAhB2YzZyefb
h/Vf9xA/v9n2rs9PjePUJwV5Ny4b935NJX1ZPwma4Izs9AgbrvuNDbNX/YI4
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
v1Y=
       "]]},
     Annotation[#, "Charting`Private`Tag$4256#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->NCache[{{0, 
      Rational[1, 1000]}, {-2.9950751140218084`, 2.9999999997533546`}}, {{
     0, 0.001}, {-2.9950751140218084`, 2.9999999997533546`}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.878403279948251*^9, 3.8784032902263613`*^9}, 
   3.8784033684449053`*^9, {3.87840350498417*^9, 3.8784035133505955`*^9}, 
   3.8784064112179313`*^9, 3.878406545273121*^9, 3.8784069250226316`*^9, 
   3.8784080049062843`*^9},
 CellLabel->"Out[1]=",ExpressionUUID->"290c9de9-7cb5-4aa2-85ff-e99c4463dd10"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"2", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"0.5", "*", 
          RowBox[{"Cos", "[", 
           RowBox[{"2", "*", "Pi", "*", "1000", "*", "t"}], "]"}]}]}], ")"}], 
       "*", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", "*", "Pi", "*", 
         RowBox[{"(", "100000", ")"}], "*", "t"}], "]"}]}], ",", 
      RowBox[{"2", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"0.5", "*", 
          RowBox[{"Cos", "[", 
           RowBox[{"2", "*", "Pi", "*", "1000", "*", "t"}], "]"}]}]}], 
        ")"}]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", 
      FractionBox["1", "1000"]}], "}"}]}], "]"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Tm", "=", 
     RowBox[{"1", "/", "1000"}]}], ";", 
    RowBox[{"Tp", "=", 
     RowBox[{
      RowBox[{"1", "/", "100000"}], " ", "envoloppe", " ", 
      "sup\[EAcute]rieur"}]}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.8784080230094795`*^9, 3.8784080473449745`*^9}, {
  3.87840862065421*^9, 
  3.878408652767082*^9}},ExpressionUUID->"4ce9cde8-8bc3-4016-81f6-\
78b64be0890a"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
I4W2fxPDsMF1wevtR1nIvPU297z8PMjpGMz+KJaF+gghq4N3V+GMvZLr8HdZ
CMr/3rKrcgtC73EOkxtkoSCsMI3hLA2Wk7VuJ9shCwtUrqOtD4hY15++DqPh
Hf6Ltb+nZ4kY0/ovi8tzshDlHvdQ9w4R0xbLaQzflAWx8iGObyY0mKPhM5OM
XXJwST9G/PX7LXhyNeBnFYccCBWYt9C7rgL+xPHQuLAc9LLx0VlwzsNUkclX
Rnk5sCg7VHO9dRgEejS0FTXl4Am2kP6XqQGM6AXzj2FywBMiLFz3sAZ5KdKq
XDWWg8aWvqYc7yH06tTYu4dn5KBvdb3ZxXEO1fs0SGbZyUHwzau/LctW0ObL
z0l1rnIwfDPSMnn3FpL/nsQ/7b3zfMgzCWkaGvzs+J2YPSFycPKby+XbGBEP
Y7vGSnkkB7vdcvQtPxHx3L3mD07EywHOSLlIe46I95zXob/+eocP8ZheiSYN
zhwqEfT44068Ls/brG+20P4Mho2cYjm4GbH9bO/DVeRUP+vV+F0OiPqTIW3W
8+jpUuvsXL0clPJPLrfljKBpvbRh9WE5+MW9NWNqWwmClx/Zn56Tg5hXnveS
yINwNPJmp+emHMjvOqI/+2oWvD9Zn43ZJQ93SWaXqzaX4XX7oaZPHPIQ9aoi
6YrxJjTQKJg2C8vDomrYhMk7ArYlw/5rSU4eHhubdmfO02CKpquHeDTlwar2
xeF/XkTM0rPn615MHp5oNBKDlYjYneeV2meN5SFR+MU1BQEaLB/Pyvc5Iw9U
eLHE/mwLeodiVOLt5MFSODlvOH0VWJhvZxS5ysOpj2wRxOR5OKB+UarNWx7C
V27zHwsaBWdL4+S1YHloDJ6tmbH+C7EBagICj+Qhea8Xqe14GSp/wxd7IF4e
zkkw8S0n9KOZagKb9Wt5GG3c2C/RP4OE54Yf+H2UhyCH357V2svImPc3fWKx
PBzRFkp6G7GBfKgFQaXf5aHsXNj95BMEXEU5qlC0Xh7GLz7NqH9Kgw8Juex8
eHnQU1scaFMm4onM+hLDAzt6aR/r7+Mj4qc3hSyPTstDp/YJNVpzGpxxcvnR
h1V5OEu8xvqnaRuVdTRUsNIpAJ+nv21F9Tr6ryZz7QaLAviz0yfpFi0h1ZIw
SguvAsSTxu4l186gkcwLjvslFMDzZ4b+79ABlPxCOyFRSQEyL5Sa/SqsQhYP
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
Pis2xrKfc1JDxrDU6ULtxE42vkwXDty0H8GNV/b9wbvZ4H3tVvjLGcZfLmZU
bNlYJH179brJHrjrKy0mdmwEzP2cwJBoRfcFIeXd+9loeVnkvQzfYZvXvZ7j
wIbSLGqH1rI4Qt/yau9/R9h4cKxfTcKrnYgHBdi+PMYGZ+94h+zSftL57eCe
9SfZaK2Lst/qyCVp82k2uS58/NI3tNxUHiX+m2V3b3ZjAwbrnQb1xonNzV+7
ajzYSHw9Kt3mM0HUv1XtdDjLRkLL/nudApNkSvTtjsFzbKj/0/rNezFBSsxv
WXleYGOenURCxpVxEnXjmKXgJTbYBubpPrdHyamv7O23rvD5lwj/2NHDJTRR
JYtlvmzk3+82VWANEHHzv1tjr7GR7ow00cwO0hnYsEX7Ohvah1i69W01JK04
fXPWDTaispU3fa5LIzabTm0qu82G2ZPdTk3uzVgduHmj7V02fJqW+Zn9/w8p
Raobuu6zEfRlqcmM8jBK5gmZuT7g5//fkOD6NSOI2tjK+vOQz7dFpEDEszG4
Xv/A9H/MxsHiG4v+2U+AXhTOWPKEDVqbb9fsjZMQn3eG/jiajZrl/0Q+2E6i
c4MlTTWODZL+X45A6ATSA7TwLp6NoTnWYldnxhBQKGJq8oKNi8v9N1+PGYHN
3G5q0Ss2kvy33f+jw8HqDZ+MdySxMefwn/ns6R788Y8yaklmQ0LzSPLWgp8o
KfCiHEth46rsNvdvRSU4ZaZrcDmTjX7Psx1zj1QTmr+Yvuh7NvoUdkxcYXQQ
8YIBvdCPbMx9HHWoUHmAdMwp0lXI5Z8/LvFpTJhHUtlxOq8+8fGccXug2Mrn
+9qVdfr5bFi6NM68FJwgu/Pt1uYVsmGaqpi633aSqM2hrNnylY1l/WTL3gY+
3ywp7doSNg7VqX2/enGSlPjxNB3L+HhmK3ukmE2QyC+lGkMVbBRw+3zSaWPE
Rejl6nNVbMQZve6svcgjNJa/+uxaNiZ+uHvc1B4k4n6OasH1bHycV/Z8h00n
6fhsqrq8iQ1j78qytT61xJ85uXJNGxsmDa9KpD4Ww8a3Ujm7gw27BUbORrkt
UP/8RondzcZfcjjBs7AHU4JBiuW9bBS+vOSssJuDEsZRhb0DbAhB2YzZyefb
h/Vf9xA/v9n2rs9PjePUJwV5Ny4b935NJX1ZPwma4Izs9AgbrvuNDbNX/YI4
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
v1Y=
       "]]},
     Annotation[#, "Charting`Private`Tag$8232#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
2dCzmwWPMr42/8Fed3pzq5MnC/7//4X/AZ38/rQ=
       "]]},
     Annotation[#, "Charting`Private`Tag$8232#2"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->NCache[{{0, 
      Rational[1, 1000]}, {-2.9950751140218084`, 2.999999999999992}}, {{
     0, 0.001}, {-2.9950751140218084`, 2.999999999999992}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.878408048226319*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"1adaafae-5ab3-4289-a414-e8a9af985c0e"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"2", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"0.5", "*", 
          RowBox[{"Cos", "[", 
           RowBox[{"2", "*", "Pi", "*", "1000", "*", "t"}], "]"}]}]}], ")"}], 
       "*", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", "*", "Pi", "*", 
         RowBox[{"(", "100000", ")"}], "*", "t"}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"-", "2"}], 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"0.5", "*", 
          RowBox[{"Cos", "[", 
           RowBox[{"2", "*", "Pi", "*", "1000", "*", "t"}], "]"}]}]}], 
        ")"}]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", 
      FractionBox["1", "1000"]}], "}"}]}], "]"}], 
  RowBox[{"(*", 
   RowBox[{"envoloppe", " ", "inf\[EAcute]rieur"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.8784080636218004`*^9, 3.8784080795803413`*^9}, {
  3.878408662954411*^9, 
  3.8784086858143487`*^9}},ExpressionUUID->"b560a49f-d337-4d74-8c7e-\
b96d9e1efe63"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
I4W2fxPDsMF1wevtR1nIvPU297z8PMjpGMz+KJaF+gghq4N3V+GMvZLr8HdZ
CMr/3rKrcgtC73EOkxtkoSCsMI3hLA2Wk7VuJ9shCwtUrqOtD4hY15++DqPh
Hf6Ltb+nZ4kY0/ovi8tzshDlHvdQ9w4R0xbLaQzflAWx8iGObyY0mKPhM5OM
XXJwST9G/PX7LXhyNeBnFYccCBWYt9C7rgL+xPHQuLAc9LLx0VlwzsNUkclX
Rnk5sCg7VHO9dRgEejS0FTXl4Am2kP6XqQGM6AXzj2FywBMiLFz3sAZ5KdKq
XDWWg8aWvqYc7yH06tTYu4dn5KBvdb3ZxXEO1fs0SGbZyUHwzau/LctW0ObL
z0l1rnIwfDPSMnn3FpL/nsQ/7b3zfMgzCWkaGvzs+J2YPSFycPKby+XbGBEP
Y7vGSnkkB7vdcvQtPxHx3L3mD07EywHOSLlIe46I95zXob/+eocP8ZheiSYN
zhwqEfT44068Ls/brG+20P4Mho2cYjm4GbH9bO/DVeRUP+vV+F0OiPqTIW3W
8+jpUuvsXL0clPJPLrfljKBpvbRh9WE5+MW9NWNqWwmClx/Zn56Tg5hXnveS
yINwNPJmp+emHMjvOqI/+2oWvD9Zn43ZJQ93SWaXqzaX4XX7oaZPHPIQ9aoi
6YrxJjTQKJg2C8vDomrYhMk7ArYlw/5rSU4eHhubdmfO02CKpquHeDTlwar2
xeF/XkTM0rPn615MHp5oNBKDlYjYneeV2meN5SFR+MU1BQEaLB/Pyvc5Iw9U
eLHE/mwLeodiVOLt5MFSODlvOH0VWJhvZxS5ysOpj2wRxOR5OKB+UarNWx7C
V27zHwsaBWdL4+S1YHloDJ6tmbH+C7EBagICj+Qhea8Xqe14GSp/wxd7IF4e
zkkw8S0n9KOZagKb9Wt5GG3c2C/RP4OE54Yf+H2UhyCH357V2svImPc3fWKx
PBzRFkp6G7GBfKgFQaXf5aHsXNj95BMEXEU5qlC0Xh7GLz7NqH9Kgw8Juex8
eHnQU1scaFMm4onM+hLDAzt6aR/r7+Mj4qc3hSyPTstDp/YJNVpzGpxxcvnR
h1V5OEu8xvqnaRuVdTRUsNIpAJ+nv21F9Tr6ryZz7QaLAviz0yfpFi0h1ZIw
SguvAsSTxu4l186gkcwLjvslFMDzZ4b+79ABlPxCOyFRSQEyL5Sa/SqsQhYP
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
Pis2xrKfc1JDxrDU6ULtxE42vkwXDty0H8GNV/b9wbvZ4H3tVvjLGcZfLmZU
bNlYJH179brJHrjrKy0mdmwEzP2cwJBoRfcFIeXd+9loeVnkvQzfYZvXvZ7j
wIbSLGqH1rI4Qt/yau9/R9h4cKxfTcKrnYgHBdi+PMYGZ+94h+zSftL57eCe
9SfZaK2Lst/qyCVp82k2uS58/NI3tNxUHiX+m2V3b3ZjAwbrnQb1xonNzV+7
ajzYSHw9Kt3mM0HUv1XtdDjLRkLL/nudApNkSvTtjsFzbKj/0/rNezFBSsxv
WXleYGOenURCxpVxEnXjmKXgJTbYBubpPrdHyamv7O23rvD5lwj/2NHDJTRR
JYtlvmzk3+82VWANEHHzv1tjr7GR7ow00cwO0hnYsEX7Ohvah1i69W01JK04
fXPWDTaispU3fa5LIzabTm0qu82G2ZPdTk3uzVgduHmj7V02fJqW+Zn9/w8p
Raobuu6zEfRlqcmM8jBK5gmZuT7g5//fkOD6NSOI2tjK+vOQz7dFpEDEszG4
Xv/A9H/MxsHiG4v+2U+AXhTOWPKEDVqbb9fsjZMQn3eG/jiajZrl/0Q+2E6i
c4MlTTWODZL+X45A6ATSA7TwLp6NoTnWYldnxhBQKGJq8oKNi8v9N1+PGYHN
3G5q0Ss2kvy33f+jw8HqDZ+MdySxMefwn/ns6R788Y8yaklmQ0LzSPLWgp8o
KfCiHEth46rsNvdvRSU4ZaZrcDmTjX7Psx1zj1QTmr+Yvuh7NvoUdkxcYXQQ
8YIBvdCPbMx9HHWoUHmAdMwp0lXI5Z8/LvFpTJhHUtlxOq8+8fGccXug2Mrn
+9qVdfr5bFi6NM68FJwgu/Pt1uYVsmGaqpi633aSqM2hrNnylY1l/WTL3gY+
3ywp7doSNg7VqX2/enGSlPjxNB3L+HhmK3ukmE2QyC+lGkMVbBRw+3zSaWPE
Rejl6nNVbMQZve6svcgjNJa/+uxaNiZ+uHvc1B4k4n6OasH1bHycV/Z8h00n
6fhsqrq8iQ1j78qytT61xJ85uXJNGxsmDa9KpD4Ww8a3Ujm7gw27BUbORrkt
UP/8RondzcZfcjjBs7AHU4JBiuW9bBS+vOSssJuDEsZRhb0DbAhB2YzZyefb
h/Vf9xA/v9n2rs9PjePUJwV5Ny4b935NJX1ZPwma4Izs9AgbrvuNDbNX/YI4
o35FwDgbzsrUsX36v9B5NU1G/Bcbh7+N5T1ymkRa3p3lkVN8/Umy1M58HIf/
LJdlajNsDCcW5dZt4t8fdHPplH98/cg+O7hQiQv1qypLTQXNIDin378xvxdT
uYJSxUJmMFfs3krsWxFJey/+U8QM2zwDIbnpDfkkuuBc9AIzTMz38985WUt6
q+yaD4qZoWv+xlpV/y6y8Mlrhoq4GVxezzKK1xgmOsf+Pu+VNMOFgw2yMQUj
ZLeuxcJX0mawyKIua0gcJ94zT9ydZczwpCwy0T5hksQUcmvXyJnBp3n/lemY
X6TwDt1k5D8ziG3ZdezEnV9kcO/dmFQlM7ydUt5S4DFJxFU65nquMoNJnnFH
6K5xYsDVdaaomWHl8Jl2m638+z3b78ef1WaQ8Z30XD05SK76VRvkaJnheNeL
ygnxThK/TSXyyloz1EwJW794XEV47YVH5uiboer6xvP37auw9PWy0kJDM9zp
+F+F1h1P1f/G3esiszIjhCIjhSQpnpO4e4US0S6KiGgYZUVJRslIZMU3SiiS
yjl2pEiKlFl29t6/8/vzvHyc5/O813me1+suDAmt+Qv7rp7XC91LBqX0hPlS
kWE4ub84lmlChrM/IutIFycgWFh4WWw/GQ67zJQS701D9vejp74eIIN94Fhz
TfksNDx5Xv2ATMb35Ken0ufmYOb88rbDNLw+9uS/TwrzsFGffX8DE+9XQ6+V
pDsHyErSbCubDL8I21ywvTNw7uOoXeJBMvhd5t9fbIHPf/eRsuNWZJiM1L2x
T3MUcu2itqpYkyHRmcnxPNwL39W6w/7akME8xdltt8RPWBjTm8iwI8PTgu1S
SpfywPxW03utU2R4Xdfft8OtG73AUVUZOUOGdy9uFeV8G0IjZa+E5DqQoaMz
ik+VfwIt+FP1z/0CGdxMczDWiWm09YWMxa6LZPh35bME7dssunrV8c2sKxn6
jaL2NR6YR7eYvpUvdidDcZxGSmzKPEoXEQrw8STDp7IU/8m+OdT1h22fyTUy
DFsKl6kqzqLRydlMgjcZRBf7BUWsp9DiC0t55b5kcNSzXrDNHUM79FkywX5k
8EzOY5Wm9qOk1UQfaiAZ3vM2m1152oZq1Ix0CQWToSFj7c0dzqUo+wFQPt8m
g96PlPB5Wg142Ec+j7iL91/hInOrtBPit3attwgnw809VJqo3yCUjOtelYwi
w+aRrkM5Ufj89S7g948HuN708w3M1aZBMPjb/vgYMii4XRmj/piF7dwtmUfj
yfDdaJ1CW+A8WMp5iig+JkP92Jp+afkFuPa30q0ziQyF/mvXN8bOQ1KOdHNq
ChkqL45M8i3NQvk1h31n08mg5tXyX4zNNPSbFqVszcTxEPz4L61uHMREBQUG
n5Hh7q/1m4rx+WBns43z8+e4v357fqlT74IjKVlfXV6SYXyxV0fEoRZ8nRYN
dPPJIOS451y0WCmauov5ePI1rvctcf9UJtrQj6uPCYVvcHx71/yOXj+ADtcM
n7tWTAaHHdSfh9bi+xN50Uv4AxnQ4IHSj2lT6FLZmogklAw28yvCqldm0SCQ
TtMtI4PdBVrpdqd5VOT95jcVFWR4lrfT76vrAhptqPvJuhr3R3Te4dbrC+jG
ApOOwRoyEBKq0+xvz6OpusxJ3zoy7NsQs6YybRbVzLERWF9PhoMFqq+C2qbQ
fE2HjelfyfAb04z14oyjRpkeO3Y3kUHcNbBoYdcgWrY54EDtD7yfwaxwSn0n
SkuOsLb/SQb93tlQP7FPaIN8otPYLzIsS5xYr+f6Ho7EZ90MbCfD1eKM+sbg
X9ApVfRAuosMZAuflFbvPnC8X5n57A/unznnYqb2GIyJfXu3r5cMWNoVqct8
U3Dtbmd9fT8ZgpI1395SngWeNSN/Tg3heUlKdIk8PQ8hQYuz08NkKPGR//u0
YAHECIIid8bIUNuq7fNaaBFifKWV5Cfx89N1DgLHF0BxYbP+y2kyKLs9Enct
moOMK7pU0zkyzNsG7Firhs9rkyZ23xfIcG/OQKwJnYBCV+Ylx2UyZKZGHFVn
DIPJP5ugxVUyUGpjTOoW/0Clo0NcOJECjH2ivj8avwGzx+O5Mh8F+qwIPnkx
UWjTyQDstQAFnvxyXG3g/4HatUc0UYQokLG3K+WATA/61zaxv1WEAmcd76w/
6DiCOjdnLV1cS4FjlCtHG9iT6JRl0TqCOAVeGQ7HMV/PoD4NlVuiJSlQkJek
M4X7m5f1zXCrDAUi6X9fLv5dQENrOpnFshQILPylczZkERUnj5xgyVPAYXJV
PXHLIvqobNGjUxH/f4cImRJ0HlUBwTuXlSkQLn7h+LWzs2jWO+lE/i0UmCHo
rCZpTaF6hlvy4tUo8KehfJ+9zhha/Fq3cpsGBTaSgrX36PWh+3XhJ6pFgeCg
VKWHZq3oxxfMYYvtFDjunbT3jN9rlKtpS+jVwfvpsmPkIQ3QkuEgdX0nBUq3
9m53uNMNJzZ7aogYUIB2JPHUWuo/6H8SYPzEkAI7ZD5sfHlzAi7JRx7U24vj
u3Fz/7z2DMzFJZ6tNKbAwdZyz0jhebgplX39CEIBVhW1uGppAfjvF90bMqWA
s4P/qcyRRQgXq0q5YU4Bkx9Bb583L4L03W8F66kUmHTWZSoVLUCSQFdNOh2/
zyaHuwqP5kAtaKRtN4sCs6USyrujpuEFz9J4LYcCXdmxKmVvx0HfV5D/mAUF
qvnD6Qmug/B+Xlpu3IoChLbWl8lOnWB2Zcv2IGsKvI0aOFCxoRrqJnRNZWwp
YO+kEvfQtQK1coXDWXYUWP31sr44owP9NcS8YHycAuvJlPPshQG0cOLLX4FT
OJ5CHeWbp8bR+/Pc441nKPBM5e21XNUZ1IXn28/HDjjfit7aYafwPBc4ZOVw
gQLvS3c0kYIXUTWx5i+6Fykgzak3ir26hBKkbGhLrhRQIFvWCGxbQn9v/FVe
5U6BhYKi531PF9AiFXuTKE+cX9J3mt80nv8aHUVHr1Gg+ZBcoKrhFOqqc3Kn
mjcF7riuSv7THkXpu/+8GPPF9XrL/PX20L+omslZ9Xd+FCj2mR8mznxFieZ9
qbcCKTCuMqC9Zf4NtDHOK3CDKeBWp3c950MbFFkMxcrdocDlQtnZwE2DEG1z
UbznLgVSKsLfPFbG+T4xGvYynAIXWpiZks4zwHBwE/CKooCtb9+bxpJ5UHOZ
9DeLpoAe1/ySztQiED09l8RiKfDi5/vj3RNL0O49e+VnPAWwt8xE2ZdL8Dbg
+njaYwp87z/vuFZrEaLvLDq5PKGAsHGp79SVObgU6dtrmEoBwwcaN81yp4AZ
u3qC9ykFbFzzHgXxjMHWJP9fnzMp0CkSZjRj0APt2bcaTr2gwKJBmF5AYgFa
nC/A0M7F+w3fI3kwug19+PZO5Ww+BXTk/baFmw6ilzBhpKyAAj9OFs7sZ0+g
zOp7xWFFOF8eeRmjeTOo+pe1u6zfUeBp8pJwp9wCyvs96qVyCQUshPaMe5xa
Qtt/SWj+w3B8VjRNY12W0eLuh+mF5biesH+uXXrLaMyAzCb/KtwvKw+zdPMW
Ubex+HhGDQVufC4xTJyfQ5mzGyWl6yhwpeqvYqXGNKq+khje+YUCqrc36z9w
GkNJfEqC2V8pcDXcsry1twftEE4N9GyiQLdyr8Wn2W9osfiWFWjG8aMOmpho
voIY2YxrQq0UmJe6/Pf+2TZwV1KfbPqN11dUkKCeHgTW1qyLTzoosPZLuP7i
9QlQ376t/3w3BWKvlZ3eMjsDpF05p/R7KNCQz4x8cGUBOvfqtK30UUDT0Sfp
ZcMSvDPNt64ZpEB5tO6d+4PLEEPTb3wwTIGfxNbP+94sgzu3kHlsDO9fMOfk
dsMlYFsbVqtP4nws6mof850HjWPF+yenKVDVcWl9ZPo0kM7ue/9hDs+P59lB
61rGoNOpxOD2IgVcxvy2Vsf3wnt3JM9ihQJt9OOL/wjfIfZ6mZYCgQqFCZGp
G57kou5+Zhl9vFRo/imPUHTbUHZIlVI+PxWSfKuH7vkPoprh1AQfQSoc//A2
OTd9AuV/WCtFEaGCm4PN5pi9s2h3AjNy/Voq1Hqwf9V9XUA/pH4R+r2eCkgw
p/KDyTK6cFRU/6okFXZJRpJ87VdQQymmvbgMFRy3evbAoRX0ypfQ4BeyVFhT
LebxXnUZfR1S85IqT4UKo9vEPz8X0Alkzc8/ilRYlXpw+3rILKqzQCbeVMbf
n6JkycK/Hy6vbmnJbaGCZU8zgy/nH/rcucKqQI0KApslj21M60IHVXlvcDWo
8N+b8qmNCdWoesf+zCEtKjidyjews/oI5+L8GoK3UyGSj3Rw7lcXpB9E55V1
qTCVPFyosPgPuoVWVD7spMJ0xHTpTMAkKFXsYx4xoIK//3yX8OdZOObr7Tlp
SIWj6uU2z3UX4bFBcVL4XiqIua1o2UYsQ+voXLWGCRXaCH/Kb31ZgQ3Pdo9X
IFTYc8/K41r3Chw+dUXuxAEqFLtbf/9eswzRGwsOLJpTYcc6qfac8EVobJp0
jqFSQbMp7qMqeQ7WhevF6DKo4F1ayp+xdgrYFDe0jkWFGyIjR1y3jkAYT26/
A5cK+gENEpOkP1D7dmQ9ryUVrEumO4LC62DNZe29SYeowFO/bCqqWoGStzmf
2XOECs/d3P7ZCXehQT1Z95psqWCauZs//+I/tCxpoNDVngozxpsPRJ6YRHmO
qHcKnaCCDiH0CKthFjVZ7yCYcYoK8p9LBAJsF1Gf2qd6+89SYa/bFZrZb9zP
gX+P/naggjPfl4cZ+1bRuX2bb129QAW1DmLGy4urqMHMyRzxi/gzr9vafucV
1ONlcvMLVyq8fb9t07UDS2i+YwcPzZ0KfXJvHzXxzaNjyoqafz1wPKsHDi83
TqHbf9lZ3ryK8/tJK/JZxijqHJ3gI+dFhRXdWaPdLn/RLFbr0wIfXH87wxa8
GxvQfn7Zeu5NKjhknLDjJqKghlnPDflTIfx+x/QhnU44cz1GOSSICj+mborH
fR+CVL3vdJUQKsjoOHP+Gk5C55CEx4c7VJhkmPne+zILik8tEo+EUSGjIOVu
7Y1FsDsWVTUZTgVlx0+a+1VX4JFMw2h4FBVs8g8sPclchZYGMVnNaCp8OvHg
S9rMKkiHskwrY6hwc4PUuzyxVbA6EOZ0Ip4Kf3SfSPDMLcH9pdroxQQc/9OD
R5hV89BQIFgSk4TjkSf4VSluGsRcqX26KVQY/ZX/OPfhGDDVQ9Z9TqPCJUX/
k1ntPRDaVbnHMYMKkg9yOkZcvsHHR6TTvM+oMNCcUY6lFqL8eMGkbCqEPaoN
ffGwHTUTDSjYk4PzfzpUNUtvCA2owtqbcqmA2m4zaBKeRLGbqwKXXlFB6zT2
L7V6Fl0xNNEVLsT9IHbsiGXSIrpvwsc2o4gKyabbF6QvrKAtTwtc9d9RYff8
LfVJEg922WYkqOwDFbzUbaftgAcTE936iIvheUKy4r4vX0WzsOMv28uo8Gir
21OdjmWU7BFX4VxJhS4DkqNx9wLatfXrz4VqKiyc7NY92I/Pi78ER2/XUuGV
keGsmvQEuiHClCTzGc8HOb+IHp0B9LWpt+zTery+koGJ6J1WlDPzavvORiqc
bZZKqqp5hA4++3egtAnHa2bXkzOMZgi2V7XhNFMh9ekFkbziPlBZf8yl7ScV
Ii5HSxR5j0NJRUyg028qbEAt4nSvz4Dttfq4+XYqPKO7mFZnLMC01pqckC4q
+L6W3LLyexkiO5Byqb9UOLLG2MhyeRW2PbjektZLhTdOdxNyrvMgH8n5w7oD
VGjwZ6p/tOVBziwMErEhKhhfWPzw2HwVeHI2b2CPUIFe/AzO5C5Bwkk77d9j
eP8uP7uCRefBQOqh6YVJKrhrx66E3piCxo+freemcb21LZ7nHh0BFx/+i8Fz
VAja7TvkF9cNgjoQILlIhfVvrlOzbn+E9D9XY1OXqcCW1XDIZdWiSGzucx0e
Gnz8Krfouf4P+ps+UFpCpMEf/6i/090j6NUV5WYmHw0KNIVkA+umUPF823+t
AjTgzMjkeTjMozlnHxDOC9HgPSmrsl16GaXL1knPitDgQ53EaPObVbSnjrTt
1loayFa1+6XH8WB+fsb7JcRpcGzlwW6XYh5MXv/K4RRJGrh3Et9U4Poo6stx
2iFDAz95enqBzQpqmdDn90GWBqmp/b1D0ovoCFsphiFPA93KhVDN7zNoKNEm
+6ci/vfH92Lq342jaoVRmIMyDVRnrNxspvrQ0vO136c30+BN8Pe3iEwzaqfA
OxSoRoOlTTyE3OF0mGvYyyOuQQPWfgmQIP+G6CAPqWQtGjD3GMx0XBsEHcMX
mtu30yD0wVK63cgE1A31wHsdGixGL4zUjM+CwxPFQ/SdNKhfM7rppswSEC2t
L7TsosGr0BVHquEqJPFH3jxnSAPNsIkC/QQexKj4Y/SUEQ1c5S8MHl3lQX5c
JGQFGNNA2vBk5bMKHsRd2Qhdh9DAxJVyb/rnKoh+d29KMqXBPd4XFxtXl+C/
29kD28xpUGs1ZL5eah7M9v1dKabQwKDp18ov4ynoHJWXpNFp0H7q0pQKexi8
0w5pNDNp8GLtUUuGYBfkC1VbTh6kQZjy2V03h7+i7JJVR38rGgjFfzUURXvQ
ATfDG2utcTy/TWY0d46hQapuDxJtaHBhUt9rhjyDKv189p+WHQ2mdO25sh0L
6DoZ6y3jx2iwsqT2ohpdQVetSMmFJ2nwvG7HZtJ/PNjI/byNPmdocLvqwKjf
HgLW3nAsdr8DDT7994qDiRKwz2IiEgIXaFCtnBJAUePB3jPfhtc506BOKfOg
newy+jz0nNB9VxpEaW6iuqXPoQkfJYKt3fH+V7kJexUn0VD+UoKCJw1IwgHX
V28NoF5mLr7dV2kQ4f8zXOFkM3o+YON8phcNvu4N5b98sgCOYB89LvrSYJNs
iKvbRCdQVzzH9PxoECl+S3TTrRHYvW+z81wADRLWlKiZOUyDmldD34dbNFhv
b1DokrYA0kW+pwNv0yBdtdOf78MK8M9odlDv0nBc2w10ynmQ6Z0ttmLhNDjH
U/ef3CUC8tft1o9vkTR4RHgR421PQJpe6lnEP6DBlRSaY8VdHqR8uOPzsRga
2CnETxkJrEC+1j3alnga0J0qQqSy5yH1vFHlQAIN3qkfzbmsNwVRmX3IyySc
v4g1A8T8IfDriX7vkYLriZW8piLyF1zabGpolE4DDTGSq/FoLHr85Oir1Qwa
fE9asJm6246ynzzeUfmMBpcuR/sztIZRkzZaduhz/H2W8mcVh6ZQ7Y2zatyX
NNizWDLtZL+Aytukp0rl08DZbo+cQe4KKhJ7UPHXaxo4LT7szvvJgy01rcQn
v8H18CZJMT6VgA2JP5c6V4zzj64+b35GwFq5NlFaH2iQ6Ybol4/wYLXh/KLj
KA1eDljHSk+soG/rXt0uLKPButKpxK+5C+h/QidJPpU0MFcm7BmgTKNxVDG/
/R9psP2S+sVXf4fRkOB3i/yfaOBj0GCZ8L0DvVLheLXuM54H0QkLta/T0HNE
6cmoBhr8fBNorrD+FxxCyl2sv+H+TuuoOVIyBGY3Lg3K/6CBxOtb2u/OTIH+
e4Vz3S006DHZQxwWWYDNC7Vdmb9owM9VwBTiV0Dc8Jr9xXYaFFv9KTgxxIMQ
r6j+1OvC6+2VWa5tICATrxqt5v7geA43uDyeICBd4zcbPvTSYMfnXxwBDgFp
2KHNDBygwZnwRwfccT9jF1urqf/wvCj8IK5ZsAgvs0MOiI3SIJ7i77X12Awk
Deij38ZpcFLU2OmJ2BiEb+02ip/C9VHgVLlJpht8z0YUHpulAV8Sv3WrfDE4
p+3T27KA+7OvIFTaE8+3roEXA0t4vo5a57uZDKKMTbEaL1dpIHxdUkW6aRI1
sjd76kGkw1xKT+e3vHlUM2FcyYiPDl/CD2wIvrqCyv5MerwqQIdBTN1Teo4H
WyPD3FApRAe2+3i03wIBm7OafxAqSoe670eL7+8mYnTz0yVK6+hgegmJ+viO
gD3e9bm/UBw/v/3JjuqHuP9Vd0uwpOjAkqypik5eRhHpFOM/MnR4tsF5j8zc
HHqfX9jxuhwdDCeVFanHJtG/Mx731yrQQX5D8qZ/6wbRkGZq314VOiSGu5XJ
STyHlur89Y1b6NBT0PN4w7sO0CyS3+e4lQ5SrruvJDsMg89/wedWNOhwiCWo
lTcyBV/ixiKjt9Fhd92vaY/TC6B0x/ad5g46CEZpXvVqWwH36xU9mC7ev86b
2282EJCK89vXWevToSxZdPraJiIibRtnNGxAh8n0K65914iII514NnAPHaxt
45NOKRORYiPnCNl9dBCY7GYObCQgIlo/3r40ocMLfmrNyp8VsN+I/DXfj/eX
8fZN1rkFyBHOEvt9gA7JTGaE4+AU8CxJ7HEn0+Fo91m1BvIwpP/uu5fEoINz
059/e0yfwkzdwSJ9Nh2id5U4hQu1otQP77pruXT4blG/8F/fIProharoSUs6
HHzkqtjaO4n+S4zYPXsI52OqLvF54jxqEj5/8t4ROpj1Y492n1xBI2+cDtt8
lA5PDHWjCgkErNvlc+Fbezqs/bfJw1+HiO08vruLc4IOnUYZPmfyiFgQJ0W4
9xQdsvzqPMg3idgPEDbwOUuHi7WrZ7EEAqau43lC3JEOP3MOTa5by4N5KXWE
/neBDtnmLX+e1C+idetoBSYX6XAg3pav1mMGVSS86mhyxfHST/AMQ8bQS+Py
Qk7udNgsfFV4w+9utKwrWJ/gSYeXH7Rz70+WopKNY8dir9KhXIp1nKjWBOfK
bO9oe9FB9nXPoXXUfijKr3hV7kOHoVPrK2brJkAwbXu7zU06RDbmiNIq5sD2
QdyaMX86UPbfCAxsWIbngcSdwUF0fM4OE7zcyYOsXHa2lw+hw6NDHJ4nu4kI
98yPkPw7dFDRuv30eScRSbVC8qlhdKiJSTPj/U5EpsyyfreH06FEy8+kTpKI
kHdJCnhG0SGF1q84lcGDxKne0BWOpkMeF339XXcZBqX6j6bE0EHPrm+JvjQL
+/gtgnfH04EqLjj6qX0cwmfe5X5OoEOER8uYydZe6OhV/XU6iQ4Z0+JvlNu+
gE5zBN9CMq6PD37VzUp1aED1/I7INDrsN9dBZ+70oE1vTtuqZdBBf62ypEMK
Pv/89zno/X84X/JycZeaZ9FrcbtfWmTT4Ufy9xNMrWW09nbKz/4XdPgoVWn6
8TU+f10XJt3MpYO24S/P+/pEzOW853apV3RQLs1OcuTnxST/WqLdBXT8e/bC
fKs8L/b2mB43t4gOG3gD7/TZErFjP9d1+b6jw55tcwn1tTwYyWrUjVFCh/yI
rbf3LyyhWV8+E2VL8fsp9X0bl55FubTnD3rL6ZCpX+3qpD2GzpSHbnldRYdq
n+RSaekuNMHkfIF/De6/owXHv7xIRpG3FDKnDs+jS0+e7lVth96das3y9bgf
1hz4IXgP339zSI6DX+mQGsS4umQ7A3oaf+beNOH312sQq7qyBC1ppXduNdPB
r6Va+0QWD+KrmCxn2UqHeW0eyrdjREQl/ka2Uht+vvz0wn5zXuSjhP2+kQ46
2NYsexta8iIu4Xs/v+umQ8ICb31ZCBGRFJQ7dqeHDqu7ozje+PegOHBu5HA/
He46n7lwVGkZjq/8uLlliA7uvFmTW5RmgXS9YN3EMJ5fbiPIYdkxyJp8kIKO
0UGERt+iU9AJM/3cctsZOrwdLC06mN2BPj69w0p9ng6Fe/zmtnqOovvbRXum
F+kwRefnuPyeQXuP/PMsX6FDU8BJr7bVJTTsWy1/FIEBh8JuXSoY5cH02M9i
j5EYYOzM87QzhYi1fAxR3ybAgOZIu6h1gbzYjQPn3s4LMuCVsOdt0Tu82OYS
M3q1CAOc9w6HmrwiYh8NN/+KXsuAZ096yl4JETCXVwTnU+IMuI2JPrh9YBmV
3N65tEOKAQXPNN4Fq82ixf+V3FuWYcCimH98NnEMPbE5UfGTHANIO4u2NXI6
Ub4k75dxCgxI9xbaV/HUDbI22CLnlBigw43g6CV0AveB4dedmxlgIRSF0XeM
wYyozCmCGgP0YgLM+u1n4fHt6Ykv6ng/Zoq+dreXwZS3KfCxFgMOWgzZuekT
kD7ffMkL2xnwcaeZqthfIhI2F/l0ty4D6l0UwstQXkTvsqsBnz4DDpC+fnr4
gRdpGWZVNxowABM9vJ7ZRkRuOG47kryHAS7psn+d1QnIlj9CAxf3MYCmb7bl
zellqLEfuL4XGNCtZWEnojkLLi3VQoKmDIjr6XVsaBwFScuMhB9mDLjx7LGF
cF0HFH8O2pZOYcAais3u6clY9AT19Ac3OgM63eciJU93ofzl+9nAwvHTkLWK
TB9Ds42VOkS4OP4RA17MDtwfRSuurRYMcLPZHKu8bgWd0Wvj+e8QA0bOTisF
XMO/ry/eRXkeYYC7jMZLmiovZqr+SOXAUQb4H6k8Tl7kxfpTr71ad4wB3Oci
fKVjvNg9BWuz9hMMaL1D1Gzj48X04nZ9zz7NgBcZ+1UTzAhYi7jkuevnGCDx
4r3dD79l9FfIv+495xngeM5//zf6LNq+VHF8wQnn03RZcUpqDO12S/xd7MKA
Y7w56LoTnWhPr6eNtxsDcvN4BdWD3KD/KPvHXg8GXDJotQrN6oR/DWqWS1fw
+nn3A2L2j8Go+Wr9++sMmBz0iHT0m4WJ4mamrw8D2v3Oy/SVLcP0jtwa45sM
uLJ98vr5UwRkLv02ecUf1yM9R7ZgKy+yJHuyvCSIAbPnLrt0KJCQ1fA9yM0Q
BhwWuOqka0RCiCTxDxDKALFCP3Mtb16E//rgHp57DNhVJjQV209ABEfKCrEI
BmwQ/fD9qtoqiJxO2Ol/nwHH5TQLzNTnYW3L5dz9DxlQ+ca8UUlmAsRZTG1i
HANiXBUeZ9z4C9JlW7LKHjHgLU+oQJgtCrK7l9UCExng8OlFc3DuT1T++fe0
A8kMOEkasreSHkaVlHOUSGkMuOde7HVg7Qy6OSY4seIpA767aj7Mz1hC1YSP
y936jwFfz4m8/0YiYBp+u2PNs3H9SvqXP10hYtum10ry5zBgUPHZZhUtEqZz
oT+yKpcB95M2+lB8SdjODkw05BUDfjl5W3HHeTEDq/hQSiEDMjskt3WEETGj
GjeBNW8ZsPFy3b2KYzyYsQk96OM7BhAG5KbKlhZQ5JUK4U4JA5zE1p+1kZpC
D6gv+tJKcb0THJMfpvWj5MRvC4IVDGiynbomtKEBpYs/v1pbxYBVi7a06oav
wAoJmgqtYcCnwsyIDv8B4C7ZuTHqGHDK49sRleApsHLbNSJcz4C1+6+IH3Jd
BOteUae6r7i/hosr0+N4ENujvX1hTQyo9vh58mEVEbFvKDnDamZA0b0Dzoka
JOSEeWyXaCsDbppfnHLJJyFnil2PffnNAFu6WM+0LQlx2EH9Fd7BAKJIAE+i
Gi9yIV3pCKcbf1Z5PK6lQkBcZOeb1vYw4J8W7cbNqiVwC/96sKGPAZsqdG5U
ic2AB2/Wl8hBBtSMNvWbffoHV68FMA4OM4CvubDD+WoLeA3bflw/xoCGUeeI
xKvl6I1TO80bJxgQkuNaQvvYg/o3C5fdn2bAXzX68lTPBBrE/GtiOYfj1f3V
95zCAnq79P07iUUGvHQ2PDGvwIPdNXho2LTMgPIfx1iX8HkqPPtiQTQPE3Ll
T0+LypKwKCWy3iFeJuhcmX20+ycJi36o+FKKnwmiJ7tuBL4hYbFCs1o/1jCB
97WshEwBL/boZv1/McJMMDvfGZf4m4AlTmWqWosxIe/Awu+cwBU0+bxfqsx6
JvheR8/cI8yh6e1HNrVIMCHhXLgK6foYmmmp+zhOmgmvzfkfDVzpREW8q6o1
ZJnwnjFsaeB+F3VPPTpZvJEJjK+35bSpHdBSM6bIVGSCkvG5jctqo2Ayfove
psQE72vHfNUqZiB9w8YrLpuZkG3dvji9aRkEkdyUVVUm/IoJGLfYhfPhYP45
Up0JnZ+bjeYMeZGm8NY5ZS0myAzr3XwTQkKMCl23vNJmgkBV8givFB+S3Ebi
mukwwX2xPc/1Fwnh53vk/V2PCYZKdXu7fvMiTtt2ZJ7bhfcjfuNyoAoRabCs
aJzdjd9vg4Vb97VVMPC2WbltxATyb2K8ScA8PE4d0ZAzZoLcmrtakvETQKwN
PJQNTOBP/4W9W+oBx/EN/vtMmbA5OSIm63M1fNmQ8/yzGRMW+TQ69z1tQvWR
Ay3HKEyg52zurN07iMY7tPCO0ZigrqCN/YmbQlfCL+7wZzLhaO1h/xDLRfRM
IfGoOIcJ2wt/6wqG4PtvW2xw2kEm/L5vpC5RQ8R0+LTz9a2Y4OTIKThjS8Ji
tpW1VR5mwpBBe/CqFh+2aGktaG3DhETVZ/TJXXzYCe9/+v1HmfBSJSwh6yoJ
q0r1P3H9GBOmZsbCJ2bxvKiVDhM6yYTIBv7b7yt4sPvj2W8STjMhM1F3/Z6e
RXRuw/4/284x4eLEVqf1htOoPfJDrMSRCUuOtceC/IfQMgcnI44TE9Ykz4Sa
Szej6hE85zovMuHeNyVFK/dyCC98GOV2iQlX1wwOtsv1wFSb5gfiZSZcqs7t
1WBMgC0f1v/Akwkrg2cR2rF5QLcdklS9xgRNce/hb4GrsMVqEAq9mFBV1/QW
Q4hIqPdNJ4ovE85mDEaNS5CQsVTJ2JabTBiN2OUhocmHHK59VnY+AOfT0L84
7xof8n7cZGQhCNdjtcq73CUSoizbJBsWwoQ2jUDZi8W8SDBy3lwhlAlGq/PR
0R8IyD+HlUs5YUwIEAm+cFl3BSwiHjyGCCZcliIHMGtmoahQ/WNDFBOOp3k8
67kxBortHyZPRjOh5M3EhVztLgjis9w0GcMEauShZlJ/DAxu66cHxTPhvseP
wZDoDpRj5XtF6jETQr5tXS/4bhR97S2empHEBMW3nrK7TGdRubTMz7tTmKAQ
Vs+HfF5G/Wr3zX9MY4Kwn5meZTIB6x3/usU2gwn5d1pRq9e8GFPWgTv0HxOy
HNqEfonxYXnIkrdPNhPm9p6MHUnlw6QdozJFc5hgZ7F2f+8FPswnQu1bUi4T
rOJPRSY5krDuwncrO14xYXlYRfrCUyJGbedqlhYwoWUhjv1OlwfL4es9ZFGE
80Pfw5GmLaAS2t7+f4qZuC+MAnl3TaJ17UESzz/g/nN+ail7tQcNjgx/6oEx
Ybgi9L363fcoYhq327gc17vi0u/7hDaYn0yp4avC+ZGLMSPOjkL+0+yjXz4y
wVNgbWSuwBw4WxcMx3xigrSIJtlbeBXUBNGbx78w4St7nc1pOyLSUfxxvfpX
JmhohN5TcCQhcc6NaWPfmBCX9HgP730+xELx9663P5jwt/fl+5E6PkSkoafa
/ycTjG+K2olL8yGV/qM29N9MGDHkbJHz5EVu7JwfEu9gwlrT2Yc/F3kQwx7i
jV9dTNh5yWHT+ruLMBEjsi79LxOKrXc/2jE0CdlU6VTnPiZIZK2ey2zphTML
m/R3DTKh9IvPPqkz5aD4XKNq+R+eFy45mnvLWtEW+51HqkbxfCwqtHkkPIpG
rTUeDJ/A9XZ/i/vWvFmUXkr2sZ5mwoe+vpb65hWUdJkrpjTHhL3Pfv4nfYiI
lWyxTe5fwPksLaz97zIJu/rjtF7eMo7vyEhu70s+TOf2xYrrPCw4f/ZfRtci
Hza45+phU14WJGSY8ay34sPSh/z6hfhZcJv+aMEb5cXsE0O9vq1hAfvK0asu
HAImzYkWeSzMAgEy/exV4yW0gScp6YwYCxZkQGF7yhQamp+po72eBTp/cyJN
9vWjB87klU1LsMBiQvL69IOP6JLUO6sSaRZM/mhvmfRsgcLqit5gWRaUfjpR
0SkzApeuf7nGkWeBMm/El4JDs6Ch1SK0YRML+MazXuclrUD3767HncosePzw
8f4BOhF5HD60/dkWFngqWDgxfEjIYWQac9vKAo3qNb7ztXzI2okVCyNNFpCx
G/lG6vzIx7Q1PURtFigkpW2qieBDAg6JX/20gwW60m+zedeQkH0C8oLReiwo
231l5VkKAZkuUk2w28UCr3V7nOgjS5BzYYe2qiEL+uzd3WoPT4Oj/B502IgF
+6YuPfNJGYBfN5l/biAsyFq4089U+IFG6x72pBxggfnH2DvC8sMo+89xgXVk
FuRMWwc5T8+gax6ej2+hssDgYGab2okVtJR8WSuFwQJKoXNsizER85rz+XCe
zYIGXlO3ZX8Spp8VzNE7yAItSknQ9j982MjRyK4FSxYYln3b03+QH8sUfXS5
/DALRnYdpqrW4HmOpvGF2bDAzVnkTxybhMm5vYi1smNBpW7BktsEAWtSeaOh
cJwFFUelba0Sl9F7Tdi7npMs+NqSFVEvPIOSg2tZOWdYEL1hsWJZYAjlMWzq
uOLAApq1yhntqK/o5YQ+3jUXWeDfN5diteEfhK++MEtxxfUQdBVj8s9A1mmP
W0bu+P0u1M/LaC9DVbVR1TcPFmjut+2ISyQg3VoEgYtXWf//fRLSu8CLrERU
U/i9WDD46AXiFsuHyE3du/3EhwXEm42/vE7zIwZHrGoMb+J6tfhVrWzNj1i8
lxNq9GdBjPAjq1x3PsRFqYvuFMSC3oTDBxNKeJHQoMy7pBC8XsbpMV0GAcno
v1iXeIcFDxFb4D2xBGVMfdHdYSwYrUVt+6SmoT13gdUQzgL1Wxpdr5cGYEGy
NPx8FAtCGHsluhO/gl4ba93jGBbkRj0ZNhoeQNn7JQ/uimfBzgPCsd+kptEL
T1ujviTg+o/6vvjuwhIaLJjS6JCE47/P01bZmoClXnSQIKTg/DSNC3/+youV
fNW2epTGgtMlVUFm9/iw1l1T0TszWOANqbzJ1/ixmfji73X/sYCXMx/+NZQf
E1/xkz6XzYJb1jsUVsr4sO2nKNarL3A/GeZ5h6iTMHqVaFxcLu43bd9bVbUE
7JxmU4vuKxZcQpSuj+H7V0D4I9lPBTifq69vV7Fm0KSJE7ZnilhgHNxYORvw
Dy0+vDVhuZgFMKLDXcr4gU4ovpbXwVgQQO95/+xVH4gFetnXlOH4tI18o8pP
gWYfknSqEu/3QyWpPnERyAyBjsVqFizb+GxoEiIgp15+3vSwlgV7A2lxt1Px
/JSIPrH9Mws2ZQoSG334kEdXbVOq61mQl+PdlhzCjxT+Uuo+0cgCu9Ex+tsi
fqQR+lQWmvD+7TN9ZcT4kZG0F6cfNOP3zyRVksJJiNAaj/RtrSwINTSm/yYT
ETVno57K3yxQM3Y6yZu4AqYNPGrHO1iw5gHnqkLgLBzTrz4318WCJeHXXqtr
RsEr7l5m1F8WnOidfsl9+wvyT8hpVAywoJ1aP3vduQf9UtF53v4fC86o+JD5
5CbRQfXMrJkRFvyTdh25X7WA8t+7OBQxjufHE2tuZREPpjK+c5vGFI4nwyt9
00VezOTQgnPZDO532up78XN8mO1b7MXReRyftWlTjpH82BWFkJGpRRYYZW2o
f9PJj933Z+0IX2GBSqhEXb0lP5bTI3FpK4EN78645vweIWG1tNZcjJcNpxjC
4/ooEet9kTxuw8+G8B0OJ1+/WkWJ4g56k2vYoCOu/ORYwRyqeEX7cpgwG2QT
FOuaq8ZQo9bJV6pibBj5Hutqd74TdUv123VEgg3NClHm4Rv+wCDP/lN/pdjg
aKO4Zr5nHM4cJ0Rc2sCG/N6hny8ezUP7h9J3S3L4fYx3CVjq8iBH5AP6byuw
Qax4KtZ6lYg0eplKSSmxoeJhv7uhAh/C+Ek0TVFhw/LmM+80r/IjFbvLXbRV
2eC++8CCL48AYhITmPB2Kxvkq4vMJV7zI0VTBz6aa7IhOmyDfHg0H6JrSZr+
uo0NROPyTcbPeZGsvArlYzvYUP+pyu+dCAHZsu4We1AXrydgO/b48SIkuZh7
X9FnQxrme0pQcQpkPvP9R9zNBoPGxqUbVX0gFBpM2LiPDTVvXsRomf9Ag/rJ
2zNN2FAqfWmh8OA/dJkscHTnfja86HtYrmoyg155Wh2CHmBD6IW+d6O3ltEx
3tuvGWQ2nCkMldvVTsAunKJ2NVPZ8MnAd3eTJQn7g60RO8Ngw+FTN+TbRfgx
u001RmMsNijwxLnozvNjP3zvOPhw2aDlJRkvu04A4/6mRa+xZENRoOefZC4/
VmMkVBp9iA0PbwWFPyolYabxtcNKR9jg+eRMxBk3IvZ+NlTuhS0bir32768a
XEENDjMoe+zZ0CW09rdn4yz68rWwR+VxNuwbUiCZvRlFU93CPredYUNhVYp/
rUARyDcwF847sOGz+undQnf+wsPtoltnzrOh5Eyi+7msCRC799kywJkNbx6K
evGcWYDbQ/f8xFzZUOs1FP86mgch0tkvHrmxoVt0u26lPS/i/Z9Yq5oHG/6c
p+cZXOZDpvjr+V9dYcPv+bGZiFJ+xOVsxE64zoZUTx+RyH0CSH8558Qnbzbw
vPmmktLBj5xUWXfP+gYbLFzHmKQcPqTVr+HtHz82vLylZv86nxex6ojsdQ3E
8dF62c/DQ0C+GB+UWLrFBvgTu6XWfhGoj9cjt2+zgW0R6Yq8n4Syha/OknfZ
oBt2KeB0RS/stbkfn3wPP39OeK3ZQAW8fmNRtS2SDaNqkvrhfD/R7dISk0X3
cX59jd1JX4bR/zy+bTJ/yIZ5W2EDGu8sqvLtAfNrLBumvA6KYfQV9LGu1XX7
R2zQjHZC6vcRMalIyYyBx2yQW6zqVM4mYeEjTY2eT9igxNfTmGnDj61hPVwl
pLJhY7uJ9FNDASwg+9C28HQ2xH88OvcXBLBFQWkbuUw2bGm+c1LAlR/zcPxx
K+MZG6gTI3a3PpOwkaqYfL3nbJgmK//nfIGIOapad5TksIHzj+T17M0K2hUo
I8LIw/lb45m3xWcWte1uNmx+xYaTyTvvl9eOoE1I3NnThWyw6rwo1TrfiqZq
fJ5Te8uGCO/G8BluNbiKE8MG3+H4j5iIHO7vh32LBptyStggEp3nfujqNAj9
dcp3K2WDdt247ULkMjTXJZvvqmBDr5aXpa4+EUkv+N4yV8UGmsXwV8pPEuKe
JOT8voYNW0OM44se8SMQAqs369iwZ6YiRvesACJyyeP+gXrcj+0ZR4Z2CCCt
R56pCjSyYaVgwldomQ/J3N9eVNvEBrvegrd3fvIiHpoSzPBmNoQZptFe/OZB
TCWoHQdbcf3ry6YLsxdg7ZKPu1QbGyblKeVyZeOQ9bk37nE3GySSA7799+QV
eq1w47YTPWzALod9Mi/oQc2fcNHN/WyIDXPva+CbQsVv37LoG2RD3iMXtx3W
S2jnpeKerGE27BVM9vv+loC9sBm95jLGhv6nWEh2MAnzMt0iojfJBhl+H75T
l/kxqpbNk+lpNgR+XMhtuCCASUmG672dw/t/RTxKOSWAdS+VVfos4n6XD9lE
suXHcntmjyArbPDW/iehZ0/CfL9s+8dL4IBsZ5PbJX8CRn9z8mY1LwfS6U9f
ffm0iG5IjhG/y8+BGdUNR/tPT6I9tz89ZQtywIZyq2uU9Rf1s91V912MAxvC
vnoOuncD+8CF4/HrOaCW63VN+s4EbNz2ZMJOkgPVu32cZNYuQr9k0y0lGQ58
9dJtkdxNQAqX18j+leVAwuHZ6SpNEhLYa/w8U54D/pKFBmam/Ai33h2cNnGA
/Co66ME5AUSxKLNxuwoHrv0idcnfFUCGkn+fndjCgYWvCEs/B8/vO+vnC7Zy
wGl6P10b10OwOznsuiYHTgUmiM5sIiKWR703GWtzwLp6g40vsgxKZrn5PDoc
MBgXHLjAMw0j23rMK/Q44FHF0x+HzxvvpOR+huziwNUJkmJvUCkc7gtcFdvL
geiO8GNThHF0c0PR/UZjDjx9x+Tav51Hx4qGVWMQDtSd7sjc8ZwHK0lReWtz
gAMB/0g+ZZW82N1Qa6YCGX+fn3D/RQF+7MjlsI5OKgcI52RDXI4IYGp2pe7p
DA6gS8IPyVkC2KTZDJ8jmwNbzzhdtcfzG9PWitc6yIF7gd801Fl8WLj0iW2j
lhx4cOh1dcsbInZ0NRrNP8wBq0zlHbrZK6h6f43FFRsO3AxS5c2KmUFnGlZ6
9thxYJNVjlS+5BBa/nbn9eVjHBidbB79TK1HI1MdRUpPciDfMa6QGtEMx+4m
Pgk6g79PfbQmoHsEtDwa9agOHFhzsL618PAc2K6t8Ph9ngPS+0LkjheuQmhW
QeElZw4UmficpE0RkWLzzDmSKwfMn79/vMGGDxnsjDOKd+OA9ktxKWyCH5Hz
CfXR9uDg88/ZbWN5Aghdxqek9Aqup+huy+sRAohX/kWew9c5kPNxu05UGD+S
xTpuOujNgfAPCpXV+SSktZ8bdOMGB/YreQi+kCAiQkGmVeL+HGg4nH3ZCs8L
o036azIDOXDbsEpXs2Mazher0vcG4/yts0iQKR6EuEMyYfW3OeClcUf+p9NX
+Di25svpuxxQSV+6D+bf0Lm7C2vn7nFAT5WxvT55CFXf+u9gWCSux0aNE/HM
GfRIWdsDpQccKFGep/NPL6O37eu/v37IgSree8cOIUSsaA6TocVx4GRQn83d
FhLW/yDfpu0Rjs+1z29OZPFjG3akJ7glcoAVoqntli6AUWsftvElc+DZyf1l
xz4IYNfOhmx6lMqBvxdzM7Wm8P2K5/rJ7U9x/o7sMTPj8mE/Ei6klWVy4FPY
a6k9XUSMf7ddz+EsDqQMaM8e8llFDRpZW4eec2Dl/WxNu+Aceu4inL/5kgMm
Pxq3N54eRWPW6GZL5HNAg1RiErD2F1qVpjKc+ZoDSkcYeU9symHGRHLHvjd4
/cCo40UCfaDWyufW8JYDtU+4Ua47puCw52z+mfccqHlfsMjeuATB6wam5ko4
oO5dKbXki/s7u9XgXikH1ndQPw1SSEgPue6acgXu7+GtU81cfkSy+0NxQRUH
Ak+V91ndEkDMfF8u0Wo4YFujFfvzpwDisSHFpP0T7ldqyYAeQwBJf3Xfz/0L
7oeO2Q8p7XxIEzuojP8r7rfDyqeepfAipEFPUsI3DvTcqbWOeMaD6N9yIO/4
gesrwpasoroAZ5Rsbpe34Ph8VD74cnkcot/Ra61/4XraE8v6aNUNFYf3ifxr
44DFh8PP0/rV0M33NkVK/uHA2B5W5VrCBGqhvr7xvx4OCHe+YX3WXEADyomS
xv0c+Cy5XbDjBQ+Wf2zq0NdBDsSflR19lsmLdc/3xJ4dxvF9FMp3rpcPE3/Y
/HN+lAOCZIpHhpUAZqpTszF8AudbdeAo+lcAc/9UbK8yjeNx0uEGNUoASz33
/EnhLAfflw/qHrTnxxoJSV30BQ6QFjIzDliRMEJixOaOJQ4Y5dfFX7tDwHQM
/c9eXsX7W69fs7J9Cc09//YbL4ELgT9jUk1NplDq7vwpFpELajP3d2Vs6EM7
SdlScbxcuLd5h9/34+XouuTH1tv48fMhy6Ifg0ehKfBy22MBLogpB4nQ1s9D
vAP9tKggFwS0deM0E3iQYwzlAV8h/Hn/7X2j/byIyo45lxFhLrR4P+J5S+dH
esXrp46JcqHUfc+HvekCSPbMU696MS5oOJXXOfYIIJdafXiQdVwwDnstt11Y
ANEvsQzOXc8FyFmvlbCJD5lL0RRRluDC9JGdRy/sISIfbhHuR0lyweSgXXbf
9BIEnG+RIUpzgfci55C28hSQWS8T3WW40CH74HZ28V8Q1g3e/GcDFz4Kvv9S
qXEDGiTtn1nKceEwc5mZbv4XjZ7buaNiIxdEpzDp1aFJ1Oa3UIG+AheO8F51
J9csoYpYl9FTRS4YngtK/aBOxLrTijApJS7s5CxtTZTiwzJDIsjBylxYrjf2
C1kjgDk7naubUeGCTr6w8OFBAUyHY2zhsAWvbzvw+3auADatJ9nSrMqF0L8d
JeU4n8XSQ/bUrVy4Ur/F4iWBhN1YKP1TpM4F86ZTGOD7nGl73HkNTS7E149J
fOPOowJlrqPxWlw4q865l0kaQyPvKCx6becCpTrbJdT+K1hdnPIb2sGFyUIv
y8dD/0D24Cd+O10uZB4x8CQOzEK7fmpYnR4X9C/IPXVX4kFSN1wXN9bH8R5g
E4zv8SLnljhxL3Zx4Z9ZuNA+cX5Eq1NNUXE3F/hF5TtCogSQsfLltHBDLugm
l5GOzAsgrzObNFb3cMFr9mLGDzMB5Nrd7Jeue7mgYqxjbIvv18auAbs693Eh
/Qr/NLGAiBAtbd5xTbjg/M/6jd+mFagy0NlfClzQfPeh46HrNITKCVTr7ufC
0QMtceEBfcBZaWOmmnLhVq7Xpi1XikCy+3WjuBkXrvvPnEq/04W2VN49EmjO
hQx7vlc7n02gj5+dap8kc8FPydn2Yu4ievLenjNnqFz4cNX346s3BEzNbd1g
E40LN0c3UTZVkrBBqz5XcwYXfvMoU01/4/uuYcl0AZMLP59bprFxP16Wf+it
xuZC5alBJt9XAcyQx5kQy+FCdTiGUdL4saU/piECB7kQt8+2UPQ8CcOqZUWv
WXDhBmf2IbqPgN3KHrvfb4njXz6ZtxCygNIj8MHjEBeapateYEfHUbHLSUk1
h7mAPlCyORvchjYe9txidIQLxc9r0kz8qyHWiJmVZcMFX48/68FkEOwUN+ts
PMoFrNPIKTh/BpSICwV37XD9HCkrqDFchZ6ehr1L9rj+U9J2O6jh+2pNZqnz
cS4oZ788zv3Mh7i8uEFpO4Hryci7N9tNANkZdegz6xQXfIJnV1dXBZD/Adu8
v1Y=
       "]]},
     Annotation[#, "Charting`Private`Tag$8807#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
       "]]},
     Annotation[#, "Charting`Private`Tag$8807#2"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->NCache[{{0, 
      Rational[1, 1000]}, {-2.999999999999992, 2.9999999997533546`}}, {{
     0, 0.001}, {-2.999999999999992, 2.9999999997533546`}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8784080810419755`*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"a5c9f32c-cff7-46ed-b0b1-1cf35f72f01c"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ArgMax", "[", 
   RowBox[{
    RowBox[{"2", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"0.5", "*", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", "*", "Pi", "*", "1000", "*", "t"}], "]"}]}]}], ")"}], 
     "*", 
     RowBox[{"Cos", "[", 
      RowBox[{"2", "*", "Pi", "*", 
       RowBox[{"(", "100000", ")"}], "*", "t"}], "]"}]}], ",", "t"}], "]"}], "//",
   "FullSimplify"}]], "Input",
 CellChangeTimes->{{3.878404176045947*^9, 3.8784041999674187`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"0a93fa9e-2fcd-4d4d-bc92-a313fa0c1e9a"],

Cell[BoxData[
 RowBox[{"-", "0.19296000133325883`"}]], "Output",
 CellChangeTimes->{{3.8784041919751472`*^9, 3.8784042007642756`*^9}, 
   3.878406413435999*^9, 3.8784065459772353`*^9, 3.8784069252534523`*^9, 
   3.8784080054941835`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"22375bea-b048-420d-93af-5d7685e23b41"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MaxValue", "[", 
  RowBox[{
   RowBox[{"2", "*", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"0.5", "*", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", "*", "Pi", "*", "1000", "*", "t"}], "]"}]}]}], ")"}], 
    "*", 
    RowBox[{"Cos", "[", 
     RowBox[{"2", "*", "Pi", "*", 
      RowBox[{"(", "100000", ")"}], "*", "t"}], "]"}]}], ",", "t"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8784043039764576`*^9, 3.8784043082939396`*^9}, {
  3.8784044408131523`*^9, 3.878404455859598*^9}, {3.8784045059973164`*^9, 
  3.878404557693237*^9}, {3.878404671754935*^9, 3.8784047008361683`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"82dd4e38-4edc-407e-b27f-15353bc853fa"],

Cell[BoxData["2.9685842027805047`"], "Output",
 CellChangeTimes->{
  3.8784044438192954`*^9, {3.878404547874426*^9, 3.8784045586060925`*^9}, 
   3.8784064136833363`*^9, 3.87840654617371*^9, 3.878406925376358*^9, 
   3.878408005558818*^9},
 CellLabel->"Out[3]=",ExpressionUUID->"4dd022df-03f6-4713-8a1a-4b4056137c96"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"2", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"0.5", "*", 
      RowBox[{"Cos", "[", 
       RowBox[{"2", "*", "Pi", "*", "1000", "*", "t"}], "]"}]}]}], ")"}], "*", 
   RowBox[{"Cos", "[", 
    RowBox[{"2", "*", "Pi", "*", 
     RowBox[{"(", "100000", ")"}], "*", "t"}], "]"}]}], "/.", 
  RowBox[{"t", "->", "0"}]}]], "Input",
 CellChangeTimes->{{3.8784045818053455`*^9, 3.878404607417551*^9}, {
  3.8784046387879353`*^9, 3.878404647246797*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"4457999a-4004-4be9-b816-c02615232c33"],

Cell[BoxData["3.`"], "Output",
 CellChangeTimes->{3.878404647783594*^9, 3.87840641392868*^9, 
  3.8784065463841476`*^9, 3.878406925454193*^9, 3.8784080055949316`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"85115d60-1864-4596-b466-00e54b540489"]
}, Closed]],

Cell[CellGroupData[{

Cell["NMaxValue[2*(1+0.5*Cos[2*Pi*1000*t])*Cos[2*Pi*(100000)*t],t]", \
"WolframAlphaLong",
 CellChangeTimes->{{3.8784047072299833`*^9, 3.878404708158802*^9}, 
   3.8784049266145525`*^9},
 CellLabel->"In[5]:=",ExpressionUUID->"d718e588-bbc3-47e2-972e-e390db599059"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "NMaxValue[2*(1+0.5*Cos[2*Pi*1000*t])*Cos[2*Pi*(100000)*t],t]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "NMaxValue[2 (1 + 0.5 Cos[2 Pi 1000 t]) Cos[2 Pi 100000 t], t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               TagBox[
                StyleBox[
                "NMaxValue", FontFamily -> "Roboto", 
                 FontSize -> -1 + Inherited], HoldForm], "[", 
               RowBox[{
                 RowBox[{"2", " ", 
                   RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"0.5`", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "\[Pi]", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], "1000", " ", "t"}], ")"}]}]}], ")"}], 
                   " ", 
                   RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "\[Pi]", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], "100000", " ", "t"}], ")"}]}], ",", 
                 "t"}], "]"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox["2.9685842027805047`", Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.721", "parsetiming" -> "0.546", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP478416f7hde31ccd0d9f000020ddbd650fi9d73g", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "20", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa478516f7hde31ccd0d9f000015216i87df4g8fff8458888475783217078", "version" -> 
    "2.6", "inputstring" -> 
    "NMaxValue[2*(1+0.5*Cos[2*Pi*1000*t])*Cos[2*Pi*(100000)*t],t]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 11, 26, 0, 33, 31.6539363`9.253002628662028}, "Line" -> 
    5, "SessionID" -> 25211550819852172405}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "NMaxValue[2*(1+0.5*Cos[2*Pi*1000*t])*Cos[2*Pi*(100000)*t],t]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1072.1, {80.50766601562499, 86.59233398437502}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.878408011675417*^9},ExpressionUUID->"a02a17d4-fa8c-436a-8dbb-\
5c792d716e0d"]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "t_", "]"}], ":=", 
  RowBox[{"2", "*", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"0.5", "*", 
      RowBox[{"Cos", "[", 
       RowBox[{"2", "*", "Pi", "*", "1000", "*", "t"}], "]"}]}]}], ")"}], "*", 
   RowBox[{"Cos", "[", 
    RowBox[{"2", "*", "Pi", "*", 
     RowBox[{"(", "100000", ")"}], "*", "t"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.8784049677386675`*^9, 3.8784049866182766`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"7e5f3032-0868-4240-b9c8-f2655ce69780"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "'"}], "[", "t", "]"}]], "Input",
 CellChangeTimes->{{3.8784049774085646`*^9, 3.878404991098278*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"44f2d3e2-3d7a-497b-b437-2bdf05655808"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "6283.185307179586`"}], " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"200000", " ", "\[Pi]", " ", "t"}], "]"}], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"2000", " ", "\[Pi]", " ", "t"}], "]"}]}], "-", 
  RowBox[{"400000", " ", "\[Pi]", " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"0.5`", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"2000", " ", "\[Pi]", " ", "t"}], "]"}]}]}], ")"}], " ", 
   RowBox[{"Sin", "[", 
    RowBox[{"200000", " ", "\[Pi]", " ", "t"}], "]"}]}]}]], "Output",
 CellChangeTimes->{{3.8784049915100527`*^9, 3.8784049964328766`*^9}, 
   3.8784064239172907`*^9, 3.8784065499057293`*^9, 3.8784069277542105`*^9, 
   3.8784080123421206`*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"02e36146-ce5a-468a-ad03-c25ce2d8c7de"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NMinValue", "[", 
  RowBox[{
   RowBox[{"2", "*", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"0.5", "*", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", "*", "Pi", "*", "1000", "*", "t"}], "]"}]}]}], ")"}], 
    "*", 
    RowBox[{"Cos", "[", 
     RowBox[{"2", "*", "Pi", "*", 
      RowBox[{"(", "100000", ")"}], "*", "t"}], "]"}]}], ",", "t"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8784067776197786`*^9, 3.878406798195756*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"52e8afcc-1fa3-4eb7-9edf-d29d4673447b"],

Cell[BoxData[
 RowBox[{"-", "2.9602950003008974`"}]], "Output",
 CellChangeTimes->{3.878406799263899*^9, 3.8784069278649144`*^9, 
  3.8784080124071226`*^9},
 CellLabel->"Out[8]=",ExpressionUUID->"3d3eccb4-4273-478d-869c-6dcce27da67f"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TrigReduce", "[", 
  RowBox[{"2", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"0.5", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"2", " ", "\[Pi]", " ", "1000", " ", "t"}], "]"}]}], "+", 
     "1"}], ")"}], " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"2", " ", "\[Pi]", " ", "100000", " ", "t"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.878408822001396*^9, 3.8784088381091366`*^9}, {
  3.8784096408204093`*^9, 3.8784096589072886`*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"ac7bdda5-a4b7-47e4-ac41-f8ba03e7d2bf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"0.5`", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"198000", " ", "\[Pi]", " ", "t"}], "]"}]}], "+", 
  RowBox[{"2.`", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"200000", " ", "\[Pi]", " ", "t"}], "]"}]}], "+", 
  RowBox[{"0.5`", " ", 
   RowBox[{"Cos", "[", 
    RowBox[{"202000", " ", "\[Pi]", " ", "t"}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.8784088399732475`*^9, 3.878409661372329*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"010cc41b-1dfb-40e1-892e-4e2b693ad1f2"]
}, Closed]],

Cell[CellGroupData[{

Cell["TrigReduce[2 (0.5 cos(2 \[Pi] 1000 t)+1) cos(2 \[Pi] 100000 t)]", \
"WolframAlphaLong",
 CellChangeTimes->{{3.878408860178685*^9, 3.878408862230892*^9}, 
   3.8784096459124756`*^9},
 CellLabel->"In[3]:=",ExpressionUUID->"fd822a5e-0d41-43eb-93d7-7f4380efeca7"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "TrigReduce[2 (0.5 cos(2 \[Pi] 1000 t)+1) cos(2 \[Pi] 100000 t)]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigReduce[2 (0.5 Cos[2 Pi 1000 t] + 1) Cos[2 Pi 100000 t]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               TagBox[
                StyleBox[
                "TrigReduce", FontFamily -> "Roboto", 
                 FontSize -> -1 + Inherited], HoldForm], "[", 
               RowBox[{"2", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"0.5`", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "\[Pi]", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], "1000", " ", "t"}], ")"}]}], "+", "1"}], 
                   ")"}], " ", 
                 RowBox[{"cos", "(", 
                   RowBox[{"2", " ", "\[Pi]", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], "100000", " ", "t"}], ")"}]}], "]"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"0.5`", " ", 
                 RowBox[{"cos", "(", 
                   RowBox[{"198000", " ", "\[Pi]", " ", "t"}], ")"}]}], "+", 
               RowBox[{"2", " ", 
                 RowBox[{"cos", "(", 
                   RowBox[{"200000", " ", "\[Pi]", " ", "t"}], ")"}]}], "+", 
               RowBox[{"0.5`", " ", 
                 RowBox[{"cos", "(", 
                   RowBox[{"202000", " ", "\[Pi]", " ", "t"}], ")"}]}]}], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[0.5 Cos[198000 Pi t] + 2. Cos[200000 Pi t] + 0.5 Cos[202000 Pi \
t], {t, -3/25250, 3/25250}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max10065$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min10064$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min10064$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max10065$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4035784$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min10064$\
4035789$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max10065$\
4035790$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max10065$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min10064$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4035784$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min10064$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min10064$\
4035789$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max10065$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`max10065$\
4035790$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$4035761[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    0.5 Cos[198000 Pi $CellContext`t] + 
                    2. Cos[200000 Pi $CellContext`t] + 
                    0.5 Cos[202000 Pi $CellContext`t], {$CellContext`t, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min10064$$], 
                    (
                    Piecewise[{{
                    0. + 0.00012701524368115215` 
                    Tan[1.5040801783846716` #], # < 0}}, 0. + 
                    0.00012701524368115215` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min10064$$], 
                    Rational[-3, 25250]], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min10064$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max10065$$]], 
                    (
                    Piecewise[{{
                    0. + 0.00012701524368115215` 
                    Tan[1.5040801783846716` #], # < 0}}, 0. + 
                    0.00012701524368115215` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min10064$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max10065$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min10064$$ + 
                    Rational[3, 12625000], 
                    CalculateUtilities`GraphicsUtilities`Private`max10065$$]], 
                    Rational[3, 25250]]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, Ticks -> {{{
                    Rational[-3, 25250], 
                    Rational[-3, 25250]}, {
                    Rational[-3, 50500], 
                    Rational[-3, 50500]}, {0, 0}, {
                    Rational[3, 50500], 
                    Rational[3, 50500]}, {
                    Rational[3, 25250], 
                    Rational[3, 25250]}}, Automatic}, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min10064$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max10065$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4035761]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4035761[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4035761[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfEdChfUJidGNMGlCS8r1eckksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu97TYxEk/\
V6vp64b80GwONnC0xNjRmKWi4LH+\
2e5BKWo4Mk1fHbHmBD0HjDyA2Lnu2nMeyFnRLvzG3yfsKhgRMNXTRnVFNT0QJI8o5GqPWNJT8xPpkx\
EhNGf8Gz7xfD1zs7QwWAsY6I1SK6GbSHzTBIFSQ+BbhjzjhH+zR0fl8dPBWMhfC+\
AR6AeGu9EktjACE4Y5uN969Vm6h4mpgmPiYwvnSYrz1HbC5SWlKcTmOX4xsVkvWwLTGSqHDf3S27WK\
ciFfwsfiNDG5Dw2aXu2BPqFccXoOy+rf87dAM9v28JLcbqaOMxvlyFvRNMTUMt0Pm9dJ8dI1bU2+\
jlXlzVfNhrkxVOm/l86okovh/GqbRgwOzY1Xq29ZfjttvAix66fi/uBMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5WfIfo9KlghROYOMt+\
sf3xqAKvN4UQazfdgHR4PQMCyMG4YsvtHk2pHmVEksgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5gs1J3oKPvyR8Wt5HKuyZD3Q64hBblW9LexPtKQy+\
OJ8IwkxAuaevXmsEpqTKS37AclSJgTThGS/jIf+\
809XKwEUnUgUV3SsTiwpTnzT6JfFvgIeKqz5o7tObq82xazCcRprbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DdgTuIY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[0.5 Cos[198000 Pi t] + 2. Cos[200000 Pi t] + 0.5 Cos[202000 Pi \
t], {t, -6/12625, 6/12625}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max10067$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min10066$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min10066$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max10067$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4035881$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min10066$\
4035882$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max10067$\
4035883$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max10067$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min10066$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4035881$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min10066$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min10066$\
4035882$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max10067$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max10067$\
4035883$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$4035860[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    0.5 Cos[198000 Pi $CellContext`t] + 
                    2. Cos[200000 Pi $CellContext`t] + 
                    0.5 Cos[202000 Pi $CellContext`t], {$CellContext`t, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min10066$$], 
                    (
                    Piecewise[{{
                    0. + 0.0005080609747246086 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    0.0005080609747246086 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min10066$$], 
                    Rational[-6, 12625]], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min10066$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max10067$$]], 
                    (
                    Piecewise[{{
                    0. + 0.0005080609747246086 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    0.0005080609747246086 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min10066$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max10067$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min10066$$ + 
                    Rational[3, 3156250], 
                    CalculateUtilities`GraphicsUtilities`Private`max10067$$]], 
                    Rational[6, 12625]]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotPoints -> 404, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min10066$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max10067$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4035860]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4035860[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4035860[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMBhuCL0hAB2PSgJKU7/\
XiS2Ph2sF2tsGfB5/dJM3aVYrpAE3ph1N9aR7fPffc9R4dyijt93o9fdmaD5LT9BqeHlozlLNcFoK+\
O8kVaM2kSC/hs5vWxGB2gZMfQL3vqjXvpZoR48+v8H3Ck4ITA18N48ww0JM9RfKMJbr2jBQ7sj+\
ZcJkQzn7C452t7ecvX2x5GIxlRIwBJfR2W8g8U0RD2kOgK9a85UR888cH5fFTwXkM3wsQCeh71jtWh\
FoYKQjHfIJvvdhM3cbEDBGUKHruNDl5DtteoI1iYjqGWY5vnE3W07bARE215+ZOyc06Bfnwr+\
MDGbuYvMcl7c6OwLAwLhh9p2X1z7kb4Pl1W3glj1cTh/\
m94cgbMewI9DKdT1rXyTNSda2Lfs7Vec2XjQZ59pSp/\
5cOmDbLYTxrGwbMDm2NV2tvGX6nLbzMsevn4r5rzWfvKAFXDYdKcB8lLfg8imbKAy/\
R9unq3Do8xq2K7xidIRWscCIbZ9kvrj/uV+D1phBj7SYbkI6oZ0AEOVgXddzusikzw4wokljg+\
XX9ssnGsg4l4M72tWeCMjvAPCHrlic0++lC3YlJsi9/VNxKLqeaDHnfFwamoNaK/\
gbWR1lyBR3LwEhivKCp12AOq6RGRAXLflCCxDkRDCHZL/tx3/\
zDxUogVXsK1aU8iwNXmpPwJPplgQ9ATE3W3LEDR1dw22I2kTyuVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AeSOuHY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "t", "template" -> 
        "Assuming \"t\" is a variable${separator}Use as ${desc} instead", 
        "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"C\", \"t\"} -> {\"Variable\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Variable", "desc" -> "a variable", "input" -> 
          "{\"C\", \"t\"} -> {\"Variable\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Unit", "desc" -> "a unit", "input" -> 
          "{\"C\", \"t\"} -> {\"Unit\"}"}, {}]}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.753", "parsetiming" -> "0.541", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP37421296f4cci054a73700002013e25eg74ig651", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "5", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa37431296f4cci054a73700003a082110a0c6531f6235443652248981561", "version" -> 
    "2.6", "inputstring" -> 
    "TrigReduce[2 (0.5 cos(2 \[Pi] 1000 t)+1) cos(2 \[Pi] 100000 t)]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 11, 26, 1, 0, 49.0414606`9.44313825179041}, "Line" -> 3, 
    "SessionID" -> 25211555124662223315}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "TrigReduce[2 (0.5 cos(2 \[Pi] 1000 t)+1) cos(2 \[Pi] 100000 t)]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1072.1, {488.50766601562503`, 494.59233398437493`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8784096490639086`*^9},ExpressionUUID->"a1e5f8c9-ffb8-497b-b853-\
581d1f127244"]
}, Closed]]
},
WindowToolbars->{"EditBar", "MultipurposeBar"},
Evaluator->"Local",
WindowSize->{1141.2, 582.},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.15,
FrontEndVersion->"13.1 pour Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"46026d86-a155-4ca7-afb5-b9e5338f64d1"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 970, 26, 69, "Input",ExpressionUUID->"75d98150-680f-4f25-beca-e4b5fd78aefb"],
Cell[1553, 50, 65745, 1097, 264, "Output",ExpressionUUID->"290c9de9-7cb5-4aa2-85ff-e99c4463dd10"]
}, Closed]],
Cell[CellGroupData[{
Cell[67335, 1152, 1203, 37, 90, "Input",ExpressionUUID->"4ce9cde8-8bc3-4016-81f6-78b64be0890a"],
Cell[68541, 1191, 73645, 1229, 264, "Output",ExpressionUUID->"1adaafae-5ab3-4289-a414-e8a9af985c0e"]
}, Closed]],
Cell[CellGroupData[{
Cell[142223, 2425, 1073, 32, 90, "Input",ExpressionUUID->"b560a49f-d337-4d74-8c7e-b96d9e1efe63"],
Cell[143299, 2459, 73721, 1230, 264, "Output",ExpressionUUID->"a5c9f32c-cff7-46ed-b0b1-1cf35f72f01c"]
}, Closed]],
Cell[CellGroupData[{
Cell[217057, 3694, 590, 16, 44, "Input",ExpressionUUID->"0a93fa9e-2fcd-4d4d-bc92-a313fa0c1e9a"],
Cell[217650, 3712, 314, 5, 37, "Output",ExpressionUUID->"22375bea-b048-420d-93af-5d7685e23b41"]
}, Closed]],
Cell[CellGroupData[{
Cell[218001, 3722, 703, 17, 44, "Input",ExpressionUUID->"82dd4e38-4edc-407e-b27f-15353bc853fa"],
Cell[218707, 3741, 316, 5, 37, "Output",ExpressionUUID->"4dd022df-03f6-4713-8a1a-4b4056137c96"]
}, Closed]],
Cell[CellGroupData[{
Cell[219060, 3751, 570, 14, 44, "Input",ExpressionUUID->"4457999a-4004-4be9-b816-c02615232c33"],
Cell[219633, 3767, 244, 3, 37, "Output",ExpressionUUID->"85115d60-1864-4596-b466-00e54b540489"]
}, Closed]],
Cell[CellGroupData[{
Cell[219914, 3775, 264, 4, 38, "WolframAlphaLong",ExpressionUUID->"d718e588-bbc3-47e2-972e-e390db599059"],
Cell[220181, 3781, 7731, 154, 178, "Print",ExpressionUUID->"a02a17d4-fa8c-436a-8dbb-5c792d716e0d"]
}, Closed]],
Cell[227927, 3938, 531, 13, 44, "Input",ExpressionUUID->"7e5f3032-0868-4240-b9c8-f2655ce69780"],
Cell[CellGroupData[{
Cell[228483, 3955, 218, 4, 32, "Input",ExpressionUUID->"44f2d3e2-3d7a-497b-b437-2bdf05655808"],
Cell[228704, 3961, 803, 19, 37, "Output",ExpressionUUID->"02e36146-ce5a-468a-ad03-c25ce2d8c7de"]
}, Closed]],
Cell[CellGroupData[{
Cell[229544, 3985, 552, 15, 44, "Input",ExpressionUUID->"52e8afcc-1fa3-4eb7-9edf-d29d4673447b"],
Cell[230099, 4002, 234, 4, 37, "Output",ExpressionUUID->"3d3eccb4-4273-478d-869c-6dcce27da67f"]
}, Closed]],
Cell[CellGroupData[{
Cell[230370, 4011, 555, 14, 44, "Input",ExpressionUUID->"ac7bdda5-a4b7-47e4-ac41-f8ba03e7d2bf"],
Cell[230928, 4027, 506, 12, 58, "Output",ExpressionUUID->"010cc41b-1dfb-40e1-892e-4e2b693ad1f2"]
}, Closed]],
Cell[CellGroupData[{
Cell[231471, 4044, 265, 4, 38, "WolframAlphaLong",ExpressionUUID->"fd822a5e-0d41-43eb-93d7-7f4380efeca7"],
Cell[231739, 4050, 102410, 1951, 994, "Print",ExpressionUUID->"a1e5f8c9-ffb8-497b-b853-581d1f127244"]
}, Closed]]
}
]
*)

