(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1072049,      18752]
NotebookOptionsPosition[   1071226,      18729]
NotebookOutlinePosition[   1071709,      18747]
CellTagsIndexPosition[   1071666,      18744]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Log_a(x)", "WolframAlphaLong",
 CellChangeTimes->{{3.868805702826437*^9, 3.868805724930518*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"57eff2fe-736b-4370-9806-05adc900567e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Log_a(x)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Log[a, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{"a", "x"}, "Log", DisplayFunction -> (RowBox[{
                 SubscriptBox["log", #], "(", #2, ")"}]& )], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log_b(x) is the base- b logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"log", "(", "x", ")"}], 
              RowBox[{"log", "(", "a", ")"}]], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "3D plots", "scanner" -> "Plot", "id" -> "3DPlot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> "Real part"}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[Re[Log[x]/Log[a]], {a, -3., 3.}, {x, -1., 1.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            Graphics3DBox[{
              GraphicsComplex3DBox[CompressedData["
1:eJx0nXVYVU0TwClBBcRO7O5uZTCxA1HswFZQsRUUAwMTwS7KACXkqiiiLC0I
KC0l3R0GSPj5yZ29z53z3vef93l+zzh3d87s7szsnEN3g926mxXk5ORmtpGT
U/z7/4TNR4P+/FHx6f5t/ss/f0rZjpA2C9ecLoJ5+tMrZ1kpcR5S3n9PzfJi
YLOadbPqJc/5piavejqPK4FN+1/c8TCqYcjXb+692K9NKcz5p+c75/rx1d/z
Qkthwz/5Qs7Xffcp0y0qhdX/eBLnQWPnTz4TUwxy//4LmIS8YGJjhfOHhmvt
aZAH5KeD2+zob3dWa2eDfs6n97t0/m57N62FDePhPNHz8MJvLR28tzWMn/Nn
r+x/bgm55u3bMF9t5HMT2cuD/Sy8FzTYh/Pjk2uvD55v7i22J+fz/tiUlO07
idxni3jefZIzzTorS+yM3Nz6RlnfgiJuZ+Th+e+zrZOLuZ2RZz/y3RgQVcLt
jPxKSoDFj+cSOyP/8+8/iZ2Rrxh7zvT6+BJuZ+THTdv3OlVtDGhn5Ok9iyde
mf0R0M7IW/7792WAdkbe923nhWG2mQztjHzTt4FL/OZHMbQz8t19Yxc4Z4Yw
tDPyE8dfHYOsAIZ2Rm7X/eKKiB++yH2eqbY6YZSUw252q9D4bVzI7Yx8gtnK
6622SuyMPNerS9enuyV2Rr48/Y3e+dMSOyP/mBO+bOBZiZ2Rz++cGGKvWsbt
jDyt+UKXTu4SOyMfdGbl2l8PTnM7I/ep8V40e0cCtzPyx6ctT08/KK+Ndka+
b5idYunOH9zO3A4JZroF1ZnczsiftVFWmTElmdsZ+dP+T6AsLI7bGflUc81+
pXeiuZ1L7A9s6TU7g3lc9zj7/H0BtzPyjFEF+Y+DCrmdkb/9rliw7K+fo52R
22TAkys9JHZGrvnBolWhvsTOyK3qCs+ldZDYGbnqr0kaW6aVcjsjb+w4pHrC
IktuZy5/6+mJ6z2yuZ2RTzcNHpXRVJ3bGXmL5Ct9t0TI+6CdkZ8ZcSjU/X4Z
tzPy4zklC3uY5XI7I7+nPv7S9x8Z3M7IS0+V30qbl8btvFk8vz9FfYKLovK5
nZE/OxOXG/mrgNsZecjd63KHtSR25nz26Y/nHxdzOyM3tX+gO0dTYmfka5qm
vZ40SGJn5PXi/QTtjPzy1d0nOr28ze2MvLF4f0A7Iz9dtemO7Ybm3M7IWx1+
1jKgqim3M3L3khv90/tUczsjV1ltNvh5SDm3M/KZi5u1nPi6iNsZuW2kQ6KK
ax7x5yhm+bj681GLPOLPUaxx34HpC2PyiT9HsVePk5Qmzisk/hzFTp+Tb7rk
RxHx5yjW9KRBMgSXEH+OYqUqYZM7z6T+HMXiU1eG5JmXEX+OYhPU5lUdnWpP
/DmKafSNO9ze8Rfx5yiBnZEXetrHPCpvTvw5ihW37j6sxW0FH2l/jmL6A+6H
Bs37Tfw5itl0NUrVGP+D+HMUazmzw5B3WhXEzn5su8ekdnOW5RA7+7EhHQzj
q9NziZ392ItlL7t2dc0ndvZjWwf5G7ULLiR29mNV0yc+vj6O2tmPzW/pXLli
L7WzHxswvd3FLtvKiZ392J4Auf3xq52Jnf/qmeK8fN86BW1pO/vJsLOfDDv7
sTuWZ4+GpKsRO/uxt3tsx9YbKvlI29mPjU9e+97KRM5H2s5+zOXT+OZK+rXE
zhXeg94Z/XivFsKk7Vyh5eY6qPn6wBImbecKrYK7j5x/Xctn0nau0Hps/DDO
/U4Gk7bzX/mwlZPVvCOZtJ0rtFo49fMbnBhI7Fyh9TW4z6XBGkXEzhVaOf5n
fu39GU3sXKGF9pS2s4RL27lC67/tLOHSdpZwaTtLuLSdBRz9E8bGRtbNexVM
7OwH2wsyjygnBxI7+0HOWoM+owb4ETv7wTuLhxP1jd4RO/uB1e0fHWeMdiJ2
9gPf2z2ru6jZUH+G7A0tTVNL/Kk/gwx/Bhn+DDL8GWT4M8jwZ5DhzyDDn+G/
/TkKxg9/P7n1F0bsHAXyW764rO79ntg5ClxmnOppsfENsXMUJLx4vuKoojux
cxTs/nrS8doEW2LnKDCQ736yvNaa7s/gcHxtssEzT7o/g4z9GWTszzLsHCXD
zlEgY38GGfszyNifge7P4vMRPvxYvN/89GtG4g34vmf/4XlNXjISb4D6hAMX
pzq4MRJvgP7kiUm3FZ8yEm/A3RM2FjGVNxiJN8Bv/DQ1myYXabwBnU6+mBm3
yp3GGyAj3gAZ8YbAzshlxBsgI94AGfEGyIg34L/jjQxQ2+P0R3OnM/HnDFhX
4vJleW8n4s8Z0P2e2fcl2Y+IP2dA+rrMlANbHhJ/zoDRK8bFH/5zifhzBjSJ
mdTyfNJJGj9D7d5hJ9VLntD4GWTEzyAjfgYZ8TPIiJ9BRvwMMuJnkBE/A42f
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
loWQ79N+gWPRDi2ilwTxuAXrpQ8GzV1gbRtG/s5OKMCoXvW11rd5XQXXi2bh
kxFWf44Ari+c7wujgrs7bF5y+yBXt17TbdhPD/4+AsYP7epO6H46EqGFHL8f
UvpzefGc+XK87wjjAdqPhN/boRy/H0I5flfnv/uaMmS8l5oq4Pg9kP/+3TgZ
+qNk6AmVIS/5fimpa8GY7GZmH/JPA5EX9GvR78WR8Qg4/X4ama+A0++PEXsK
OO4DMp6XgOM6pRzjEMrRn9F/cL2gH+738XRPOePHEu4WqIbNKYNuz2+nn0su
4Ovoq5hvmFrzUWuO5HvXKP80YY3rjzeS9w7ixfxr+on+K+YmCvi65jN/BvWJ
FOj/fKzt2e1KPpJ+yGE5hSF/udYoJ8ua3lZA9agGx8xM/XvOUW46+nHcyZ3R
Al6pnNaktWWygI81vNxlSaLkO284r4qYAePuG+YK5N0mBy/Ori/k3Oj4vjkn
FpQJ4g3CBe+L4T6J6x3vfTD+76cytP3olDTG57Vu6y7n3sUCe/r8DNHbaJ0n
4EpXBk3sKJ8lsPPVOV2m2X9LEchrHsnUaO4ZK+CzFi72rOkXIuDmdzSOGovC
BfYZ/3Bq2ae6rwL+9Y33tSHX0gT8erfVzw/1zBbwhRbVAT6v8wV9bui3aB+c
V2KrMTURu0qZ8fMxa0IflrJ1Zj5P1ZqdZ08ClxbcuVykNWJ/r8n22b9hckSy
+f85rpeh4Z+OVbreAjf97IDWhW/43+VpH/LbJuGIvpaumbavW4sLbPun1QmH
LQtZl0nBa31nfwXkLhsYG1qfw7Sufa0a1DQBtop5WVX3Jzk7M5irQdOjekOS
QAf1dGvSYeLLJHa98vAzx9JvsEbMyxd8zna8EsWGLPsWopmbBivEvOJ3n82D
Y/zYqy1fTg8ekgWbxLxoTsDWTt6+EL5qW4x522jYhvynZq6NYhRsUbZ48/lY
MOwV803B+h1H9EuCy3Yvmr266gNmYl46L6SPQZ8MuHuyzLxr/mtYKuaOr7do
P3+bA/rl+fu1Dz6DXI+UNsU2z5jDlSHt5faWgl7TkkZWvlvghMPbEI/RV/j3
4i6cqcn/fO0r53geDe27VXHsyATO8dxZ6lP468HfcT0TczxfEmvWD7p6/xvn
eI6cWakQ5LA3DV6J+RbxeWFd1f1UVFkGuIo5rsefzRc0XjY/jz93XI9ze+10
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
7J3naiu5RxN//2faxJE9tk96CDLGyfWT+YKM+YIMu3FO7Mx5myPPF2p45cPD
oJcHTK5K+tOmJXvfa7arEva3V/dcUSm5Vx0U2mnZia550H77aetZxyRxwgGF
M2ty18TCxo41Pln9bTmvnVO/OD1QUVtrlv3ro43tuB6DDUFu8Toq2l3Smy7a
++Ih53N0lFuZ7vsNE5c21fNaxfg47fQ9OkXPyYdU1XVlXeQlfWs+fbKctpRU
wtORwy6PtJbck9br38pWMy0D7fOJeqdmSt5rmDnrdUlEi3JQ3rk3vuVwSX53
umnAoMZty8HiZiOftI4SXnZvfYtEjQpok9X7es+hknvqqxPOLX/7vgJ2TbDX
69Bc0kd0qXdd+PqeOSBKftLypHk4t4P6ts89/6Snw8KDjbKt90vuR0LHXvmx
+EE9GGydDbl1L7geIg8y5Pl8B9ZXbhm54w/M+vxiw1obV87Vzsy/k7Y1G/wv
VW8pWiTZB3I8Ew63OvQL4pxcP92Q+8Tl78cGl/WFCthc/bFldqyk/4fYB2TY
U5b9OT+8f1aKf5KwLvG6y4KrPXsVC9775n9nqnvr7NtZkv4BUeU91+L0QsH7
4IauAzv1/Rsv0PfBdy4yH/dmZa7gffBtBVdGXhqTLfiuTu+U9tfUrmUK3mvG
72q2MXBKCG4dyGTYk4/T6ufQTXFeaYLvBuB39YOrRt6dM/+mgN9uaZz3dvZN
/rzw71DMbXyudRflx1w//t26j2W909pcsxPw08P843It7bj98e/QPeiUbuz2
wYZR3sgzrdfR9zYgY/wgwz4gwz6SOFx6X+X6if25vOmSR7eOrfrFOcrLVfv5
ahb/ENSLyPPlevTqlPUUz30X1E/wO5OHtUdpzFCW3LMQ/+F8jru22qK0SkG9
hfghl58eMsa8v3eFoA5D/Blk+D/XQ9YLlyf6Jfun9Dg5x+8aXXq87uiaDpJ6
FLEP58T+TIb9OR9hd/vo5ePlMKe8w9Yd7STrlOwnnCd37XDOa18FLB0RtfRG
Pwk3u/VYZ6JLAZz6fs/UxUyyfqMTDh5VgEroczHnvd1Eyfd5YnVfjRgyLA/K
bdrkbBVJzqM1OwZ4W5t+h21HyzJNvCXzIvshl59kqh0u/zwKrhjMSH5veJdz
sq9K9v/MXX3V78pp6w2qaj1KxYlzv6XFDz46KWrH5slPWDhCsh6nvdh30ElJ
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
96Ga33iyosOqqsMymamxBfOdp9a/Rq6zC5hYJbtEXxnBxe/GXXne6rJBJuu8
U3/1rfPq+Hq3Mk7/npDJ5tZq7HvVVr2/QOiZhF7g/c+dv7X4Xzk/qW3jbPj/
fP96XFCblA/lMkW8IMHFOA0yLpXdOSSLhfTW2LzcTs3zr9l4tUX0vEx2ZkA5
s401V4txrlXo+fLW7EzW6KiFbpWz6nwILuiHBz0Y8O7fcazGfj28RWu1oN8y
p7LOx39/13rXisPtbdX9ldXXZHGxzB+QxcuyPLksHpf5t7K4XlY3lOUNZP6P
LJ8gqwvI8hUyP1+W95D5RTI/SpZXkdkpWZ1LFtfI6mX/q92X+Q+yuoasjimr
F8v8Cpkdl9l9WV1PVk+R+Scyf0Dm58jqMrK8kMy/lfnDsryTrL4jy4fL/BlZ
HVlWZ5flqWR+uCx/JasryfLzsvhUlreX9QPI8l2yOFdWF5bVuWT1AllcLKsj
yPoWZHkzWX1N5kfJ4nGZ3yKrg8vsuMyvkNXNZX6RLA8g8/dk/qGsnijzo/5X
v1GWl5D5dbI+AZlfIcsvyfpJZHkAWT1OVh+X1SNkeS1ZXUOWZ5P1ycjyHrI6
o6wfQFZ/keX3ZHUcWb5R1p8gq5PK4ndZvVWWz5T1z/yvcbQszyDrB5PlK2R9
ZbI8iSwfIsufyPpMZPV6WR5blpeT5cNldX9ZHkOWB5D1Icjq9bL+BFl9U5aH
lNVJZX2Dsv43Wd5D1p8g68eQ9Y/J6iCyerGsT1LWXyGrv8j6NGR9JrK+OFk9
SFZnl/V/yvpJZP1gsvyJrG4ly1fI+gBleQNZXC/rM5TlT2T1OFm+SJZfkuVJ
ZH13/2teS1ZPlOWLZH2YsvyMLK6X5RNkeQxZ3kCWf5DlSWT5HFm+RZYnkdVn
ZfklWR5SlreU1YtldSVZHVnWhyarX8vqCLI6uCwfK6uzy+prsvq7rB9PVveX
1Udk/QOyPLOsD0FWZ5T1H8r6tWR9ibI+ClmdSNaPIeszl/Vdy+qqsv40WX+m
rM9EVi+T9avI+udlfXSyerGsH0/Wpyrrr5bVoWT9sbK6oazPVtanJKuPy/rJ
ZXV2Wd+vrG9KVj+V3ZuQ9WvJ6r+yPi5Zv7SsT0zWR/G/9mPI+uVkfd2y/lJZ
HVx2n+J/7T+R9enJ+tJl/Sqy+wuyvhpZ36Csr15Wd5b128vq0bL+Xlmfv+y+
hqyPSNY/KbtnJLsvI+tfkvUzy+4vyPpCZX0asv5S2b0q2f0gWV+WrH9bdi9D
1jf7v/alyPpsZfViWX+vrG9N1vcru4ci6zeW9eHI+pZldXBZX7Ssf0/WLy27
dyPrx5b1F8n6uv/Xur+sb1xWl5TVSWX1WVn9VFZ/LNqnMj6Y//1rN1cZO6Zx
+dDywfuHIy9oXt93Pl3goLdwcz6W3zWdn5Nf4r3E8qf/9Kz4IkPgoG9XyafL
7S0ZTPvvfnwX9Lqfq79fNzJT4KBfUaFm7Wa1M5khpwO9pXnTnB2fVRz0O872
3P4zLpNd4vIEeq8Bo2y3H8xkU/j5B/2ETrusHbpksIXc7gD/0DC924EBT9kN
7seL/bVqv7hSnVg2lOd5gJt6GQ57cS5OKVs0f/E99wl5D1tF2R/3Bg76it5O
d3eNjFSeFPFH0EfUuVtDq4KdN3DQb1mSemLFjlDFqIj/5qBfVCdpwKlUG2/g
oF8/Xal578ATZWPR/gp6p4E9NTaYbfcGDvpPty8t+yfFX4E84Dxq3ek0d1o1
VR6AP0s65ddHSRP7C3z35tbH7Rur+wt8Y2flqvfbDLFfwH+vmLM5MUHdF+Cf
Kg67UfuWui/AHxV6Dx8w/63YF+Bzn0dWuumfK/YF+I42TlqZC76KfQHu3Wf0
cjfLJMF/4GNZ5Ixw7VjBZ+AuL5e+me4YJfgJPNpibWzmg9eCb9DDEaNb1f21
KFXwDXjT5znJnxqrfAN+Oal5Zev76YJvwJ9tGb/qxh6Vb8DXJDx6sC5F5Rvw
ct+6G8zunSn4Blz32OUtDg2+CL4BX956wZHjSzTMwTfgRjEHGs8OLeUDvgE/
v3iHw4xeeYJvwN91PfFqSGG64Bvw7tdWvdRaFy/4Brz83tVf0ivHCr7BLi/7
dapdm6Mpgm/Ay8ZWy/KwShV8A173fnubqJYq34BPnPP564oGKt+AF/aeOrNq
pso34L///OdP5RtwbY3//GUJuQLeZO3Vyo8Lygr+AA+bPnz//uu/BX+Ar517
4PU693zBH+B7Vkxp1udPhuAP8JlhKaM3T04lchWu7Lv0zzvd2clErsKVtMJZ
vRxHpBC5ClcOHzo7+dycNCJX4YpbdP3h3+zSiVyFK+l735069JXKVbgS9XHi
s6QdWUSuwpXyjSPX1nT5RuRK9Q+Ly5WaVy8uV+HKmjb5tRrf0PYpLlfhimY1
t7StTzV8istVuNKuYXjU4JR8Ilfhyj9vCofmds0jfPNTNK3du5hNSCT88VPe
ZzzLViqkEj74KcMGZjed8IfywU9p1qfGvrpzswkf/JSBPa+PXzFV07w4H/wk
fFDrJsXX5ad8LNPHUvdEKR/8bvxfPMfsQ6CJbUuDNPG7URyn4wPH+IQP7N6F
6+Wev3+iED4wlwtJrZ8VPlIIH1hosF/BoKojKB9Y/PTK1h8z/CkfmIQPTMIH
JuEDAx+I/LN5o+u2z5z8SCHyz+zc7mxecPA+WVc4WxV7xmJzQw+FyD873b5i
maY1r5P1hrOKHS9FXSlvJfwH4KZX8x4lBlym54I5b5oSM+PqPXoumORcSPig
9pOQc8Ek54JJzgWTnAtGzwXyYJ3OVFlzO8ZDIfqWXdxsWtk7/5ZC9C0z6/69
mnXcFYXoW/Z7bo0rUzTOK0TfsjY7vb1i604S/ASu3TFyUtOq56geZv9sdesX
OekW1cNMooeZRA8ziR5mEj3MJHqY/d96OJb1flyq48nuV4kcxrKBGx13Xr9/
mchhLLs2anW/3rWciBzGMqMLg2bur3WCyGEsK7DWWn04eQSRw1g2+nAHS9Me
R6jdZz+Wt9laIeMStftMYveZxO4zid1nErvPJHafSew+o3YfefLd2940CbI9
qxA/k502qVXwfvdphfiZbFTQuhd3DjooxM9kZpOSF75sdUAhfib7VLOHfce9
fQU/gde3Pfdh2N491P9kJ+tdeBxsf4r6n0zifzKJ/8kk/ieT+J9M4n8yif/J
qP+JusmScbdy7ZNsFRKvsSeLtrj2a7RXIXEZy28e0kHrzTaFxF9sZ7e5N2Iv
b1BInMUKZkZ+3fOwveAncP/zH6YmzF5D4yx2+uOIcWG999A4i0niLCaJsxiN
s4DTeAo4jZuA0/gIOI2DeNzE2tk5PtVqNtibxMXMa0bpW6ZzB3iT+JeV0789
/unQXt4kzmWpB/IMEj929SbxLHN52HpyeMvcHiRuZY7VvCxvPDI1Az+BjzV+
es1of38z8BP4lsBq85s67TQD34B/urd22PvK571JfMrKVKnTwvDWEW8ShzLE
oSTeZIg3wZ/hxw5+C85NU5obf+vwJECNEzvfXzwmcV2GsqqPW1rUDjU/MIzT
Gyyr/H32WTVOBP2SzmWsIizUuB70dfqP+umc8d/j9zkcf8flCnwA3oTID+bf
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
SHxaYhzI59NLJtraXUr7kDidIU4X93C53NbvGLVk/rhChdyPY3mtjrcaY3GC
vgfFavH3Ycg9O6ZR99jNS8oxEtd/ZD90fU94zb5O8xsM+Q3MB+dl75+5n+oH
ZivkfiJ7nBFheLKTnfQdS3LPkXlaax5wMDhA9Rurp1NmxuF/nGleiCEvhPng
PPbo/CHx3ZZ4cv8uie1s6Xdqn+426TuQ5N4ou3KusnPVmluofmbz3a//Gup/
mOorRvUVziONT3EeEf+SeFmh8TL9/iD0CeTKpuziXLcuz8g72EFMI8HTakvZ
QaTvNIgVrLg75XbLa+QdrQD2KXfs75Pu7QU/0X9e+Vk1y5s3HgocdlDDsfz8
xKZXBc71OTNZ/6DOuIe3yXun7sy8fO1W1TVMBd9Av97n3q0PNn7CjrvebnXb
dE4mczcdru/Ydo6aB3428OflF37KtC4rTed6qvHgeutzoecCfNmeLRojP7wK
E7iHwb5TM3TCmW9btytxH56o90a9G20+diBVGXY0qd8VH/W+c/8xu2cN/Zmg
6L9ffSDokNp/a5uWMqjM/Fhld8KCZYsOqX2nZ3VOWa29+U4ptXCj+ejoZIE3
MZ3WNmFvuJK1ddyCFi5qH2bzzwHBec3fsYweTh7x6d4CHzFBY2vvJrEs1Cv+
dv3V6jsJ+n5nTtreT2DvS29MjL/rIvCLeuNylvdNVk69yHu7yVidZ9K5e1FN
PeIVjSFv1u8rq86zVec6yqd6n5RrDfcZtmumzvOL46+BrQ3fKKcO5P8ZcFXt
U40+adO6a3aQ4lRXv127jDSBZw95p9U+5TnrFdG4zOHGLwSeMGBmUg/vj+z3
3G2jqo24J3DXCiEV5i6LZ+PGZZ2Oa+Wm9j8szyv38E26MnmY7/RAK5X/bzKN
7JsP91DGjXbrMTZazbMtXdvkzrUTkSzSscOljs/9BD5/9cLGt7SS2eXsa2ap
L50EbvJRr+ePI+ksbsY4v7OxO0neIFWZf09PcwxLJH5LguJWf+vMJlVUviHP
vL6l99h51ZPJOO+UgLm1X1y0SiH04cqrmJB697ulEdxPaW37OaXs9EyKsz91
mtc6cyWMjsPsrQ3Kfnv0hP4uuz5+w+JB/t50nmzYpkP+c0bcputimuYjR/ks
VuUH5/p2mU6bzHZtEDj81WPlOjcYG6vuC/zSqlWV/QsvqHyD/+mZN3vNof0q
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
k0O7fPHCbl2m+C4rsOq0/fo2n1hsa5Ilye68mNVozP1DLe359sv56vPHhFjt
9JuL72E3p5Yv7eyEnR08yk5b99puXQofata0jv8Du3On/4mudyK2ZtjZD71n
LVwx8bA936aCHq0nXUGPtjfIBy2f92YFeRQ8bJ/n/PjtS6cLkfb75dL5IWGV
2qTb6YcPW3J5rewcb3duLp0/b27dAcl258VOrJf2y6rFlF1ReMUTu32RB+uu
98VijK/PBafAV2t7LrD3y7JBp9b/7uCzlueZkAd97keBD9ofbFSl/JtshzQ7
/XYffNbn1GeQB33OxoH/2g91g9zq86gG+Kb3727Iod6PpNMuPgC+6XPBf8Ln
m/vXsre7Nv1wrHz3mvbnoJncmsm5GZ1mfDCTczM9YLZeZvvCbB3N5MpMfvpg
vlp/mukHs31nqmdM9pHZPjXTh/9feTBbdzN9YrZPzeTZbN+Z6T0z/WCml8z0
jNl+NNPbZvvOTM+YnV9m54vZeWR2fpnpWzP9Y7avWaeU388pHjR/gksy3utl
i3+aGf/jcbeSKXzvLHiLD6Mfn7hsk762UrcB97aomy19APNVqBkd43bF4oM6
WsRn7394+kJWJHHpB+FUt+22sfuSjI/vvD6IPzXML7Zqcvxzoyr6uRPPu/WG
T1yGzciPPh3if/k/qVujZprFCf1Aie8vvDtmbr9HUudH3mU8HfN+2BW+V80j
+LzcVTetTUnC72bn+Okn58acqvEc76EyBG8VVaBx1NQUvKdIF7xn9MZ7Ew6w
f4R9ni3lXr9D6abuQVxwD4I+JtLPLuSYe/ObzRPxrjOv4BsyjmS+exAnfJZ+
ECV85969nih8Jp7q32CgZ3Cy8FnqnLzqtjQyf6rwWfpHrNk9MOyfPKHkM/HS
iyLcU0q8RB1++/trL3VP2gH3pN+Z5BtzHMnPxHtPjkO8ixpHn0fkA/VGi7yl
EjvmC0Nf7Q/id3f8I6lm7glBqOtuy+lf4DZmZvekDtKXXerFLf6u6K6yxyg/
Uj/Ntn9sq/Mt3kkdUeqxyxszMl38T1I+BT8S5bhkSoFgqadNvP/wJSu2jjuK
vuAZgifV+qpZ2g/7pJ629PN6tm3wtcorcM+Vk1dfDnn1o1VeDe+1v1P3mJQ3
1rHk+E6+Px0f3vO17GviDsFF4wq1Sxd5k/pmbXvXaVXhkPCZeNaDyVWtB3YK
n4lfWT/c9fmt3qiH9jinr8GOPrOXOmwXPhM/t7H6VYuvVfjMcyf38L3DWr7f
LXwmvif3j2P+erFT+Cz5Blnv3pV5FyB8Jj5opXfrxrXXCZ+J9/gr/Mxvs30t
P6n709W4P2VfbeInP3kXmXN/ugT3nuQzx3/5ym1N4rQnwmepC7eqd8SaK7EW
9EGWPgUVXZOqjg9YbUG/Y4n/LPXYMzbk2RKLC/hM/Eqb6KsebT0s6eCz3Bck
nD7e7uF8vNPPkHP/2oY1zr4zYi2O4D/x8vett24NvYI6P3mkTtrGada7//Wl
Qr8kiVN9tbrDg7DAWRb0XxZ8sm1Vtf/6UqGOkOCNpszP/6Lbj5ZDOG+I+92e
kad8i/7s6yT11qYV8e36Xz8m1i/iuVO1S91DkV5xRhz0AvVkBOqcB+F7ibd7
bB83dE428vPjc/L8i1098OXGVHnPrvvUPMf4/L4j6r2zLxXtkGku+eoMaXRN
5JP48KLPh5RYdsUSinUk3rbMdofUO+dFPolH3x0UWOVZmKUs1pf4/kONak4L
HCL0E/cpfzarYq8TRiTolnH8Xp+L8L6PetThYi/tQN+BY+CPtqOKQE7s4gCQ
E+Kxtn5lFyQWoh4WvCn6DqTid6lPaqNPxFH8LvE+Ma3SxrcpJL9L/NmKhNBt
C/LIONwvg9HnguMQn/Bs/PxTN98YHEf6AMaO67jXIc1yh3mrlNtRRff9vGCv
8TfGId4ddbG+xDjEDfQL43xpj5W618n/SYcTlsGQH923i3W9KLcDqm8LGPh3
Auq0ZIg8B2M/7sf/U27XB63xDHVJNQZgfN2v6hTGlzrkkzzfrTqaaBTF+MQf
r5m9oaPLG9R/+CA461WOQVxO+m2hbh7lnPL/ZHjfz5wvW8W+Ev+owh6ftf8m
Gsx/1v1nLZB/ft91+aL0vtlJtEMEf1opMS5X9+cG85M5jhf6TJXBvpD6bEVL
1/dIsxln8R3x7Pqta/747XORB+LBbjGZT4IKhOL8Epx1ZZk/zN9difgk5Z/f
x8MeoDwQT0ddWeb9cpwmyPuNwN+U8zMJp0Y1Kn0G9VLiBW+7MvIHz/DtBuWK
53gM+hmRfn5fFnXOST+/P4J15O9yX1R03jTnxJIjMo70a0B9e8oDz7V1qIv4
C+SB+6JPm4DEbSfmWMIxDvEpcy5MPnvjLOVH9Hkj7JeO6p46EPfUvdU7C9ZB
TQb9tP/LO25rOf21lfpQ/IUe0ANu3p/ed9/AfXdf9c7CincWHJ92r+v1Fg6/
RybJ+MQbQV/1MYnH0l6S/i8D3nRs/foJ+Sz3RE4XW133vm2Fv2YTPG30v8V7
OaQKPfI+YuyIGkd908kXOz+X9ryOb9C+In4deru196f5A18jf6CPSdw7EfSI
Xe0ZaVtaJBJ1Oez9d64v5dAPeQVcX+Lx4D/XS/pDId+A60W8NuRhN/6m3VIG
9sB45F1Tfq4j73oYcK57NPLSvYBzHSPwXqybetdQBO8a+D3xS/iev8t5PcL4
/F3ST3oO4/e4L24ELd9TPcDf4LqQnj3IG1mh3uXF4V2eg0ldVpt6D1IZ70Hu
qnccffCOI8bkncUL9T4iHe8jCqh3EEfxDmKVer8wCe8X4F+LnFyEHo5Ref4H
kY8dq/LeuyM//C34wnXv+tukn/os2WKcVHmngcgTpl6lfrOkXHfc0HS5nKcc
fyT6l9Eu0nEh6km7984m8cOZJn1LYW8LPnhGzfAEz+eoe5Yh99Fp25dZZn1t
M2D/S/ynf+spXxS7eYb+gtghJaFX+buU/zzHm3oNKZXzu8QvWDeGt7ckG9Db
oocX+tZbv9I1Regh/us3ln0hd1MMR+gr4llTRvkmxNvwDjde8PCtfw/2Tcmh
n7iHcWvYtXyP6V/k9BuNmnh76JY7Mi/itzv98th28ib9FIkvbfIfF9V/ULLQ
SXygn9+hXPtSDI5D/JvxWbcXVogV/lAPTPqwsUH9tc+EP8QLPi6VenREkvCH
uNOJhr/dqZOzXlJHdNSjV1Oq5PCHeGY7z+ElbTn8kb6is21r+xmpwh/i3l7L
bk4PfC38IT5vyuCv2menCH+Ie1595uE7KEn4w3MqauLLPy4EPhM6iUdM3B53
9OJz4Y+8a6hXr0FUapqMQ3luuH5uxPipVhmHePcNVxdVXJEs8yJee1Vo+5+i
c+ZFvHKXrIlXxhUI5e8SL/7b+uj/qo9xXagHmm0u8fOx+0eFHuK7fZsUD3l9
hPaGnC9tWmSU8nmy10I6iecaXWbv4Fw7LFwX4oXnhwQ/dhog9BN3aHxrQM2S
AUI/8RlqXSQfRq0L8ZFqXRjfqD7dISGswH6hk/jIz671rtx9i4wj/dNfFS9+
+Punwh/qq5Vzbte4uHSrjE/8T5dybx8s3CT8Id7/4vRLx39fLb9LvPOAxLFR
dZcJf4gvL9tyZePFHYQ/xF2XBsR0X7xI+CPjq31N/LDa18Qfqn1Nfb53RNDd
qwtXCp3E40PuJncaP0/GIb5wV93Jf7pcEv7Qn+r2bmPuKZNz9BvxgzNGxXYZ
mbNPif9vUA3PkCSb8VD5a57w1woqf+0k/DXOl3ixXp3Ktb/4r9BJ3A9xctKp
4+ThJnFyR5M4ubOKh/+FeDjHp39X+qxrRKGaSaLfdDycv0v8+PF1ky8vz9Fv
Oh5OeohnpRyv97/XOXwj7gU/tKDyQ5Pgh55Tfmgo/FDOi3iFMsXfnQ1OEH6K
X4x4OOer4+HhJvFwR5N4uLOKe5dE3Humif/rqPzfZPi/4crP7QI/N5+Jn+uo
/Nly8GfJT+L5vv7ozxZU/mwo7Khzyp89DH/WWfmtVvitvyq/NRV+K+dLv3Lk
gX3TVnuckH1K/DDi25wv8VNf/7Fjw3dHZP8ST0B8m/OV+ngvVkVPH9ZE9Azx
rvB/zyk/tyT8XM6L+OKZeU+5BLyUeRHPhzg250W9GoY4driKY79HHNtRxbF7
II7trOLVZxCv5vhSf8+/94fMuF3CN+K7Ea/m7xLPOpbcybnGFuGb1E9AvJr0
SLx63S+TtzYpZtml7NvzsG8fKn+/NPz9c8rfrwp/n/Mi/n3frF7RLx4JP4mv
RLya85W4MeLV4SpePRfxakcVr26GeDV/l3hpxJ9nqjhDX8QZyE/i6xGX5u+K
P7W+V91jc2cIP4mPRFya9BD/3L1av8uDWgs/iVsRlx4Me4t4sPXqqEe3/YTP
xMPgxxVU8UMPxA/PqTjJWMRJyAfiqR7WIS/qWYT/xOvCzj+g4h6DEPd4qOIG
kYgbkH76X0XR54jjaP+9oPLXIqBn+D3XqxH8bn5PPBLn41jYQ/LOFHWBOA7t
/GGRt4odOv1C9IDuF8l5SR9GxH/4u8Q/x30xf5fnxQzU/+Hv0n726ZT+dP3j
/K35u7pPIn+XeFXEhfi9vkcgPfw+HfeqlGfavXl8Apu16pcg5wXxmJQLaZYi
SXIuiL3dJa1mv2ybwXnxd8+gjhDnpeNRpEf7p5Q34vfzth+Y/4/cQqe+V+W+
I14Ffc1IP/H2uG/lviNeDn3KKIdS/wd1fshnft8Z8SXOl9+noM4P56vjVO4m
dXvIBx3fIB/0PS/3HfE3OB+5f4kfxznLedH+r/BJ3bN7cq6NyW/xqbUlSOZF
PBrvpjkvjrMA8sl56TwrzovfXx/aw99/f5bIP/V2M7y/5vi0w0dg33F86fOL
uj0cn9+fbu8x+fBAq+WhisP0QRyG41BfVUbdHvJB1xNzV+/Ng/HenHyWeC/O
KY6j64NxHOLsz8VxuB8Lw37gOLquF8fReV/cF9Kfbuf+QpEPzon8Ez+401rv
QuY/os+JP8b+Ij1iP8DuJU5+FkbfK/KfevIk+E/9o++J+D312yXIA9eL8aIv
0F+GckL8EvoUU06IV8a9GPlD3AP9ichPnQ/D8YnnQX4Cceqfb5Hv4W6SN+Ju
kgfiru7f/XD//h7fSZ2KmX6dGhY+bRCnXHngPpE4+XkL98jEJe+rnEP9VZm3
BZf7AtxvEqf89MB9MXHO61bSl43LLs7xy3SfeupP4kvQj57rrvvOc3zia3DP
S7nS9wLUb8RdcW9LeqT+D+6vSY/UKcU9NemROma4jybO9YpcviprwVdHhE65
1wadxPl9LPhD+rU+J/3EG4N+jkP97K74T/3ZQK0X9ec8tb7cp3eUPFBPjlby
I++hlLxxX69F33PuL+q9irCjiFMO2yBvgfqH8/0Z+QbUP8Q7IK/AUeUP1D74
MX+A+1Tq06KvK/UDv7+K/AHuU34fo85ffQ9FXOcVcJ9qOaS+0utL/Sn1AHFv
RXrIz9OwJ4lTftyhT4jzPEqGfiM/Sc9Z3NORn/qezlHd06Xjno7063mRfuln
BPq5v0jnz2fqfDsy6IzsL7lXOnipzBa3INGrUu8L+XLcF1LvS8VXiVdEfJV8
4L64pOxG7ot2uN/k9xIXVXqb+2K2sqslTwP+CL/nvghD3hS/57rUx/nC+eq+
isR1fSHiut8icd0nkbjOY6T8kw8huJfn+kofNPhxjiqfsP43H/MJiZP/Uf+G
v+1asqfoAc63M/JPyB/S3xB2GnHSfwP2IfeRzsMnndLXFfkznK+8N0R9Eupn
4rlRz4TjSz8C2FEcn+vbHHk1HJ/rux35csQl/lArJGxk0A7BuX8TUT+E9BA/
gHojpIf4ediHxMk31pkkrvPzOT755pfUxPnB6H2y7pQH16WPnhUcmhN/4zrm
dqxVbvPeq4JTDvdXnj28Rgmr4LQT/vGqcOnPEc8E5z460Hfm+K6nQwQn3/K1
/r5X6Pg9si9If3vsR3eVP1wa+ZzuKs/TGTjH0feY/wff43p/
               "], {{{
                  EdgeForm[], 
                  Directive[
                   Specularity[
                    GrayLevel[1], 3], 
                   RGBColor[0.880722, 0.611041, 0.142051], Lighting -> 
                   "Neutral"], 
                  GraphicsGroup3DBox[
                   TagBox[{
                    Polygon3DBox[CompressedData["
1:eJxFnXe4FMXz9ffuzu7ezfFKFlAkCQiiSFIBA+aIYlZURMwBw9ecs6KYESSJ
ERMqoGIAFUQxISoqRsxZQEwo7/l4+ve8f+zTtTXdPT0zPd0VTtW0P/zEvU6I
x2KxTDYWS6i8rRiLVVT2K8ViTzXEYivErKu8MxeLpcTvrHrFKBa7Xvxu4t+s
8lB10FN0x2QsdoGONeg3TfUzqn9fPhZ7QL/eOj5dvGdV93O1uUDH5utEj4vf
VuV2hVhsE9FTVCeh9ps2uP355Visu+g21VjsTbX9Xm3vFP9N8X4Q3VrlQvG/
Fj1W/Gf0/xvR14veUNfyo/raQOV7NfWrcXRuisUWhbaTYr6OVfq/sX4jda6u
Kpfo2gfp5Nfo2GCVJ6p9S/6r7Krrb652D6qvlyo+1wuqX9Z5xiV8DfPEn8mY
Vb6nPgeIniS6uY4/qt9QtT9c1ztT9GEqp6j9SvFWq2yra3lA/H3V5nudq5/4
O6s8sGD+/iqrKmfot42Ofas2O6vuLioP0bGHxD9I5Vnq50HR26pOUeX9+vUV
HalspWM7qs1TuoYdVO6o/muR6T6qc7GOz1K9YaIni/+66NGiV6nfbjp2hNpN
1flWifeHypHiP6E6R6i8UMcfF723jrVW+Zh+e4m+S/dhqPr/WvXP0PkuFO8L
9XOyeLNV5x/9P6Fg+iiVH6j+QB2brPv2pOZEVx3fWu1KObeljyk61xLVP07/
c+KfpPIk8b9Sm+117Gn1sSJj+guVx4q/reg54n8nehfRL4p+nnsp+kSuUWN6
S+dtpvJmHXtd9HjR4xt1n1XnvbSuJfL8YQ5O1PkeUrs1qlPWHH1JY2+rOTah
0f0vU/3nde5houepfE7thog+QW1WVEw/ofM8y1wTfbz416ivrPreXH0t1bk6
xD2ORRm/i6+ovIHr53o1J6/Pei7/qnZtc+Zz/Db9b676R6jOi+rrNdHjsn6H
eJfe0P/hGsNq1Z+m59I+7jnK/Dynwc89wfup62qhY5donPepf11ebF/1fZH+
99fx5Wo7S/1MEZ1U+bnetZaqf6mOT1L5pvo5lnOIfjvha3xC9SapfoJ3Rb//
ife9xvmo6PHir1Pb6aq/NOF7NVv8aeKnVX6g860v3lYqu+l6Wop+VOO5R/Xf
Sfg5PsizEn2y6Hs0ZnUd662694v/bsJz5V3dx2Wi31M5UefbTP2/rz531T1/
X/yc/j+u801U2aDyEZ1jc9YK9XO76qQitzk8bj7rwh+69o76f6v6O0flw+pn
O/FH6/6fpzrnqo8uatdVv9/FP0Jj+1PlXzreWbxO+q3R/5ENrkedS0RvIvpQ
0RcE/sGiRzGWQF8kupvoQ0SPV19/sMao76ci1+E/fXOO81X39oLrU4e+e0Ye
x5biH6BxT9U4J4jeVPyRqjM6jIE6hze4rwNFX9bgOofxvnM/9LtCvLkqe+n3
l/gTCy7ph/d78yi87yp/0f+3Vf87HbtG5aU677ENbsv1si7Vw9p0h57Ndzw3
PYv3Ncaf1fZB/V9UcT+v6PgropczJpUfqVwj/jMxn4M6vKtfBH4HlZ+pn5Wi
HxH/c9GrRc9l/uucOf2+Vp031ddv4i9WuZXG+YaOz9UcOFvXtUr8DTXmj1T3
O7X/TPWvFu8Q0d+Kfk1tflI5QOWX4v2uY181uO4fop/jGkX/KfoHxq25eLno
3irvjcx/m7VP5zpY9e7WuWZGvi+s1Ydqnm2odm+oPCzn+fKn6v6gun+p7Wv6
f1rk6+V+/CT+36JfF3+PBu8XP4tervGNUNlN73ob1W+l33E6fqPqv8TarmOD
RD8j+kLxd8j6/PvoXHfFva7xnk6h1P/tGry2wb9U9DGqd7HK8zX+u+Nec3lP
jxX/cvEvFH9y6J/1fGrcayJrBWv2PNFXqt4Tqre1yoE6/wD9Oun4burjcfG3
F3+W7sEjFc/xX3RP7mQfCOvP5fo/RPwNdY1/id9dv630/9+416tt2Kc5v+ht
mYOqN0jlJ5pXj6rfDupjP51nmvoZrbK7FsIry273hd774zWOq0VfomM3qI8X
1NfhYU9ivXlP/B/V116qswzZR/e4WeR9Nq9+ThT/I/HXE69Jvx/DO7W+fmtp
X/FaMlDj+oA5z/5f8zvXOtR5ItA8S/puzvrAPlpyfdo9pL3pKN4b7U3n6lgH
1TlI/28pmD5U1/p01nMkEm+ZruWnhPeVcfo/X/TRqvOW6DNU/02V7VS2jbyX
fFzxfNlK47xRx8boHNvr2m8teG2j/4u456p/go5111w/UP97qHwv8jv5XoPf
c973L3WND4q/TuftJP7Jed+bEVrUf8t6v9pX5ZIgmyGj3aH72Vn9jFf5QNZr
wD9qVy36XNPyXjc+QObROCch+4l/p8qPwrxifr2j824k/gzW4YTXRtaXt8O+
w/5zpPr6WvTDuq6SrnH9uGW210SfqvaLVW6hc32sdq+qfIM9UnSpHot9Gnm/
4P+SgtePh7Jeh1iPVuj/Iep/hfq/W/3H9Bxv5DnqnpytsU4VfZ54+YLluq3U
dpz6LIq+jvmg9gXRl7PO6DrLos9RuysjjxOZEMG/jejNRA7NutxL/U1LWF78
i3VJbf9Q2RtZQPewh+ofxbusvo5T2V/vwnK1uUT9fqjyzoTfqz+ZX2rzkXgb
qc5a8VeK9yt9qt2nOlcv9AP90EMmIv8XvO4+xVjE1zSNbcN9VT/vq9xQ/dwW
5O3fVG9Y1rIwsvGLui9z1Uc33dtYwWveDB2v004nOBJa7TaIWy6tFCz3DBf/
LP0uE+9ftX9b13WPzt1P5zoXGVH8a3WfL9Z5b1X7Ner3Uf1yyDmsUXqmv6Mn
qXxWY5igPm7RGNqwduj4R+I9r9/94rer+zmzB7D+fxPojg1es7+Pe90+T2P7
Me538Bm1vUNtN9B43lKfXZBLda53Sta9lmqMR1a9vqO/LNWvB+uq+F3E+1W/
FshYYQ/g3b5I1/Kz6PVEx4Ocg7yzRv101bvYV+c8V+NZEvc+u1DH3xLdSuUq
jeUc8XbMW2amznXibcyaq+On6vypIBMiGx6vcy2Ne/89S9fzCfuT2j0v+m3R
Y9V2bsb0MyoXlqzbjVPbfhnvqf3D3viN6mzE+q42Z6m/HdTPLZHnVpOOdcn6
moaq7/1y3t9eVrl5yXv3p7quJtU9O249BR2xLvrjINci305S/f7qZyPRO6uf
/ZmjomfmfM+ahft2c9ij2cOfzbvP/VXn9YL3+1tz3vOhn6V+zvt1B9Yw1VkR
97p0bsHX1RDWCtbAV0teB6GRTz5scH3an63zfkEd8a9AphC9mLVSv+aiWSpm
ZHzOB1Wuy7v+LTrwWsmyz206zy16XstE76vy3Mjzg7nRJe85/7DuwZ4a08no
hOI9I3oecpr4+4k+k/0VWZE9IcyxlI5toTKNrUC/zixbyMw67ze8yzrvXXoG
e2oscd3s9bJu1wzdTX0eE7c8/672qbWij1G5l+p+qzqPqzyh0ef9VAvD3epn
OGtGk3XGUeLfVrI8Ds1+8LD6Okr0Hqp3bKOv5RO1bdQ8f171titbvjwtbpnm
s7L15r00zvt0XafHfT2fl11novrfR339IN6zKp9U/2PE31d0AzIL+gAyDDJO
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
bHvsQ+JvrzpTsRmIvlh1fgr2B2yYM1T3TvGf0vuVVzlOv+3wG+l4CT+pxrZC
57pb/H1VZ7rGsr5+czWeuMYzQfy66p+rurmKfSoXswazx4uOqc5inWNH9GmN
Z3bZ/rUvdPzRsnWcT7g3dfs4j2BNK1sfQdd5vGxf2OeiZ5VtR8ZXdoPqb6vz
Tlb960VvI3qS6Ft5jnnr9Z8W7QM5VOd9tWa75ofi3c86rPr3iDdDdCT6YNW5
T/SpavtNzfWoD/9a8bdGrhV/D9HvaZwHiN5P9JeiR6B3il4h+jDRY0UPUf07
sVWyP+Y8htdrHg/jmoMMo3OtFm+86GPytm3eznwT/Zno20TvpLbTRN9bs1/l
C7W9S/xReduZv9X/o9EXSrZ3DRG9SLx3a+ZzfB9sTBrbIcgVvKc5139IdEr0
iJL7pX/oxTnrNftlrWOepnP1kC5wWNZ2MvzUGyH3ah7+o/LGsu26JfS8yH4d
fLmnqc/2+n9TweM/CLuLzjkZn7SOn4hPW8fPbPDecI72rgbkf5Up7c0l9DHs
QGr7idr2YZ3QOc5usC7zctp6EDbsG9RnC7AIKjfTL6M6/8PeUvBec6au4duy
bcz3V6y735uwjvq9+CdhG6xYvjtC/GOQP/S/LP5cdMyq/SDY5C+o2BeKv5j7
vELn2UJjOzZrW/vLOtd5yDHYNnW8pnqnN3jvu079D1D/f6ve+mX7x9aonFu2
vyuD7SJv3wE+hNbBh0a/+F7wweAbe0v9foT9oG67ZQsde1X/ByU1rpT1K/wk
yHj4StBn8cFny7Z3tg6++Ia42/K8kdM7hmufGGj8lIdVbKv/XufcImFZHT/N
tXH7/Jg3+HaQY/HvrEl7PszQc3kn77r4dp7UuS/ChtvkdYC2bco+b6dwLvzM
+JvRV0cgW2NbLXmd2Cj4blqU7av4VeUreV/fN7r2jpH5vLfoK4OCb/fKgv0F
F7DGqU4Mu7SKi/Q/LvpClUuQ71VnM52rv551o/i9Sz4OBgX8CX7eSL8sOnzw
+UK31D1PY4MTfWnB9CUFr9O0XRHORdtdsRWJ/gdfG/bOSvAvVD0G/IxvljyW
fBgn44Xu3GAdnTrot4wxq98H4Rqhx+eMYwGX08Dyq7IS2Sfxccl2nKUV28vB
qWAXxv5Q0G+56lxcsL2Q8d9TNgbl2rL1Z2TlQ8K95p6/q3t/XMVzGRzFgryf
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
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwtnXm8TeUXxs+999zhnH3O2Xufc4wRSiQpQ4OiCJVmaVCkQUWpfprnSXPR
oEEKIUNKJRKSBsnQiAY0j5o0Siqlfs/Xs//Yn/uu/Q773cN537We9ax1Wwwa
1vd/lalUavfaVCqtv4V8KpWvSqX6VqRSL+ZSqdU6HlGDrjr3bZBKvS15guSd
JK+TfKrknSV/rb5PSH5e8uWSe0l+SfJ+xVTqOQ28WeP+VE6lblD9/qp/Rf3P
0bl9VX+q2tap7ReqX676UyTfouu/qvI+qn8m7XMfxalURn3+Vv9uqn9G9TNL
nt92Ov+7+u+hNp9KvlzycslXqU03yc/pemfq3CEab4bGu0rjHazyN2EqdaDG
ymZTqWM11uU6xkr+WfN5Wv2vkDxR8gbJz0iONf5Mjfexxv1T8v7qv6PG6qr+
D0v+Rdd4QuO3Vp9rVN5D1/hA5T/UfqnqGxZSqc9V/5b67KMxD9D5tMZroXP3
qP1BGmdP1V2scwtU93mUSl2o8rMqf6f+gdpU6V56V7j+GI3/uNq31lgd6qVS
9dX+Mu5H8my1/1HtH9HYX+ncv2r/n+bfT3Ik+TK1naX7e0Ljt1a7P9T+ysD3
N405q3yN+uwn+QVdc6jaXKZzj0o+TfJu9NF4h2m8QO3n61lkNOZQlWvU7kmN
d7nud1MmlRqoc5dorPN1vRNV7qHyDNUfqP5/ary9de5G9T1F9z9A5b107j+V
N6l+uO4v1HiR7i8b+/rvq/8m9T9Gcqi57KU2r+laQzWHK1W+UH3fU/17muOV
mt83GrNK5Qqd+1DlbdU/pfH+VftTJKc1/uOq+03jHaT2Ezin8q86DpA8XnKl
yrW6xirJb0p+ReOdpHHaaD6NNFxbXTPWsVnyvqovqrxBbZ5S+9dV3yrn7/sO
1Z+j+rNUP1xyT8kv6R7OUttNOuao/dEp339az2Sw2lZrfk9ofkfpfU9SXTPJ
+2v+r9elUhvVfw+1eU3lnprjt6r/WL/nXnrWXdV+f8kbNdbn6v+urjdZ7Tvq
el9rjOP5faq+g8q7a7yNuv5sXX8PnftOfWol/6b2u2v8p9S3Wve/QvWLJD+v
ug6a3zWsG+rfSP3XqM10tV+k8c9V/xmazzMqn662M/n96Jih9mNVd6PKt6j/
oRrrOfX/QHJe46/R+Gt07nX1aa/3s0bte6l+lOoP0nwXq75W9XNUt0zXu13X
O1lt1qrNLjr3nso9VL5T7Y9TfSPV91D7WTrXRtetL3m4xlilcneNt0DlP9Xn
EfXtIXkh65XkRyUv1Hx2VvlHtW2l8Tro3FrJ+2usuyXvqvE/kVzWmMeo3Fb1
qyR3U/3tqv9V7+Rz3f/zqt+g8rkFv7+fdO4y3V9jyet0vc46972uMbbgdXiF
yg3Vf4Ge31q1Xa3fUBu9z5d0jeEa6yi+d36LJcucX6/2Z6r/gaqbpT4nafwL
dDyp+rXqf73quun+5usCf+n8j2p/pMZvrvqe6tNH5e/1Pq7j/Wm8H1Q/VON3
ktxd7T+TPFPzWsRc9TzbsFYXfb3fdb6X3v836n+86pZrbt+r/ffqN0XXW8ka
qvateWdq31n1I8pej3Ia/0ad+1fl/3S9R9V2c+D1lXvkXq9gDVL/GzSeTqUa
0kflVbqnfSVv1vXbs55oPot0vWqNMVvXulPzOUrlTar/kPelc6vVvqcGuUvy
brrmx3zLOtdJ5UHq/23a33Reci/JL0iuVJuZ6ttRx/uqO1D971X/EwM/r/+p
/n2VW6t9i0o/k1Yq367rN5Pcn31S7Y8NvJ4frvYvqPyXvonP9K6e07nNKk/S
NcdJrqf57qhn8ap+x4N5XprDTNU301GhvntLfkrlN/VeD1f5S/V5S+UfdNxT
6T31x4z3u1dUX8eayrNhvZNcUl07jZ/T81vNWGrfRvOZqnMXqP98zfdbzbde
xu35vddXeb6uebvk7dWmnsqv61y5wnN4Q+X66v+C/p6gcRer/9m63tUa+yLd
T1t9HwfqbxP1vVntv1V5Hz2fO/j96Nrj1P4T3X8z1f2kMXbWWIdqzkskT2JP
Ud27Gre72v+jvh3U/oOMv+8Ddf8fqvy65j1K8iC1+ZD9S0df9c+o7gb1zWW9
3z+s9nmVm+r4RfXHVeuaup9jdb330t5T2VsP07GM/uozV/fyGnuC+j6t8dpq
fg9IHsH+I7m15Gn6+6b63qpzj6g8V8dMyVdLnqfyMh3Pa6wLJS/P+Lvg+ziW
/URz7aZz36k8UvXdVR6p8VuqfrzGGKHyGN0D+tqbmncD3f8WfR+nqO2h6ECa
/32ab2eVL9C4j6q+J+uGxjta7dar/gTVt6r0mj9A5Xd0T21V/wbroto/pvZf
s/drzBkqV+l4irVYzyCt8hm6/muSV0quUfl0HVskfy15G5Vv0vvsLvlTjfe+
xttWz+QzXftSXXNd5D2SvfKMSu8nLXVPy1X+Tr/ll9X+1Rr9jnVckeyZV2vM
r3TdA9RmB7U5Xe3ba26NVa6uZ/3kel1vV51rlPf7P0/yFvU9E/0z9v7FPlZZ
z/rrcNXvrPYNdS7NOljpZ/5c1vs5e90GnatR3UXsoSr/kbd++jD6BLqEjmEa
f4LkSyv8mzyHNUvP8zdde2Dg9Xis6s9U3V86d2rg/fdGybvp+k3yfqY825A9
PuM9mb15hK65lPVV899Rcn3a1rM+e7XatmaNyFsHRxe/Ve2XqG4Ka0Clv8Gp
Kn+j+i5V1jnQp3N65xNUt63Ob4u+qHPbaLxVlV6f06ofqPnErIm6l+a6/nx0
H9X9rfupVP0A1c9Gh1Jdtc7fia6PDaDyXD2vZSp/r/I/av+V/r4o+QPN4RI9
32dV/77k39FFVX+1vokV6r+v5jNR8g4a81XV/6j6LZKf0z0OQjdWmxvV/yXJ
QyS/qutvZE1V+xUq11P5X/bbnO9lmc7dpfZZzfe0pH9K9/MC35DkBqoPeR7q
U1/lOpUfUrmB/j6hpm9rjN941urzsOS7NdYS1c/T/F9T3WI92+YqX6Pvc0nG
537KWZ9tzLeqPgfEtpmwne7UuddUv63ud2/JzTWPWj3/p7FxdP3v1L6v2h6u
Y13Ke1w7XXMKdpHKJ6v/Y/ymcy53UJ/Jqrte4zVW/Ttq+6nm11Xz3UbyLpLb
aPxnNMeFat9J19us+qnq00D1p+jcDHS1nMfiGoegY0o+nfY6t5PG6KNzgyV3
kfy4yu9Hlmeq3dca7wHde2/9vr/CPtP6cpTOF9FHUtYP0jpKFf4G1ql8n+Yz
QOUieo/6typ4P/1dz+Rglcfwflh/uGddb5b6DE302501n090/V7ofqr7Rv23
0/vdRvVt1L6FyodkbQtgE4Qa6x/1/0L1C1PW+U9TfT/aqr6s+o55r5+so5fq
+vM1brXkv9lj1f6Q2PbWVrurnvcl9qfmOn7OWP9El/9bYw4OrM/fLLmz+myr
Pk2xAauso1I/VOPtJbmZztfUs73cB3tT/Y9TfQ89w7FqO5A5aE6P6Hkdqbpl
qntM99tP8+8tuZHqY9a7wOWKSttU/SX/krINjy2/ve7pJ811J12jhco76Mho
r/tYbQ5S23013k4p33NO7S/XM6xjL1T7rprr0ehxKdvc2N7bqf+Paeu8r6rv
ZM1x1xrrP411/rbAv98lkguaz7Pqc3Laex6/j/F6ZqdW+xoPsSfr/harLq+6
l8rWadBt7tW55iqXdL2PJX8u+W2epfrtpOvV6dwHKa/H+6p8hspf6dr/qf0r
yXiLNF5K82ur9jW8L/Z51VfV+pvj2+uue/xS5RPR49V+EzoQtpuO61X+WPOb
pfpJutebVZ+Jbd+cr+vOw5YpGQ9hL/lN8jkau02Nv7eNeqY/qn1PXXcc9nfk
dY/1jzWGteZ+Pe8+kkepPF/9o9j6DHr7s5J/kNxD/R9U/5TKd4TWv9HDDwYP
wGZS+0NYx/U9DdR4L6LLBv59od9nNY/D1P8OXf8Xyfuzd0u+SPIZsb9PvtOf
1X6Yxr+B70fvphPYQMn2InvVRtVX6P7a6f7yab/DHpHX0lsDr/fv6/odVP+l
zg1U3UmSX9N4XVS/p+a3VvLONd7bO+la43Ufq9T2bI23Y2D95EOV1+rc/ep/
lq63Y42f189V3mPZa5/Vt3En+gc6tupK7IMa/zvdzz7qP1ptFqv//jwPyf9o
/huwjzRea433kPqs13h/qM1trL/8blTfXv0/0P2uzxuv+V5yN/UfozZL1PZq
PY+neZdgXao/Q/dwuca6QPfxruRV6ANqv53arFC5QdG2RUe1b6H5dY79bFrq
fVVI3qK/X1Yak5iBTqv6DyX/meATYAY8q6/AQ9ijstYnP5L8F31ztpdYY2/S
Nd5CZ0nbpkmpvCBrXWB9pfGP20OvzU/q/Kua73wwDLW/i8th0wa+/vvq30Rj
H6EjqvQe2Ig1X/1/QDcObB88rnFekLyu0tf7RW1WVvr5Riov1rmhGr+xxluk
8v2B26Jjtlb9jjp2UPlbnasE/8j5+fNN8G2wHqHPTEQH1LNvVPRawDfeUOXz
NJ+bVL5cbVejP2qMc9P+zU7UudPU5nt+++qzb7KeDau0DTAPDEXv9CWVM+gp
Zc8f3QGd6HY2YfU/Lm0duElsnA+8jzHAH6+T/JzqTkz7+a3PWZ/lHHX11P/8
ZD5NNde54Cwqn6M2c8AENd9zVP9kyt8/eOutzLXKmObF+o3tV2MbhTWsmb75
9WnbVKxPR6v+MNU3qvZvcpn6/E9/36nw93GWntnu6Ft54z9vgAkwjuqbYk8H
tnXnocPyLnRsX+FvErxwR93DRsntdDyktvN1/e3U/mud36FsDBcsdwY6HvqU
7nGc6uvUrqO+38F526JL1OZ/KreLjQU00bEsNAbSAl0qY2wE++sd8FFsSr2b
zTnbphuqjOnupj7/qnyLynGCN52r+tVVXpOvVf0Uyfdqft00v+GSp0q+D6yn
bH0f7PVvtb9a5XfZ87D3+EbyxkjWZIy5sAZfir6q8uN544/HgKdKPkDz660x
u2h8tpkdErymhe5vQYVt4pdCtwdLm64+/VT+EMxUdTfqeh+pPFnjr1T9C+o/
Rv0vU58HsfUk753oz8PZ57CX1f461U+XfL/q90M/zhk7ekzjH6f6K5Lnf7vq
u6r+esmPSX5Acg/Js/R8L9X30lrv6wE934q8f0t/qv9VKvfT/e+lNfKuGutj
J+tcX9U/rfpBvMu8scm5CaYHpg62/hC/2ZzrwfvAcMFy9w63/oRSLRJ7lXWH
9eeytPfzbYrGZ8Fpt9Pz3UvPY5eMdUR0RTBnsOeHJb+Dbadz+6n/URpnCPsV
+6PqW6pdnfoP1Zy7am8YXWf8i+9vHvPTNc7OGmMFa52m8d7L+f5m8+w035NZ
EwPrYk/q3EDVnZA3fjpT8ol5Y5pgm73UP1Dby3V/Y1U/km9B8+mkZze92r8H
fhdzdH9X1djnsSDyeIyNzncMGLXOdaywDnJf6Dkz9y51xvKOzxube5xnqnL3
nLGCGZL7Sz5L/W9BH1N5h3puTx2YwtEa/1w9r27qf6TKgzW/dkX/1h/R0Ul9
x+e8VlyjPl3U90AdY6qMkYKV3qs5va3+L6p8BL937DrWxipjgjvqfkexBqn9
EJ1rX7T98m5if/RUm1FVXkN2U98m4Gsqt9LxlsbeWPJc+has/2B/NFT/sdgD
6vut6vup/oiC8Yzdc16LGLOX6veK7dtoqeNNjdc5Z6x3PJhIcj/1+f4lH6Ty
cB2aWiqtZ3Zd3vYl2NapkheqvKvmdy/+Eu5N8/8z8PxGgbHp3G26xgJ+z+jh
ms/n4Aq69ztV/wU2XdH6Lnpv0+T+9YhSY3Runcpf6X56arzDdD9T1H+Nzl3N
+q/j17ztHey58ZK/5n1H3p/Zp5tovFG6/lJ+j7r+Yep/SN73Csa9d9YytudD
6Hwq3632yyU/o7rD1f4SyWMk3yq5s+QNBe+f/+k+X2C9LNjuwP5oz/qn9g+o
/jbsKp5/3u+Z9z1Sc52t+71c3/eukidprk/ze64xBvWY5J8L9sf8pvHnqv81
el8nqn8HjVPAPlX7a2qsAy9T+26q/13PZxcd7+raQ8Gj0fWxZdT+RL539d9X
cij5Oo3/u34rg6ps4xY13rtgEzqWq39f9gywENUfnbc8pcoYJFhkm+R9ljVO
Z413od7PHcm7bC35RtXPUf1kte2p+Q9U/Q3J2t1S9XNztj0na8wjde5w+mEv
8BtXeZn6/Vdln2BvfIiBbf2JOneE6qfl7Ju6TXK3pD91YAJd1HeY7nek+n6m
8610vfPYfzPeM9k7d+E70u+vkd5ZT5VH6miUMUY3jDI6bdaYwEMF71HsVaWU
fQ1DVGivci+dG6i6xmDi4KL85lV3po6OYBlgY+i7kjtI3l/yiZKna4xHdHwg
eVvwMfwbOtaC80oerfaz2b8k31J2m85Z6xD0bSp5T8ktJE+TPEjtt1d5L507
XnXb8M2p3Eznpqh+sOp3Vbmnzp2gupX62zrrPXic6vvpOWxbY4zjQT3HYyQ3
xV5kfQV3AePUO9hLz+cGPdsBqm9eY51sGutm2ddmDo9pvOHYN/pWfq709/ii
2n5W7bHaa4zVatuRe1X7Cdgj7F8q98CPyfceeS09Vu95gq57murbqr676vvz
+w+NtYDFHBr4me2huuYpP8sTSr437rGvCgNK3k+3l3wk9rLm85XmM6HKuAj2
BPYGPl98v1eq/WMqb1uwfbSF/U9ydx2TVV5Ysn8SP+XOqn9Rg39R7Wc3Qb/F
8SXbm09l7c+ao+t9q/onquznWaz2P0leI/nZ2H5+/P27pI13wg/oqnazJP/G
+hfav4ifsV0961zoXtN0/JA3fgc+ic8I39Fy7B2Vr00br1iv6zXWOztQ97Of
+p9c8rfBN9JP8zul5G+Jb+o47Ge1b6L2B6l9D7W/ROXGNcYnLsEHJ7lJje2d
6/GZlfzt8xs4Fv9Oye+Wd3yM5Jc03tfV/lam6H5XS25UY4x038h2JvYmmAT4
MH42/G2t0saz3lH7co3f1Zd6FvdjTybry60a/3jNp5nqW6X8TgdKblFjPgXP
vKfa19fHvIu+qU9Yw3VfczWftmp3tMqLsHckz1Hbx/CXSK5f43f1u663h9rM
Un0rte+j8u46ZkpuWes9djcdT0jeTvLh6ILsy5LbST5G5fP1t16N/VeBrtGR
fVn12+r8oSp30jFDcvNa73Gs/yMwoxL+xJ6S56i+Ta33/Pc0vwY1tsGb6fm1
17lpqt9G9b1Vvhd9Rvf7hI6LCrb5F9TZHwYWcIGex0Ea/3g9izM0/n7gjXXW
AdEF0aHQpZZqvGPRR+mv8XeVfIjK9+n4VOvl3Xqeb+Rsg2CLNNMxCp1c4z/D
96jybRo/BmdRXeOM19eG2EsZr8mszeyn94HtJPgA9iC29eS0fRz/6nhZ5QN1
PKJyF7VfqPl00HyOVHmYrreP2h+h652u/rfqmTTFttaz/kLvb3vuMWuf9Gy1
v5Q569nNTdtHsQY8tMaY+BGRbTTWatZsbLdTdJ3ta+wfW6wxz8XGV9un07YR
++v66pZqBvarvu/qG4pVV0THRD9V/+1q7JPlG2tZ9lrMmvyMxj9V9S1Vf17K
a8IDGm8ea2vW/t4WOrolmOOTav9W1msZa9qDkvfhG9bz2IP3BXckNB8CXsQu
+v3uC75XbRsFW6Wrjhcl7yb5KJV/0HGrxooT/g54Arb11LQxnYvUrmGN+S2D
wZM0v71Vf5jmcCp4ctlrM2v0Uxrrf6rvovLhYAllz/kJHZ9lfS/4zHhWPDN8
adg42Dpxyr46fBb4HvBBwJe4VW2eZX3W+QPV9hbJ85PncwD+1oJ9c5/io1C5
QeIvOxWMke8xsO4MJgo2elvJ+hn24lXY93XGyn/HB6TyK3qwG/R8vtG9vqJJ
jVX7T5KxwePuRP9O7Mnh6j8ZHFT9P0obo38W7EH9v6jyGjeiZHsH+/JqtR8U
mc8Er2kvjXdXyfbpGNVfp/om+MvxJ6l+D9WfFtqfvVzvYR+13Sh5g+QBCb49
PbY9hq35tuRv8YFW2Kf9ncrPaT4bq43d8Y3DJxuhv/tJ3p7nqzHvT/TbK8vm
HO2N/y5jLlLfyNjHqMD+J/x3rCXM6TOda676nlX2NWY0348z5kfxPX+i8lJd
/89qY7vgeKPgKyT29fUa7w58wJJHS75W8s+6z38qvV6zbjMGY7HesO5cr/Yj
JV+j9pegf0u+TfJVki+SfIyu9ZyOe/FngOuoz2z1nY5+rPJg3d+fKn+luka6
v7Mj80ngleyt+Zdjt1/Jmsa1dLyt+qBgvth1Ja/PV+t6F/O89b2UNOf94VVg
/9TZfwRHAa5CpmBf9DvJGHcF1rXhRMGN6lc0fwcez27qf4/GX5u8f/hF81V/
T40xl8YqX60xB2jscbpGT55PrflLPLPVcGfA/ars//1C5SXqs6naWPBy3dvt
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
M95Xtt8Ne66y7BgH/Aj4E4jNJcZpftYcTmKf2qjPqeo/vtJ81hti4+jEjBIb
e2rs2ArWDOKviNG4MDDflNiNbdSnXZV1uDkqzwv97Z6uc9er/rTYsRy3VToe
b+/IsQbYPNg+/0XmGq1Um1lquyUydshviN8SfHhiw9Yl+NajgX2v+GCvjRwD
BoeaGC3wJnyI+BK3xtgUHbMCJxpOOXgRMYnH58wXIFYRmwDbAI7/2KJtMDAf
OBTMD50d3Z2YunGSjy6bi4///eWSfZD4IonBeUj1Q6TXtqoxVgBGf67mfGza
ewB7wUM6dqp0jGeP2L8RfivEmB7E7x0dgbVa7RtEtmfKVcbchiXfC9zUGrVJ
l43BgsWCyRP7iY8KLivzx3d1bGTuLfX9i8bYdsr5ewJ7e1DHjpX2WeO7/jh0
7Dcx4BNV11lyPZV/Vf2ZkWMSiE3gHiZEtpnBcG5I2Zb+GJsl6zHHRtYX0NXh
8HyusW7QsbrCGG9e5aNUX6fv8w+1X1SyvopvDMwGLhSYz4LAMQDnJHwSfPdg
sHBJ4LzCQYNDWijbJ8HzAKM+Tve7MPTaDOcTp1S/xF+AjVxf8h6q/xTdTOfO
iLymsbYRrwTfGX341rQxeLB4fCz4WvDnwIWGU1SVs84B16hLbG7uZt3Dm7Ex
c7Bz7NfnSo45AeMh3jiv8qWRsQW+kS2xYy7BVIi/IhYT/gt7LRg4WPiysjm6
8IH/0njna/4nYDvrOFJtO8bmEhPTRmzbKWXHTRA/sbRkviZrKxgOWA4+AXwD
4H+sr2BWYFfw5V8IHY9D7Az4Ef5H+LlgA/yG+S2DmYGdDauwfnKyrpfHZlD7
JSVj9mD3x2mMtyJjBmB2cIjQ59hf3gwcwwHW/hE+xwrHcG9J9MezK8zJ6h+b
Uwi3kGf8PFh96Lb0+S90zDc2zaAKx4IPCL134VNeUzDnCAyfeOFteV6RYwHB
nH7X+L9E1n0Xav5PSX469FpHzDix479FjuVizWPtI54drAefDL6ZDZHXOnRi
dOONkXULdBJ0E3yY5CK4PLEl8aGTi4DngW+dmHBs4CEVjhU/GR9tyjFnNYl9
sTGwj4f2cEDABcEHwR7B5Jbkzcnl/aIv/hoY8+Z6fK9gzF9rPmv0/MKiufrw
s49M9Ok5FY4ZI3aMmH8whLMqnAvgRM1nYMoxPRWRYybg6cLXnR+b0zYvb3wX
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
/X/ZTSJJ
                    "]], 
                    Polygon3DBox[CompressedData["
1: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
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwlkEsrhGEYhu+GGYzBzHwTMRtWioWSRhPZDUkRicU4xMJK/AGKhZ0VKTW2
BmnEypRTzCjjNHI+lcNY8AdsRK6vWVx1f9f7vM/3vE/Z4GjHiEVSMdjA55J+
HFIpVOZIFfDtlj7ypRQsGVIwV+qBZfIc9a1WKQp+zr3ce8b/kX/hnmzHOeCB
3Fggvdilde4f8B2hZg0WnVJRtuQEP7XDEMa10b+J3hGooW6He4fcC+ADuBWo
xq/i9/Ff5E+4Ib/jUnBLfsW9wBn5CncN5+QU/8hgHgsMcN6ND+MT5COIkbdw
2xAnP+Ee4ZicxF3ACXmId9nJb2ZvIz2DOYsXXwIuj5TPtxPc5AGczZwNkkZ6
t+aOa9l1F2+KQwPfY3nMRv08cwbZSQuuKkua4XyW2hB36+gRZf5NKOS8Dz+O
9+AncRMwRd7ln0H21szdDfBRe2e+gdppKCcvUBsCO2ed9IlR307tHtTjMpjh
jtp+elmpv4RTI71bc8e9+Exzt5Aw0rsyd/YPWLZavg==
                    "]]}, 
                    Annotation[#, "Charting`Private`Tag$3245905#1"]& ]]}, {
                  EdgeForm[], 
                  Opacity[0.25], 
                  GraphicsGroup3DBox[{
                    Polygon3DBox[CompressedData["
1:eJw1mHuUVlUZxg9z5pw5H/N9M993vhlCUItLrdTSf1qxVq00El0ywAyMMAga
U6LiJRFc3DFRIQIMmEDkEoGlUlYgpEsSCKhYplwUZHlLE7sttZRL5Vrcujw/
nu0fs9599rcv73738z7vs6fPjXe1T6yJoqirWxTFsnkSRS/qb5e+98peURdF
I9V+Qe3L1W5R+7+yq2Xbsyj6qto/TKOoU98vacwgfe/r5jWurPM6+xKPY8x+
tQeqPVXtA2p/Te2Nat/RoLULUbRY9nn1f0X9A9V/pj6KfiHbVYyiNjl6l5ws
6ftH2nOS2s1qH9T4qzT+FbX31LifNb9Ytr03j6J+6vuUxn2kMy6peN4L+v1V
9Q3R3KPqP6C502L7/Ir6W9T/D/X/WHtNDf0Lco9ZqjUmlaJoufoWybetmrtP
/VM1vj7xGfB/gPZ4UvaUxn+kuc9qXFaNos2a+5Tit0jnrdP8nRqzQraaOI7E
sJI4RpzhKv0Wa+5s2RG18l1/m9S/Wetfrv4ntf4uta9Re7rajYljTZwPyV6t
sxzhzPJxvebeLD//FPz+vHwpJr5j7neFvvtpzMmSx29VO1J/KTEmwEND4nvl
Tgfp3n6uGH2gPWp0ngZirnsboe+fqL+Pvtu0xvO1vsudisNP1X+f7L0Fx3iO
7JYmnU/zm2WP1htjE/U9Vb8N4G5ky+qfq/Ezuxtf3A330lpnTHCvE2NjBZxs
Uky+rPZG2V9rv8c0Zo7srorHzNRdvKZzDNX8E1q3TfZRjTkvYBIf8GWH5jyS
Gku3Ki7zNfd3it/E7o7li2qv0u/X6+8/+q2sNUer/X3N76H5yzRmnsbOkm99
E68PFsbqewVYrXWsifP0cE+se7fmTJE9UvTd7o295l6dp73GGO6pszyj9mnZ
YYrRdI1vlX2u7DNy1jWy1wV89lP/MnJLtkM+jghrztC4/+n3nepfrfEjY+89
QWduV3tm2Id+cD+wZOyByVkV+3686rmjwpisyfgnD2ZXjI3tjcKz/JuhKVfL
Dtb4a4NvzZrforzorbHbtO8P5N89sqM0brTGdMh+WO+Y/Vn73qk7atX4hbK9
Y+MSTJLTa1LnNXe7NvX9biw5f7bIttR4zWnq3y4/39F6PbTvCO2xEn6T3dNo
XrhI/YPKztO6qjmmEnJzXcln/5b8akrMR3DR6RAvzst9csfw7Nux847zfjIx
/vCtVO87vkTrLSw6Lp8rmbdeD9x1smL8tyomL2nMSo15V2NG1jrHiG9z4pwn
3yfpDHM0ZnLBOAQztQ2ew1xwCx7/EDAZ1TtfzteYPup7I3FOvV80t07TvIOK
988Uz0OyT1Wd66Vm4+tX4VwXJOZQchu8EAewdGFizuVelsunFVrnIdntWmuv
/N+RmX/IgbHy4cbU54e/H2t0DMYoBu80ml9nKw7jUq9b1phjufeeK3txZu4p
ZsYJdzpZa+8uO7bvaZ31+u2I5j0i+2/W0rgTwsLx3HfzHbCn9Uemrj152b51
VsyP8CT3PlXtp2ucp+N1nr7qv0n2bMUxadKaH9T7/hdozLZG8xM5NTnc0d2y
ldht8MD9tMXOSdZuD3naP/Zv9L8pbI8ixzPHB146Kh8/Id/bUo/pqfa1qfdb
1+jYD9O+t2u/DrXvkB2eeg7jT+rMd6rviqrr6obUeD6bG1NjPuaNwB0LNPZ8
zV1YcIxGhr2w7E0bX1pT+w4/1of6eH/snGF96moetAdnhUM57+zYdZGaeFjn
7KH2y7LD5dvjWvOCbo5bKdSmpfKju9pdsnWxaxt17bDuYE/R8TlYNCdeCpdr
TP/EWIHjR4W77lZ1zd2kWE0JNYhaBJbfCtzYGpvvaG9qNA/AhUMDD8PHH+aO
7y25OWd/4PwH9P2w+r+XO4/ghLagEfYHXgKv4HaCcPmw1uotP1cW7O9bwed+
sm8mjgMcMDzwAFyHpSaj3VanjgN4Zw/Wh3fXhJzdX2ef2zLXV3jmPcXpOf3+
t9jf5NiFIX93V6xBzgsYfztweK/wDfbZ8wb9pbG5nFxljS/pvK9rnwdz3+GE
1Pc8vrsxSW19Vr+tTJ3jnanvl3veEjh8U8m4B/+fkZ2vc96g2JxR/1+brBWo
718gtpl5+8rc56X2/bbs+0jVfyo3HuGVf+aO6ULZvysmT2jv1zLrG3TOG2rP
LjiW98iOy4zfQyHGnJXf0GPkerHZeuf21Fi7LTXmwf6+snE9RHaA/Pis1jqj
fW9OnQvkBDUAvkJnjontM/hZn5of4UY0+Df01yt2rSNexAp9dFPQr+hZNAqc
jFYaHzR0klmfPJM5T/sHzvmLYlhQDKfJr75lc9fpsrHZEvBzTcEaaXDB2hjt
tFR2W+Ao9CccQV0jl+GSW9F+6vtj7JpCDR0e6hf6EI12S2qthLY5pxkr5g90
Lf51a7C26Qo1kD722hp0FBw9L3f+w3Unctez7+bWI2AaPP9L359OjMOLdc5H
FYPfVxwb6jvxORTeFhdlztnFOuulVWsbMLijyVrr4zdHR6h36J9VQQ8Sc+ob
+7L/iMz654DWXqCzDM+sdcfKvqoxG2TbU3MgXAhvz9C+A6uuwcSN3ITHwAKa
aAnrFMwVaHv2542CJoVv8WNO0Nv3gduCdWBnwTV6dfB5nM7fN3aNA7NwDbjd
H3iD/XYHDYmWRCOhHXgToSG5b7huRsna6Zh8ma/vdVprSe67RXNwvw8UnHdz
C85/zg6PLcr9dujKHQv6x2TmCWoBY9+t2GcwWZOZi36Z+c6ID7qlI2AbjDc3
W1ehUdG01MT7ZZ8ou24c0zmuqziHqPtfT107wBC6++mA4WLQFe/X+S0F3roC
3tCci3PnG1qLWkbdgPPgzKRqbJ7TERXnBXqbfc/p07JzGR86gx6DD+FF+J43
VZ9Qiy+RHz213rA6xxZtRJzRwWikVYrpYc05rnHbc/PFt3NrdjiD8eMz1/SX
tcZtQQ+gC5ZXfA9wUSmMYSy6hTgs0u+zAgfChfDnPNlS1b6jIfH/spJrAVqd
OcxFY18vjO7Tng82uHZRy9kPLoZbflO2Hp4S3kDomt4hJmBzSezajBbBN96S
vLc6wpuLOko9pTbx3ga3vCl4N/HOvkxYGJa53lH3eJuBE7BKrSNP0frUdDAG
1oZmrsVn68w3jeF9zbsBjuJ/FcQNbqN2kEe84dZWjGf4/qGKNTXvVfD5zdRv
Fs62IfAiXIPOhw/5vwG4BJ+8gwbUWnMuC5r83HukaP3O25U85P8Qg0NNHxLq
C2/etaEmgDPyiRziN94R4Bd9+niow9xFr1DfqfNooQm637zq/zWAIeoC/0sB
6/AqWoraioZGw7IXflNnR6NZqtZf3Bv/zyiXHT8wuTm06TslPu1ssGamtsMT
nIs3EFgHt9QlYsv7e2jFNRfN/3/kqGzj
                    "], VertexColors -> None], 
                    Polygon3DBox[CompressedData["
1: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
tBeN1eqX9a+lmBFuvx37X20CYyn036kJFbM=
                    "], VertexColors -> None], 
                    Polygon3DBox[CompressedData["
1:eJwlkbsvQ3EcxU/rcVtvVRKxeA2EWP0DLIR6lRTxHEjQxoJ6RQjxNogYJCxW
RQxChEQsJMwMwmKTRoNB2sHn5g4n+X3P75zzPfd3C/oCTX67pHyQANZdki9R
2nRKG2CeuThLauXcFifVIL7NkHIypfcUKZos+eFXmUPggvMg2gFgwzcN54Or
SJW60qQf8txuqZvzCVxzvBRD087ci6cHFMHtcDeG32nmJ0mXZByjGwcezp/w
y+y/ocsamc8OaQsM0/2bOYg3A00Q7yv6G3xh5h7OteyoAUPsjNAlyq5O5g6n
1W8K7JKzxLwI3tOlUvxe8g2Qa5Pu4PLM7+U93sg8gM9mZx2cwRzENwH20c3A
zXD/YVjf/cdODzvu+U478yy9zvBW8i0tcKf0CQEHuiO4CP8lQJYfhJiv3NZ9
I9oXMt147+Gz6WXwJjvggdkFCtH04+sDCeii7C2hywqYo+c23Qbo0MC9BzzC
jZJtoD1Hcw2eyKgi6wtuhexy7r3oJvH6TS+aBYf1tuYbh9HeoasGv3Q/5A18
cEvcr6MrAzGXtcfct8dcD0bI+gf8jVik
                    "], VertexColors -> None]}]}, {
                  EdgeForm[], 
                  Opacity[0.25], 
                  GraphicsGroup3DBox[{
                    Polygon3DBox[CompressedData["
1:eJxFl3uQlWUdx1/2nPd5XpbDsnsO1Dg1zFjTVM5kad5iypyUO2kmKsqiSGQu
u1zc5bKLgsi9LBwEzalp0i5yk4LI8YqlDLqVYmVpiYImuKFuxE1AEvp8+z4z
/XHm9z3P83tu39/1PX3S9K9Pq8uybHyfLCshr2jMsj+Dz2zKsruZGM1gO+Ob
Er6TuecrWdaBnFqfZb3ot4M3oj+L30l099ey7FP9jVv7Zdk9rB3F2hXo3Qv+
GriDudMbPXYcOZu1FfCjA/gfs+x74OFFll2Ofgf6K9F/CDwFvJ658/tbfx77
b0PvQDnLnkZezF5PMP4x9lvGbyHrprHnDtZ2srabuXPR2YA8Wc2ywYx9qc5v
WIn+fejPG+C3j0nv7ZNn2V/rPHdG0pFub8nj4ku8FZw/irefy9wE8EjwWmQP
OpOQDZpD7ka3m7XD68zDJHh8ljd/vwHumFvG+Azu1oJuK/izyBprL0IeY34P
vzmMt6HzFrgLPBX8o4FZtgrbHBH/3OE5xmcyfqpsLA5XVMyb+Hsh+i1XF9YX
N88gtzamuzXZvkvA09lnEP+3gL/d5PkRyY7Hkr0uZJ/l/F5mbjxyV8X8Tees
5azZzHgNuRT978LpPvGC7AlZFpA38HsLXEb+oC9vRP4QuQT5XvAbFoOPgLeD
vwM+AX4dvAx8LNgeS6LnNN6FfJvxFvBc8DvBnM4D/yuYx/ng/cE83gb+N3g+
+FZwL7gdvAB8ALwAfDv4YDAvt4DfBc8ALwQfCrbfIvBh8DbxBX4fvAv84eST
8s3ljB8P5kt8fBDMyds1x1cD3K/CJ4bBZVuD409+KU6fLTmuFD8rCq+bjLwL
vR28fxE+dUdhDq5HXsF5wzh37AC/s8L6y1lbIX5eQv8e1s1B7xLGj/K/CzwU
3IlsLnz3Ncil3PNocDytQW9U7tg+jTt/k/khnHND8nn5vrhQjCm+jnN2M/Kf
jfYx3V05oJk1k7nbN5i/g/3+E7x+XOHY6ls4Z2xJ8fKrmuO+3yDbW3EoP/4o
4x8v7P/y80uZuwDfW1qxv34a/CrnnYnOuJr5Fc/lmn1rX8ozii9xU1ezz3Yn
P5dPbCqZx2dSvJwiLp5ifE/JeaeraluIh27Oibznd8pj7LWu8Fnbkr78YA36
v4DH15Bbm5zbFCM/5/96xndW/V7dY3mKv53pPsq54vXdRseY/GJZxX4h/xCn
9xfOdX2QHQ3Op6srjk3teUZ/5/PVik3wA5z3IOe+ihxaOK6Vj8Wj+LwT3a+W
XA90njg5VrZdFRvHwVdy7uC0VrlBvIt/3U0x80jJOjfXu7bIt1enO8sn7ioc
T2cjD9V85mMDHRdzwZsGmsOTZXOuXKAcJ9vJH+py+01r1bGrfLsWvIm77EJe
yj4jC+f/MeCxhe14tOz3yL4bUw2YAccfKvlturPuvjhh2VD30B2Uh7VOcdZW
+NxzkN2pHqkuyXe0v7jSWvmNfEA1TdzK9qMTt+JFdt6cfF55Q/WvnXsubbKO
aqXqkWJxVsrP2kN+pJq5PeX8Kv9HcJfLeOvsBp87EflB2ffXHWS3JeldPRX7
TGe9c/y96Q7iRDVddV55oz3Z8BS8togXzpjZ4HoqO62T7zK3Gzm76jynviLL
fWfFT2fKM3MLcy3OVePer5on5Yz14F+zz+vI0bzhlega3cOap8C9heum/F25
pIZ/TFDeHGSflm+pD5F/CUtPfrUh9QLbo233hcL1RnVnP3gsOi9G58wrwasK
54QTZceY9lkcncf1NtmwNfUnTcF1Trng1uhaIp+4FrmbucPscQ14F/ggeF50
HVJuHq/axfh7jA+G39fAezn7cXQmqJYwPjm6xsh+bcg/Btvzlug6pxq3ETwl
t22bkW8Ex+r14D3BdpjFb2ewb40BvwJu4w1TouuW8v51yDeD4+226DqnvK67
/CP4Pouia4PsOjLxrFheGF2z5Yv1weu19onofbXn1ug76T6bwVNzx/NEcHtu
rq+LrrvyUb1pR/C7WsEvBNvkJ1VzoBiZhP7M3PnyvhTb6pGao2u84rAF+Xzw
3P1V76G+67fRfYl6kt9E9yXqSc4rXBcOMPZotJ1ko8ei+RW3T4In5s5BC8Ad
ueNnOvJFziohb4/mXZw/HO0H8oEt0XrSeSTaV+QnG8A3qe8BrwPfmLvflfx9
MP4Z987534m8KbofUi6c2eTz1WN/LvWT6itlM9lB9SNLNUK14nB0Tfwy+KyU
h5WPFVPKe6o1nyncT60s3OvKR+Zw7vmF+6nVqjVV21x9+MXB79FbhgbzJa7E
o/g8rTCP8n39n5j6FvUvqtc6q6XqnPARxvoRg6OD7SQbTas6P6uveLrie7YT
/6OC7SfbjQy2jexSTflTeXREsP/J94YH+6V8Ur7z95B6DvDfgnlUv/NycM9T
P8i9hb53ZjD+l2AbtEX3MephbozuX9VfyK//FOzbP636u0J5e0jhXHcQ3bXR
cagYvFk2DO4hFAcvBcfCJcH+J86GBecF2TMUzqmfKPwd8L9vJ3iYpnoYfJ72
fSjVmq6Kc7Vy9kXKAdFnvclvXLTtVQtUL1Q3+qZ+7JPIq6J7a9lmfnR/LBu8
kztudc8jufOI/OOLwbGttx/K7aPyz3WJB/FxNHEn3h5IMavYXZ98Wz5+XnA8
KBb6B+cX+dmFwfGj2GkIzkfKReqjDqH7Y+Q5wfGjeKkEx6G4uCA4VyqfxOB8
rVy9L3feUc7pyZ07lDd6c+cX+UYRnLvlu31D4qLOfd2JlFf2on9tdGzsz527
lbeHoP/L6N72jdycis8QnMcVqwdy+5D8p19wTpEfDgiuPao7a1PeU/6TDeU3
suNXgvOLcktj8HeR4kp30feP7qO88lwwn7K5vmdk988H+6L8Rflsb3DsfIvf
H8L/OZWcgjw7pO8B9P8LKzpaEw==
                    "], VertexColors -> None], 
                    Polygon3DBox[CompressedData["
1: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

                    "], VertexColors -> None], 
                    Polygon3DBox[CompressedData["
1:eJwlkc8rg3Ecx9/7YZ5shk0upOSktJM1PxIHiXKyXXdRDsyYadjB0bhJc+Ag
jJsT5S9QysVFKFYclESGEaPM62mHV8/zfn8/P7/fppGp4UmrpEYog1CVdF4u
TRmSyyYFa6RPr9SMtoHDJW3WSrNu6QBtgX2L9IB/Wy350a/kf9iliEcahwgN
nhycwRY6Ckm8HDoA2+gYLOHl0R2wg56HO7xfdA/soeNwhHeD7oIMerpCOmHW
dXpf0tvllBbY45r/Jbx5zlbZI0HsGblf5HXDLtrPzFHO2yulFXbIs+sysRG8
AN4CtQ7xJti3n1obRqmX2dOKn0avwRx176nlI/eK/2U8A4J4c/Sxc7lOdBj8
xKRgjDpFZhzA86C/ie3l/wuvj7MYXpHcEF4GHvFO8J6Ji3PnWWYLM5e3tvRG
aeafQaeIbUC3mjns2QZvvMcx+hTKmeUCr8D3Fv1Hj0G+i0bpLsw76aTPKNpt
vjlxSWLG4J06L8znw88Sl6NPir4t3NUQuQnyCtx9nTk/MfXwQ94/X0JVug==

                    "], VertexColors -> None], 
                    
                    Polygon3DBox[{{4110, 2037, 2218, 3700, 3194, 5098}}, 
                    VertexColors -> None]}]}, {}, {}}, {{
                  GrayLevel[0], 
                  
                  Line3DBox[{1175, 1, 1038, 300, 3737, 16, 3747, 3748, 31, 
                   3766, 46, 3776, 3777, 61, 3794, 76, 4095, 355, 3804, 91, 
                   1209, 383, 4528, 956, 106, 867, 4137, 412, 1185, 3819, 121,
                    438, 3821, 136, 3829, 3830, 151, 3848, 166, 3858, 3859, 
                   181, 3877, 196, 4199, 493, 1192, 211, 1173, 531, 2752, 212,
                    2753, 213, 2754, 214, 2755, 215, 2756, 216, 2757, 2758, 
                   217, 1795}, VertexColors -> None], 
                  Line3DBox[{2592, 2, 3123, 499, 1175}, VertexColors -> None], 
                  Line3DBox[{2594, 3, 2592}, VertexColors -> None], 
                  Line3DBox[{2596, 4, 2594}, VertexColors -> None], 
                  Line3DBox[{2598, 5, 2596}, VertexColors -> None], 
                  Line3DBox[{2600, 6, 2598}, VertexColors -> None], 
                  Line3DBox[{915, 7, 3124, 500, 2600}, VertexColors -> None], 
                  Line3DBox[{918, 8, 1728}, VertexColors -> None], 
                  
                  Line3DBox[{1026, 9, 2979, 305, 3398, 918}, VertexColors -> 
                   None], 
                  Line3DBox[{1263, 10, 3457, 1026}, VertexColors -> None], 
                  
                  Line3DBox[{2605, 11, 3459, 1029, 1875}, VertexColors -> 
                   None], 
                  Line3DBox[{2607, 12, 2605}, VertexColors -> None], 
                  Line3DBox[{2609, 13, 2607}, VertexColors -> None], 
                  Line3DBox[{2611, 14, 2609}, VertexColors -> None], 
                  
                  Line3DBox[{1178, 15, 1155, 502, 2611}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{3763, 30, 4058, 312, 1178}, VertexColors -> 
                   None], 
                  Line3DBox[{3773, 45, 3764, 3763}, VertexColors -> None], 
                  Line3DBox[{3791, 60, 3773}, VertexColors -> None], 
                  Line3DBox[{3801, 75, 3792, 3791}, VertexColors -> None], 
                  Line3DBox[{3818, 90, 3801}, VertexColors -> None], 
                  
                  Line3DBox[{1184, 105, 4210, 517, 3818}, VertexColors -> 
                   None], 
                  Line3DBox[CompressedData["
1:eJwV0EVOBGEQgNFiBSwgwQ5AwhqOQCDBfXCHwd1hYHC3we1S3IUj8Gbx8nW6
6u9Od3lyLbGaExGz/OZGpLQuP6KeBhppIlMY0awttNJGOx108mTepQm66aGX
PipKIvp1gEGGGGaEa+dGdYxxJpikrDQibZZ0PcU0M8xS7HlzOs8CiyyxTLXZ
it44u6prrLPBJlsU2dnWHXbZo8a9lO5zQJpDjqg1O9YTTjnjnAsKzC71Kvst
2fdyyx33PPBIpb1M9j/xzAuvvPHOB59U2fvSb374y4v4B8IwMMQ=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0DVWBEEUQNEPg8vgroO7u8sKYAmEBBCTcuCQsBxWMDmLICbCXW4F97zp
/lVd3ZM7Oj08KYiIY/J+XOlBfcRtUcSN63xdxF0m4qEs4pEnnnnhPBvxqm+8
88EnX3xzZv6jv/wR5REFFDLXEJHRIoopoZQyLuwr1woqqWLe+mq9NMtqDbXU
Uc+keYM20kQzLbSyaNam1/a2aweddNHNknmP9pKjj/50rvsDOsgQw4wwyorZ
mI4zkc5nilX3p3WG2fSd6d1ZSO+RzmI57U/Ps3ZV11hng0222GaH3TSzbk/3
ufc//gMS4ie1
                   "], VertexColors -> None], 
                  Line3DBox[{3845, 150, 4166, 450}, VertexColors -> None], 
                  Line3DBox[{3855, 165, 3846, 3845}, VertexColors -> None], 
                  Line3DBox[{3874, 180, 3855}, VertexColors -> None], 
                  Line3DBox[{3884, 195, 3875, 3874}, VertexColors -> None], 
                  
                  Line3DBox[{1322, 218, 3456, 1023, 2759, 219, 1024, 3569, 
                   1198, 220, 1305, 1756}, VertexColors -> None], 
                  
                  Line3DBox[{2760, 221, 1250, 2761, 222, 2762, 223, 2763, 224,
                    3122, 498, 1193, 225, 1174, 533, 3896, 210, 3884}, 
                   VertexColors -> None], 
                  Line3DBox[{2977, 303, 915}, VertexColors -> None], 
                  Line3DBox[{4134, 408, 1184}, VertexColors -> None], 
                  Line3DBox[{2177, 863, 4134}, VertexColors -> None], 
                  Line3DBox[{1363, 1025, 1199, 2760}, VertexColors -> None], 
                  Line3DBox[{1365, 1039, 2977}, VertexColors -> None], 
                  Line3DBox[{1263, 1367}, VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwNzLcuh2EYh+HHaLFIrBgMwnFgkYhDEDMnIAyOwYi/3nvvvffee++n4Bqu
3Pme35c3s6S8uCwpIkr5S474JTc14ke/+eKTD955o8j+qi9UpkQ86xOPPHBP
jfud3nJDhe9rveKSC86pdj/TU7K9e6LHHHHIAfuk2/Z0lx222WKTDQrt67rG
KlXeXdFllsiwL+oC88yR5jarM0wzxSQTZNnGdYxRRhhmiBzboA7QTx+9FLj3
aDdddNJBO/m2Nm2lhWaaaKSBBHn+qdc6avkHrJxLXA==
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzr0ug2EYBuDHhEVQbQXxcwwWiVZUOQGDA7AQogY2EoeAhTgGvyMmQsT/
pAbph7RzYzPU4upw5X7e+3nfL9/I/OpsqSUi5vhrjZhqi9iiwAYNXS4VMWw+
Y4hNavoLud0RcSlPedCdyHuZ92bH7tD5mCN+9T1ywm5d7rNGmnOu6bPrlrve
DsgUOfYY5843Jt15k1fN+3QxqPvWlcxj3Jp75Qr9dlnZyZd+WY5yYy7aZcw/
5le5xDufzomskpin3SubF3nhmQ/qdo/yiQVmmv8mK/qKPGiP+ActMzJ/
                   "], VertexColors -> None], 
                  
                  Line3DBox[{3704, 2045, 2082, 2204, 2008, 2177}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2191, 2257, 2256, 2063, 2267, 2258, 2259, 2192, 
                   4898, 2265, 2028, 2372}, VertexColors -> None], 
                  
                  Line3DBox[{2161, 2109, 1991, 3735, 2005, 2160, 2075, 4875, 
                   2034, 2106, 2197, 2105, 1989, 4948, 2003, 2159, 2073, 2033,
                    2102, 4949, 2195, 2196, 2103, 2245, 2100, 2156, 4878, 
                   2101, 2032, 2098, 2194, 2097, 2244, 4893, 2095, 2153, 2096,
                    2030, 2094, 4952, 2193, 2093, 2242, 2243, 2092, 2281, 
                   2276, 2272, 4912, 2277, 2590}, VertexColors -> None], 
                  
                  Line3DBox[{2225, 2049, 2209, 2048, 4942, 2121, 2181, 2020, 
                   2180, 2047, 2120, 4943, 2206, 1994, 3731, 2118, 2201, 2119,
                    2041, 2117, 3732, 2170, 2168, 2169, 3712, 2110, 2040, 
                   2078, 2200, 2006, 3734, 2165, 2166, 4883, 2112, 2039, 2167,
                    2018, 2162, 2111, 2036, 4945, 2217, 2037, 2218, 2077, 
                   2035, 2017, 4946, 2161}, VertexColors -> None], 
                  Line3DBox[{2083, 2051, 2023, 2225}, VertexColors -> None], 
                  
                  Line3DBox[{2024, 2052, 4916, 2231, 2238, 2230, 2053, 2134, 
                   2212, 4906, 2211, 3709, 2133, 2055, 2086, 2239, 2011, 4887,
                    2000, 2137, 2214, 2138, 2058, 4919, 2088, 2185, 2089, 
                   2001, 2142, 2186, 4902, 2025, 2060, 2090, 2188, 2091, 4888,
                    2002, 2147, 2061, 2255, 2189, 2263, 2026, 2275, 2270, 
                   2027, 4922, 2264, 2191}, VertexColors -> None], 
                  
                  Line3DBox[{2085, 2054, 4940, 2132, 2210, 2131, 3730, 1998, 
                   2084, 2182, 4892, 2083}, VertexColors -> None], 
                  
                  Line3DBox[{2087, 2057, 2136, 2213, 2135, 1999, 4939, 2010, 
                   2183, 2085}, VertexColors -> None], 
                  
                  Line3DBox[{2059, 2141, 4937, 2215, 2140, 2246, 2139, 2184, 
                   2056, 4938, 2087}, VertexColors -> None], 
                  
                  Line3DBox[{2062, 2146, 2216, 2145, 2247, 4897, 2143, 2187, 
                   2144, 2059}, VertexColors -> None], 
                  
                  Line3DBox[{4879, 2564, 2565, 2566, 2567, 2568, 2569, 4950, 
                   2570, 2571, 2572, 2573, 2574, 2575, 4951, 2576, 2577, 2578,
                    2579, 2580, 4904, 2581, 2582, 2583, 2584, 2585, 2586, 
                   2587, 2588, 4953, 2589, 2286}, VertexColors -> None], 
                  
                  Line3DBox[{4880, 2559, 2560, 2561, 2562, 2563, 4879}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2556, 2555, 2554, 4947, 2553, 2552, 2551, 3706, 
                   2550, 2549, 2548, 4899, 2547, 2546, 2545, 2544, 2543}, 
                   VertexColors -> None], 
                  Line3DBox[{2202, 2081, 3713, 2043}, VertexColors -> None], 
                  
                  Line3DBox[{2226, 2050, 2009, 4884, 1995, 3723, 2229, 2236, 
                   2235, 2024}, VertexColors -> None], 
                  Line3DBox[{4885, 2207, 2208, 2123, 2176, 2124, 2044, 3721, 
                   2126, 2203, 2125, 1996, 2127, 2179, 2128, 3720, 2046, 2130,
                    2205, 2129, 1997}, VertexColors -> None], 
                  
                  Line3DBox[{4889, 2190, 2148, 2248, 2249, 2271, 2150, 2282, 
                   2278, 4913, 2273, 2279, 2285}, VertexColors -> None], 
                  Line3DBox[{2174, 2007, 2202}, VertexColors -> None], 
                  Line3DBox[{2558, 2557, 2556}, VertexColors -> None], 
                  Line3DBox[{2178, 2115, 2174}, VertexColors -> None], 
                  
                  Line3DBox[{2173, 2021, 2227, 3722, 2228, 2226}, 
                   VertexColors -> None], 
                  Line3DBox[{2237, 2022, 2173}, VertexColors -> None], 
                  Line3DBox[{2062, 2149, 4889}, VertexColors -> None], 
                  Line3DBox[{2284, 2280, 2460}, VertexColors -> None], 
                  Line3DBox[{2287, 2459, 2458}, VertexColors -> None], 
                  Line3DBox[{2237, 2122, 4885}, VertexColors -> None], 
                  Line3DBox[{2178, 2116, 3704}, VertexColors -> None], 
                  Line3DBox[{4880, 2558}, VertexColors -> None]}, {}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{3737, 4051, 5142, 3897, 3736, 5143, 3898, 3738, 
                   2766, 3739, 5144, 3899, 3740, 2768, 3741, 2975, 4223, 4637,
                    4638, 5411, 4202, 4415, 4052, 4225, 5340, 4248, 4755, 
                   4249, 4785}, VertexColors -> None], 
                  
                  Line3DBox[{3748, 5147, 3903, 3746, 5148, 3904, 3750, 5149, 
                   3905, 3752, 5150, 3906, 3754, 5151, 3907, 3756, 5056, 5152,
                    4228, 4639, 4957, 5412, 4640, 4422, 4423, 4229, 5090, 
                   4763, 5439, 4841}, VertexColors -> None], 
                  
                  Line3DBox[{3763, 5206, 4959, 3761, 5205, 4958, 3759, 2784, 
                   3757, 5058, 5204, 4657, 4063, 4658, 4659, 5325, 4317, 3993,
                    4419, 4932}, VertexColors -> None], 
                  
                  Line3DBox[{3766, 4960, 5207, 3765, 5156, 3914, 3767, 4961, 
                   5208, 3768, 5157, 3915, 3769, 4962, 5209, 3770, 5283, 4065,
                    4231, 4643, 4644, 5413, 4203, 4426, 4066, 4233, 5092, 
                   5284, 4756, 4257, 4786}, VertexColors -> None], 
                  
                  Line3DBox[{3773, 3917, 5158, 3772, 5210, 4964, 3771, 3916, 
                   4073, 5326, 4205, 5285, 4963, 4235, 4072, 4645, 4204, 5434,
                    4262, 4261, 4891}, VertexColors -> None], 
                  
                  Line3DBox[{3777, 5159, 3918, 3775, 5160, 3919, 3779, 5161, 
                   3920, 3781, 5162, 3921, 3783, 5163, 3922, 3785, 5060, 5164,
                    4237, 4263, 4970, 5344, 4507, 4432, 4433, 4238, 5094, 
                   4764, 5440, 4842}, VertexColors -> None], 
                  
                  Line3DBox[{3791, 5220, 4974, 3789, 5219, 4973, 3787, 4080, 
                   5218, 5063, 3786, 4437, 5062, 5217, 4236, 4078, 4436, 4519,
                    5328, 4325, 4894}, VertexColors -> None], 
                  
                  Line3DBox[{3794, 4975, 5221, 3793, 5168, 3929, 3795, 4976, 
                   5222, 3796, 5169, 3930, 3797, 4977, 5223, 3798, 5288, 4081,
                    4083, 4648, 4649, 5414, 4207, 4438, 4082, 4240, 5096, 
                   5289, 4757, 4266, 4787}, VertexColors -> None], 
                  
                  Line3DBox[{3801, 3932, 5170, 3800, 5224, 4979, 3799, 3931, 
                   4091, 5329, 4208, 5291, 4978, 4242, 4090, 4650, 4890}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{3804, 4093, 4094, 5292, 3933, 3803, 5067, 5171, 
                   4097, 3934, 3806, 4099, 4100, 5293, 3935, 3808, 5070, 5172,
                    4102, 3936, 3810, 4104, 4105, 5294, 3937, 3812, 5032, 
                   5173, 4107, 4651, 4980, 5415, 4652, 4572, 4669, 4573, 4108,
                    5123, 4758, 5437, 4839}, VertexColors -> None], 
                  
                  Line3DBox[{3818, 4119, 5234, 5077, 3816, 5076, 5233, 4116, 
                   3814, 4113, 5232, 5074, 3813, 4445, 5073, 5231, 4243, 4111,
                    4926}, VertexColors -> None], 
                  
                  Line3DBox[{3819, 4530, 4531, 4211, 5124, 5332, 3944, 4135, 
                   4587, 5399, 5125, 4212, 4590, 3945, 4138, 4591, 4592, 4213,
                    5126, 5333, 3946, 4140, 4594, 5400, 5127, 4214, 4596, 
                   3947, 4142, 4682, 4683, 4665, 5136, 5419, 3948, 4144, 4362,
                    5366, 5118, 4146, 4597, 4983, 5401, 4145, 4365, 4706, 
                   4366, 4215, 5106, 4762, 5438, 4840}, VertexColors -> None], 
                  
                  Line3DBox[{3821, 4136, 4986, 5299, 3820, 5300, 4139, 3955, 
                   3822, 4141, 4987, 5301, 3823, 5302, 4143, 3956, 3824, 4664,
                    4988, 5418, 4709, 5436, 4030, 4989, 5276, 4157, 4653, 
                   4147, 4707, 5108, 5304, 4759, 4295, 4789}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{3830, 5176, 3959, 3828, 5177, 3960, 3832, 5178, 
                   3961, 3834, 5179, 3962, 3836, 5180, 3963, 3838, 5081, 5181,
                    4996, 5312, 4168, 4491, 4492, 4244, 5110, 4765, 5441, 
                   4843}, VertexColors -> None], 
                  
                  Line3DBox[{3845, 5243, 5000, 3843, 5242, 4999, 3841, 4172, 
                   5241, 5082, 3840, 4618, 5048, 5424, 4690, 4037, 4395, 
                   4917}, VertexColors -> None], 
                  
                  Line3DBox[{3848, 5001, 5244, 3847, 5185, 3970, 3849, 5002, 
                   5245, 3850, 5186, 3971, 3851, 5003, 5246, 3852, 5426, 4692,
                    5004, 5425, 4693, 4694, 4174, 4245, 3226, 4760, 4300, 
                   4790}, VertexColors -> None], 
                  
                  Line3DBox[{3855, 3973, 5187, 3854, 5247, 5005, 3853, 3972, 
                   4181, 5335, 4220, 4627, 3528, 4628, 4040, 4626, 4180, 5427,
                    4302, 4876}, VertexColors -> None], 
                  
                  Line3DBox[{3859, 5188, 3974, 3857, 5189, 3975, 3861, 5190, 
                   3976, 3863, 5191, 3977, 3865, 5192, 3978, 3867, 5138, 5193,
                    5011, 5429, 4697, 4699, 4700, 4247, 5112, 4766, 5442, 
                   4844}, VertexColors -> None], 
                  
                  Line3DBox[{3874, 5257, 5015, 3872, 5256, 5014, 3870, 4186, 
                   5255, 5085, 3869, 4629, 5051, 5428, 4695, 4043, 4407, 4555,
                    5320, 4406, 4854, 4920}, VertexColors -> None], 
                  
                  Line3DBox[{3877, 5016, 5258, 3876, 5197, 3985, 3878, 5017, 
                   5259, 3879, 5198, 3986, 3880, 5018, 5260, 3881, 5432, 4702,
                    5019, 5431, 4703, 4188, 4559, 5135, 5322, 4761, 4634, 
                   4792}, VertexColors -> None], 
                  
                  Line3DBox[{3884, 3988, 5199, 3883, 5261, 5021, 3882, 3987, 
                   4195, 5336, 4222, 5280, 5020, 4196, 4046, 4636, 4194, 5433,
                    4307, 4306, 4505, 4903}, VertexColors -> None], 
                  
                  Line3DBox[{3896, 4201, 5273, 5089, 3895, 5272, 5027, 3894, 
                   4200, 5271, 5088, 3893, 5054, 5270, 4197, 4050, 4708, 4414,
                    4558, 5323, 4413, 4049, 4506, 4874, 4923}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{4058, 3902, 5146, 5055, 3744, 2774, 3743, 3901, 
                   5145, 3742, 3900, 5417, 4656, 3990, 4227, 5343, 4255, 4254,
                    4418, 4873, 4933}, VertexColors -> None], 
                  
                  Line3DBox[{4095, 4092, 5225, 5065, 3802, 5066, 5226, 4096, 
                   3805, 4098, 5227, 5068, 3807, 5069, 5228, 4101, 3809, 4103,
                    5229, 5071, 3811, 5031, 5290, 4084, 4001, 4520, 5330, 
                   4521, 4442, 4106, 4241, 5230, 5072, 4443, 4781}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{4134, 4293, 4586, 4292, 4480, 4016, 5362, 4677, 
                   4349, 4133, 4291, 4585, 5398, 5105, 4478, 4015, 4676, 4348,
                    4132, 4924}, VertexColors -> None], 
                  
                  Line3DBox[{4137, 4350, 4589, 4017, 4449, 5380, 5034, 4678, 
                   4351, 4529, 4352, 4588, 5035, 5363, 4451, 4018, 4679, 4353,
                    4532, 4354, 4593, 4019, 4453, 5381, 5036, 4680, 4355, 
                   4533, 4356, 4595, 5037, 5364, 4455, 4020, 4681, 4357, 4534,
                    4358, 4684, 4021, 4458, 5382, 5038, 4721, 4359, 4535, 
                   4360, 4482, 5039, 5365, 4461, 4022, 4685, 4361, 5303, 4536,
                    4363, 4483, 4023, 4463, 5384, 5040, 4485, 4364, 4782}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{4166, 3958, 4156, 5310, 3826, 5309, 4990, 4155, 
                   3825, 3957, 4153, 5311, 4165, 4616, 5278, 5132, 4617, 4033,
                    4909}, VertexColors -> None], 
                  
                  Line3DBox[{4199, 4198, 5262, 5087, 3885, 5022, 5263, 3886, 
                   5023, 5264, 3887, 5024, 5265, 3888, 5025, 5266, 3889, 5026,
                    5267, 5268, 3890, 4556, 4560, 5269, 5122, 4663, 4791}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{4210, 3943, 4120, 5175, 5078, 3817, 3942, 5298, 
                   4118, 4117, 3815, 3941, 4115, 5174, 5075, 4209, 3940, 
                   4925}, VertexColors -> None], 
                  
                  Line3DBox[{4528, 4336, 4576, 4005, 4448, 5099, 5394, 4575, 
                   4273, 4121, 4337, 4671, 5357, 4006, 4450, 4274, 4577, 4275,
                    4122, 4338, 4672, 4007, 4452, 5100, 5395, 4578, 4276, 
                   4123, 4339, 4673, 5358, 4008, 4454, 4277, 4579, 4278, 4124,
                    4340, 4674, 4009, 4457, 5101, 5396, 4580, 4279, 4125, 
                   4341, 4456, 5359, 4010, 4460, 4280, 4459, 4281, 5383, 4126,
                    4342, 4581, 4011, 4462, 5102, 5275, 4754, 4282, 4788}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{4546, 4383, 4612, 4029, 4481, 5370, 5045, 4610, 
                   4382, 4545, 4381, 4688, 5044, 5390, 4479, 4028, 4608, 4380,
                    4867, 4914}, VertexColors -> None], 
                  
                  Line3DBox[{4689, 3954, 4611, 4218, 5131, 5403, 4609, 4154, 
                   3953, 5334, 5130, 4217, 4607, 4606, 4152, 3952, 4605, 4216,
                    5129, 5402, 4603, 4855, 3951, 4915}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{4779, 4421, 5057, 5203, 4226, 4060, 4420, 4510, 
                   5324, 4509, 4059, 4224, 2985, 3755, 5202, 4956, 3753, 2778,
                    3751, 5201, 4955, 3749, 2776, 3745, 5200, 4954, 3747}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{4780, 4431, 5061, 5216, 4234, 4075, 4430, 4515, 
                   5327, 4514, 4074, 4232, 5338, 5059, 3784, 5215, 4969, 3782,
                    5214, 4968, 3780, 5213, 4967, 3778, 5212, 4966, 3774, 
                   5211, 4965, 3776}, VertexColors -> None], 
                  
                  Line3DBox[{4783, 4547, 5079, 5416, 4655, 4159, 4654, 3839, 
                   5313, 4167, 5240, 5080, 3837, 5239, 4995, 3835, 5238, 4994,
                    3833, 5237, 4993, 3831, 5236, 4992, 3827, 5235, 4991, 
                   3829}, VertexColors -> None], 
                  
                  Line3DBox[{4784, 4501, 5084, 5254, 4246, 4182, 4698, 3868, 
                   5430, 4696, 5253, 5137, 3866, 5252, 5010, 3864, 5251, 5009,
                    3862, 5250, 5008, 3860, 5249, 5007, 3856, 5248, 5006, 
                   3858}, VertexColors -> None], 
                  
                  Line3DBox[{4799, 4511, 4311, 2895, 4056, 3991, 4312, 5281, 
                   4512, 4314, 3992, 4417, 5378, 5028, 4315, 4513, 4904}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{4800, 4516, 4320, 5029, 5352, 4070, 3996, 4517, 
                   5286, 4518, 4322, 3997, 4427, 5379, 5030, 4323, 4879}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{4801, 4522, 4329, 5033, 5355, 4088, 4002, 4523, 
                   5295, 4524, 4331, 4003, 4439, 4899}, VertexColors -> None], 
                  
                  Line3DBox[{4802, 3938, 4571, 4330, 5356, 5117, 4109, 4271, 
                   4660, 4981, 5346, 4670, 4574, 4908}, VertexColors -> None], 
                  
                  Line3DBox[{4803, 4537, 4367, 5041, 5367, 4466, 4024, 4599, 
                   4368, 5305, 4538, 4905}, VertexColors -> None], 
                  
                  Line3DBox[{4804, 4548, 4387, 5046, 5372, 4162, 4034, 4388, 
                   5314, 4661, 4549, 4035, 4615, 5405, 5047, 4896}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{4805, 4552, 4399, 5049, 5375, 4178, 4041, 4400, 
                   5318, 4662, 4553, 4042, 4625, 5408, 5050, 4402, 4554, 
                   4907}, VertexColors -> None], 
                  
                  Line3DBox[{4806, 3949, 4484, 4369, 5368, 5119, 4148, 4539, 
                   4540, 4984, 5392, 4598, 4372, 4895}, VertexColors -> None], 
                  
                  Line3DBox[{4807, 3908, 4424, 4313, 5350, 5115, 4061, 4256, 
                   2781, 4667, 4563, 4564, 4062, 5091, 5282, 3909, 4425, 4861,
                    4951}, VertexColors -> None], 
                  
                  Line3DBox[{4808, 3923, 4434, 4321, 5353, 5116, 4076, 4264, 
                   4971, 5345, 4668, 4567, 4568, 4077, 5095, 5287, 4880}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{4809, 3964, 4496, 4389, 5373, 5120, 4169, 4619, 
                   4997, 5406, 4620, 4390, 4391, 4170, 5111, 5315, 4886}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{4810, 3979, 4502, 4401, 5376, 5121, 4183, 4630, 
                   5012, 5409, 4631, 4403, 4404, 4184, 5113, 5319, 3980, 4503,
                    4864, 4936}, VertexColors -> None], 
                  
                  Line3DBox[{4818, 4053, 4308, 2892, 4055, 4250, 4251, 5341, 
                   4054, 4309, 3989, 4416, 5342, 4252, 4253, 4057, 4310, 4712,
                    4953}, VertexColors -> None], 
                  Line3DBox[{4819, 4067, 4318, 5351, 3994, 4069, 4258, 4259, 
                   5421, 4068, 4565, 3995, 4566, 5093, 5274, 4260, 4071, 
                   4950}, VertexColors -> None], 
                  
                  Line3DBox[{4820, 4085, 4327, 5354, 3999, 4087, 4267, 4268, 
                   5422, 4086, 4569, 4000, 4570, 5097, 5443, 4947}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{4821, 4127, 4343, 5360, 4012, 4465, 4283, 4582, 
                   4284, 5385, 4128, 4944}, VertexColors -> None], 
                  
                  Line3DBox[{4822, 4158, 4384, 5371, 4031, 4161, 4613, 4614, 
                   5404, 4160, 4385, 4032, 4493, 4941}, VertexColors -> None], 
                  
                  Line3DBox[{4823, 4175, 4396, 5374, 4038, 4177, 4623, 4624, 
                   5407, 4176, 4397, 4039, 4498, 3228, 4301, 4901}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{4824, 3891, 4666, 5052, 5420, 4192, 4047, 4561, 
                   5393, 3892, 4562, 4048, 4635, 5410, 5053, 4411, 4557, 4412,
                    4730, 4934}, VertexColors -> None], 
                  
                  Line3DBox[{4825, 4189, 4408, 5377, 4044, 4191, 4303, 4304, 
                   5391, 4190, 4409, 4045, 4504, 5114, 5279, 4305, 4193, 
                   4935}, VertexColors -> None], 
                  
                  Line3DBox[{4918, 4998, 5445, 4691, 4621, 4622, 4173, 5133, 
                   5317, 3966, 4219, 5083, 5182, 3967, 3842, 5183, 3968, 3844,
                    5184, 3969, 3846}, VertexColors -> None], 
                  
                  Line3DBox[{4921, 5013, 5349, 4701, 4632, 4633, 4187, 5134, 
                   5321, 3981, 4221, 5086, 5194, 3982, 3871, 5195, 3983, 3873,
                    5196, 3984, 3875}, VertexColors -> None], 
                  
                  Line3DBox[{4928, 4972, 5444, 4705, 4646, 4647, 4239, 5339, 
                   3925, 4206, 5064, 5165, 3926, 3788, 5166, 3927, 3790, 5167,
                    3928, 3792}, VertexColors -> None], 
                  
                  Line3DBox[{4931, 2782, 4704, 4641, 4642, 4230, 5337, 3910, 
                   3758, 5153, 3911, 3760, 5154, 3912, 3762, 5155, 3913, 
                   3764}, VertexColors -> None]}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{2592, 2765, 5143, 2593, 2776, 5148, 2614, 2788, 
                   5156, 2627, 5212, 2799, 5160, 2640, 2810, 5168, 2652, 5226,
                    3023, 3024, 5171, 3025, 3480, 2912, 3577, 5357, 2913, 
                   3351, 3269, 3045, 3282, 3352, 5363, 2930, 3494, 2931, 3493,
                    5399, 3144, 3056, 5300, 3057, 2684, 5236, 2841, 5177, 
                   2698, 2851, 5185, 2711, 5249, 2861, 5189, 2725, 2871, 5197,
                    2739, 5263, 2882, 2753}, VertexColors -> None], 
                  
                  Line3DBox[{3, 3738, 18, 3749, 3750, 33, 3767, 48, 3778, 
                   3779, 63, 3795, 78, 3805, 3806, 93, 384, 4122, 809, 108, 
                   978, 4532, 413, 4138, 123, 3822, 138, 3831, 3832, 153, 
                   3849, 168, 3860, 3861, 183, 3878, 198, 3886, 213}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2594, 2766, 2595, 5201, 2777, 5149, 2615, 5208, 
                   2789, 2628, 5213, 2800, 5161, 2641, 5222, 2811, 2653, 5227,
                    3026, 2821, 5293, 2665, 3481, 2914, 3482, 5395, 3198, 
                   3353, 3199, 3434, 3283, 3354, 5381, 2932, 3582, 3495, 3496,
                    5333, 2676, 3058, 5301, 2834, 2685, 5237, 2842, 5178, 
                   2699, 5245, 2852, 2712, 5250, 2862, 5190, 2726, 5259, 2872,
                    2740, 5264, 2883, 2754}, VertexColors -> None], 
                  
                  Line3DBox[{2596, 2767, 5144, 2597, 2778, 5150, 2616, 2790, 
                   5157, 2629, 5214, 2801, 5162, 2642, 2812, 5169, 2654, 5228,
                    3027, 3028, 5172, 3029, 3483, 2915, 3578, 5358, 2916, 
                   3355, 3270, 3046, 3284, 3356, 5364, 2933, 3498, 2934, 3497,
                    5400, 3145, 3059, 5302, 3060, 2686, 5238, 2843, 5179, 
                   2700, 2853, 5186, 2713, 5251, 2863, 5191, 2727, 2873, 5198,
                    2741, 5265, 2884, 2755}, VertexColors -> None], 
                  
                  Line3DBox[{5, 3740, 20, 3753, 3754, 35, 3769, 50, 3782, 
                   3783, 65, 3797, 80, 3809, 3810, 95, 388, 4124, 817, 110, 
                   980, 4534, 417, 4142, 125, 3824, 140, 3835, 3836, 155, 
                   3851, 170, 3864, 3865, 185, 3880, 200, 3888, 215}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2598, 2768, 2599, 5202, 2779, 5151, 2617, 5209, 
                   2791, 2630, 5215, 2802, 5163, 2643, 5223, 2813, 2655, 5229,
                    3030, 2822, 5294, 2666, 3484, 2917, 3485, 5396, 3200, 
                   3358, 3201, 3435, 3285, 3359, 5382, 2935, 3620, 3583, 3584,
                    5419, 2677, 3616, 3566, 3614, 5418, 2835, 2687, 5239, 
                   2844, 5180, 2701, 5246, 2854, 2714, 5252, 2864, 5192, 2728,
                    5260, 2874, 2742, 5266, 2885, 2756}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2600, 2974, 2975, 3158, 2985, 2986, 5152, 3160, 
                   2993, 5283, 2994, 3161, 5338, 3003, 3004, 5164, 3162, 3012,
                    5288, 3013, 3015, 5290, 2907, 2908, 5173, 3032, 3271, 
                   2918, 3357, 5359, 2919, 3361, 3274, 3048, 3286, 3362, 5365,
                    2936, 3380, 2937, 3289, 5366, 3062, 2947, 3615, 5436, 
                   2949, 2688, 5240, 3082, 3084, 5181, 2702, 3592, 5426, 3594,
                    2715, 5253, 3598, 3600, 5193, 2729, 3604, 5432, 3606, 
                   2743, 5267, 2886, 2757}, VertexColors -> None], 
                  
                  Line3DBox[{2605, 2894, 2772, 5417, 2606, 5204, 2992, 2783, 
                   5337, 2622, 3340, 3000, 3130, 5285, 2795, 2635, 3343, 5217,
                    3009, 3134, 2806, 5339, 2647, 3345, 3019, 3138, 5291, 
                   2817, 2660, 3348, 5231, 3037, 3142, 3475, 3701, 3476, 
                   3728}, VertexColors -> None], 
                  
                  Line3DBox[{2607, 2773, 5145, 2608, 2784, 5153, 2623, 3001, 
                   3131, 5326, 3002, 2636, 5218, 3010, 3135, 3011, 5165, 2648,
                    3020, 3139, 5329, 3021, 2661, 5232, 3038, 3143, 3039, 
                   5174, 3040, 3487, 2925, 3727}, VertexColors -> None], 
                  
                  Line3DBox[{13, 3743, 28, 3759, 3760, 43, 3771, 58, 3787, 
                   3788, 73, 3799, 88, 3814, 3815, 103, 404, 4132, 2042}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2609, 2774, 2610, 5205, 2785, 5154, 2624, 5210, 
                   2796, 2637, 5219, 2807, 5166, 2649, 5224, 2818, 2662, 5233,
                    3041, 2826, 5298, 2671, 3488, 2926, 3489, 5398, 3211, 
                   3376, 3713}, VertexColors -> None], 
                  
                  Line3DBox[{2611, 2983, 2984, 5146, 2612, 5206, 2786, 5155, 
                   2625, 2797, 5158, 2638, 5220, 2808, 5167, 2650, 2819, 5170,
                    2663, 5234, 3042, 3043, 5175, 3044, 3490, 2927, 3580, 
                   5362, 2928, 3378, 3704}, VertexColors -> None], 
                  Line3DBox[{2752, 2881, 3115, 5262, 2738, 2870, 5258, 2724, 
                   5188, 2860, 5248, 2710, 2850, 5244, 2697, 5176, 2840, 5235,
                    2683, 2833, 5299, 3055, 2675, 5332, 3492, 3491, 3581, 
                   2929, 5380, 3350, 3281, 3433, 3197, 3349, 3196, 5394, 3479,
                    2911, 3478, 2664, 5292, 2820, 3022, 5225, 2651, 2809, 
                   5221, 2639, 5159, 2798, 5211, 2626, 2787, 5207, 2613, 5147,
                    2775, 5200, 2591, 5142, 2764, 2973, 3123}, VertexColors -> 
                   None], 
                  Line3DBox[CompressedData["
1:eJwVzL0rBHAcx/HvTRfnTopkUOThMl5xhOHK1RGWY8HCbZKHDHayW4z3F/AH
MLKIUmLx/Fhil1VeN7z7PHw/v19nZb28loiIZZzVR5RSEfvNEcf8CD/YEtGa
iWjBgS6nG9A1yXnaSKv6rD4np+Q67OnadSf+SjdEnNIU3dY366tyQt7lt3QZ
2ub9YTril79zO7LZlG/5DZuUvkNO2u3ovuQLeo4V96ScdfuweUdRv0Rv/FOh
izXs/vDG99q+0oLdPF3AHGbdf2ob7wryqvsoZvgr3Swto2TzjRe+x1/PdMhu
ik5jEsPuT+h2f5IfkbcZp5f+mqj9gz6bazzwXbb3dMCuSD8xhn75H35NNVg=

                   "], VertexColors -> None], 
                  
                  Line3DBox[{2759, 2888, 3568, 3455, 3464, 5393, 3463, 2745, 
                   2876, 3390, 5391, 3236, 3109, 3326, 3565, 3325, 2731, 2866,
                    5409, 3533, 3532, 3101, 3319, 5318, 3563, 3318, 2717, 
                   2856, 3526, 5407, 3525, 3094, 3314, 3562, 3313, 2704, 2846,
                    5406, 3519, 3518, 3087, 3308, 5314, 3561, 3307, 2690, 
                   2837, 3512, 5404, 3511, 3076, 3301, 3560, 3300, 2679, 2831,
                    5392, 3500, 3444, 3065, 3292, 5305, 3443, 3715}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2760, 2889, 3621, 3544, 3117, 3333, 5323, 3454, 
                   3332, 2747, 2877, 3608, 5433, 3239, 3112, 3330, 3453, 3329,
                    2733, 2867, 5349, 3602, 3235, 3104, 3323, 5320, 3450, 
                   3322, 2719, 2857, 3596, 5427, 3230, 3096, 3697, 3449, 3696,
                    2705, 2847, 5445, 3590, 3688, 3089, 3695, 3724}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2761, 3618, 3619, 3617, 3156, 2972, 5270, 2748, 
                   2878, 5280, 3154, 2968, 3603, 3538, 2734, 5321, 3536, 3537,
                    3535, 3152, 2964, 5428, 3597, 3531, 2720, 3529, 3530, 
                   3528, 3150, 2960, 3591, 3524, 2706, 5317, 3522, 3523, 3521,
                    3148, 2956, 5424, 3589, 3517, 2693, 3515, 3516, 3514, 
                   5278, 3080, 2952, 3703, 3506, 3717}, VertexColors -> None], 
                  
                  Line3DBox[{223, 3894, 208, 3882, 193, 3871, 3870, 178, 3853,
                    163, 3842, 3841, 148, 3825, 133, 4152, 432, 4867, 2306}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2762, 3119, 3157, 3118, 5271, 2749, 3114, 5336, 
                   3155, 3113, 2735, 5194, 3106, 3153, 3105, 5255, 2721, 3098,
                    5335, 3151, 3097, 2707, 5182, 3091, 3149, 3090, 5241, 
                   2694, 3069, 5311, 3081, 3068, 3146, 5402, 3503, 2943, 
                   3716}, VertexColors -> None], 
                  
                  Line3DBox[{2763, 2890, 5272, 2750, 2879, 5261, 2736, 5195, 
                   2868, 5256, 2722, 2858, 5247, 2708, 5183, 2848, 5242, 2695,
                    2839, 5309, 3070, 2682, 5334, 3508, 3507, 3587, 2944, 
                   5390, 3377, 3705}, VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0DkspWEYxfFXNGKLCJUohNj3bYxtuJixb9eWmGJGQ2GuwiSToCOSEWJJ
mGQUQzKNKDUarUJLIhEdpUSr9LvFP+c85znP+yVf3tzSeCwhhPAbpykh9KSF
sIUTvjk9hAHMpobwmBXCV1pq/oQknajsXK/WPIjv9nMoi3eyQ+igyXoXOnX8
EP67mddZQLm5E2k63+RXevXmYcTsl1DBd3grQjP0rnUa+BGcuVnW+YlKcxcy
dWLye71G8yh2ZfvYQ5G5zXvddNF8gAXdFvMYjt2uey9fvkF/0AdaQJPcrcS/
z2/LInSHFrtrt+uhjbInvOl9MI/j0pv7ern8AS2hn/FL7xnFbhPlrbIojvg/
qIr/H7svtFkvS9bET+Avf4xqvhet9pu+kyP7aJ7EP/4ENXzEO310VS9f1sZP
4cbNrewOr3jBoWyNtttPox+FmME7RtM93A==
                   "], VertexColors -> None], 
                  
                  Line3DBox[{2979, 3241, 3242, 2980, 3165, 5341, 2770, 2602, 
                   3245, 3402, 5281, 3246, 2989, 3171, 3571, 2781, 2619, 3406,
                    3408, 3407, 2997, 3177, 5421, 3572, 2793, 2632, 3413, 
                   3415, 5286, 3414, 3007, 3184, 3573, 5345, 2804, 2645, 3420,
                    3422, 3421, 3017, 3189, 5422, 3574, 2815, 2657, 3427, 
                   3429, 5295, 3428, 3034, 3192, 3575, 5346, 2824, 2668, 3430,
                    3438, 3431, 3050, 3205, 5385, 3365, 3710}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{3122, 3121, 3120, 5273, 2751, 5199, 2880, 2737, 
                   5196, 2869, 5257, 2723, 5187, 2859, 2709, 5184, 2849, 5243,
                    2696, 3072, 5310, 3071, 3147, 5403, 3509, 2946, 3510, 
                   2945, 5370, 3379, 3714}, VertexColors -> None], 
                  
                  Line3DBox[{3398, 3240, 2891, 2978, 2892, 3243, 2981, 3244, 
                   2895, 2988, 2896, 3247, 5350, 2990, 3251, 2898, 2996, 5351,
                    2899, 3252, 2998, 3256, 5352, 2901, 3006, 2902, 3257, 
                   5353, 3008, 3261, 2904, 3016, 5354, 2905, 3262, 3018, 3264,
                    5355, 2909, 3033, 2910, 3265, 5356, 3035, 3275, 2921, 
                   3049, 5360, 2922, 3366, 3276, 3733}, VertexColors -> None], 
                  
                  Line3DBox[{3456, 3465, 2970, 3462, 2969, 5420, 3570, 3110, 
                   3327, 2966, 5377, 3108, 2965, 3324, 3102, 5376, 3320, 2962,
                    3100, 2961, 5375, 3317, 3095, 3315, 2958, 5374, 3093, 
                   2957, 3312, 3088, 5373, 3309, 2954, 3086, 2953, 5372, 3306,
                    3077, 3302, 2951, 5371, 3074, 2950, 3299, 3066, 5368, 
                   3293, 2940, 3063, 2939, 5367, 3367, 3291, 3708}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{3457, 3458, 2893, 2982, 3166, 5342, 3334, 3167, 
                   2603, 3248, 3335, 5378, 2897, 2991, 3172, 3467, 3173, 5282,
                    2620, 3253, 3337, 2900, 2999, 5274, 3178, 3468, 3179, 
                   2633, 3258, 3339, 5379, 2903, 3681, 3185, 3469, 3186, 5287,
                    3673, 3263, 3342, 2906, 3682, 5443, 3190, 3470, 3191, 
                   3706}, VertexColors -> None], 
                  
                  Line3DBox[{3459, 3460, 3461, 3159, 3168, 5343, 2771, 2604, 
                   3249, 3558, 5325, 3250, 3127, 3174, 3609, 2782, 2621, 3254,
                    3409, 3255, 3129, 3180, 5434, 3610, 2794, 2634, 3259, 
                   3416, 5328, 3260, 3133, 3685, 3611, 5444, 2805, 2646, 3689,
                    3423, 3690, 3137, 3686, 3729}, VertexColors -> None], 
                  
                  Line3DBox[{3569, 3543, 3542, 3116, 2971, 5410, 3541, 3331, 
                   2746, 3238, 3391, 3237, 5279, 3111, 2967, 3534, 3328, 2732,
                    5319, 3234, 3389, 3233, 3103, 2963, 5408, 3527, 3321, 
                   2718, 3229, 3387, 3228, 3684, 2959, 3520, 3316, 3676, 5315,
                    3225, 3385, 3224, 3683, 2955, 5405, 3513, 3310, 3711}, 
                   VertexColors -> None]}, {}, {}}}, 
               VertexColors -> CompressedData["
1:eJzsvXlYjlvb+J+IkKFZVJolSTOSTmmQIkWGlJCSNCCkIppUlAoVSqMm0RwV
GUojpXme52toklCG/O69j4d1Pd7jPnr3fvb7e/fzfp/952cvq3Wd61zntIZb
0PTETnNGBgYGTU4GhpkMP/4bhQSJj8eED5LQv8/CvDm5E37wld22bEqnSTi2
0uulWjni32verlPzJuH5Dht53iHEQ5bLpi0II+HV7uSCIJaun3xMLqNKKpmE
C7nqOzzEEGebcBXfkEbCp103YwVXIc7KbiLWeJGE5LAw4eZ21P/Q8RmXHqVi
YFL0gc0Emn7y4wx6Xr/xfh9eSSp/Fhuc9BvPt2GIpPL8YR7T33jCh1NPD1D4
1CarU7/xly+rcSq3Xrfn7G/804WUD1Tu27vy3G+c9cLaL//E5ZQdfuOMs+2n
qPz2UWMR410kSA58i2MKQ99lsmfenLfHSHDLtrx/4Rnix3s5lodcIkHNL6/0
ewfiX2PtyZfBJOil1SqxzERy8z+lHLX6AQlRU5zNnwQRP8Z6uIEjg4RqodDn
w6sRN3YwZjOkzWOr3SGtjZR5dGtxeceVicGU4q4TIVvR+BPthHa1KeNwW4h7
X85A809u9Y/+G3/pn3DE365u7IfbJrfz7ifU/OQcp9hSTWsH4PKjPC2tmPqf
3GyjSVgvBwaeCbcO37Zo+MkNbRi6JmQxCBrM6ErMR9y44KZZmDoGqrduFnJO
IP7NUa3eRoOEa8pVmcNe6LtaXvgfdTImYVbhdduaRMTfyfM1GZ0lIenBoW/O
lYhvklh7fLs/CYaQ5lLwCXGPdes7IuJJuB+x7lYwL/re0lUEl8YjEm7MEetV
kUH89DnP0OCbJGi+MvRQnUL9TAm1+HJlY2BgOH7/0W4k51fi1XzR3TgoiS4/
H9XW+pMb7F8yozBuCHSvpreqLe77ycU/vvbWud8L1r1W2xh4Xv/kulukj5RV
9EPcoivvt/oj+e97tFMgxHgA4rvt/ELX1/3kQW0+rarhA6By3WuDOQOal5eK
1RoFBQMgN7+DdeoM4rO1NZkPy5PQrig7zG9LkRuZvd5sOwmfe9ff/HoTcVwZ
O1VN0/OOHgtDd4qeC+3eUSXlSYJlTLPCRxzxx1XcVpr3SDjZHPCBgQvJky9b
qHgsi2YfJnaPblNA/HmCss2+KBJOj+N8nOyIR45/3/slF4MkLZ1KTzMk59Kz
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
nGWp4OtJ8DpZFtpTdUGkJ5d1ZKzzXo5Db1zcg0XOpPtChw4vi4ygw8JHHb6i
nUg+MfTPLmkEH1u+fiRIgcTHnPaWdc0g+Occ7RQBWRL/FIiZVcEgeKZASvGS
UtL9aonXMpckGjGYrfQ9+MFtJLcq3QaHHQQfM9GyT7hP4mNU7+PeLdjSP6UI
A6uPb1wr95LySFC8DyoevGV+fD8DJo2YcHqS3mni1coqYrsYYPlG4X7/EYQf
YS0T9HqGwSqj5C0KpDxghWwKieIVGNADV8pti/6tN/5f41Rxj/+2fv6n8PHx
on+Wr45v/1/1/b+7nV9t/z/13796P//T/tT/VD5/lXX7V1mH/278393P/7Z5
+auv8796//+34v9u+f+37bu/yv76T43rr663/9vW539qXH/1dfXfpif/2/jq
X6X9/6164N8tz/+2dv7b5PNbL/3/U8//Vdr5q8jtP7XO/yrj+tV2/tvm/a8y
j7/x/x36/H/rOv+N/7XW7f/W/fLb7vzGf+O/8d/4b/w3/hv/jf/Gf+O/8d/4
b/w3/hv/V+H/bXGP3/hv/Df+G/+N/8Z/47/x3/hv/Df+vxd/tqV6epo9DtPL
1m/KyEHvkeeGKIur+eNwIuyQakcj6X23rKPT9j04uGfI3flWhnDnKfwnxWNx
2Pm9nz6TDeWlKb/PYsoZgcPI6P4dWz+h73MDclyKk3HIWBCWpCKEvj8Wk1cT
kYTDzHJ4as2LcBv7aO7Vt3BYWLGw7dxiUvtBPzy8CLxIuOTZEAlvr4qrP5KG
Q9eeISlclNTOfhsBqxAcWr3sdNX6SXmZvBZseqNKh7gFMy3zaaS6VNtuNN50
YsAUFd+rjqS6VJgfvWpZUy/E2MY9SU+r/RM/K2ni/ke+rzyprc1bSXn53tLC
N0y6SoNZJ2fuqeFv+BPffybf64/vD/wo7Sd/f4LrqFkXnQby2be/OvSg74+w
nPb94/utB7Z9IX9vs/WF+LA0BpFHMuyNr6L69S/uRez743vN5zvHyN9bh8o5
NCth4C+ZvsyvDn0flVYeVm6GQ9C5jS1yF5F8unoLw5864UDjl7lgfw/hkseW
R1wLwsHHMfZHJgPhbCtO9bqew+HFnZUhXOwk+Z9gz8oj5mugu0HcZgnC9+4L
Oh97BgftYqvjmt9RO8XSNaLJnXRQkRQPuPwGvdPHlplGmLn2wT4/FnlTDVSX
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
LnHF1573R/rT4a1MKOsyOjQq8228ew/JLeXWpfnCR3G4Ih4iCKTzAvHL0x7f
Myf07ApaZppozcQ834Xx4bF/P0y+OGXO4atIL+XuDjELvNkHHYP8su63kB6o
aH++1mgHDkKWgVZFj9B/kxV8bzn7MuB4nyLXlCQUHxB7v9h9TyEGggbe29+5
ovXDlejwan0uHda2cLhttEDr51Iuj8+qbAwWFc0PaCPF2WIaktace4LBvA5B
lQCvic+j58d9iPmDN9pr7jQn80+qc2qq/lCNi0oOVHIbL+eJ5qXF2GXeh2oG
GHMXPFyVhfRYgJnzJnNdHBq57miahVPf/5/IHtU6uWwY/EgDT9fj/q2ciA+8
LT/xikcRAyWGd9RYOcKbrh7SX0nI04ndoqmWlB+mLfN4hicxX3WNO6rOab7+
ZbtMxZeovpf41qs0aTcOMrXXGFKprZDRwn1c1vEppZ9u+NFwzHVgAO7fTXYR
pXWCxEzRAD5TZEfszLGx/GIM4j5GZAzvnzg/zJxj+RvPFGFQ+cEjwNcH4TKr
ndd5tmCw3imM5cnj1xPGN/SDixaHW/YA8P2wVldH+bKWfHxUjRH2vm41LdfI
aeL8Lflzb2iwE9+XaD67mUDy72a4H6sfLsfAi/v7hcao1xPGhe5vmfRgbnEv
GFnX1L1xRXYhzmQ1z6F7xH7hC+6jbZo4v8r+YdsNxbkYRPgsOZSzkZT3r640
58wjDO66FZs4uCN8vL76iY/3T6n8Xyp/eaL9lbwnzDxYlw63OPapc3EjfRt9
X1TdkljPnOUxdfqk/KL7vz3UT3hN6JPzdqwrChAeHaWh5E/si25aeHyGOikv
zeEvLq7WGGysLUvmV0E8ebqUX4LFSQxG4n1vy5SR8t7Y3NMx9sJAN+au8J5A
hEcqat7+RLQ/nSYYtIikD8s/jjqoaGLwKrDhVl0/2qeuMbVvunIwSDGPuPmZ
lKf3wfYPMsIxOKTlXr/C9gPpq3IPWGAVTIfsJNNPas+RHO6bxlptUaFDUIRJ
wvx2pFdt6j/L+9Qx4JTIpJbqfKSXlEzeM8QJ3jVLo/WhDYl3OWex8yxhwcGW
JXFEQBz9t4bewD9LHAcjw+NvewwRrqfoeyZIH4dHWDyeQsqDp30781QZLx1i
++KCZKxI93Xpsz10BzAQ/RRsU/EFjfd7vldabz0GcxfcrvyShfCDUVEXm94w
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
Yaqr3yDAeu8jd2fDsy8U9HaI1KoYhfWesf3Fn07kUbDYps3t9gF8fwX4KCUC
H3UI1fdvEPX9BlQHdyTq4BtQXcaPqMsI7MUgwl780/TAP00ubjbhnY4rDzRa
I+c4hmK/d5CpktuMCzz45jmmUHISPj9qUlNTbXvRMDsizlicMYf8Xlh9kf4Y
HhxU9pOzvobj3OTZD+ed0eGC4eQt70sYc3U+9rs5ToX+mU/tjfPyt3i/vJ0W
3LvgwIPk4qpNNhvw97RX3I3ihfAg5lDF9Q2MPF6q9LN71q958F5t3USKwW81
W816dcpjGmRGb7+Xy8AbjDbRNjnLjzdfGy+f2XUhPofS/rJd/b5RYHZQK+DL
OPyd+RcaHX/m9TtDRfjOZ/D6ie5V2eXGj2e9u8WJ/XTo++34/5beyNCqGJ/+
kAuSVdMlFoXh+EL6jvaT0Z1csLr4VqlFA+/XzvFnTu+y5MFXB6tt3jPwOg/z
cg5axNczT3ZtddTSxus8b+XkonYpHngnvW1qc8LvkV/dVfOtOhec254MCb2H
1xPuWZw1oCg4O/KE9B4OXs/yyC8DFx3jQmrTKqXDH/C+OE4bmDeV5sI4h9jz
Ca34+/vNUN45bTQPanKDhq25gv9ujm2iyDQZLjzS9SjPdMJ/V8k6esFUvt87
oCxoheTNf59+6Hk28gWkc8E9QEVv+ya8DqNWP8xV43HB/N1QyW0fsfx2V9eP
lZo8sBCZX+VZgNdn4YikNwoDaXigdH+ymSG+v5L7xd5RFlzYsnm8wTEdxvqP
PbQoqIOCvFdJTt2V8Hpu3CA+fyn/XkRX84aH2uD13CJ/KVeNr/+TvaLubd7/
71vnf5o8N11+8+6dNHRbfcigkDE3uCPQZPCM41xYU7O7zaUd71dDYGtmcSoP
1h92P2nggu+p9e1Dmj+186D5YP3HuzKM/q8DKeWyA7igr6tjv3gT3l+FVSPW
H+Xfl9z4NwP73/rn6bcfJddHfXnHpH/tyxuM+vLOofx8JTG/9EfxN/3lfjqE
x1hB4DG+91w5oPe4o/d8N34YzTkxQnNOOGjOyY/6vd8rf9B3vZff9DpQNGgu
eiKRB/nfbJMyO+7D4H6/ytPgV3kLkv/offm38q/9W97zve//u/fl737+n7Y+
P9ov/f+Gw/yv/H/nPPxX/u+UW+7ZoOdgQYOipnrI6SjsfyZ25NeU7KHhtEJq
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
bmXwPpim0FNPUnAuoebpyk4sHzLGY8/UKAqcCiz19zHyCclXLTqX8fdHikqs
/yrPmEsQbqQ0ib8+y9Jzj9UbYnnRoZRmM77/OX6vVKwro6/WDN3rDuJeq6J7
nUzc67PoXh8h7rVXqvabzGgKEo71HK/M6PswNcyQ6cH3MxMe9NSTZcxpH9zd
ureJGN+PFZvRstoA68N3nrEaAStoODJ8EW/zZXw+a+oNPQ4F0ND+bFBZ+Acs
59WWqY/j39Mutu89JVT/GK/N+5Pxmnx524NVrRwYZjNTRVcSf8/fnScX5MNd
iHx4SLrFoGC+X61xd2ZKAMOvZsuHaxtPG+i+nQaxsGwnnRLh+fDQqWcXTeR/
z4UT7Ssj1PD39EVx6HsiDv2E4lAjIXGoQJ6dl510Zms9OIyZYjTT84/5cM0f
nA//7ZygvLckkff+3vj3e+NcYfGsK4pnY5AftQb5UcORH9UDxbNtKJ49guJZ
YXHrZBS31pJ8KLvvzd7B9ysGtLd7upkKz28nXn8TddaDAlubD/uSo4Tnt63i
llS1XaPgRum+HioMPSOIfzVQ/GuD4tx5KM6dSvB5fdh8av7pwlqY4n1276Au
eL/+7jw2W746T9HmuVEgX89X9XCSKhOer7YJdNnTPZxvj3Tc31/+LDxfXRpz
+mAcf92aNAqe64Bw/zYYxfvd/mS8H1h5fu4eEQ5IVDcWPlTC+uTvzlez5Z/Z
8gxseelTLwJe3rrEP4d3l2UaawjPS5sdNek0569nhtH7ZxMMhOelv+iIu/S+
SUHj1qzmAHMsZ4vjBPnDBCJ/KMiTrCTyJIP9xsVWmVNwu7vP3Ykj8Hlgy59c
RXmPy0TeYw7KG5QQeQM2niMy3olGesYK6ZlhSM8Inj+D4m49Iu4W2EcPwj6y
zQWixpkfXry2AbbuENEyN2TMBWLhi2TL/2xA9eJ2ol5Mzv8RyA988an8dLMJ
Fp4UTRx1Bc+JZeNJdEd5oUVEXoisI7iguqo7S101wuPSjsc1PBgjNS7KqA6v
G1SofhLRp+FswknOhR2Mvmmdd8rdr9OwbfqkzlKG3f9P5wiJd2/+PKKkAepy
ctqjx7yG9atjTLeMxX44W12VjdeMrd7KxlPGNueHLb8kmPNj94N55YTVeXWQ
fSxD9rEbsrPvkZ0NRHZW8DxbfbbjkuLF7I8UTC2yHePCmF8k4Me0I/qmA9D5
XIzOJ9v3T7UaJbVZvAl0Qhw6e6dVQ1LTJHXtZ3gf2fqvBfduG7p3pmhuzyo0
t2cBMbfnJ0OXYB2HepA3D7IIN8X2gi0PI5jb823W7+f2sM0Ts0L95oZEvzkb
7yo5H4yNn8sO+Q+mLHyg5FwvYfmckORmo4GjKUgpVw29egrrbSP1KpGdFhTU
fNDdP258OYih+1WN7pcjcb+Ckd/7jPB7NRHvlR7Be2WJ1l+BWH+yTmSAzoMu
Og83iPPQhPhlGgh+GTaeYja+GDZ+IjY8DFvf/as/ifcQti+C/uWVRP19scfu
/pYjuJB/5PiCbeH4d7HVE9n4ssefmfnFtpgLbzXuhzhdwPJGVN/MJOqbDqhe
vI+oF2c3e2xJnEXD9vqp8SsOYjkbT30/xEevTfDRs/HOh6I67x5U52VbN2F8
8Wz1a7Y6NVs9WvtEUNEKvj68d2eDRE4V1g9h6Dv3EvXoHGJ92L7/Gfp+U/T9
R4jvZ1t/tno02/6ynYcu6PzUEeeH7bxNRrznSwje80jkR2kSfpQUwi00EbgF
NrwBG66ADT/AxuvKhh+wR/Z3pRD7yyb/3nvtg+pWbQhv8IyoW7H5kwL8WAsx
r+M40m8zCf32vXW6XUSdTljdrS9L3a1leUGxhDYFk+tPWTVl4/1yOVbGKeL7
UedvVPQqccX+EomXU0D51UiUXw1G+dUAlF8NQPnV90R+lY2fVAThMTKJ+iY5
r0kgZ/Or2eIRNtyUwL5IEPaFjVeRDadK8i3+dh4InkSBnA3HyFaXZ8OBsOEJ
e8Y5y+zmx49y5zl7H01jzN9gwZ+w8dqT/Ols580V4WeCEH4mhsDPsM0nIeeZ
3EN+lDLyo0yJ+agCXE0Igathw8uZWw7aufIxBeGNuhmqJ4TPDxHMGzlMzBsR
8ITqI/+Qbc6kMD9BS/Xw6S38dQgLN3ySyOhXvTN3q4zSORq4Je+85g/C58Hg
85AdZn5csBl4dd+ATKxnJs5U1ZnzkQdpXfuIyfZh2HfH0W2yajQ42Ws3hTJ4
c0xkC6xM+nDBbuIE+zgGX/Ctj0Xh20soEHOuDb18FX9PF3Qfs9B9rEZ4zs/E
XJrnSN6E5I4EzpPUw/8Dgme+XA==
                "], VertexNormals -> CompressedData["
1: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
WC3Dkvvh6QjeZ9FNZd00CO/WS8sF2CHYh6VKeWSMotC56FXs9H5ccHHVLuu+
JHDiK77nkNWII766uooHhqC7eZrFsJCoH87Hkzna+7E610KzcesonI/a78FZ
WQZeP3cFeFkMYmnT7A1D2xFcMmx34M/ZbAi9qWe+zjMRz2/7cPzGUAe+4t2g
smpmHNYr6of4+CTh2wb6nZ2PqegxpRvJ+mIYRFqeLM9oLsPZxzZi97d3oob6
t6nONeNQWP5KXsqkDi/m5wft5KRh+/MP3GXru+H+YX9mjwoDZ+PcWuhfmrCt
bJ+tf+kjiJneFh0b34iuUQ4pSzZ3Yap7tp9b7hj46V92It8r0Utfn3gvXLbP
9rcB8V6ML1Wb2do7UEpn7XrVsi5MMWjxlJ8cgcyU4EX2h9pRxWPJ62rxMZwd
Kf7U29ABUyN98eQ6WCQrHyXWATuYow/JdZhvf2mvFF6Q66PoZeVIrA9Yee0D
cn3mu/7gxaJvwi96UW/h3TEQ60ZFn6wWAYITjm16Y1q2awBHLGLqlph2I0u0
0WPlgEG4X63hV13aj9cUY/2gcxhzZMwGBRWboIQSn0nu+8N0hwxi3zGQhy5F
7vt8n/ucRXYrqQfXBPt1hB5grXelAqmH+a63zXii+tKYisl+XT3LnnejRnmD
eNDhfpCLibj5dG4Ih/Ytu6hI7caf8QnnOTl6YZbnca0cxxDqikuVk+OWrNuR
r69XQ6PXkTekzmkfaVcInePyVO4zpM7n+9zxPMMOUv/c2XYihP7BNkrQkNT/
fNenOy86fozwcRav5gj7Rz0osGO/Wt2Hz3BQ04XfjDqC/sbZ+q36vRj0hVNN
5norDOp4snEZDeNz2SVvONWoeOTD3seBHcUgYiBxmjzXuq5bJ4lzjTuafez/
07n+p/MZdq4aZ1eP4uPtWwVr9fuQ3y8ohs2kEZwbCzJNPUawVm2D1FP+Afxa
o/jJza4GZo5YKe+gDuEfhnJxhcAQOpicr6X55vwv9+3QyqrGzRbRBEfyfBL4
QYdsqYQT6pItYJrvG2L5Iwn3d6E770U6+NSwfdLoa4Pd0aORR/UyMXjpPmVn
GAcT/X3sI3ZdMBmy0JH1fBGu3Clyfff2UTiYEBHOvWkAUktsvulfrUeVoNXi
Kl/boRXbm97SaMCIea0UalSJl0U0azR063DJjfVtoyoMsP8ZxnJbrwCHnkk+
fa/Tg4m9qj+2+tKAX3N2u/ipekwVmNDyOTOAz4xDr0xPDIN0sbaWqUIM8i7X
NtXawsAfbJ/YXbY1w9Rvi9pLOkNY/MmGRo6/w6acNExKwP5Z2pc8m06Mcl81
cd1vHP94pcuJ7EmBMcuutPLAfkx33dBf+HMUsw6dvqBa/X/P9xSudQ/fxEcl
4YGCy1930pgwfcvvMdUvBLZ1L+ov545CzxPYHj7FBPGVG92yfoVDqFL/wZXe
IRjv+jjXiIWBY0qjo9TtLXDm0YkknvBwdO9YrfOziI6SzLKf5hatsEiR51HE
2fdYKy6/R9COjjw1i1YVj7ZB95cae/qtGLy0ezmryNw4/rrUNbm3vwMgysrf
sS4Jy2rven3QHcernbwjVa5doKx6/4AvbzrSIsL2VSnR0F724nlb/16Q0TVj
t5CmYFfv2kl+7VE0nbNNylEagIOtJjJno0uwVX30udMtKrrMSkkKrB6GiBuH
dJKYtajZO7aOY2MHHnopkRWzehx+nUjJr17cjAFad3wUajPh0XPa+axlDGgo
X/tHLrYJXQcc6t4sHYBHnG6vbz8eBnf986nB9vXomdnz0t9rDGSiX/q8leyB
k9vcD3jfrccbk6pi27jqwIYuJy2cSQf62fICvTvVeM3sN/2pOR3ubRHYEhne
BI82WPgsFixG9+rRydPIABXWW7oWu6qBnmSbK8XSjM4JKupL6gbh+4D9qsXj
VBCdtX5BIXQYsSq0jNAhnNngHUjqMCHP1sGc4DeBSWtVgt9A4vrgPi2C3+6k
mI2QOpbrXFBPjPDn5+cXpJ7/qU6O76HUkTpP/DpXTegcbGMXP/+/SefHX2/j
SyB0zl2o9YXQOSr1sZ4YInTeIy/+i+TP19/UQwn+xNoHNT4kf54UO/awgtD/
6vXspP7RwOXXgmxC/3dZBNYlEFza761Acila7n65Q5ngUtodsxLSnx9+NhIi
/BnG1vd0kP6ssmLnGjJHhFrUriByBLjuep5P5ojuU3k6pM8rvb/DRfg8DNRM
JZE+P9/zn42T0iB9/uitlHTC5+Hmm9Lu/y98fmpF3hqyPpYJzh4h6iP8+PxV
g6yPhbI8BWS+klNbnkqMEGP8PoPMWYWCvoZknS08fcWPqLNgdf6oBllnBR8J
7yXz11OvPdZE/gIapyOdzF8crHe4yDrrqMwVQNRZSBq46UPW2f+u57cQpB/R
Kx3A74dnfluxj+J0h8fGad2PMNxV6EjySWzhbmOCT8BAovMiySey6/tekvk0
48HjciKfwlTRYyEyn9blsOwlOUc7u6aN4Bw4s3vFVpJzjnHmfCZzq7KG4jiR
W+FkmLsImVuVQzgbSb4ZrNUqJkaQuicaS3LOf9d7lQmyRYddHMCnTmt9rm8e
xXYlSzptigLpL9+eIfmQVT+lhOBDkB9w8SL5UGXB4Ydk3rd8wN5N5H241TYW
Rub9yzX6MyRnGiy720twJkT197eRnLnhp/gE2QeoXxhd8duhHxrShM6QfYBe
GbFAkjP1+Ck+BGeC1D7PEZIz53tOrpNJy8i+QZ+LnbyrQh+K7T5kQvYN5rve
UyvXXFSvD9f+fH/JzXwMm3SO6WQpl4CCImMLyefrnz7jJ/gc+AfrnpB8Xmvq
FUX2SaKaJgRqdw5BbOu682SfRNLCPobkf2qRdCzB/7BS+LY/yf9UDXUXsm8i
qad/nhihebdvPdk/Mf7IyUNy/q8EtQCC8+G6+cN6kvPne84f6hzhZL+F05TX
dY82Fe1vqfGR/Zb5rm+xCrHecq0DHcJ1w4c1xnHXl+/XfqytAieXgS6yXwSl
H8KEdo3D84+OYWS/qLfOY4LMNdUMnnoi10D9zYl/5ZqDSRwvyD6SboDE6MiG
cSzNvN5H9pEC3fkuuRpU4pWU9gqzhQxsEj/MSCyuB9u2PdtNebvB7kH1MN0v
C/fo1EdaLx8HFrO5v74XO3jdZkGjK6Uwc3aCzapJ9bDcN4mjRgPIV/ec3Xrf
KPIM/rCl1eRAuS+f9oBwE3IpCCkF7xtH7yXBdUqaLfB1U4qkkHQ3fl7sTvVx
G8O47R9P8OxrhOc/P7rebxhFFTvJL3u6+kHL8+P6/IAISDZ+vf+CIB0PPztf
uCi0A2rOOQmkiQRCt7nYMBt0Qbz6wuNffubgn2BruiXBifsqVy35OUWDQNet
q4WvpeO3bSp7rT50A0v2Q1tT/U4wNTOzm2mnYLTdRs2VV8dBDf/6PqjDsPK9
vMd1SkRXwrIPK/NVL1bYL7DZQ8O3reJ4KaEXVYfHJR0+J8BMVY+66h4qxghp
j2nRh5BTq5i94d4nCFrz+HHqAQZS3tknOOY1wTOujv1lks/n/zsJDXd9PY58
ho+/7v35JVGA2ZeL1X68GQfO7Hc3IJ8Gdgf5B0ef52DM5bjB72t74KKeobbV
6g44dv5hfL1OEV5IvPWQp34cHMb+en56oJ3dmoZLlE8pRntyHqeojhX7uybq
0PFIC9eSLc/b0ffylivPRd9C4FxB2AWhEcy8erHY6vYgUgM2RV89VwS2V/mu
bVjbg0+lDVliD9Fgi9cWrjnPcjhpyfFhaKYR+2TvCV2YGId3q0YdjkXM/333
fPPv75TTvD62gdLVMJcKzlIU0na/Lc1Chx7TX88YN2gwOanYPFlYgHfPRGkt
jeyB9xczONbxtELWHYU1bE8rcN1dn9tMcTr0ffvrfdN2BVoIR1+gOG+ruC6+
/sO8v2/e1izfdZfI28sTp4ytbg1ghI+SYdPiHPi08LMivOzHFoF13XciR4Hi
7frZU7EQyrKzth5f1I4z3ZvjuZ6Mgyz/eMFCjn/uw2cCuZ2luJph0UYGn7p2
DZo9CWbr2EeHkO8VtRGTY7Dl9mK25/HlKH5fViZgQy+kHQv2Db7TABOxrK7E
iCoGtR7aCnSo//nX+yaKVH12XXOBor7hqWaZdti873uP96WhWxJRf7neSLHu
HkQfJzZTi75kYP2dyVJRN4BH0m6Nvhgbgf6mirGUqSxwYJtUX3HmMzbxrhK1
JM6DWGTswxM7/jnvBTmfdCqBGmirZl08drUVOf9QFrNVjwO3a97O59mjsExG
+erq4EbkHJ87eeFo7z++/9vDjv1Htg2gq6VzyVmPUbjPKTeaT0uCc7op/Bv1
OzBki3R0xjfi/A99zJ5w+u/jnK5Evdb7FxPxqw3txJ2XdFi3J4dllq8NyvgW
Lax4vgzrAw796+8z6L458CwlagtM7NynsEsyFj88rJE91kUH9fChpVq5LXCn
WV5yWigMDxbxrdUbpOO+SHv+sIIWWGd+gXN6STrKXetzaw4fhxPSBpQlSzqh
qi8xtfSRAIZJvpgi759aH+PNwysJ7tVfCiuvpGD7MZb2lXJ0eM0j1JhX2Q7f
d7xbfDA7Ck017dtv76GjSNoC47qmdpDycZqo4irASFudhuU6Y3DyZPkxifQ+
KFgm5NCLwnj7R+ooeX8nLs0azTgZGCxtW3uSJQePfi+XVCuiweo3lCsya3qg
2HjYQGdbKq5UY1nI00pDmBmJOC3TA72sOisa1tdgRRZ3a9iPPghaybmx/swo
BPEZtoeukMVBnc5y8v6bT35Qlj66C2az9lmoaZXi67IbccbBw6A2dIku1D0I
fnuf3m+dKUBBty9V5/OG0fCYTKbez0HgPajOmV/ZiD7pVzisDdvwdDRN6tYg
4U+bZ3NFFWuxwOP8XNChVmTGJQo+KR4HhiSllvWpLioHcZT+Jv9ORcR+/sod
erB8t/edZYGNmOC5fdkhyzKQ6qjSf0ylgxp3dLxifwNePi1YfdipDLfWz52K
YWWAB49qZFVqHur92WBryEnkUM7ooeHhdmhSYqWJhJdgfvvB99evD+JKg+fZ
hWwj8LR01Fd/gSbetvs6PEf+XHn6Xk//QjU44i/CQrGtQkc12dXlO0ZQsHz8
0bukAahRGD4XwN+Iry8Ix7glD8PP3+AZd3AAdv7Xz5VtexTnmZF2n7LYfc+K
h4puqio8am5vV8vj0oqu7n/9/sGLJU6zN8VAX0a5eSAwCti/h8ccz2fgmlZm
yMiNenChURTVAypx2dLN/KVrGbCCbV0776p6eDUupHJ6vBHzy/W3nrNkoHZO
S9XCqyH/+FzcGGD9rhXfjGorb5hI8DLQSPxp9wv7GHgioHhXm5iPpKTsJ+ZB
YIvFAz9i/r/rPP7/8/9754v3Bps7LolGnbuUiceTTMjent1vvCd8fj5ftb2p
ZGUCjga9s2FnMCHIvNhs+ZE3cChIIbKUmJdTir5EzCObubLyCmIeeO1W8ttH
YLyU6sSZL0xg8b7xyH7Zu3nv/+roo8tieu9xwQ2VUzbThM+oZVncSYuA/ueX
2bYQ8yHBT0yIeZyOPDtMzlMXR/3ykAtCpZ0RrY2rGPglo20G45oh66nrk+rw
RtTdEsvX0N4C9Xce6UerjIMo67216p8a0XjYodZleAS0vblWDNzpg47/+nss
j3Ufn18XfE31V71ESO5zH1X+83mbGzZW47D48eglm8ehl+LrsxU7QFAh6qPq
pzrsObL5Vn3/ALTxOcpeezP8f9z+/tP57f/1c5Uav9avbdC7qJqcbSCknvJa
9YVtxc57ZuV4ZEuUxAnnWri5wZn1jBVj/u/FpifOkNyii70bCW6B9WwPLUlu
+afP0zr71/PcU2Nvdvl2XtUukj9xV83beXnpjWV3P8mHvDHOxwk+hP4dOqdI
Pvynn1vI2cAqxVuEqNK5zeVeI3SMvrhWsIYBylN/PU9339RbPgUr1UVhkvYZ
7+NV7T0zW3chHWOW32c4PmiFycHzWRK8b4D38pX3JJ8/4U6kEHwOUy3UOJLP
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
Umf6Q263H+K7I638p78Y5moitvSR7cN95uBacMknlK2XNel/uxjuvDmef5Rs
h9jQVVsO51AkTVtr0BFUBM3PT046kHGZOpJ9uVUUoiM60LpUFsK7NGUWYbL+
r8+o+bpjk5CB+FI9RWwBHDmyEX03CoPrbpHL+48VIpsXVbxGHXlwKMUzXfBm
KYR9LHOlTccgjp5ZlvllECwLfhaS550GWc0Pg+47BoHXfHTG/PoAYFZ6HlQU
k/C8xTb9uUUH7I5/d64heByCBbOFdHaMghPTkKuXcQtQHFVXlVuehhczaY6i
lb1w6xNFs94rcv75lbUy4igBlgP6o+XOtUD2Q3uSvWotEGS6jdS4SfDD55ku
9+V4EF5Vf+yeUwF+Fom8hz6Q44jat3CF63NIlZZo5l8yjDwXpDxO8ziBd//Y
uA1dKdwW6Jm1a6+EN5Hh6mlXMWC7Hq3PI0xE1dxMXEe398LduIwUu4e2cErg
2aFzRRiMn1x8yrueiYxIVQt7V3OB25jn/tkCDH7ynbB2vpuBKqLir9SP5YP1
6SPqp+6R94e9W81/B1dBVlnFw0fzJNjN3paYsrcW3LPEhF96VINL9ME/2a3/
3Pf/34UnDy8ewOseKOYig61nC7LO64/E6x5/t+/878Ktd49L4vWiGQuSToIV
icwTESteL2o8sf5Ds4GA9m8/wO/Z1gdCP4UOc4eHgfxBGqNLNTPo7p3ul6Jd
o3CwdZJW71Pqpvp5S30j1rKmUZyVslHS5XEodVqizpbeXJ6dIvBsx8FOdC/9
9q1ry0RgzO+o72dLBV7nnqd3GJtRe8yHS9JzJGjYxb5+oi3xb2fP/2oc9Yvm
FmbNol7PQ66iHiNww+s2V3ZS3F/WM9n46+qXoa9o57Oy0+0/MPjVkzqSUxkC
37B4Up5UOMpaujRybBmD31uqIh21Nu/3/qu4jer9V44YEbFZrzTJBnXCzo0H
6juQE5xlKkmR3UlCWrlbki/s6IQzw6xmH+e9QXDb9Z/120noi84pbTeWTkB6
gp10wj6gbst88HgAAbk5c318E9sPWKAVG59BBCwL+/DI/5lD25/a31MfHYTO
A27cR5o2/12wzfCVl9feM94rQ8HM4qu9kRh8S3bQSGmM/tv5w38Wvm3jhPCT
90TUvOVu4K8v3XD/tnTGn6jNf5c2QKmiz/MOCfXQamx8/dAOX6xfUFkTvf52
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
ZXYimefzGxlNk/sLMe/DHx2/9+H708It5P6iPZfbj8w/U8Ri1dd96ENHwYm1
ZP653j5Rn+SUspDkfVROwak8w/Mkpxitspckc9Q+rw4fsx29ODDukEDmqJHC
S8PIewVm295qf5TsQ30Zz6XkvQJjWlE6uR+/YhPvJPO0G690ugmT+/Hea6/Z
CBfNqhw3oLgIR5tfVRIu0lL4/oDcXxToCa9hn+nCRT/5vcj9hfLEFS1yX/Py
6fsnTj69mP390yVyX8Nm376L3C/fX/Xo9KWeDgxLmRMm98v8oSpaZE5yU3f/
6m8ZHbgtN+8lmZPYBm9pIPPkKpdn7xKedODsbyFjMk9mY5o1IO9RNOz+bC7T
2IPH7MqXkfcoPJ/69pL7l3Qpt2bp3R0oknC3ity/7B/O4iXzGb0N+Rkage3o
fnJEgcxnhjQ1bpN7nLV9myQmm9uwnL9Dl9zjWN9ZZU/uob78rKkbNOvGYzaM
fHIPFbldn4fcm2+Um3Z1Cm1D+UsTG8i9+VHagAiZF4kYm17i2dWKKtKmn8m8
6NLul6FkDr/vRbGQUkETlix700Tm8HzB1V/J+yGLltlsf1bbisn3j68h74fE
ff0pTe6bXrq+dsi1b0I7j0XG5L7piW5fG7kvPns1eSr8cR1aXeNlJffFzyzz
CwlfyW2PF6X4Cq3fhf7FVyZ0U3Ey17pVn9BSFVqHrr4ef821bh0THSU8I+Ne
+5niGVzEWvIXz3jfv/eVvCcgbhek5rauAT02TPz1ngDrdKkw8fepm7fCKX/H
myJqlcTfH2eH8iyjOGpH9a7ZbUwNuE6T91v3dw+YvdcQQ95DaLjHGSa2qAGb
JAr/eg8h3vPCXcJXk78PmlF8hQoGCnKEryTH9RlkXtef02szbNqI0stcx8m8
btXksSzCk748mocpnsQjg47ahCe/epquI/w5UsL6leJP9E3vFSX8ORVnIE3u
3/MtxD2n/ZrwfvfyBHL/PpoXq5rmQcMDxYfGXxk3IZe4c+zCNR4wILuEjXAv
c5AGneJe9D6dc5hwr82wBSvh3kVe9n0U96Lg2zJ7wr2c3jY7ybwxO+vWQfjV
iOojgsvIvPHQhDQP4cmSjduLKZ7EvZcVeglPnpNXeUDe01jE1Fx85k0DWj9h
u0ze0/h3ff8/6/9Z/8/6f9b/s/6f9f+s//93fc93nffMU3TULXQNzNpUBSb+
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
Mc48qmB7eQtwX1kX+U6HCsEejaqHbodkn4m/UlxwgoabR3NrxkMaYOX3214P
n6XjxK6TeyL30lC3oWD/ld/1YDB90omstxq6pVI0sZgOP9qdZ5N2VRP2Sf3f
xqcY4z/t/j53a5hznjiT9ep/5VdXXX/8LVGoC5ZzqjST+dUxc+rg1jLq4P7M
812ih6/eJ+OiWgv1w1+97wT98HZXMi5aNtJ3PvbkKMT4juc8GU7E3cZhWRHs
vTAbyl0oLj2Aiq3J2tuIeXl85lCLdGMx/Am0vqLLMoK/eK+q33jWhwt5DQXt
NHPAuzrLsclpFEWi9DqEP/Wg38Eq//HQZABBySHn4lE8XXTAhetWD0opNGdk
TUSDstCuspUaA6BzqWCDrlgH1pe9oByT7YOHn/xr46/2g3DhMS3WZd0YMbxL
cCalFzRKEw+xj/aDy2VJUP7ciTMFHzfKcvfB+HNzIbYP3WDmPGNUlzaAnA4e
US3e3VBWJ/mBrIPwpd0fLBKgAu+aQXuyDuKDj8RCydwWFPdrmfpuQAV9m63d
kwVx867b+/qLXolKp+IrMw/9DEJXyO4Sq+gVGIHW1+qyX1cmoVr/X0fGto7A
iNPXgU9efTBSXZN5OjcD7TJfTboTvKXFcESx4usI7JZc+4WvIA9Ze4cX+HZ3
wKrMkj8XxCnwcMB0++6Heaj2VuhxlkE/vDQ5ihd2DcOzj2aXeEoKUeHS9sSC
sCYYabq3/aEhFWS2jKO/cDna5TEpmvBaYumZHVNZ8nTQrJLvEbSrQZ1gI0tN
6gUUe6dmaz06P295sOhL+JBGOXI83t+9chsdxqtyHd0t4+HMhRtTazKzMHKR
WGTvWzqwXy9etP1tOvBUlGnFnkrGx1c/atrV0GFxbZmsg3AsxDJdUc2yS0H2
x4v51nykQ4WwxCJP0WxwtLKIe1wciiMXvq27rDuI288v/1JZNwjuGR8dj9WF
4n73X6c7wvswuEQxsWvXCGyT9/0xczQKhbozt3hZ9KJhmfQL3eWjUNPZxSI0
FYlWd1+cE5QZxmeq2V/XVveD2eG9txbfT0VB9lZH2Ys9mH5tyZhW4ijcKtls
98wnBZ9cPW0WxN2JOuK8piu1KXDoKr/+mohsbF5bxHWuoQktczkrh4KpIFqy
rbh9Xy6mHbgkZtTYjdWz1M9ru0b/Ix8ynBHHU2LE8WZPjHIwufdgYXf47OuP
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
FDPhbs+idcE96Wi2W1X21K9y4NoVeWlQm8rnNxVGrjzZjStnKg7u0i6A992J
p380JmHt9uEH8R7UPT7qP1hExb+XxPxTXy4JxePT3hs7W5fCio8Jyrcf9oOR
pG00K/Y+5hoUtd14kQmx+cy2lS5UPHOAX7WQ+zHmCKh7PXfNgSzWMYtVR//7
7M3Vq7GpaJgFw8c4uA83n4M6yxuqmVtfgUHrxdfbvrHgC1facx51c3B5aPvM
aYofXLHKNqz/zoLHvQ+Tv7SfxfFcKurjZ72ElOC197Kp/JLzplXm05Jk3Hbw
g/z1xveQKfxl+9nnLBj1rgk5bZ4G+3OlWKJi72Aan/TUESpPatzSukjDJgKC
d1snRNumwxN5oQ/T/PuBcex4M/+ncFCNHnS62FkC63eX56eUd0D118BRFaEW
iDr/9ebF0SZYLGRTvyyWBc/dtNSOnn2GYvcmhD4MSAFOa1UhszgWJE8WON/r
/xp3O2pZaJUgMMszA9ZuboJd6+b7vo4rhZn5vO8Vd/bC3BzHeokP+fCmj6Mv
cmIuNO3y615t/78nrggfl7DxTDcVt14Qj1+96gnuVHDpnr0/Atw1V8q39bDg
SvNnYE1/gb1V/XXTlcJhJX+qnie1burm18Oc+gpVlid5TD8dCkm55hlLTViw
a3b++Vz1HNyioJuyoSsApg88ND89QuXhBR5pgh0Z4Ba33YejrAxsz/Xdfbqx
D6p9S1Xs1yfDehvn7X17miH4o5nK4KQ64PE7s2xnRQrkW8ldiQlnwK2hjUnn
ODog6/E5RrdDIty56D++vqPrv+57/m9ZD4roGbpd1g2TdGTvKrk34OSrvvOV
7OrAT/vuy28rClFuZ0wjK6cT7iQvzqlZ0gGZSw4e6chkgPRujS0LH8fig6/z
fMyN66Dn3EKV0a0MOB0FG+TWZKDD1DSR9GX1EKFz4PD9q2mY1M2U5jhcAZ29
56qtC5ig0HNp6q3CEHQts3o4tyMXuKujhT6t/e/zb3/XenK1Syrdl8cc961A
f3UD6l/d8oPuy8tmm1965t/g8//T6zcJv3Er4TfOIvzGv/o7nK9+8zqCCK+j
88JvXsdf/Z28K8vBzyQG+XsnFKvWsbApIsuPnnPyV3/n71pX57cXLItlYgFH
hvLTuCqYvrd+y+1OFyid+noave68ang1tY7+aUrq9PpYv1M+ZL2jQK0PH06R
d7d904wxCoXnKp4G/uXn4etawvR7zUSJZPlTkd+rcHRX1sYjK17CronTfsnx
MrDxZvLqtRGNaPK+PvC6wF///n/XeonbN66V1PP0DBxbQj0P7GnyDf47n+fp
hzynbUe7UEZr0dSq5A7oerVg0SndEAgPxNbOGww80HZFGTvr4Wxrd2JDw1+3
n6J81jZ6v6SyOJ9R+wVFz6zP0PsVNMFYNDOsAzNWssxmW3fBbvs2Pl3TIFii
GOZy2b4P18xnWhVqNEP2fnPU1v/rdb2uWWG9ubE92PTiwevk4VbMK3WI4Zs7
dj9jubkii7aHsFKhI5Q9QPejjk20PYz195vfyWtIFjGxyfpXwfkNVSi/X2Lj
0jw3kD8/4/lSXyZ21UsqL5hTjSq+3NfHWXoAU5V3ZKCnCvs9nJa/fMMEXuHj
M5aDz5i/r/lUdqb5dSZyVPp17veqhpiWvTaXDXxgf5E1N/3d+g8ftKO+G16d
f46lQ303dZaYbvihVpy8pmjj5Dm9mNKT8cpO4K/z3/7qesGjAxrWM+Nw7Wbn
At9KFlpWqNTql/jATd9s7QrhSpxg5q668St1znxudNT/C/3x0NhdrrQd2thz
8VJ2iA4VNStoOwyRnhT4I7obrZY8M36n1I6HVdwmxWiO/TuF7Xs6aLvViN4p
T9ktrtR/nkTb7Tz/kkHDfAZ+mmS/9F5ZHXrbqs9e6jP2/hZPK1/px9mPsW5z
O0SUKvFC14rD5Z+uQYVMU/5F6n3zfdcVUe8LPTeeXaLfV5rDcwX9vvsjtm2l
3hdmJVTk0e8bKSO3ld6XO9NQk9oXuLYuxfNf7Yt86kNf+n19L+qaU+8LcU5f
+P7V+475/AtGP9Hvy80zfSX1viA1sGYW/b7tOz9uo+32GdO2nLJbeF+io0rb
rdalXDn6fWv7Ynup9wUjv/Om9PtKbRFYeyqrH812tEftcC6B9LrYkjOcdjBp
xaUXtJ2rLYJVlJ2D9dJ5N2g7F/QNN0tVZOI9VgOP6MRaeGQyX3nkx9h2/ret
+4z7TJ/3DZGNT6jzDmfdRvBfnfex1l0n3XGlz6kFd9om6pzinqrILOl/cU7H
WvdQd7pG+zGFkdBLlB/D+MlPEv4TP9YwuEaE9gMXTot+pPwAvpVabk37gR+C
44/S37lks9Fk6jvj1+mz1v+r77zfZPjkzbx+fCS8vtTycAky7cKSZJ1socZ3
Suv9hDDseL8pL3IoCXbEyD0UimGBz7eHvwrcI3AS94JE4fdRoP8uWd+U1uVJ
KJQ98ckH204ENBvtd4EXsyUn6lH56n5St11D6rafSN029PxP67arERi/plxA
zrcXvGsfW4J7C/yCiNodKwORx6Pq9LdP3RDYarHL+kcbTD2eJfaCIxK39moc
VMhMA2WJOzke91lQNCrqw2iKxh/4ZuuIfhwEx8zSTX7PgpNtpiu+zHuFp7U6
xJ/I2OI7naPadVRebTS/sLJ6RzU+Py1wvvAmAyyOql399qgI+FS4nXUfJ+P+
FRcKij72Qd76ebVDGxrhQolV7slTkbhfvNjvoHA2eCYW3/EyZgFr0j0Z//vR
ONDSpLJqYgbonIMm+8tUHn7+V5n+tVhUnyN4ZNlnBDfuU8d4qHx7liB3utGy
OFToWe6dERsFuktMHh9LYcGamdveTDeNRL1v9pcL4h7Az71GrzZ0seAS4dne
IDzbOMKzbWDjdymQOuMIqYPsI3WQ76m/6yB7S65fSv+YgVVc/S2HJzMhc9zX
7o7Iajihx3PISOw98l+7Fy+4iQE32xYfS5ZpgMB3ujzXa2JQ9YdOVKtaCVje
5j7W+a4fEnVkz1g5JmFziq7H/sdZkMfw7eLbyoKN7bM/Gr9JxN6ix6c4v95H
S9+C+q5CFhi8f+5827cBt4jIvL4/hQE7HH22GzxPAdk+o6w99RnYa38lo0On
H0qWJkVUO5SAF6lfZ5H6dQypX69jq5OWkjrpWPb8xzy69aTf04n0ez4hfKFu
whe6+G/6K7fWq7of++qLrvumJssfqULvXUkvfqUx4UaH05VJGuG43+jLx1f8
xZgzY88Rvq5+aK6e6X3gchqGiZ/dGs93Av11UrJ5g1jA+Dl7oqByPi5qMzKZ
+CkPppnwZdgc7wfPmPOlcvfS0VX05Mo7rH7cr2PEKa+SC5yPL35QefIU38Rw
xepolqLGEI5jvab+vqthUT6HL67/1vXLSrwY9+oO254Y6Ieo3cqzfJQC8U2g
wtzcA7mo9WB8Ob86C8x4S3ZaDIbhIfMFW61mpKHCqaf9b5+yIOuqldetxjgs
dJe5ebU0AMNKjHN0i1kwRHj1HoRXb0h49ey8mjzCq/lJ6pgKpI6pReqYrzzj
T8wtysYLG5ZfLd5G3Q+X3OSbmorBVChjWdOuFHTfeu6+6qx+NDh1ziFTrBx4
StaZMHjccN3HC0u8H2dh26fopbL2LKidW3DtQY837na+o39XNBnvSEQ9WpHO
ArH9SUqz08NQVUdSdPXcfRhl7GBq0c+Cu1ELtZuNE3BesPonk5cJoPUuYV1M
AAvkHL2XHUlIw+nbdGxUIxh4MXg295mEWjiSFRm8x9MZO2dM3l+Sn45m7WWb
859Rvz+//frJqnu4paJynP72VJyoFhDeG8kCqM0RX7jhMb5UT1V8wUxEKe6S
1r0FLODZYxd29sJzfFV7aSgtLwITV5nIXO5kwbOdKYrqdq/wUmRc0t337jjZ
Y1Nb+hfKT5L66UG2+ikP4e1YE97OS8LbUSb1U2NSPx3d+7t++rkgWKvJPw01
K8+Vv5RjIFfjS9vlBfXg7/W40+dFHJ6Ry3jpO68Pv6h+6CiNaIZJHx+f+6xz
EfPMtD++nZeEYksiL4fkskA7onKW3Zlr2Hd5h7DFqkiMCcD+S90sMNw1RWTO
2sd4ZaJw3OkOBTCdOWyp/JMFZ28+SdKU80HGp73Hd50Nh/FTHAq0qb/XWMOY
MtRdgFfT/ectWMNEK8nTrrtNKsB+vrv3gFIEBh8xPq4y0oN2m6Izte60wgy1
L1rFYIFOuw7rB3rEYp2C6KGZDSywC41S/f7qNHbO9wqLHo3AKUpSsw16KHtw
a7F4lXwB33DiqhyzN9in5qqZM8SCTWIdhb82OeLrkr3KJ17fwZ93N01ppZ7T
5pzVZ+4oZ5xwJdrnQZkfuNTfObRxhAU6FapJHyUCMHQd80t1cA9quIaXH+Fv
A89jXp1v1FrxPc/gGV7dHvwyd+ua5MQ8yA194k3POd+R8lNncVIzjkvwn0fP
OR8we9KvPr0XLZtqg9eqtmKjU4+3uUgCtHtZS67ZEI9B7fUhT8zT8evyph+t
1ixwJDo179h0ajpuXR3mXt6NpT7S6Z0jrVjIGXCYnvcOGiYvZaT88KVX/tvH
9xnIy+KK8MV62DRwzW1CQSAmONvOEGD14aO5pvzbBZsghTPW57V/DL6VaLpU
dbEHTeszZoYsbQN9nSu9P9xT8Fz13UfFFzuxnjPVJ9ysE/bH7bIP2liGq6eZ
aRdO8IE75++W2jj0w4GaTE47t3IU3vZ++AlvK3x/vvDnW/1uKB99aZ41PRfv
6C/afCaUCaWTtTqrxpfD/an8ybTuwCQhxQfrtzEg7qtP4H+iO7A2U9Cyly8c
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
                "]], {}}, 
             Method -> {
              "ShrinkWrap" -> False, "DefaultBoundaryStyle" -> Directive[
                 GrayLevel[0.3]], 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "RotationControl" -> "Globe"}, {
             DisplayFunction -> Identity, 
              PlotRange -> {Automatic, Automatic, All}, DisplayFunction -> 
              Identity, Ticks -> {Automatic, Automatic, Automatic}, FaceGrids -> 
              None, DisplayFunction -> Identity, Axes -> True, AxesLabel -> {
                FormBox[
                 TagBox["a", HoldForm], TraditionalForm], 
                FormBox[
                 TagBox["x", HoldForm], TraditionalForm], None}, 
              AxesOrigin -> {Automatic, Automatic, Automatic}, AxesStyle -> 
              Directive[
                GrayLevel[0.65], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], BaseStyle -> Automatic, BoxRatios -> {1, 1, 0.4}, 
              BoxStyle -> GrayLevel[0, 0.35], DisplayFunction :> Identity, 
              FaceGridsStyle -> Automatic, ImageSize -> 264., Lighting -> 
              "Neutral", Method -> {"DefaultBoundaryStyle" -> Directive[
                  GrayLevel[0.3]], 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "RotationControl" -> "Globe"}, 
              PlotRange -> {{-2.9999995714285714`, 
               2.9999995714285714`}, {-0.9999998571428572, 
               0.9999998571428571}, {-4.2359803413696495`, 
               4.095339199817434}}, PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02], 
                Scaled[0.02]}, Ticks -> {Automatic, Automatic, Automatic}}, 
             Method -> {"ResolveAsTriangles" -> False}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Imaginary part"}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[Im[Log[x]/Log[a]], {a, -3., 3.}, {x, -1., 1.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            Graphics3DBox[{
              GraphicsComplex3DBox[CompressedData["
1:eJysnXdQVEvz90ExoiiKGbNizhFRBiOKqIiBa1ZEVFTMomLAcM0KgmLEgKhg
QpcgQRlYgmRhyTnn6CKKAX25cnr22T73vE89VT//sepTXX3mfM+E7p6Zpa/x
TsNNTRQUFL61U1Bo2vB/yqbDIb9/t/Dvm7HA7ffvKipp4hA25FMc0TeaVTPX
Volx2+0j1XUfxxI6V6WP7QBFxneF7ve0WRJFTPa9vuW54wcFPsrERXvUsmCi
98fPZ8aHXjpRO3uFO9nwx76McbUWyyNr2rnQ1X94GuPaiWV7R3eJoQp//gVN
BW52INpgWIEn3dVoT4Crn/JYfdalrf+2Rv+MDz7ws/avwar+ixrbw3hlkNOs
azfVdbY0tp/xlJS3HywNuugENL6vDnDHy/Y7fx9pr7OwUR/GK7aqdl16t7UO
pyfjFx0MHA5kNwfub8q9t3vk7fFH3ycynYEb+CQOu3omnukMfERFd/XmD2OZ
zsA3mnVc3G5nBNMZ+JVFbrozzfyZzsAbdXz5DnQGnmmQaXt5STjTGTjWGTjW
GTjWGTjWGTjWGTjWGTjWGTjW+ZlyR6sdaYV0iPuDZt5tUpnOwKuaDthwszKJ
6QxcUhOjoNQ/gekM/Mt2l6yRS2KZzsDjm5YdT434wHQGrhxyockBp5cEdAbe
y2qwfaxpINMZONYZONYZONYZONYZONYZONYZONYZONa50nG/6YB5ufTX3XiN
p90ymc7Ae+l5d87qls50Bj5jnNItVfMUpjNw9029nzu9T2A6A7f9059jmM7A
PWaeGfD7sD/TGfjSD6fuL0v1YDoDxzoDxzoDxzoDxzoDxzoDxzoDxzoDxzpv
4t7v/u9ff2u75DCdgZvt2TSx9F020xl4+e0mD359yWQ6Azf9M2+kMZ2BN49y
aNt6WiLTGfjNHrP7bx8eyXQG3qiv1zvQmbUH6Qwc6wwc6wwc6wwc6wwc6wwc
6wz83/uzhAYW9Ti+xKgA9WcJNz/no/4soVbV+1WaGeeh/iyhey/HD7H3yUH9
WUJj9lm8GbYnE/VnCXVxLXjksSQR9WcJ1U+dfCY40o/I92eJQH+WCPRniUB/
lgj0Z4lAf5YI9GeJQH+WCOgspi1PRJnFPSxDOoup7UeDyLEKZUhnMV33YauB
YttSpLOYtt3S7dcK+2Kks5i2+NOfC5HOYvq+V1Bq7fhcpLOY1q+tH1qXHo90
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
L12t+36KYiLdebrqRj+PWMZ9O3VTW+wdRotfWjmFlgfT95O+GU5wcKFWHZav
3/TTldo0aR8796sjdeLsZ6932l31xoOM1dRrt0Mhi4Cf9nG6vdX7RZFNVnN2
2t+QELD/7ZM544FHEnnqX2s9XRpKoP1TQtpodduRTR5MdVDw8fdn/MvIZ0uN
f+cTo6KbsQuHeZAnHBfd0DV/frWE+LnpnTt68QmzN1coOPu5fyWZOFev2dr2
50iLqs9TArNf0bM/rr6zdy+jhwLa1fwemknbcDzC9rPjgn5FtG/F8EOz+qTT
35WNvN1Qo/NKNrn0rvJvzQ6OKcz+0cm9WQd+pNHoqQsGnzBPZHzEm8kv8hMl
1DrpcafnNbGMb6M/PjmZBNIvre/bO6UHMb7nTFXqoxEBZPGk1Cvf3icS4C+v
ifqY+MaSiKtNzm5QjWJ8kGnFki9ZqSR+efWDG08CGY/ucW3mrCa5RP+beHBS
Kx+izvHLp8esuXytkIx+t9ff8boracfxuRXRBxI1ykjp3bQes4IcmP3WzIGd
h6Tk07HGbhtF0lTWrxTGv+y11LyQ3nq3Y5HH01SqxNmL9p/7mTUnm57edCh1
0MBk+pCznxnRrplyeg79+6pOq7TwJPa+pd0Sg0dsTaLn8s4N3bk1nvWfdsH5
iafsUql0u/707mrxzD7fZuLASecjabpK+8vf7kSx/nyzxuXRJ/NYemxQ0Ivb
NlEU+sOsWZnZftf8qcHo/Rl5oR7Mz+etWxf17/Ca6CaNb3Lwrywy937wEd07
LnR6/MiQr+dPkcP7/nIdJylmepYYDVWZaBhO7qxT6vO1OJbAe91WbFt+vj6Q
SN+8sn5pmMTsd9QvmvJyQSKxaOdvZZv1gUA7ZxlOH2LUP44sHu33KXJJNLPP
ib6wg+zJImP2e55L7OLPxotP/yOrS3TTieda1eCVp4MI6Dw0xjhmy/x8Utp/
9y+DB+6sn988nPZhmmcu2fzNJ/FNrQ+BeW/azQnrzRVLefPhsVE35wzcWcDj
ISHfh6enZ/O42jsfDY3ryTw+OeF34aCcaNnvisRPviW95EJzBllPGTrLnf4s
GBh685Ub0z/Xdf083/oK+vZJfa+o9ln0SPrKU+sa5hPd8Nk6DzyrqIPvNOeu
mVnMXkM3cNSebSV0mG/VCdMxGawf+t7Vm+yg0BA/LE7R1/iZTvdsrzdfZuNC
W8/qP9RI5yjdHO5+y/J9PIHx+3vZdpve3g1xtM0F1yujVzA9iyYrlL7JKCZl
a4w1j6XI5o2leQdzzswtIutLvcYc++zKvtfjhw5Nf+ysIKkdtu+WaF9h8097
/c4/PqaWkfItcxxDcu4w/VvfGXRbf2gA02f0upeq/6w7psYiu9lUll8Dd26i
Vj/+dDyP94lfOPqDcwaPR0qC3rwwldV7x3D8rJZxRG1dEY/Pdvqdr32xnLf+
Wm03jspcGM77vjukd58oaJTx+Jvzvy+9tSvk8Zo+xnvNFXN5fN+u8256mak8
/vPeQisv71geD3uybdzAnRU83lY7ult6ejGPGyaMVrDTy+fxYSkaUXa7snjc
s0X5LUV92e8jKQaOThy0sYqEWp6yLpkgy2uAd9O6+erGdD/ZucerqZOsjp+j
N674nJhV4kWDPN1Old2NpE/Hj73xj32U5okAtRm3mM4tOPvz5hvsWxo+Jfta
ze2r0SmBNOX4pJCiIVkXKqlDntON0LwM2pbjR9fotbevK6GrJ8Z3Oh6aznjA
5xdf9E0LaCvVv75NOpBGwU+zS+0ymsZn04/anf2XSlIYt5uTf2b/qWQ6uu/F
9VbOSVSJ45qlhk9D3kfTxzMmLP1yMJ5x219tLz3pGUpGL9DYGRoaQpQ5TmOm
H9o0LoG0X7mvxcMhfrL2Ox558dUok1wuzF8Uss6dfLdp5MneaVWz/PKI/djj
4nFrnxHQs3XHwv0PHpXydF7ybO5qI9VCHr8+/fkMleM5PO7xpofhhZQUHifZ
2b3q3GNk+SnXzk06mVsH98yjT1UuPEh7ncr0Weh64oFfpwx63b9r2qy4ZMaT
MubsGP4pjv4qW3cvjyRSRY77d+26b/ytYNriTjv1ye0ldGX90YmFfzfo1vl2
mtaI23TWHNuKJp7utDlnP37lkzeDpe9J+4AXuQv1ogj0B6UtTuvUH8aQWVGj
+p3YJCbQzsOaWbavglPIPJONuvXxXqQJxw81a7uxz/4c8uz8a4+mF18z+/Hm
z45sbVFIOiac+frT2Inp/Nfo2TaF1U95+uz44N4kuLycx1+v7VJiubKYx2tq
D30cG5rH47u7e2+L25bJ49/nHps8XTdBdq745ughxaHn6NdW5dY2W1/SC8Zz
W9gvC6ZbjIZXTfQ5Rw1vaNoe+XKZhHV780i9NJ0sVKyL8lA5R4+9ssl8e6uI
DFbaKnl+7gFZyvEs43Xb0nNLiKVSnn73FjdYP0xX7ebgM72cjm92snn2qgz2
HXu7WJ7a7VpEB4s0258blE6hnYpVZ1qvnR3K2lnItdO45OiofZeraK8zm6TT
+mfSu1l+90r+4Z36tRv2o5Qeu1FiE9M+gwZx3PHF6dqcLYX0SOzYJYsj0uhV
jpfOLEq7mZhDd9i1/z5fK5Ve4/gaT7vT98+l0v7d9l0bNr4hXuJ4fv5fi9ua
xNLk4xMfmS9KoI4cT9eYOvXLMX/a/MSslZbjYugzjjft7Wpj2DGIzN03JWva
+jDixPG69baWWiPjyM+91y4fP+FP3nB819ioV1GG6eRxXdk9ssyT2HK8RlHp
k6tvLhkX5H/56PKXZDGns1aXkXUKw8uJx5Q3h769uEiWcPxOxM/TA/dXkiVD
+vo2ObCfPOf8dL9T7GOV4UEivufUeKTEkEsc9w+rvrNoVgU9GiAyNbmfQaGd
TTYsOdlcVEzvWb6V3NmfTp05PqfOY8v73vl0yux2oa9V0uhbjqv1HnOvuHsW
NVl3yThbL4Xp9mDBF7PlXxLoMYvdDx4WJ1JXji+qO7Dz3KMwam4xesybyXH0
CccPVpcE5k9qiKd/++iPmRpEQE/3sFHXT/snkZoKnxHiQb4EvqPdggkmF/dk
k02rL45L1xKRWyPH5V0ybRgvXns6en+X1ZGAR4/4/K6ybyKPz/w9stpqThaP
Gxe7Xz0/IZ/Huy02fC75UMzjcd5VQT1WyupI0J8dt66xbNbTg/Xne1z7DTwl
R/85Xz5q7qJVT1s8JXs6PDz1j/1MLZ2nOY/O8MbvvDMl1WpugYy3erb5046G
vLTFi7333eo92XNVL50Ma9Ngf+fTgenD51Nee+70VZ9npFrJ85/jdWyUyvES
Hu9nkNMpuDyfx02LZv60XJnN4yvr9YM32STxeIDRgAFPkyJ5fNqOBe/Ghpbx
+Aml144lE4p4POROh/MPHuXyuJppaearfuk8fvea63P1XxIeN/Pq8ehM6Sum
j/z+puy+PHB8PhA41KmAm6zsOCxaryFeuj7tnmigLePXj5j+sbe5UfXrgG+u
H95HS+048UeMOd8/vqcGHJ+vqx1dWBbW4Ed7vIvNj4G2Qu/FONS3Y0JCFVWl
ufTK1KepW0JTaCHHB79bHmNN0+mlX+46Fg8TaTbHRaU9HOpvx1Gfv27Els6Q
0ByO7xsrjkssD6JmKR0lx0aFsPp8vIahNE+PEuNjLR5L65NIKceHrfo4av7X
GFL7yybkwqJoUgn17eGtN2b0SCWn3C6sGn8wiKRzvM3xfhGTHuSQ7B3jP5dP
8WU8tIjmW40tJO6+qju2ub1m9Wr4jtVWW9auzHhByizU/P6Dk+WZO0zVw3LI
V87PaYM1v8KCSomhaW644oIHpIDjc282nfCoczk95W00VkM3k4L9hVGmPVae
LqJ/7et0tJ1OOgX/8L1imp3xGGqXxfhEbh85qNukxB/pGYzDfrGr6cdbmZI0
xmFf+MyYYTMy9VMYh/3fCQ7OJ3TrExiHfd6OY1p36zY0lnHon1KTm18nTfNn
HPYT778/cubLRgnTB85dP5fM1FiqFco4nKP+3aP36eMb/BmH8xidJu72v7LQ
g+2b6Hh/79LRqIqMOWPXV7zbnKD2EMW4Xzs/JSUxbs/tvxfPeTksxT+TtTOZ
22f36160f32+TGfYT699+8q3xDGVonbSwxa+LlHBSRS9Fx2g7vJXXnIc1oF6
Wt8NHzEwAutJop1PPC6+GUWQ/uRCzKz4i9JAgr4XkSw6/uTdEx8C+9rKofFz
si4H8fa7laX2ma3mVvL4ovPfgvw9Snj8Wp/Vzy36F/B40lu/qyOvZvO45r0Z
1eH1STxudavd4d2iKMZRPyTDLCt1fa+8Zu13nRa6uOBXGc9PTfzQyXe3F/H4
pO2Xey1JzeXbN89upWaTzuNHJjxOPLEtTva7uNy+jLVW2N6tSv5svkLnkXj8
yLrN5i8GVvD8+38JW7rRrpjHla4M1+quKMtPYR621us10zEjk2evfiivXXvv
BMZhvwDvyyzh9pH1X1aPVfbIpy0NrValLU5D+7aFdOi3tVa6k2T77DazlnQT
98umCnZt54RfT6ESuf3lXPpixtlTaTdSqS5n/+rttt+f+iTR2nyL98Gzkqi9
3D5vGi2cfFV9nlUyXQf7/pEbbtK6CPruo+7imcFx9L2cfwk9Od7r6K7LCayd
sE+0UqPEotmpGLqe81Ms7bC1w7g3JG5aVuqQDxJizHET9d+3X+aGE6tNI8+V
ugUT5IesONQk1nBBJIH2PF3no1ByPZGotfk15mvdO4LaQ9quMQk+MllMQM+e
Y2rHWfpkkYosicKl025sP5p7X3LF2aTdjcdebB9fT/Gm25md+SQ5NcotSepM
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
3GxF0vxbZcTKKe172UpdxuMJyRmbUUumPBw84tz8O8z/8TbJTu0m5vH0HOj4
evrJygIeX6Nd0eysvZSn88shkVfaZ/J1VnYc/Kuybx2Py39f2X0f+L2y0AFZ
4fUjLBkHHXSm6Rw6/aI/aw/8rsK+/tmdbljvZxx+F/r2++4O0u3X2PuCPs7F
h/5SXbOY2cN9Z8VR+9rZr39IsG6Fo9ye1PUZw9oPv/OjVtjO1/XLCYK/Iz43
Ar9397TJzVK1cfbMP9xf3rVzyrF++fYCfmS/Ky4/Hyby+s+6sODzc5wSeFyz
QLx6vlUcb5zie23wXZ4Mtn3VqbKMx0/vc1A9MrGC18/xPTiwL6Wfr0WuKuLx
UGWFurFOxTw/+N4c2I80MrI8FZbL420eGWeWqObz/OB7dmCfn743cJ95Oo8/
3Hfh/PTfmQLzQCLPfoeypk3uvDgeH/Zo0XLX1ATeeO8+duMj64mpPP3x7z/I
r18RvO/4aP3gXfWqsbx5sjq2soOzrj9f/1mn2vbU9+S15/VUz5oXHpTnH/+e
A7SH9/eFOft7Z/96rtuDzy91SlLTa1XO84PrGGCf28v36q9zxTwe80Lzh4JF
Ec8PrnuAvYZnz4MeX/J4XG3W3Zy3+fw4AddJwD7htsL75NBMHn/tWW+d4ZTO
01/DP/q0UUUpT/+5+wL7fnIq4emvE3e+V39JKc+PmdGYbSqrCnl+LilrtHTu
UMDzc9qsXCmVFPL8vKq0WxwcmsPzE+N4rnKtVTbPT6jiojKblzk8P4XKFTvr
tqfy/AzZl+gyLD2Jx3dOEU01nRvL4xtnT6oYuzOKv+5rDZq83UQWnyxND1T4
sb2abPl04s6bG1fYfLjcaex3qV41mWowqWr4mquMvzJbYbZwYxWxlTpFZ908
wOZV0dLL0RP+2c8N2mMg0bAgeFzj+FMovvpv8ySeD4XmT6F443/tP/9tvsXz
qtA8LBTn/K/98L/N23h+FprPheKr/7U//7f5H8/zQuuCUFz3v46L/7aO4PVC
aH0Riif/13EntO78r3H7/7ruCMXzQnGsUHwoFA//r/GhUNwrlF8IxcNCcZ1Q
/iiUDwrFvULx/P8ax/6v8+R/yx/xvP3f8tD/q/gB1weE1lOhPPf/Og7BdQmh
dVkov/6/jmdwPURofRfK6/+v4iKhOoxQPCxUT/i/yneE6j9CcbVQXUIoPheq
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
p98m89p/7Q8PpZter7Rc6VeMxl0oNTkyyzLmaCFrP9hXvB60ZOCvbNb+ai6P
q0f5I3Dc/k8CeSL4x3kicJwnKhxszBODUJ5o9fDf80Sb/+QNeSL4qeDWhyMo
v8PnhGFduPSnPV68daFMII+zRvag/8Q//S2a9NPWPzbLM5XpP4nja8y75qgs
Smf6g72rsdnfEZsyiHz7JeQyyr8qUL4D7R/P+cHtx/bwXSYie3ivSYhDf7Nv
/F6897Vt7Ick6PWX0LH9JGx+aJxPEkj7fTHbnFolMB3AvkP3toWbJsax+QHs
T+7vkvxAO5HpA/YPzu2fF1AZx/SB+2ifUT6F76mBPtx44emD7UEfW2QP6z60
E+uG7UE3MbIH3bj5kJi2XDn45ZhQpluj/pnk/uSwWxVzI5luYD/0d171BMcw
phvYeyzvc8y+OIrpBvYD3qVa9r8Vzsub5qG8qUIgb+LmSYF+xc+bmiF70A3a
iXXD9qCbJrIH3bh1kyw8eqsgYaEf041b10gbnSnbHaaL0bxdQN4F6o41UPFn
uoH9ig9v7hxaGIjm8wLSqsXPrDXP/Xn50TOUH7kI5EfcesrTDduDbtgedIN2
Yt0CkD3olozsQTcuviLbVrZR9HjsynTj4h+i9q5mR+Jbd6Yb2FvVzH8zMOg1
0w3sz8U3vedS6sF0A3uNdv1aW+x8w8uDDFEeBPe+sW5c3CVQ9+DnQdgedIN2
Yt2OInvQ7Rqyl49/Kom7l6jnGfXLTDcuHia3lKYPNPe6h+KfSjJ3i7vdTUdr
phvYK+zd5ao4+wGKfyqJrWHi8BVONiyvBHub68qvF3o8IDgPUlCw+ZMHgZ74
945Az0mcf6wntgc9JyN70JO1H+mJ7bO5OADylC+fh+jrp/yzj9HIIa6OTSht
nXskhXGIP5uHH7y841ki4xCnnbZoIl0wOI5xbr6l2YsPF9a2jGJ8QuP6RQ/5
Pw5VsfOj8B259Zp6hVyqShxQxb4j8N9XR3kN9qpk/PYf7kz9d61dPDdayr7v
Vc5+4o/cHkVzK9j3Bd7EqJXnvYHljNtzflrnTNqxw+sTWte86LzoKfMSehSz
736N4493zf+2dVs+49acn4Wa4QNXxZYReF9o/7GmzzraqXgRyItvcNy5tGfE
+JxvFPgFzg9wFP+w+j98d3ivmzO1V25eocb2feC9gKO4iA6zUilRXSGLV4EP
d/9x13+kbN8WdAYO34vjpE4vudcit3L8XUhN5oGN+7Ur8Hcke6xLDrZdWci+
F9dO0t1i8px8s0r8Xchbu8G/Iqoq8XckToPFKdZORShOdibfN14UvbhWhb8L
yeum3LRAswp/R6K5+FJiTVwR+17Q/rmld1/W6RQS9F3YOELfkTeu7yN7GL+3
EUffS2Ce9OKNa+wHfS8ex/EwvO91Lm5Uc71qtvNbEtMB4iL15RUPx/h/JPLz
RibpU3Yp8pF5MOOwrnmNvKq37JUv4zBvJ/7MmRFv6Mo4V28hap7mjxel2BM0
n9NZz1Zqa6+NY98LuNJ04zUDg95SNN/SaYllexviTIrmZ5pKXNpL7N2YPZyv
i07xWxu7RjYvgZ9dZT5VA66ns/GoyT0XxiOaz1meBfbwXGzfF9mj+Z+Na/he
8L74HAXUqYDD+0J9ZmurqsCZGx4LnicBe1ZXyU8cfeW3PbOH8363v/lWnm32
gekA/vF7we/kYB3AP57HYH2B94X2QL3lwsgWRt/Edrw6Ug+ujgT2UCfJVHIb
vfTbY2YP5wMtGvN61n7wj9vvgupRYA/+cfthHYT2gz3UT7D/ClT/AfuJXN0D
+4f1FPyjPI4eVtawrBqVS1A+Sw1c0md/vF7I5luwb7bYfuSKE7LzD1CveNLx
XYJNUC7j4KdYs8Ze6XcB41AHqNfZHWk9CNcrkqnm/pAz/p2zcB5NR2eeHG89
Ph/FpcnUaFKfArGB7HwF1GeS1Q21LOozUR01mvqqhq0cV5zLuC3XnkrXCw/3
jSlAdchk+uDHnlXZd+Jw/k7Lzpo/mKyXwebza5w9/l7wOyT4e3F5Je97gc7w
veT33cTUzN2CXn5bivbXxPS8ZRu1oMIiNL9F0yezz6+K7JCI6wx0KVenAnvQ
4WZvsw2ZQaloP05MVa/lTrvfKZvIz2PRAv1Twnvfq5x/HJ+A/6tGLyyUtb5Q
VN/gxSegP45PoP1w3kx+/07MO4cGcSOOW8A/nieh32IO/oHLfy+pn1758oT7
lco68t9L6jd91f5+0ftldTA4X+o2c+LhdU1zkP5SP3ezmTvjPFvryOsmYrrJ
74eKePqDH9Bffj9Udq5VXjepH+gs/75SPxy/cfqQ+fpzS1a2yMLjnWg/ff4k
0z4Lzw+k0y1XrdDZabhuSYwTFrwN3ZWNxympb+qj2MYjG49rYhtRvf96Ujqu
c5JF9x4HVyrnoHqIiLgOqAz/qlKC+z+5u2/LibkpvLooOczVFdH4InPbVf88
piCbB/DvUqLvIrBPLeLla5jL71OLeHEd5vL71CJe/Ia5/LmFCLK6NNPsq04G
e1+og6Xt8XMvHsure7NzI/LxQDKZ2sF5pN/eOILmAZ4+oDOOhzVRfVJ+HU8k
S56F379yWeYf1+tQHZ7n/xqq40H7oX41ryztyIhPvH0Kdq4D7KGu5Vw35+ha
ZVn9DX5vbe7gwoqGeImg9ZrXTvCP24nrZiiu4HFcL0L7kkTf4PXbg6UOBMWB
vH6C8310LldoH5kajAvRXLlfgusYLK6GdkL8jOd/fE8QOL4PCOMF33MB/xB/
Yv/4Hh/4wfdTwA/EgdgPvn8HfvC9EvAD9zuwH3xvTr5uI7sPgs6D0cVvdl25
PiIfxQMSOlLvraLeT9l6Dfc48HPx/Tj5cx2JvPbD/QvsB99rk6/jRQi0X0za
6K6es2NVLo5nyI2PWvtWmeXhOITk1l2/cvAS5hIys5OaseuwFILayRsXMG9g
DuMUzwOQ78yPyUo88uQV67fAQQd03oaOPtp+nP6pTVT+uYXMXn69yOVxODf7
7/YSnv6Qx+HxktrsQah4dDnvuwSi8QL2XH7N89PLoYnroXtFPD8t0HhB+Tsd
4BBPrV0SWF5sPH7T9dFt8mjvDp5Bx5QSWPvBHj8X7PFz56PxheoJdMbescPj
MmLZcxf80Sedfvtw/Hp4s1j2XLDHz9Xn7PFze6PxiOob9Jyl0qmuZmHsuYl/
3iuOWu7pM/VJXQh7Ltjj54I9fq4LGo+o3kLrCu/eTzQXsefSP/6D6fqmFtdC
ezyiqM5GN9u+7BP7VcryPue2Bl+UN96kH9a1ejrF9zeup1GbPZ3PRE6T1UVd
OfuKleYdFwf/xnUzerHFjQemV6sYd+Psm+dO+5VSUM/WhXIu/nTn4l5UN6OH
k05cvZkiqxdBO29vjJqe5FPJ9heKUdyL6mY8ne9xfrDO4Afva9/i/DxZ9Ouv
ip89GHfh/ABH9TSWXwCH9gNHdV2S4v6mzERfpoPWn/7pRzrOiH26ISqToLo3
cT+4aP2G6njGm/+JE2KI6bNOIRPWxBFUPyfBxy20l/aNZLyxDpNCRiU+W7mg
XzhBdXhyN7dc51WKmPHDqmcmdT2TQ67dzdTcsjGAoHo+GWupoJb57C3jEw/3
X7yhayEZel20Z9pqD8zpuZmRHp20kyjyT8/dPl+7K09W/+faSQ/8mBP+s8VH
it6XJh8JuZm5U/z/KjvvuKqOpo8rAopg7wr2lmDX2GVRY+8lJvZesHexJvbe
FbFgAbEXBMVGPAgiKIp0kCYgRZF67YjyJt757X3vHO/neZ5/vwx798zOzs7M
7tmjYH05S3qOnvK5+25NoVxfrhDfdkTzrMqxQrmOeBG3P3mz7pL7X7j+FePH
PhdS7p+S64s/ySOfQhyO9nnehP7wvGnioAN+heMdxbz3K0ttuFog86NJxDOP
u9gPqflVzrsZxIttthq6MOirfC474m7pczumlPgm590s4qszTXotMfkmn3cZ
8Ya7HUfOvV0g52ORgO/5nTyPweapuEZ5E/SD/q9e5H/627R3Uj/riF8c/zU1
xztV5qe2p//9+1BV3PvKQH40gtpZ12ZfQ6MPRnKe8nYwH8eTvPfSXV6TzhvL
fBb6MQ29Xypq3WeB+Yj+h86t1XnmtrcyHob+h7Zsc/DOqFzB/KqYViKj8GLL
GMH8vDh4dca7kKohgq07wr2r5vP1mv6CrYPiySjzdoe73RN4Xk2y98wLFzIM
xFG6c3rgZmz9RTuYXz9eR9JU7Qxg6ynawXzk7aAOydupw9ZHtLOG5i9vh9/T
q39+L1LVDub7j/sTqmpnBos/9c+3OysbXr54U63EO8G4aJXV+UZiWDY79+6s
+F613eOS9pZz8XFMpyTreTnsPLyz0q1G6/TZ495yLmxT2m8oPyKXxb3OSoSf
5cm7iRrOxZlmn1u2OZnLzs87K+8nPE4IfK/iounuB+lzP+ayuoezkh6VldDN
MZ3Fz85K3ucqFRrVzuZcdJ/TxP6PBzr7R73IfYR/n7J/+DLurIypMMy+za0w
zkWVb1P9LjV8xc7tOxuoUzkbqBM6q/wD5Pn6zuX16yrOBt5v0snr11WcVfVG
Lq9fb3FWrftcXr8O46zaJ+Xy0OflfuM2vO2co/wWvP5ro666faVLxLnekEfz
OjPagd7QPvxP5AhNpbAPz2U7ecR5+7+Qn+F8OfkNzleSH+DrJurtvH6Lev6P
67qhqrou6uc4Z4jfNSa/gd/Vn++ae68nbVyy8Yy5rf481dwrP6X3o8jxFrb6
80tzz+HmwYl1U8xl+60pTkD7+vavubdgr+9a315FpB+zIfkf263mHri+fWru
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
Qy33dxhHO/x72fjdDOL/B8LLISw=
               "], {{{
                  EdgeForm[], 
                  Directive[
                   Specularity[
                    GrayLevel[1], 3], 
                   RGBColor[0.880722, 0.611041, 0.142051], Lighting -> 
                   "Neutral"], 
                  GraphicsGroup3DBox[
                   TagBox[{
                    Polygon3DBox[CompressedData["
1:eJw1nHkcF9P3xuezf2Y+y1SEkigplV1lz75TKiJrspQkKrKkyJqs2SVUIkkK
SRHZWqxlz74UIb5Zy5rf8+65vz/mdc/cuXPnzsxdznnOc26LPmd3H5iNoqhY
jqKc0i+TKGqo9MZKFO2WiaJfdfE4nf+Wtfxt5JTzI3V9dRxFP0keqPs763yN
5BNU5mydf6e0h+o7Svm/h3zS1Vlf2yPkIx9ei6KvJW+l5w5QQz6QvEz57+v8
K6XX6/oeOpYo/wPlXaP0jayvNcg4fwPJnWu+jzIHSz5d8kzJTTOucwudN5O8
NMhrYr8T7e+e8bscz/06P0znP+r6eLVnofLnKv8QyY9JPkNyK6UzdJwv+Q2V
G6DyJyltqbzpOoYqv3XN3+npahR1y/je35X/U8Zl+iuNdbwi+UPlj1L6mg5l
RUfo3h8ld6xaXil5a71LLo2ij/Vd1yjtovy+Kvuk8luE91qu8x2rbv9mur6N
rvVS3rf1KFqh4yO921G6956s6z9G17qpXD+ls1T2F933OP801PdhqPMglTlF
aUPd/4/qXy15hcp/rvNjVfYCvXuGdir/Pl2frPP/ST6fvqU6TtFxjs7/UdlD
JfdQuoHS3jpOlLyX7jlJ6QtKNwzle+t8t6r70Fyl/yrtovwzVc9nqrenzofq
OV8rPTjk71r1v3xG6U36Tu2Uf7vKVpQeEp77jY7DJQ8I7SG/v+SmKt9W8m2h
zaeGNuSV9tUxSGViveM/Sv+nd89L/kvySslv6559VbaN2jM/9nOOUFrVfeND
225W/a9KvkNlM7y3jrOV/73KLZP8ka4vrfh736S699Q7nKB6nlf6Zdnf6SKV
jRiX9FWdd9a145TOU1qgz+jyRMlFyX9L/kH1zc+6/oMi33ss/1diTmV+YHyr
X3ynOnqF9qwXylB/I/pI1v/436rH6zilrbPuJxfofEvVM1jXX1P+y7yf5Nup
j3NdP0bpn3pGd42fi1W2p9p0j/IHSN6qbPnekp4br2tedJfy2qvsNarjBv6R
zq9XurWut1X+Vcq/ROeNdP4FfVLprirzqORpqud3xonKbKj6z4n93fh+e+ne
a/WAsTqfJvlm+onueV7yvTrG6Pw4lXtXeUtUz/bKu0l5j+j8kpqvH6l3aaEy
NylvjMrsUvb1RyRvo/LXZfw+DfQvn5LcXs8/P2N5uPI3U5nZQeZ9eK9fqK/k
d/1X8kjJFzFmJV8ueQT9TfIVJb/3z5Krqv9J1dNOdQzJWB5GH1b9s4J8odp8
Lf1Qbe4vebTkffRtttb99zFOVd87+i+36vxtzQnrqy5lRXfr/IWs/zH/twPf
QfK9uv8yFbiYPq8yTVXnfco7T+lMpTOznhe21fklOv9Qz92EuVPHEN5HeZNC
X1oYu38dqfSV2OPsaKUXqN5VKvuV0hElzxnDYo/ZiVmP+e91PBjmjfWVPhD6
bar0yTCu6beTQj9voPR+HWdJPjTndl4ouY3aeTbzr9pZU94TYZxupvRRHefx
39WGwaRqQz3rNlD/Ap0fo3u7K/1B6RTl91HaVnWeq/QN1dlQebPCczso/wrl
L1N+Y+XNDm1ur/wLlP+W8pso7+kwzzAGnwrtZz6cE+bPdio/VOUXq/ymyntW
x7nK3175I5X/Kf1Tec+F9m+udF5Yj3rlPD6/ZI1Q+csZFyp/jPJfUv47yt9C
6fNhXdtY6TNZv/+R+h+vK31F32MH3XuZ7v1c987L+N5bmacyrp+xv1PN804n
pZGOP5R8V3EfOCq813+Se4bvs6HasEHO/6OV0s1z/i6/6rn/6vq1SieonkTl
F+q5fzCH6vqNStuobGsdF+n8UhZPHZdHbmNWx5WSRyhdq3Qk75XzOGHOaq50
k5z/2V4aU6dI7qz0tqLeT8+6RekDyrtfx9e6d1P97zYqO1vP3ULvcwQ6Bd88
57HNv3lW6Vzq1NFGZbqhW2mcrdb59zmPjY1CPxwkebzeK5a8QPWMrXmOfk7y
3TWvE8ztf+q776ZLxyq9WW36VPk3KU10baba8o7G77ia1y3Wi2OV96LKv6Dy
/9Oz5/Puastg3XOynnm60q90fqHKPa5779O9Zd07X/ceWfO6iN7ym973CMmf
lL22sca9KznWvTvyD1V3p6r1EPQRdCZ0j6Uqc6fO14a1+66a//ezku+oeS1n
jT5G5Z7XvfPUzkboLZI3UN0bSO5Cv5D8Rd3fkG/ZVvnv6J431OZmQbep6Pzn
rPU31n50THRL9IaPdO/hKtNcZX9V27pkrAPtzDdirlJ+VeeHSD5DbWij/MU6
/0T1N636//Kf72HOzXhuXKH+0Uz5tyr/e9YtyR2Vfluy/ry90m9K67p9tKfS
xuFdWqj8p2pPV8ZlxXPqRqxTOjauWBd7WGlN5Z9ivKkN16iSXZnblH+n/tmX
jC+lzZX/gt5nkcq0qPle6uAZ675b1c/gWZ/pmRuHd2mivPWr1us3q/i78H0+
Vpnmyn9Vz31PdV6lOnfWe34o+VKl01VmoMp+p2d2Ys5Uucbh3gJrL7qoyn2h
8s+Wnc/1s5T3oPr6mYn/JW17qOJ20J4pSq/QtXkqM5I1kzlZ6XLVc7Tqmacy
z+kbHi75CclPSD5U8mOSH5M8q+zxyLjcVPeOzfobvqjzoyN/ox+Ud3fQdX+P
rfsO0b2Lyn6XVsp7XHJLyc1i9yf6FWUqGevlCfNbbB2qr/I3UhvbMD+o7P76
bmdkPH4b1jz//FKxnj80zL1blDxPt1a6SvmDw/zMGjsy6Nsb1GwfPK569mNM
ZTwe98zZ5mFt7pxze5jmPlF7RkvupzbsrnJHh/G1Qmm3MK+yZh0R1k3Wx+5Z
r1v/qdz3uv5r3WO0e1jX9lB+r4znH/J7hPLLy17fRuiZSc1r9IMqU6l5fl6l
970ua/2qzJSfcZu/iqx7XxZ07J9VfpDktGZ9gjFA/98n6Bj67dHnesYYyWeo
ojmSGzLfKr1P56nkxpI3lLylPsgX+g9NKRvW30uK1jWGKP295Dmqh9Jf0eck
dyvZFsQmxFZcqfNWSg9U+p6+RWPJ36jOn3S+NXNayc/juRP0zOtU79u6f7TS
JsrfGP2Q+UfltlX5rkpv1LWPVOZ6peeprkf1bkOwhVXuWZWZqzJdJc+S/CR6
o64dqzJbKe2m/NnKf0r5/+ibNkAX4rq+9duSb1DeKl3bSvLhSjvo2gm6dwel
6+uYo/ZspXZ9p2stVWZ/3lfvtQn6l643rnlN/E31NJL8q/IfVd3flG2PXhF7
HTg/9M+Li17/BxVtG44IOuGw8J17Ka3VvLb+rDpXlN2Xr4q9Vl8SdAnWt4uz
tpNzOds1Jyv/fuw7lX1WP/7CoBOiG65QuzfT9X2VHqAyZ2a87mNfX5h1W3/W
cVGoHz1nWKg/DjLjjjUW3RR975yqbfen1M5WavMM5Z/PmlWxLTq55v7ZvaC+
o/TtoKv1BXuoWic7XfJrOl7UO7yu9Em1+wq982v6xlfW/C+exS5UnWX0m6rn
260lt2DMVaybPsC3r/h90KOmq57T9d6zJD8suafkSZIfldxH8kzJ0ySfKHkG
a77kkXruK3ruLMk3SF4i+SnJY9Dn67aDmF/QOVlbt1Ib+lS9tm6HDlD12jFO
ZVoqfTXowX0kP1H1/z5Z8qKqx/ApjNkwv/SUfE/VevlRkt8M+u5pkm/VcR64
idK7q7bPe0h+veo56FTJj1X9/3pLnl71XHmS5HbMfcylkjeSvD3zc9XrVwfJ
/Xlmxf8YvWkTnXdUfmulE6q2Y4+pWSdhrd+J71b1nHui8sdXrYMeXfO6vK3k
07CvK9ad0KE+rXjuQ3+5FHtV7/IM75vazpyib9tD99ygMgOV37JifGua0itV
ZrX67CiVGZfaPnxIclw1RrM3urPyH0R/Vd7Vkteo/DUq827APvqpzB2p7d7D
q8aK1q0lkf//b0rLGsu/5vVPNf76qn23qvzFuvaOyt/Omi35A8m3Sd5M9dyl
+g+r2nY+Q/XfmdqOHav8UZJ3U31/S75Gckb5YySPlLxcbbtU8sLUNsBsybvo
/sc1RppLflX5n2J/14zXLVZbd5e8IDUmskxlHtBzH1H5TSR/XrF+i577bcXr
0/01rwesC39gN6Re15eq/HWSS5JvB7sK9uQq/ovyl2EPK//fitcbnvtJxbor
Ouzo1NjmbSrTWvkn6dHTK+5X/C/+G/2HfK5fr/Ixemvdut+OfKuqdTDsgudr
xmc+yfo/bqXy26v8y9jUkjtIni95r9Tz72WqZ5/U8/UVkk+hPfpWKyVvI7mj
yi9Q+WMlb4NNrvx9U68lV0ruJbm98u+VvJ3knSQvUvntJe/M2JfcQfIezD+S
t5S8Bfq05DaSW0l+TnI7yVtiDzAfSG7JOiR5W8mdJC+U3F5yO8kvoWNLbg0G
gE4quS0YjdpwtOQ2ksdJ7gkOWTaueLDkf9Xm6yXvl3qtvUryQfRhyddJPkTy
WjAO9F/Jed17q+T9U6/TV0s+VPJ/rJ+Su0jOqcwtkg+U/Lfyr5V8QGpbaDRj
UPKbZdtWJ0jeUfJEycdL3gF7UfJxkreTPF7yHqntjXf1XieH7/mg8nuH7/CA
5D7h206WfFL4R5Mknxj+7/2SO6e2r95TPXumXqtGKn/31Ov3O8o/Q/Lekqcr
v5/kvdCRJfeVvKfkaZJPl9wZ/EjymZL3R6+V3F/yvpJnSD5L8mHovpIHSD4E
e03yEMnHS35G8rmST5A8V/JQySfx3yVfJPkU+oPkYZJP459KPo91hD4geZDk
XpKflny+5N7o3JKHS+5Lf5B8MWsT/UfyJZJHl63vjZDcQP15Vd1YOPM5a/E5
yu+OfqP8syUfIflJ5g3J+7FO6d6dJe8jebHkncL3eVNyp/B93pDcMXyf1yXv
nVpXu1z17JZaf3pb+bumtgfeknxaGAtTVWbTirH8RxivdcvkfcX/lrwl2DX/
VXKris/Jn6F0oOrponpm6vpNktOy82+UXOc/Sr5Bcq3s+q+Q/LDkXNV1USdl
Pi8Zz9yuZKyU9RTd6Wt9sz9Yy8rWK8AMwHV+LBsrfKbitQA8Y6ua8cILM8YM
WwZcBEyQNffcgDl1Uf7hrFMZ6y2UAVu6SMdcycPAesvG7sAkNw1YBXV+UTVW
Aq4DpnJZwEyyeWNKV2BDVi2DM70v+WLJW9eMNZ6XMd7YLOAoPOOnstuILnqk
8nugF2W8zuIXKKNv6PteTh9OjdvVgw2CXrMGGyIx3l8LuFzrYEO1Kdl+Kgcd
Fax6vYApYW/FQfcbEnRUdFX0rj95p5p1OMqD27+uNlzF2EltA6WhDegoyGBW
YHgNgj3FWgpOC17L+kU711atA1J/w8SYVsNQHpwPjPLsyHheo9DOqbH9CuAv
n1SNW21XM441PGOcFx3sLMkHKr0y+JjwNQ0L78j5ejnrxv0i61TI6MtfVY3v
gfPR91oHG/Pc2Cl6euOAt4E1g5eDT16NLh0bN3ipbPzkGaVH6Ps0U10PoIco
3Q+dQ3VO1HnL2PY+dv8Byr9T+dOUfw79KOje4B4v6Hq31HjOQsndU+uWYGAH
g38GTI6+hC5K28Boaznbwvjz2um7N1f97UvGXJsGu2+k2jAUzC6xnkk9+CWm
BTsae3pp1TjgNsr/ruz3Bj+fHux37PjBsevD3p0MPqXzeWrnkNg2B3YS+ljL
YIPMDO/JO6KfgO2BfzfIuU5wseEB3wbnxq+Fnsk5GDZ2Bzj2QSo/OWsf2GPB
Bru4bF0XfW999HB9t0uxidWeg8Gq6CM6P7No+QalzfT+C1VHB9WxY2zb9iGV
Oahkn+d0yZuozGsq01HXe9WMp+MzAkdHf6av4k8Do2Pc9Ve9Gym9VunuASsG
9wULR/9nvAzQtU5KxyjtWbIMhoVNPU5pjC5csp92ss43VhteZM5Bdyy5/qnK
3yNg1GDJC3TvOaxNqfW6b1Xm76r1c7ALMIwNygGfL9kWZbz3VHpszbg8GAVY
Pvo/c0XP4JfEP9m4bEwdPwO2Bzo2tjDYAvPMpcp/mbVZ57+oDfNZjyV/mhrD
jsJYBmsB22S841dcG77JhKx1UXAP/A8rQpkb9O5/UQadIzbGO7Rs/1smzBXj
Y9c5pGyd+YfI/jp8GtgvPBcbBhl/KzYY/wLf3LzQP5kDmSs2DzK2+BbBXsZG
ZMz/xdrJOsdan9pvsFmYV/EDtArlWSOoB9wAu5V1Yj09c7HuvR7dINig5IPN
41OtBMwHv0o1zOHYkOTjO2bew4cBVoYdn4Rn4RdtHL7DQnQOdOzUmESL0LY3
Y48dfEPYqOv81lXb8vg98X/is8Wngj9loPrEkUrvUHp2yTI48qb6F+9gJzIW
8IXp+iB0dZXZPzLOOQi/ZNa+bHy5X4dx0TXwB+ARYCc+xzwEBhDGOH3r5Kzn
edrA2N8w5C+OPXfhV8LeIx+f8hvYYOhvet+fKsbWwNjexBZCl1P+kthz4GWx
5zT8NGAv+NmaZT0GvgiY1Xjd80XJ/I4dlH6lQ6ZY1EnpZAm763hf9xxcNtb6
rPKnKW9XHb8yL+v73KJ0vtLHdOQzxjx7oq+p/Gsqn5GeEOXtc2H+w8dxmeQ/
wfwlf6w27o4Oxfyj8nMS8x7uRFeu2a/yIbagym3Jf1TeQ7pvsY5vdG2K2tJZ
x2e6tqm+w6561nUqcypjkXlXdT6h67vo6Kd73q35voNiYye0+U09E9A0E9p5
Rzhfozr+1T3/6PhPWWOVn1OZeRXbtV8pb5Hy1qrOV1RmudK/ddwS2bbauOz6
rlYb/lX+QpX5SuldoZ5x3JvzM6h/ddlr/S2J8Z6i5CWSb02cz/V7ErdzlOrs
HZtvsFB522LTMK8of03NfWC10n74bXXvWyozI3F5+tCpyi8ofzE4fmw86m3J
y2Jjn69InqpvtpeO5axB9LvI+OSrymunYyM94+rYOsnzKv944jrxGd+CL4p3
T/z+fIer8AHovk55cx2eic3ReTpxu2n/qMT9hv5zbWJf/DvBH79Q9+6o42/J
sxO3Gb7EC8rbrmC9eb7SHQqeQ5co3alg3sYipR0KHqsz6Ac53/9+zd/nT/Q9
Xe9YMHZPX6fPj07cL+mf10geFZt78ILkzct+R971TdXzsupcpPSlnGU4B2+r
vp0L5ppMV7oP+CF6W9l47zPhXnwcZ1XsG8RHuAI7oWTfCj6Wo6rmGMA16K86
1tM3nKZrsxL/L/Dw+xhPOc81TyTuP/BV3mD+CW2bmfh94b2Mjs1heAm+QOL+
jL9gisou0bETY4P/pWNLtb9zbP7Jqyq7b+yx+RrjXm0p5G0LgN+ODBju1xXr
KU9gN2vu7KEy4yP7F/Ez3qt0F+bevN+TiejSnDkr8CVuCpyJv/TsETn7MHZD
h1D5N1T8X+bInH0S82vGjG9ROjXMSx/F7gtb5N0fGmt+aCV5dtX9ZfO8+8z6
yu8guYnu/aLi9fYxtXm8yuym/Pl6xjb0q7x9KrurDcfo/BM97xfWmZx9i//U
XPZzpdcrvSFnW+jYxFwgbAlsq9HBvkI/vyro6Ecn9u+wnsFvuTFwXI5JzJtA
t8OGuibYUeiQVwY98rjEz8MPvqps23AD5e2qdh6V97j9rGJ9YUZqnt7FOfv5
6O9t8+7zcPSG5+wb3Un3dlf+mMg69hVBz+adeNalke3Na4PNuQE4msrPAaNO
PF7P0PefkriP9Y29brQKa8fe/Bcdv0luq/Rg3btS8kaqZyvJX1c9r7cIc/u+
jEsdqzOekzYP89KeSlvq+DLjsdU6jK8Jifl8y+HpJZ5nPos9f9JXb0+8BrAW
vM6YyLsf04cPpb/rWEMfTZwHlyBbdxtLNc/fxbxt4QPDmvWO0sNjj9038Fcm
5u8dpPSRxGOnf9AZwLHnJZ6T2uQ9L62n+reU/J7evVR3mV+UbqijnfKXK79Y
9zr4k9LJifvIKarvocRj5TR8A4nH7sGSH0w8P58seSJzFt8s9rzYPu+58azY
5Z9jvk08rtFr/wSLQD+R3D/293yG+TDxO6LvPpr4G6KvDojdtmeVt4fq30zH
x+hDsZ87N7FdeXWwLV/S9e11/JmxrrF10Deaqu+V89aLbtf5/irfMfI98ECw
zeA4IV9WNhaArY0M7wr+VR4fUxg7jCF8PfAqOB+Vsz3JPSfpWlfJWyj9T/eP
Yu7BNlIbTlR79lOZTdSWEwq2W+FFwY+qqMyVJXNGIt5P5Y8vuJ1gLV3CGDlC
aTfGs+Rmque4gu1kxnzDnG1zxjHjGVsOHuj6Oc8F8FDgo8CPAUtpGmRwBPCE
K9XeeuK8XonnBfgqYCyDQ3ns5a5hvsDehHtGGe6Fd8Z8BM7TKMxRzFVwVeCs
cD6i7LYwP+FXoI3DlVdK3H7k3on5e20C76xJeC7Y1GahHvyP8HZGlT3/8Vze
YWgoQxvqStOc/Y59VO5jpUtL9hv0z3kMw+FjXb1c9bXElmPM63xjfdteBWMO
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
4V+k5pezZi1Ore+yn+T/AekRh5o=
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJw1nHn8VdP3xs8dPp977j3D1WDOPGROQuZ5KFOjyFAUUiolmStEkcgszaUQ
qRQNQgOSNJhnIjITvsaKfs+75/z+2K+719n77DPcvdde61nPOjt1urx1z3wQ
BM/UBEFRvxvTIGii37alIDitGgRnVoLgxoIOqPQNg+AsyYNUr6fSX3I7ybeo
nqhcL3lAonNUX6hyZhwEe0ZBcKXqrdTvE43XQr8FjZ1nfJWjy0GwSy4ILlef
M9T2j/ocp9+LJU/UuS1VL6tfqNJe5XTJ/9YGwQaVIyVP0/WO1+0FuvYqnXu0
2iMdr6h8qHpblf4aa50e8gr1eUD9r5LcWsc/Vf8rJD+l6++q+3hX8rOSJ9PO
O1H9bJXv1N5G7W+ofaN+c2o/Tseu0TVyGqco+UTJ10r+XNfIF9wnUFtfHTtP
1V90/T91bh+eQ/JayX9I7hm67VeVvyS/JvlEtX8h+TvJsd7BKtW/VX2Zrn+1
zr9A7f/p2AYduzJ0faPKv5LPV5+H1OdB9Wmucw/VPdRILqp8oHpT9WmjtkN0
fztIfkfnH6r6dN1/Q7XV6FgD9d1W5R3V2+n5v1FbK7Wt1NhX6XgHnf+3rveP
jnXQseE6NlzHTon8znh3ocb9Qm29w6yvyjqurTGv1/V+k3y52s6WPFjy5ioV
7lV9Rqj+vK7ZSPVzdOwOyTur1FX9RJWPNH4XySep3lzXaKXrN9axGl3/FMmt
JR8guSQ5Up9nNNafgcc/U+0f6bpn6Nguutd6OjZH9XWBx99P5VyNPVNlb9Wr
KrPU/rfaU9Uv1PkjNf5Iya0jz9VEcqxyrOpLyp4La9V+ja5zqvq3KXlNldX/
Uq2vdZq7jdT3A7XdKLmq/p/rvJskX6K+zdT3S72f73VssO7xQt3LYer/odrL
+m2l/n8EXn8cp322SlPVD1DZS20dJB+o+sEquRIvIwgOUr1W5XSd/7/A6/UC
jTlCbSMkt9T93cq61Ln/St6auVX2XP8p8Prvk3i+7Khx3tO5f6v9SLV/F/j/
nKL2eZL30/HP1N5Fv3dLvkfndNA5u6kMU9/hkjuqvl7tR6v9h8Drc08de0r1
UWq/UPWGKmMCz4kLVL+B+aX6WN1npHPn6XeM5AUqJ+v8zrrmaI6plNTeXufc
rrYGBf9/d6jPnarfwDugv/rcrvowHTtP7Z10/iidOwodGPk6XO8O9dlX/Tuq
/WEde1jtZ6j9C93PGrWP17Hb0Ftqn6D6BP4DtX+m8TfTud3U5xTaJQ+VfLfk
8yVfpP7j1H+c+udU/0rtDdTeXe2nqX0X9G/gez5X9Zm6h4aSP9X8+EZ9z9Y5
d+r8O3TsaF3vIvUZx/qR3KniNc/aR+eie+eoPCpFv0r6/i3VZ6tMkvyZ5MUV
60X0Y1PdQw+Nf21q/Yse/lPXele/f2v+/qVysepzVR7X+V/o/LdVn6Zyp+TF
kperPl3lbsmvSX6VtaQyQfLHkl9T/WmVeyW/LnmF6jNU7pe8XPLKinXebD3z
wYF14WLJL+u+3tb93ab9ZS/Vr1PbFrrnWP1TyWNVf1rlqorfAe+CY52ZP3qe
zfU8P6vfXxprpo49qOut1PXeQFeoDJf8puQ3VX+W9yn5Q8lLVL9Mvy9Kbsb8
RUdpvAWSn9P/sa/mwlTmmOSX1W+Z6i3UPlv1F1T/vWqdim7dBp2MLlPZTPVq
yet9Mvupzn9B57ykej09+1Zq21LlR7U/omvcpmv/pWf6Vu8jYb9U23aS39e1
KpLHh9YpV+v9RJL30TjnMCd0biz5GPVvoP7f8N+pDNT1ntf1FvFfqE8f9T0U
fafxn9CxW9X+otpfVv1J9n/J8yW/wlxSuYnnl7yA/1aln+RZkp9XfaLKAMlz
eG+qj+c/kPys5HkVz3Hm+pfoPD3fMF2/p+RtJf+GLmD9qv8i9X9d9cdUbpY8
T/JC1VvqmeeqPl/1P/RsU9hP1L5Ax5ZW/E55t2nJuvUc9blXv/do/BMir0HW
Yo3e10Xq2485nT3/Dar31v00lbw9e6XOvZY5kd3fNaovUPsc9LPk21U/T2Ns
V/Ieyl56n/6LosbeS322Yv6oz76qb636WxrvcN3rkypf6tgr6DzuQf33UH3L
iucIc2VrlRtUvtR4NQXbHHn20op1Pzr/OnS/nukrzcUfNM5y5pt+65Q8x5hr
vzDn1P61jr+u9jV6f99L/k3yCslnqdyhvrdrvCM0Vm/+c40/T/JJoecgc3EL
lY/V1l79h6l+p9qPjbyuWF/1Va5QGaA+83T+6+xXqnfR82+u6w3WWG/q3Af0
W6vn3V99tmH/Ynz1PYB3LPkF9X+m4Pl6q+p76n6n6319q2Nr2GsSr/UXNcaN
qh+ttmkq3+jYa+hMXeN+3cd93L/u7+bQumJLbFaNPznx9S/Rdaep761q347/
W6WO2q+u2BbQUgqO0jj91F4HW0QlVNveOu+GwOdsJvk8jfGg+j2gY810vdvU
fxe17YqNo/Y9dP9TdX9fM+d17YN0/kHqe7Dk7djv1D5F7V9J/py5FXr+TdI9
7qC+z+nYUvVvo+NrdK1ekieorQE6kbWu3/6Br1lf4x0oeXfJB/EOJU8JXR+r
c7ZmruleLw38TCW1v6t7fkvySh0/KtNXEc9f8HxmDmGbvJL33EKH6BaCr0vW
LWska+kFq7HZJffVi1uoazVW33LVOoj/k7WDbpqtMgvbR+Ntmfj+tlX/V3O+
33slF1QfrDGHoAPRiap/j87UuY+rfWu1L1ZpUrbOW5Tz3EEXYg+dr+vNKnh9
PKjn2z6wzkR3XqNyIXaQytXcr8oraluiPreo7wId31/jHc1+ruP9NX5DybN0
/BX1/Vdj7qO2dWqri/6JbO9j99+FvsA+Vt+yzjlL5z6n+j6qH6k+56nPDD3z
Hjn7ME/ja2i8Ouh2dJbOnYu9iR+g97NEc+NlfBTJFcmvSn5J8jOSd5X8puTP
VFrw/+vY+KrtHWy50zL74TnsG7X9yztT30G6zk34EyrbhJ6v61Wfm/P8Yb2w
1zyb8/66R2x78E0d30FjzVMZi42j6y9NvX7+Uf/ZOa+HqZH9BfyGYer7sfqc
LnlnnTNO8nyVJ1T/Uf0f09jDIj9/I/ZHtUUa7yW1n6JjDdT2ZWWTKxp8rvZa
tc9Bv+W8343N/pMX0W05/1eLJE+XvKPub6Wu/a/G2IK9RuffqLYDY9vDH+rc
HSU30/iv5f1/naz6obHt7U/VvpPaF6hMxUZTnxUab7fY9utytW+vtst4Ho39
pK5xma41Wce3Uftukn/U8V0ze20I/pLO7c2cwLbUmL+p79Sq7VDs0ccTj/mK
jjfJ+Vq7Zfp2qM4/NfY9faL2ljnf6y6Sh2b6+3vd3/GSj5e8o+Q/Ne7OmX6/
Df2k/qNS1zmG7ucdfKDxTsv53aATsdux39GVT6n/I+o/Uf278C4kT5Q8CT0i
+WnJTwR+B7yLKalt4UfYfyWfiv0lBfGnxlubeA69oesdm/PcelLt4wPb0NjS
zaQLy+p/M8+jc57CZkPn6v3X1/knSD5RfXdW+z/YrpIXS36N/ULvvxdzRPJz
kq+VfDn6RvIcyVdLLuuaB/JudOzWqp+BZ5mkYxepvavkRyU/JvkSyS+UrZt2
Vpmh++6GDlL7ZLV3VXt35pvkpyX3ivzOefe/sQerbbnu+SU9x1TmX8X3zL3/
LrmO2nuozFB9Jv6Qzv8twjFQX5VPmKu65ky1P6PDfdR2hfovkvyK5J/17g7R
sXtZ/+zVajtY8t2Sd5I8XPIqjXGzxsrh/6itJ/pD589Snysln6l+z0t+Ef9Q
8lmSX5S8QHI/1p/OvyVnnfwH2A72uNpfVftAyX0kvyR5seSbsR9YM5IXSR4g
+eXI84f5sI/arldZpvpK5qDarpO8VPJy7CnJJ0tuIbmR5I0VY0bYOr0L9mfw
b6jjA4N1vKNz3lD7cvU7sur/nP/+CrV9LfntyLodHX+E5Lci3yv3fHjVGBO2
HzYwPs97Fe/94wv2d57g/9YcuEjzL0xsr+JrN1Hbx1VjUtiG2LBgVcs0/gx0
O/632ldKno0+lXwIc1/yXPQl15W8QXJF7/azTP8tjzwXmBMHS95Zv3117R1U
dlH9TbUvVPt81Q9T++uR5x5z8EDJKyLPFeZMU8k9db935Wzz/M3+FtlWwWbZ
I/PveFYwkH1VXxgZSwJT2lPtSyKv78mS92etSX5c8mOS95P8auS1wJpohG+S
2Fe9F39R8/O1yLoR/dAY3RZ5bbHG9q3aZjwLeyJvW5I98IRMf7E3npQYGxuu
8bqktjmxPTdonj6E/aO+vdW+vXTGvqov0xhT89b/A8Fm1Odk9LDOWc94kk8v
eQ9nLx+IDa9n379ifGZRZF8fn3+vqm3wSwLbRNjmR6v/Wxp7qO7nIt3PXbX2
z7Gxh6neVe2DcvYB/tRYzTRGS96d+hTQJ5F9EXyS3Vk7kbElMKa9JX+bGi+8
UnI7yb015hXoIo1/neov6thkPddWkpejy3W9Trq3w3Vvt6nt/ci+FXvQkYnx
0YsKxlfBq7pojB46d1uVvrXW6eh2dHonnbuTJv/hOvdcyfVVfyby8/Me/q76
nri3c3TskNg6nrXNGr8AfETXAF9ehT+ktq8qxpm/kFyS/KH6rEEfgEHq/vox
Z5nXOnan2mZFtk+xU+9TW1Ndo4Xupws2s+pbobPxO3X+3Xr+G6pe++iAoTp3
l9j41DLseuxP7k/vq75uallqmwLbIlZ7A7X1r9r2xQY+R+e20zvpE3i/v0X1
KTq2Fl2MLY2uj4zHgsveLfn8stuZc8y9Vjq2UGM35p517u4qx6jeUedsp/qZ
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
TPWLQ9uj/wfvXPaU
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwt2Hnc18MWB/Bf9dSz9jzWa7kUIktJtCBL7g1lqVSWslQiLZYsV7Zuu3aS
JJWlPVoQbVq1oLJUihDtqewkEeW+z53fH+f1nfM5n3POzHy/M3Pme2KbTk3v
KZ3JZApLZTJlPb8rzGT65mUyE/MzmdYM5cpnMg3Idu2R5TKZ20jz4kxmLmmB
91FuJrOaX1d+S/HmlslkVsAuLchkBtIbwq8m4/Br4p9ZksnM075Zew3eOr49
2BfAWsLWwj6F9YK9D+sNO1SsCuK2Fe8KskNfvte/z9i+xhlJTtQewrcx3sM4
82G3wD6GfSJeT/G2wT6Gncr3deM9Ge8VWB3YNLzr+HaF9SQ3aVeTtyrZj7OY
tMXbgPeVeAPEext2G+xz2AZYP9hc/BkmclyO/ujnPLmW4N2B9yXeRryBeNvl
2CXHbtw7cQ/Sp8HP0q8ji4xH+ySykG8rvuv4rufbG3YVuZKMZ6vFVs2c7sjG
ex9voD6sobdnG6AP54g/msyEP8cnH94Jb61cfeVqivsD3h59/YJtJ84IcoL2
U3hz8e7DG0Y/Ha+KWM+SN8U7Bm94TsL785+jLw1x/4p3nZ9876e/gHc6bKR4
I4zjYv0fGu+C3+n8nybTxXubzDUnQ3OSra8Y63Cb4y7iuzj7rS3Gm4c3DO80
vH54a2Ju8KbjvYF3H/0TciNsMWwprDv9Y9IYNhM2G9aZvki8t8QbLF5p8e4T
71l9zsW7C2+qcXQ0jqfN1e3muS7+56S08T6Pdyrec3jDxbtIvGGwcrA7YZP5
3sF3LbwJbDbsLbyHY82IsUDeEfKeIe8AeT/mOwRvP+nFdyvfTbEG5d2B2w73
L3oXMpi9gM9p4vzB7zMyi19F2AS248qn9RDrohVOKXhj8a4hZbQrFyTbIzir
+T7J93fSg+9GnI/08RJ6e+O8Xbst6cmvgr6eYRynk+5kX3wvYq3Drce3Ct8X
YVXoz7OPMt5L+I4gv8T+QE6E/c7nWtzyYp5RkNZgN30Zw/ccvuPxxuHV5/cS
rBpsNOwlWD3YaFh12FjYGNhlsLGwGrAJsPGwBrAcUoY8wXYAfqTxfEivi9dO
u432bbGusvvLd/qzQX/KsP3J5wLtC0ku3w70aXgLjLM6XhH5HjbVOG7WLotX
ZBwtcSqSUeItgS+OeSuf1lysvYp4K+WvQG9PpsAq4SyFHUNvgVtanM306+Dj
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
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwt0M0r5XEUx/HD3OFi3GtlOZIb8ifwX3jYsLPQ1HBtyMZWUZSF4k9Qnm5M
985NkSKayUPNWHh+yI61La9fLN71OZ/z+Z7v6TQPjnbnKyOiEVUYqIvoR0Mm
YvIrA3X0Oi+TjtjDjbpFncOvbxGDNREntRF/ZcdTEV/0f/Nz9AzW9H56t88v
81t5c9jgj/AP+J315ppzxLswZ0T/jdfnj148y1Tpp/FCn5vTLjOPgjcz5hzz
a2Vr8EYP8X8gshFP8h2yC9jkLcj/k1lEms5X+xPDelv+/WNGF39KXZH9uEly
m2n5V7k+9KIgkzZ71ptOs5dR9maJ/1+24E2WPsS9uk3d/kmiH3gnemd4pFd5
9fQ2LtXf1U2ft05ufsvbT26Gu8xHL8lc0Tu8XVzTRTsNudWZXU7dc8JeKX4J
PTJHdj/EmH7Z7kXk6RXeKkbpEu8dtSpKRQ==
                    "]]}, 
                    Annotation[#, "Charting`Private`Tag$3245990#1"]& ]]}, {
                  EdgeForm[], 
                  Opacity[0.25], 
                  GraphicsGroup3DBox[{
                    Polygon3DBox[CompressedData["
1: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
LYp+
                    "], VertexColors -> None], 
                    Polygon3DBox[CompressedData["
1:eJxFlm1olmUUx697u59re7b7edYsekXKSDBKMyydTsisLVvWh0jMNihq9GG6
FKl8+ZKUWWlOlpUfKgwWUZlCQR+K3sgic5qKzjn3oqmYhm+LIj9Fv7//G/pw
uM+5zjnXebnOyz3uycUPP1MRQtgMpMCSqhDm8W3icFMxhEfqQjhYHUJzEsLa
LIQ24CV4/dBd4NeVQtgIPQk4DX0f9DHwwRjC0nIID6L/Jfo3I78K/hfgU+D3
QI/l/vHIb4ZuBi7Cb8H+hGCZLvhXAlMqQ1gP/RX4LOT3g2/n/k7uH6kJ4Qx4
O/f1wn+cO16GPwT9BvgueEvQvwl6d3QMB5L/YxvmviPwm7E5Cu9q6DXoz6ww
PR9/psGbDt2NTidnr4Af0x3gGfKLoAvA8doQ7oEeAd+DrcX4d3fRvugO3bUS
aAf/BJmd8NqrbPsu6DcVX9F56cn9f0ExJL6zNnMORcsX5XY2dAe8s5x9DD69
6Le5hjsbufsUZ+9DX8v5VnK/stq2q4i5ktz1QjfA35vY/mt5fvSG14M3Ec/R
Cr/f6sx36u6JnK2Tn9V+m3fhXyXfkd8EPQM4j3xPreNTnD11tqdYtyE/HvlW
cnQ0ur4mId9asm9P5fFI/0jiN9HbPFb0WyvnW4uuJ73tjsT1MhMYSFxDqqUV
3DEGuoHzD+qsr1x9WuF62RmtqxrpBT8fzVdOL4D/CGyH7oT/E/h3wDuJ7/we
/DdgDniEfwx8VSGEkzTSKfQPc1Ymvss5mwtvDPjTQF90TpXboeh8L0d2GLwb
2SH0J8M/yNkPmWvrJLwn0C0BVcjMgq4vO175PxZoBN8bXR9L0d0X3Yd6S9mQ
rZWZ41mX14NyoFycje6lUb4RejHwJ/i5mPMT5+YtbI+k7o9D2BgquXdbOWvB
n9+j/V0InAI/Hp2bF4ET4Aeja20ZdH90DkTrXLlR36jWFYNi2R9de8rXAfBp
yAxjayr0ALqr8ac39fwZqrQPdQXnXr6px9Xrmmcn4C0sOy/KTzf8Zch+g/4W
+Ps4q8vM25XPq+fhfw2/C/4GoKPsOlA9dKF/a+a3O5DPx0JmnnKsXE9E97KC
fbsF/XvRb0ltqz6fj+plzZcB6EVl14HufFv1jmwZ/QHoWcisAd/F2R3gw5w9
Cp5x1l/ps8/plxngjcCzJYNw1eNc8Cbufyj1zFM9PoduLPi99e4rwFOgutI5
eR18T+o3PsrZHHRqC67NQ9x3v2qy4Fo4DP0q+O7U/T/C2VroX1P7LpvroWuA
vkrndHvmXpe9tpJ7riP3RbU4WHLsm9BpwFY3+bqxxjEq1r6Sc6mZqvjkk3zT
zNM++ifz22vHaNdo/l0I7lnNX/ks3z9MPK9UM6qdzxLvo9PRtayZ80f0PNHb
agf9W+uZopmrM/Hkn2a87r9YdnyKRTHNzveF7C9AZwuy6zPP6+n5fFKMR8jX
7ArH/lHm3tuayytmxSobsnVD0b5rRjaBP1D0bpqX7/L3Su492dR+OhTde5r5
A+ATio5V+RxX4xmtWa2eHC17byiXA/l80T7R7NfO1+7/O7Ov2onajS1Fz/Vt
+X48mbnu9c+gf4czmXtXO1q7+lzm2tfO0O5QjIpV81250n7RrNXM1f6fRG7q
C679yfkMUO1vLHg26L/g0v9B4tl9O/JXFFy78vPn6Fk5CL4j2n/5qhobzOtH
s2R+6lrXTtJbas5rV/WXXLsbuHNq2flqLjr/2lWqYdXycvh3ll1f6oUFqXvl
Nr5jCu4N5eGv6N5r4/zb6Pxo9ysmxdaSv6nmi3azbA6mzql8+SXmsSTeZZds
pq45+aL8azfLZ8nr/0L/JJpv+rf4D6PSY9M=
                    "], VertexColors -> None], 
                    
                    Polygon3DBox[{{3392, 1730, 1729, 274, 3070}, {3118, 326, 
                    2593, 2594, 3832}, {3395, 1742, 1741, 292, 3083}, {3087, 
                    297, 1747, 1746, 3473}, {3549, 572, 1072, 1299, 3598}, {
                    3266, 1765, 1764, 898, 3485}, {3077, 285, 1735, 1734, 
                    3470}, {3204, 297, 2373, 2374, 3825}, {3319, 433, 2344, 
                    2262, 3812}, {3240, 2393, 2563, 775, 3419}, {3213, 2360, 
                    2327, 412, 3214}, {3541, 744, 1422, 1287, 3597}, {3116, 
                    326, 1759, 1758, 3478}, {3310, 422, 2336, 2233, 3801}, {
                    3399, 1754, 1753, 312, 3103}}, VertexColors -> None]}]}, {
                  EdgeForm[], 
                  Opacity[0.25], 
                  GraphicsGroup3DBox[{
                    Polygon3DBox[CompressedData["
1:eJxFV1tsVUUUnXt6zrSnPfcWX4ilony0CRQDNDEiiomCFiwqFChEUqXVGowJ
xWiiBX/AABohECoG6ANBoFg0RBAf8GWCH+IjEdtqSDRSRKTvlwr4oWuxNvFj
sufM3TOzZ89aa/adWFNXsSpwzo1NOZcFW4qPvejfgTYb/TOwM9H2eOfKYZfA
jsDxPPodaIORcw+j3YT+gki/cbw37dy9sDsT5+5Em4O1/oLtx/gofPpg12Y7
V4s9B2PnHsfcZ0LnBrLk8yi+CzPOZdBfzThgN2P+PKw5NdFetaH2ewL9Z9Ef
Qv8x9GvQ70O/nOvAfzr86/H9J1oZvssCxcA4X0t01mzYHvjPxfzx2HcHvr/H
+AbY9Wgl6N8Am6DNwPy+RLH+jPFv0YYw7xG0Cej/kVa/AOs8mVEON8L/Hsw7
jX4x2r95zk3B98VEsZ7F2Fe2H/cdxBrzsMZwlvKYC1ubUr4Ow2c5cvZFvs5c
Cb/J+G0E4w/wbLAPBprLtfphL2dp/V7Yv9FOcQ/YK1mKvyySXxH6dwfq05/5
7LN+IXOD1hEoHuJh2Ol++tF/LqWYm0PtzTNxLnPSA/tTSvu+gH475txsuWJM
F2GnBurT54QXJp+CvZRWXA12R4y7G7YK380p5ZC+t6AhrdewNGDnGol0p8zP
CvjtT+nu6Nts/i9h32y0lfieA9/bI+Gl3mtsoxfGC+3sxM4/hh+e86rlmWdd
bBj4NaW74b5dsF+jDWGvVdj7SEpcIB4YzySMF2W09y84V08iDg7lOndfoPPy
LK247yDHue3wHQffcxhfg/aqxfk8bHuku+b9/Z4WL7divSUY/zxUHhsjxcl4
+yLli+sXZ8QlYm800l0Se8OY3wqbRrKGI2GlyPSBZylziqUtFN86IuHq2j1F
4jJ51wM7P9L9vgjuV2LeTuB4lxdHFsH2RsIc8cZ75z2OpKUn5PooxyLxn/nn
GYmtYdhlWHMG1tweKwfHQq1z1It3C2Hvh08BfDbD54dIXCDmruKMR+FTYrz8
MiW/I179BV6+R0PFX56te9uKdeoS8fJYnjTmo1DnLTW+04/5+DhUnjsjYeY6
do6Hwk9ttnK5A2sex37fYazCSzs7U8rXOi+8rvfSIfrwzC1pYfgUYqlKi49t
6Nd5cfRdrzPwLO/BTsZdL4qUt4WWn4NeY5+Gws0FyxVzti0Rf4klYv+TUPmv
sDjfh13sFeebsE3W5xix9lkoXrydSDPJ5X7LIXN52e6Od0g9OxGKO82Rvskl
aukHWK8adpnXW9AIW5IRvomTpbAnw/8183XTzUr4fJOld2R8LH7Ngv0x0nnI
aeoq88b85eYo38TpuFhaMZNYTfT28V2bEIu/D8Xi9xrjON8b8oBc/i1P+R+D
/sRYPCqDnWaYIXaKY/FoPuylQOtw/pSMzkPMXwykScTVpFhYHYjFxcZQfCe3
ekw/iYWXTdN4pg8D6fNG04rVsBu8xpfCDsXK0wWcuwU6swXf3Yhtpde8V2B9
Io3meKPlv9br3W4yzd1lsTFGvsONpjN7sGYDxgYxtxrjuy1WvuEtVjfcFukt
4X7kbq/pALE2YHwnV/oj8YU4HbTag+8pNX1tIqwz58tZs+RK48/Fwv70QJje
6+Vf5ZVv5p13R472mR6S6z2mVzw78ct36rRxm3UD31veKesD1iDNhtV9+crF
lUTcIXYO5CvP3Is1z5jE9J3vktd6T3vx4qzhk9o7K1DtMc3qn1LYA+bPebx7
vtlFVmdQS1kD8B2jHhE3jJnvDfm2LZY/tevGHGGLWCI3ieWD+YqN/OM7e9Iw
QCww9thwvj1f86l75AXxeyhf7xAxVm/awPjJbb5rzD9rrS3GQXJxk1eNWeM1
VmpxsgbjO8r3jnUX66Z1sO8YX8ibLuMmOUrd7ba3hhowau8X32zWG8QJdX5u
oBrykNearV6N/RWwh73usw32rkTrsV59w+LcdH080P1SY6g1xBxjY+1FDWft
yjxRh6lnI1aHzE7ENWo142dsxGeD6QN1gtrJOKlB1BDymRpPDeuy/JMvY40z
fEu4L89bEOk33hl1ibXCGtOnc6YtzAlrOdZg20zHqGdtdvZqLz0hV8lT1h18
m/hGcd6tNpd6wbOwHi03zaWu7TN+kWf7DXvML/8LMIdvJTp3h9WBrE2Gra5g
Hcu9qhPVXR12dy2h9JpaTc1rt5qV9Wan1cpNoeoP1h67Q73xvVabnI909jNW
u3APvktDVrMdsXHG9x8kQdix
                    "], VertexColors -> None], 
                    Polygon3DBox[CompressedData["
1:eJw1lW9olmUUxu/33Xa/e7b7fWdFIjMsPzTQmaYQ+CcDU5q5IEjUoS2dsAgC
pzRKmQgqhuFEmRkqS8nyT4oMir7Up0A/GBUkFREYmZnpdO4fYX6p3+X1+OHm
Oec+5z73ua9znfNMXd/1yoZiCGE3q5o1XA7hh0IIQzUhNFVC6E0h/IzeH0N4
Df10QwgvZSEMsLcB2x3k6wRoQZ+GPMzeAvQ+5GP4jqM/h96M/V3k86wSui5d
jLyD9T22L4jfTvz1fOejX2IdRr6JfRa+vcQ7SrxL5LcRfSL5rcT/HXxex/cc
e7uQV0XLQ+ytRl7HakL+hvUZ8m3izcU+l7euQ/6NeMuwXSXekxXn0BGdr3Lr
YLXgW6wN4RT3r8E2it6K/RjyOOfHqsiN8zMqjrcEeQt7sznbjs+j+E5kfYn8
UHLsU6zRZLxfxn8E/13ot8vGchl7Q8ijrEFsR9CnE/8m+nTsS9EHyz6js7+z
dzDZPlzlGkxA/4e1BHllcL20JNfVupbd0fV4i7U9+v5xzregP4Xvq9y5lv3H
ib8V/d9k2yHqcZzz19E/LPiN/9WHsC26toqp2BtZb2DrRt+JvJZ4K6Lxm8PZ
K8T5Edub3Nla53gz0BvJsV1cSb77I9Ygch939pRcs9ayc7qAPBCd6xh7d4jV
Dz7N6MPE7yRWJz4jmfUbRZ9XnFmcf1HcYN1DnoT9kYJz+kPcJt6tKnMwJutT
sL9A/L+Rr4FjVuWYii++i7vizBjyZHLor3ZNVC/x75OCOZmS67u8xnf+hdyB
//LoGKuRu5JzU45PJ2Mu7FXDZvA+gX6Nd/yCfX/y+1eIy+g3yq6xan1V/YS9
Fd+LyL+qx0vuR2GzUxzGf0/e7+LME8l36K6lReOzj7unBb9hP/LBzG/VPPgA
uVxvbh940P/EXEU+89i7hTxS51ruzftZ+Cu27uzN79N7D+f8Ej/Yus8x1ePz
etdTtRMXTrLuIl/G/n7yfPiWt4zgU0F+DAyPVpvT6qft+bzRDBD+mkHi6wCx
v24wpzTPHq7NuZbM7ePU5O2Ke1q9LR/5nkmeNZpJuq8RnyPV5oz4cSA5N3FS
9TiUXAvNDOHxrGpQcP1UR80b4aeZKf4I30VFz+TOkjHVbNX8EtYLM+Opmqie
mmmyCZOTOVfUrz/hs6lkzDVL1V+qhXpMsu4Wl1R/zd/dvLen4h5Vrwpz8U8Y
rcnMGWEnTD6O7kFh1ZS51spZfNiM/dNozIW9Yr4XXW/d1ZP3r3pe86ONPL4r
GDO9Qbmq94SRsNpW8RzRPJkAfjuiZ5dmzObofNUrbfmsUV1VX82ly3X+h3VG
+4hv4ry4r5n+J/e3ZJ6lmrFTM2OtWaqclJv4/0zRPaReEv7qJc2EychTMvee
fNQfwlzYq+bqQ+Xcnc9H3Sddd3dFv21fMhc08zUP9L9YWDR++h/1VZyf8tT/
SDWbn7k/VEvV/PnM/SkuyOe+b8HcUv2EiTh7Vv7R/0bN2BPRfFbvaKa15/2i
WXU6upb6n6jXxRHNB3FI/Jld9HyeyXsba/xP/ip6fst2If9/iLPip96k/59q
ov+08lFe/wM3qi2Q
                    "], VertexColors -> None], 
                    
                    Polygon3DBox[{{3224, 313, 2342, 2380, 3225}, {3215, 275, 
                    2328, 2362, 3216}, {3219, 293, 2334, 2370, 3220}, {3321, 
                    2457, 2345, 327, 3117}, {3730, 2050, 1893, 465, 3221}, {
                    3421, 777, 2277, 2395, 3243}, {3306, 2445, 2331, 286, 
                    3078}, {3312, 2451, 2337, 298, 3088}, {3206, 299, 1707, 
                    1708, 3674}, {2995, 2066, 2543, 434, 3183}}, VertexColors -> 
                    None]}]}, {}, {}}, {{
                  GrayLevel[0], 
                  
                  Line3DBox[{830, 1, 715, 267, 2786, 16, 2794, 31, 2807, 46, 
                   2817, 2818, 61, 2838, 76, 3106, 316, 2848, 91, 892, 340, 
                   3366, 673, 106, 642, 3145, 369, 843, 121, 389, 2865, 136, 
                   2877, 151, 2892, 2893, 166, 2919, 181, 2933, 196, 3161, 
                   405, 856, 211, 828, 447, 2000, 212, 2001, 213, 2002, 214, 
                   2003, 215, 2004, 216, 2005, 2006, 217, 713, 2758, 1502}, 
                   VertexColors -> None], 
                  Line3DBox[{1840, 2, 2323, 408, 830}, VertexColors -> None], 
                  Line3DBox[{1842, 3, 1840}, VertexColors -> None], 
                  Line3DBox[{1844, 4, 1842}, VertexColors -> None], 
                  Line3DBox[{1846, 5, 1844}, VertexColors -> None], 
                  Line3DBox[{1848, 6, 1846}, VertexColors -> None], 
                  Line3DBox[{831, 7, 2324, 409, 1848}, VertexColors -> None], 
                  Line3DBox[{652, 8, 1389}, VertexColors -> None], 
                  
                  Line3DBox[{1615, 9, 2210, 273, 2489, 652}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{655, 10, 819, 2326, 411, 1727, 1728, 1729, 1730, 
                   3693, 1731, 1732, 1733, 3690, 1734, 1735, 1736, 1737, 1738,
                    1739, 1740, 1741, 1742, 3695, 1743, 1744, 1745, 3691, 
                   1746, 1747, 1748, 1749, 3686, 1750, 1751, 1752, 1753, 1754,
                    3698, 1755, 1756, 1757, 3692, 1758, 1759, 1760, 3675, 
                   1761, 1762, 1763, 1764, 1765, 3680, 1766, 1767, 1768, 1769,
                    1770, 1771, 1772, 2782, 1773, 1774, 1775, 1776, 1777, 
                   1778, 1779, 1780, 1726}, VertexColors -> None], 
                  
                  Line3DBox[{278, 11, 2635, 875, 276, 1303}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{1854, 12, 2774, 1782, 1783, 1784, 1785, 1786, 
                   3688, 1787, 1788, 1789, 3703, 1790, 1791, 1792, 1793, 1794,
                    1795, 1796, 1797, 1798, 3689, 1799, 1800, 1801, 3705, 
                   1802, 1803, 1804, 1805, 3706, 1806, 1807, 1808, 1809, 1810,
                    3683, 1811, 1812, 1813, 3708, 1814, 1815, 1816, 3709, 
                   1817, 1818, 1819, 1820, 1821, 3682, 1822, 1823, 1824, 1825,
                    1826, 1827, 1828, 1829, 1830, 1831, 2784, 1832, 1833, 
                   1834, 1835, 1836, 1837, 1724}, VertexColors -> None], 
                  Line3DBox[{1855, 13, 946, 1854}, VertexColors -> None], 
                  Line3DBox[{1857, 14, 1855}, VertexColors -> None], 
                  Line3DBox[{834, 15, 820, 414, 1857}, VertexColors -> None], 
                  Line3DBox[{2805, 30, 3072, 280, 834}, VertexColors -> None], 
                  Line3DBox[{2814, 45, 2805}, VertexColors -> None], 
                  Line3DBox[{2835, 60, 2814}, VertexColors -> None], 
                  Line3DBox[{2845, 75, 2836, 2835}, VertexColors -> None], 
                  Line3DBox[{2863, 90, 2845}, VertexColors -> None], 
                  
                  Line3DBox[{842, 105, 3184, 435, 2863}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{705, 120, 638, 3143, 365, 842}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2875, 135, 388, 3380, 705}, VertexColors -> 
                   None], 
                  Line3DBox[{2889, 150, 2875}, VertexColors -> None], 
                  Line3DBox[{2916, 165, 2889}, VertexColors -> None], 
                  Line3DBox[{2931, 180, 2917, 2916}, VertexColors -> None], 
                  Line3DBox[{2944, 195, 2931}, VertexColors -> None], 
                  
                  Line3DBox[{1033, 218, 2007, 2008, 219, 2009, 220, 1368}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2010, 221, 2011, 222, 2012, 223, 2013, 224, 2322,
                    407, 857, 225, 829, 448, 2958, 210, 2944}, VertexColors -> 
                   None], 
                  Line3DBox[{2206, 270, 831}, VertexColors -> None], 
                  
                  Line3DBox[{278, 1630, 1722, 1629, 1697, 1698, 3702, 1699, 
                   1616, 1711, 3676, 1631, 1700, 1701, 1702, 1617, 1714, 1632,
                    1703, 1704, 3704, 1705, 1618, 1717, 3677, 1633, 1706, 
                   1707, 1708, 3681, 1619, 1689, 1634, 1671, 1672, 3707, 1673,
                    1620, 1692, 3678, 1637, 1691, 1624, 3679, 1621, 1695, 
                   1627, 1696, 1647, 3710, 1667, 1648, 1670, 1657, 1641, 1656,
                    1666, 1665, 1652, 1662, 2781, 1626, 1623, 1669, 1655, 
                   1640, 1723, 1838}, VertexColors -> None], 
                  Line3DBox[{655, 1075}, VertexColors -> None], 
                  Line3DBox[{1079, 716, 2206}, VertexColors -> None], 
                  Line3DBox[{1095, 1001, 2010}, VertexColors -> None], 
                  
                  Line3DBox[{1639, 1654, 2783, 1668, 1622, 1625, 1659, 1651, 
                   1663, 1664, 1725, 1781}, VertexColors -> None], 
                  
                  Line3DBox[{1710, 1677, 1679, 1678, 1643, 1712, 1713, 1680, 
                   1682, 3685, 1681, 1644, 1715, 3696, 1716, 1683, 1685, 1684,
                    3697, 1645, 1718, 1719, 1686, 1688, 3687, 1687, 1646, 
                   1720, 3699, 1721, 1690, 1635, 3700, 1636, 1693, 1694, 1638,
                    1650, 3701, 1658, 1649, 1660, 1661, 1653, 1639}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{3684, 1676, 1674, 1628, 1615}, VertexColors -> 
                   None], 
                  Line3DBox[{1642, 1675, 3684}, VertexColors -> None], 
                  
                  Line3DBox[{1642, 1709, 3694, 1710}, VertexColors -> 
                   None]}, {}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{2786, 3068, 3844, 2959, 2785, 3845, 2960, 2787, 
                   3846, 2961, 2788, 3847, 2962, 2789, 3848, 2963, 2790, 3797,
                    3849, 3189, 3711, 3968, 3069, 3388, 3030, 3469, 4042, 
                   3386, 3583, 3387, 3616}, VertexColors -> None], 
                  
                  Line3DBox[{31, 1859, 32, 1860, 33, 1861, 34, 1862, 35, 1863,
                    36, 2355, 454}, VertexColors -> None], 
                  
                  Line3DBox[{2794, 3713, 3903, 2793, 3854, 2967, 2795, 3714, 
                   3904, 2796, 3855, 2968, 2797, 3715, 3905, 2798, 3970, 3073,
                    3190, 3074, 3971, 2799, 3389, 3031, 3390, 2153, 3353, 
                   3604}, VertexColors -> None], 
                  
                  Line3DBox[{2805, 2032, 2804, 3906, 3716, 2803, 3461, 3517, 
                   2609, 3518, 2802, 3471, 4059, 3671, 3703}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2807, 3717, 3907, 2806, 3856, 2969, 2808, 3718, 
                   3908, 2809, 3857, 2970, 2810, 3719, 3909, 2811, 3974, 3080,
                    3720, 3973, 3081, 3393, 3032, 3472, 2366, 3584, 3217, 
                   3617}, VertexColors -> None], 
                  
                  Line3DBox[{45, 1870, 44, 1869, 43, 950, 2682, 42, 1868, 
                   1794}, VertexColors -> None], 
                  
                  Line3DBox[{2814, 2972, 3858, 2813, 3910, 3722, 2812, 2971, 
                   3519, 3462, 4057, 3463, 3464, 3976, 3835, 3689}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2818, 3859, 2973, 2816, 3860, 2974, 2820, 3861, 
                   2975, 2822, 3862, 2976, 2824, 3863, 2977, 2826, 3840, 3864,
                    3728, 4063, 3503, 3505, 3506, 3086, 3824, 3590, 4084, 
                   3663}, VertexColors -> None], 
                  
                  Line3DBox[{2835, 3919, 3732, 2833, 3918, 3731, 2831, 3465, 
                   3520, 4072, 3836, 3521, 2830, 3474, 3842, 4086, 3705}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2838, 3090, 3170, 2053, 2837, 2237, 3172, 2984, 
                   2839, 3094, 3174, 3733, 3978, 2840, 3979, 3097, 3176, 2985,
                    2841, 3099, 3178, 3734, 3980, 2842, 4066, 3507, 3735, 
                   4065, 3508, 3509, 3034, 3540, 2376, 3585, 3222, 3618}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2845, 2987, 3868, 2844, 2059, 3362, 3361, 2843, 
                   2986, 3359, 3358, 4040, 3382, 3383, 2518, 3683}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2848, 3092, 3105, 3982, 2988, 2847, 3804, 3869, 
                   3107, 2989, 2850, 3096, 3108, 3983, 2990, 2852, 3807, 3870,
                    3109, 2991, 2854, 3101, 3110, 3984, 2992, 2856, 3810, 
                   3871, 3112, 2064, 3475, 3525, 3526, 3114, 3826, 3591, 4085,
                    3664}, VertexColors -> None], 
                  
                  Line3DBox[{2863, 3128, 3926, 3816, 2862, 3410, 3815, 3925, 
                   3363, 3125, 3408, 2861, 3407, 3123, 3360, 4046, 3813, 3405,
                    2860, 3402, 3843, 4087, 3708}, VertexColors -> None], 
                  
                  Line3DBox[{121, 436, 1921, 122, 2346, 437, 123, 438, 1922, 
                   124, 2347, 439, 125, 440, 1923, 126, 2348, 441, 1924, 127, 
                   381, 2752, 1466}, VertexColors -> None], 
                  
                  Line3DBox[{2865, 3144, 3874, 3000, 2864, 3818, 3875, 3001, 
                   2866, 3146, 3876, 3002, 2867, 2285, 3003, 2868, 3147, 3877,
                    3004, 2869, 2290, 3185, 3737, 3989, 3148, 3433, 3062, 
                   3496, 4014, 3252, 3587, 3253, 3619}, VertexColors -> None], 
                  
                  Line3DBox[{135, 1930, 134, 1929, 133, 1030, 2718, 132, 1928,
                    1025, 131, 1927, 995, 3665}, VertexColors -> None], 
                  
                  Line3DBox[{2875, 3009, 3881, 2874, 3008, 3880, 2873, 3007, 
                   2714, 3579, 3006, 3879, 3578, 2872, 4076, 3739, 3551, 3580,
                    3660}, VertexColors -> None], 
                  
                  Line3DBox[{2877, 3740, 3927, 2876, 3882, 3010, 2878, 3741, 
                   3928, 2879, 3883, 3011, 2880, 3742, 3929, 2881, 3991, 3149,
                    3186, 3150, 3993, 2882, 3434, 3063, 3435, 4050, 3795, 
                   3300, 3607}, VertexColors -> None], 
                  
                  Line3DBox[{2889, 3933, 3746, 2888, 3932, 3745, 2887, 3012, 
                   3884, 2886, 3931, 3744, 2885, 4077, 3535, 3552, 3623}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2893, 3885, 3013, 2891, 3886, 3014, 2895, 3887, 
                   3015, 2897, 3888, 3016, 2899, 3889, 3017, 2901, 3820, 3890,
                    3752, 3996, 3155, 3438, 3064, 3497, 4015, 3254, 3588, 
                   3255, 3620}, VertexColors -> None], 
                  
                  Line3DBox[{2916, 3944, 3758, 2914, 3943, 3757, 2912, 3942, 
                   3756, 2910, 3941, 3755, 2908, 2696, 3553, 3592, 3666}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{181, 1972, 182, 1973, 183, 1974, 184, 1975, 185, 
                   1976, 186, 1977}, VertexColors -> None], 
                  
                  Line3DBox[{2919, 3759, 3945, 2918, 3896, 3023, 2920, 3760, 
                   3946, 2921, 3897, 3024, 2922, 3761, 3947, 2923, 4067, 3510,
                    3511, 4068, 2924, 3512, 3065, 3542, 2198, 3301, 3608}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2931, 2125, 2930, 3949, 3763, 2929, 3025, 3898, 
                   2928, 3948, 3762, 2927, 4079, 3536, 3555, 3624}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2933, 3764, 3950, 2932, 3899, 3026, 2934, 3765, 
                   3951, 2935, 3900, 3027, 2936, 3766, 3952, 2937, 4070, 3513,
                    3767, 4069, 3514, 3066, 3158, 2521, 3589, 3385, 3614}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{195, 1985, 194, 1984, 193, 1983, 192, 1982, 191, 
                   1981, 999, 1512}, VertexColors -> None], 
                  
                  Line3DBox[{2944, 3029, 3902, 2943, 3953, 3770, 2942, 3028, 
                   3901, 2941, 2135, 2940, 4080, 3769, 3556, 3582, 3662}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2958, 3162, 3966, 3823, 2957, 3965, 3779, 2956, 
                   3964, 3778, 2955, 3963, 3777, 2954, 4081, 3537, 3557, 
                   3625}, VertexColors -> None], 
                  
                  Line3DBox[{3072, 2966, 3853, 3799, 2792, 2965, 3852, 2791, 
                   2964, 3516, 3851, 3834, 3458, 3460, 3459, 4056, 3688}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{3106, 3091, 3171, 3920, 3802, 2846, 3803, 4000, 
                   3173, 3093, 2849, 3095, 3175, 3921, 3805, 2851, 3806, 4001,
                    3177, 3098, 2853, 3100, 3179, 3922, 3808, 2855, 3809, 
                   3923, 3111, 4060, 2857, 3476, 3527, 3035, 3477, 4061, 3781,
                    3257, 3606}, VertexColors -> None], 
                  
                  Line3DBox[{3143, 3251, 3425, 3250, 3350, 4036, 3783, 3489, 
                   3271, 3142, 3249, 3424, 3248, 4013, 3348, 3046, 3488, 3270,
                    3141, 3247, 3423, 3246, 3346, 3045, 4019, 3487, 3269, 
                   3140, 3245, 3422, 3244, 4012, 3682}, VertexColors -> None], 
                  
                  Line3DBox[{3145, 3272, 3427, 3047, 3324, 4025, 3784, 3490, 
                   3273, 3367, 3274, 3426, 3785, 4020, 3326, 3048, 3491, 3275,
                    3368, 3276, 3428, 3049, 3328, 4027, 3786, 3492, 3277, 
                   3369, 3278, 3429, 3787, 4021, 3330, 3050, 3493, 3279, 3370,
                    3280, 3430, 3051, 3332, 4028, 3788, 3494, 3281, 3371, 
                   3282, 3431, 4049, 3052, 3334, 3053, 3495, 3283, 3988, 3372,
                    3284, 3432, 3054, 3337, 4030, 3789, 3285, 3603}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{3161, 3160, 3954, 3822, 2945, 3771, 3955, 2946, 
                   3772, 3956, 2947, 3773, 3957, 2948, 3774, 3958, 2949, 3775,
                    3959, 3960, 2950, 3067, 3159, 3961, 3796, 3468, 3615}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{3184, 2999, 3129, 3873, 3817, 3409, 2998, 3987, 
                   3127, 3126, 3406, 2997, 3124, 3872, 3814, 3401, 2996, 4088,
                    3709}, VertexColors -> None], 
                  
                  Line3DBox[{3366, 3258, 3412, 3036, 3323, 4009, 3226, 3411, 
                   3227, 3130, 3259, 3479, 3782, 4026, 3325, 3228, 3413, 3229,
                    3131, 3260, 3480, 3037, 3327, 3827, 4047, 3414, 3230, 
                   3132, 3261, 3481, 4016, 3038, 3329, 3231, 3415, 3232, 3133,
                    3262, 3482, 3039, 3331, 3828, 4048, 3416, 3233, 3134, 
                   3263, 3483, 4017, 3040, 3333, 3234, 3417, 3235, 4029, 3135,
                    3264, 3484, 3041, 3336, 4010, 3236, 3335, 3586, 3237, 
                   3613}, VertexColors -> None], 
                  
                  Line3DBox[{3380, 3299, 3061, 3351, 4023, 3794, 3298, 3379, 
                   3297, 3793, 4035, 3349, 3060, 3296, 3378, 3295, 3059, 3347,
                    4022, 3792, 3294, 3377, 3293, 3791, 4034, 3345, 3058, 
                   3292, 3376, 4083, 3577, 3291, 3574, 3575, 3576, 3343, 3569,
                    3573}, VertexColors -> None], 
                  Line3DBox[{3605, 3256, 3780, 4082, 3539, 3033, 3504, 2827, 
                   4064, 3502, 3916, 3839, 2825, 3915, 3727, 2823, 3914, 3726,
                    2821, 3913, 3725, 2819, 3912, 3724, 2815, 3911, 3723, 
                   2817}, VertexColors -> None], 
                  
                  Line3DBox[{1461, 2747, 284, 37, 2223, 37}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{3609, 4024, 3829, 3154, 3437, 3436, 2902, 2311, 
                   3939, 3819, 2900, 3938, 3751, 2898, 3937, 3750, 2896, 3936,
                    3749, 2894, 3935, 3748, 2890, 3934, 3747, 2892}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1470, 2756, 402, 187, 2675, 187}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{1109, 190, 1980, 189, 1979, 926, 2658, 188, 
                   1394}, VertexColors -> None], 
                  
                  Line3DBox[{1370, 38, 2356, 455, 1865, 39, 1643}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{3629, 2978, 3498, 3441, 4052, 3830, 3203, 3729, 
                   3977, 3396, 3673, 3697}, VertexColors -> None], 
                  
                  Line3DBox[{3630, 2993, 3499, 3443, 4054, 3831, 3115, 2065, 
                   3400, 3672, 3700}, VertexColors -> None], 
                  
                  Line3DBox[{3631, 3373, 3286, 3967, 3055, 3339, 3056, 3287, 
                   3990, 3374, 3288, 3057, 3341, 4032, 3790, 3289, 3375, 3290,
                    3567, 3659}, VertexColors -> None], 
                  
                  Line3DBox[{1380, 128, 2595, 844, 1925, 129, 1926, 130, 
                   3654}, VertexColors -> None], 
                  
                  Line3DBox[{1384, 3599, 3593, 2903, 3453, 4055, 3833, 3452, 
                   2315, 2904, 3530, 3940, 3841, 2906, 3600, 3655}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{3632, 3445, 3354, 3972, 3075, 3192, 3076, 4043, 
                   2800, 3694}, VertexColors -> None], 
                  
                  Line3DBox[{3633, 3446, 3356, 3800, 4037, 3198, 3085, 4044, 
                   2828, 3696}, VertexColors -> None], 
                  
                  Line3DBox[{3634, 3447, 3364, 3811, 4038, 3208, 3113, 4045, 
                   2858, 3699}, VertexColors -> None], 
                  
                  Line3DBox[{3635, 3451, 3450, 3995, 3152, 3449, 3153, 3994, 
                   2883, 3743, 3930, 2884, 3649}, VertexColors -> None], 
                  
                  Line3DBox[{3636, 3457, 3456, 3515, 4071, 3156, 3455, 3157, 
                   3529, 4074, 2925, 3534, 3528, 3533, 2688, 2926, 3650}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{3641, 3136, 3265, 4018, 3042, 3338, 3238, 3418, 
                   3239, 4031, 3137, 3701}, VertexColors -> None], 
                  
                  Line3DBox[{3642, 3384, 4041, 3381, 3522, 3768, 4039, 2938, 
                   2133, 2939, 3596, 3669}, VertexColors -> None], 
                  
                  Line3DBox[{3643, 2951, 3524, 3838, 4073, 3523, 3467, 4058, 
                   2952, 3776, 3962, 2953, 3651}, VertexColors -> None], 
                  
                  Line3DBox[{3644, 3163, 3439, 3798, 3850, 3191, 3712, 3969, 
                   3391, 3684}, VertexColors -> None], 
                  
                  Line3DBox[{3645, 3166, 3440, 4051, 3082, 3197, 3721, 3975, 
                   3394, 3685}, VertexColors -> None], 
                  
                  Line3DBox[{3646, 3180, 3442, 4053, 3102, 3207, 3736, 3981, 
                   3398, 3687}, VertexColors -> None], 
                  
                  Line3DBox[{3647, 3187, 3500, 4062, 3151, 3448, 3738, 3992, 
                   2870, 3878, 3005, 2871, 3594, 3667}, VertexColors -> None], 
                  
                  Line3DBox[{3648, 3188, 3501, 3821, 3891, 3454, 3753, 3997, 
                   2905, 3531, 3532, 4075, 3018, 2907, 3595, 3668}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{3661, 3581, 3554, 3754, 4078, 2909, 3892, 3019, 
                   2911, 3893, 3020, 2913, 3894, 3021, 2915, 3895, 3022, 
                   2917}, VertexColors -> None], 
                  
                  Line3DBox[{3706, 4089, 2980, 3466, 3837, 3865, 2981, 2832, 
                   3866, 2982, 2834, 3867, 2983, 2836}, VertexColors -> 
                   None]}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{1840, 2015, 3845, 1841, 2024, 3854, 1860, 2034, 
                   3856, 1872, 3912, 2044, 3860, 1885, 2236, 2237, 2338, 4000,
                    2238, 2239, 3869, 2252, 2552, 2159, 2643, 2160, 4026, 
                   2460, 2414, 2270, 2422, 2461, 4020, 2177, 2573, 2178, 2572,
                    2346, 2281, 2282, 3875, 1932, 2088, 3882, 1945, 3935, 
                   2101, 3886, 1959, 2114, 3896, 1973, 2127, 3899, 1987, 3955,
                    2140, 2001}, VertexColors -> None], 
                  
                  Line3DBox[{3, 2787, 18, 2795, 33, 2808, 48, 2819, 2820, 63, 
                   2839, 78, 2849, 2850, 93, 341, 3131, 589, 108, 693, 3368, 
                   370, 123, 2866, 138, 2878, 153, 2894, 2895, 168, 2920, 183,
                    2934, 198, 2946, 213}, VertexColors -> None], 
                  
                  Line3DBox[{1842, 2016, 3846, 1843, 3904, 2025, 1861, 3908, 
                   2035, 1873, 3913, 2045, 3861, 1886, 2240, 3978, 2054, 1899,
                    3921, 2241, 2062, 3983, 1910, 2553, 2161, 2554, 4047, 
                   2385, 2462, 2386, 2502, 2423, 2463, 4027, 2179, 2649, 2574,
                    2575, 1922, 2283, 2078, 3876, 1933, 3928, 2089, 1946, 
                   3936, 2102, 3887, 1960, 3946, 2115, 1974, 3951, 2128, 1988,
                    3956, 2141, 2002}, VertexColors -> None], 
                  
                  Line3DBox[{1844, 2017, 3847, 1845, 2026, 3855, 1862, 2036, 
                   3857, 1874, 3914, 2046, 3862, 1887, 2242, 3979, 2243, 2339,
                    4001, 2244, 2245, 3870, 2253, 2555, 2162, 2644, 4016, 
                   2163, 2464, 2415, 2271, 2424, 2465, 4021, 2180, 2577, 2181,
                    2576, 2347, 2284, 2285, 1934, 2090, 3883, 1947, 3937, 
                   2103, 3888, 1961, 2116, 3897, 1975, 2129, 3900, 1989, 3957,
                    2142, 2003}, VertexColors -> None], 
                  
                  Line3DBox[{5, 2789, 20, 2797, 35, 2810, 50, 2823, 2824, 65, 
                   2841, 80, 2853, 2854, 95, 345, 3133, 597, 110, 695, 3370, 
                   374, 125, 2868, 140, 2880, 155, 2898, 2899, 170, 2922, 185,
                    2936, 200, 2948, 215}, VertexColors -> None], 
                  
                  Line3DBox[{1846, 2018, 3848, 1847, 3905, 2027, 1863, 3909, 
                   2037, 1875, 3915, 2047, 3863, 1888, 2246, 3980, 2055, 1900,
                    3922, 2247, 2063, 3984, 1911, 2556, 2164, 2557, 4048, 
                   2387, 2466, 2388, 2503, 2425, 2467, 4028, 2182, 2650, 2578,
                    2579, 1923, 2286, 2079, 3877, 1935, 3929, 2091, 1948, 
                   3938, 2104, 3889, 1962, 3947, 2117, 1976, 3952, 2130, 1990,
                    3958, 2143, 2004}, VertexColors -> None], 
                  
                  Line3DBox[{1848, 2202, 2204, 3849, 2353, 2214, 3970, 2216, 
                   2355, 2222, 3974, 2224, 1876, 3916, 2662, 2664, 3864, 1889,
                    2666, 4066, 2668, 1901, 3923, 2254, 2256, 3871, 2257, 
                   2558, 2165, 2645, 4017, 2166, 2469, 2416, 2273, 2426, 2470,
                    2183, 4049, 2581, 2184, 2580, 2348, 2288, 2290, 2349, 
                   2300, 3991, 2302, 1949, 3939, 2310, 2312, 3890, 1963, 2670,
                    4067, 2672, 1977, 2674, 4070, 2676, 1991, 3959, 2144, 
                   2005}, VertexColors -> None], 
                  
                  Line3DBox[{1854, 2679, 2603, 2606, 2604, 3851, 2680, 2681, 
                   2609, 2612, 2610, 2682, 2683, 2615, 2618, 4057, 2616, 2684,
                    2685, 4072, 2621, 2624, 2622, 3865, 1895, 2496, 2517, 
                   4040, 2497, 2498, 2546, 4046, 2263, 2541, 2264, 3872, 2265,
                    2566, 2171, 2646, 4019, 2172, 2481, 2419, 2278, 2436, 
                   2482, 4022, 2190, 2296, 2191, 2718, 2719, 2713, 2716, 2714,
                    1941, 2097, 3884, 1955, 3942, 2110, 3893, 1969, 2123, 
                   3898, 1983, 2136, 3901, 1997, 3964, 2150, 2012}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{13, 2791, 28, 2803, 43, 2812, 58, 2831, 2832, 73,
                    2843, 88, 2861, 747, 3406, 103, 361, 3141, 630, 118, 703, 
                   3378, 386, 133, 2873, 148, 2887, 163, 2912, 2913, 178, 
                   2929, 193, 2942, 208, 2956, 223}, VertexColors -> None], 
                  
                  Line3DBox[{1855, 2022, 3852, 1856, 3906, 2031, 1869, 3910, 
                   2041, 1882, 3918, 2051, 3866, 1896, 2499, 2059, 1907, 2549,
                    3925, 2266, 2547, 2068, 3987, 1917, 2567, 2173, 2568, 
                   2398, 4013, 2483, 2399, 2509, 2437, 2484, 4035, 2192, 2297,
                    2076, 1929, 2085, 3880, 1942, 3932, 2098, 1956, 3943, 
                   2111, 3894, 1970, 3949, 2124, 1984, 3953, 2137, 1998, 3965,
                    2151, 2013}, VertexColors -> None], 
                  
                  Line3DBox[{1857, 2212, 2213, 3853, 1858, 2032, 1870, 2042, 
                   3858, 1883, 3919, 2052, 3867, 1897, 2060, 3868, 1908, 3926,
                    2267, 2548, 2268, 3873, 2269, 2569, 2174, 2647, 2175, 
                   4036, 2485, 2420, 2279, 2438, 2486, 4023, 2193, 2298, 2194,
                    1930, 2086, 3881, 1943, 3933, 2099, 1957, 3944, 2112, 
                   3895, 1971, 2125, 1985, 2138, 3902, 1999, 3966, 2320, 2321,
                    2322}, VertexColors -> None], 
                  
                  Line3DBox[{2000, 2139, 2319, 3954, 1986, 2126, 3950, 1972, 
                   2113, 3945, 1958, 3885, 2100, 3934, 1944, 2087, 3927, 1931,
                    3874, 2077, 2280, 1921, 2571, 2570, 2648, 2176, 4025, 
                   2459, 2421, 2501, 2384, 2458, 4009, 2383, 2551, 2158, 2550,
                    1909, 3982, 2061, 2235, 3920, 1898, 2053, 2234, 1884, 
                   3859, 2043, 3911, 1871, 2033, 3907, 1859, 2023, 3903, 1839,
                    3844, 2014, 2201, 2323}, VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwNzbFKgnEYhfG3Fj9bdLBorL0b8AbCoaXCC9BFIlRCBKGQoNodcpDKKQhB
iNagvSm3pkCl2oRoaQnR33A453neP9+3Xa4f1FYiYk/eUxGlJKKViXi1D+1v
u7kW0ZBnbpc7sb/4uh5yee4Wp9MRKelzO9yq3ePndofb0l38r3/lktvUG77z
o8+8v3Z/06fSdl/n7+0XvqgnOLxf2C33LN7HH+4ju8Yleoqr/LGUueDG3BGe
6Iou8n9yhZ/cH6WAZzKwL/gHncefco7v8I3k/H8JkJosPA==
                   "], VertexColors -> None], 
                  
                  Line3DBox[{2008, 2146, 4058, 2628, 1993, 2132, 4039, 2514, 
                   1979, 2119, 2690, 2689, 2692, 4074, 2691, 1965, 2106, 3997,
                    2315, 1951, 2093, 3994, 2308, 1937, 2081, 3992, 2304, 
                   1925, 2073, 2292, 2432, 3990, 2511, 2431, 1919, 2070, 2474,
                    4031, 2392, 2275, 2562, 2561, 1913, 2065, 2539, 4045, 
                   2259, 1903, 2057, 3981, 2537, 2249, 1891, 2049, 3977, 2536,
                    4044, 2231, 1878, 2039, 3975, 2535, 2227, 1865, 2029, 
                   2534, 4043, 2219, 1850, 2020, 3969, 2528, 2208, 2210}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2009, 2147, 3962, 1994, 2133, 1980, 2120, 2688, 
                   1966, 4075, 2107, 2693, 3940, 1952, 2094, 3930, 1938, 3878,
                    2082, 1926, 2074, 2293, 2188, 4032, 2478, 2433, 2783}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2010, 2148, 4081, 2699, 1995, 2134, 4080, 2698, 
                   1981, 2121, 4079, 2697, 1967, 2108, 4078, 2696, 1953, 2095,
                    4077, 2695, 1939, 2083, 4076, 2694, 1927, 2075, 2707, 
                   2294, 2708, 4083, 2709, 2512, 2434, 1920, 2071, 2784}, 
                   VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzy9Lg1EYhvFHUPxTFvYJBME0FOYE0SEax8RhkaEW4TWJA6s2i8UmKgyL
2eAnMJgX5zZ9/QRDjJs2fydcXPdzP+cc3nf+uLV3NhERDeTTEdlMxEUhoiPv
y69c41Pdi7zCVXPGT+Zl+UC+lRd5wdyei7jDI671D3yPsd0N3tJbsxFX6OAI
X/bP+kN5Su5iEpfu/+qL7n3b5ekd8498btfnHrr4tBvyif7PmW3zFjbxgZGu
wU37DV5P36db4wF2Ubdb5QrKyO37vINq+t90VrfEJbwjQw//qCsvcw==
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0Msz1WEcx/HHrtq0THb9Iywyg4YWZ8GGJpTbcZlWpoV1MaQkrEwqjkvu
t1NyJJdC6baqyIL+AZO917N4z/vz/T6fZ36Xa1UtieasEEIPBi+EsHwxhAPU
yYuXQviEQ/Pu5RBuyH/l5/wWK/IR6nWXzDs4NhfzCQ/FDhrkf2jQe23eRa75
JufxC36HpNzJp56V1J2U93Ddvovz+SX/d77KjeZH0bpT/BmFdt1cxK84gyY5
Eb/DvSbdafkLSuI7YFg+c7bG98ytOikuxbj9KJdhB20YQ8a+XW/GnY+4bXeF
K3mE3+OBnM1P9WZ5H1V2U+6Wy9VyitfxUL7KP5z16s/JX3HHvoLv8ih/QDo+
25wjP9Od52+osZt2dkuuje/JG+iQH3Of7gJ/R53dE66P38ib+CP3cL9eOr4L
ftn9xoS8Ff8r7nvGgM4b+ScK4n/HMrZxDvTyXls=
                   "], VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzrsuRAEUheE9EcHEpVKIewyDAnF9AOEBtArXKEkUQjPTqHgEhWhRTURI
XBpk6JgZVAqRiNoD8J3iz1rr3yfnnO7ljbn1VESs4bIu4gKHtRHN8kimmyJa
0xGj9hWOuV2uRT/V29zG9WsUki1L7md6u9uEfYN77pzrTL4hO9zK3KR9iyKX
kRXuKXnOfcq+wwP3wmX1suxye+UqepHblp8ocDvyhNvEl55L/hN7et79V+5j
3jt6kMGfPeSZD/eUXOB60Ycq+4AfltVY5LJ44/plmhtBPca4JW4Ag2jgvrkt
vVFfkctYxbP9jkf3ksxxefzY03IWM8l3aiL+AR3rNeE=
                   "], VertexColors -> None]}, {}, {}}}, 
               VertexColors -> CompressedData["
1:eJzsvXk4Vtsb/y8VMqWSsZJk1kBlyHCLoqQokqEkFSoiQyRRqCQhSjRQhhRC
EUXKkCnzlJSQ9t4PeQwJSYbfPuf6ntbzOdf1/Hzq2+fUOd/z/Pm67ms9e997
rft+32utvbawpf3WfYwMDAyfZzIwTGX449cHPck20/mZCbhtGUa5vqwG/uB4
S1D1UD8OYZ+Xq97ur/7K08d3f65+icMa+54+jxjEz13er1P0AIfU8CTqHiXE
Y5bY8jb74rDfJC8sVKfqKz/+VKDmuQoOI2uhXTqs4iv3eWCSt6wMg/fWKvLK
xPOvXDp+u8McMRys7r6vvcZeActmrXsm1IfDk7srHPxCy4FByHQth1k+DMSf
f++8EIMpEl6fAgUKIDqtfBG3Wd7XdkL9i161NvVC/gic+ez4/it3u/N+38Mn
PTCwPaLwfg7lK6/GJK4V6HfDYf8+w1RV7Cv/4t8QmBZNBdc8EY7U8Pav3JFf
YVX1tS5gytBJVWR/+5UfZsnQuylEwCGmKXPwo8jPLUrLCHl2AnSErTBBQLyd
n/CtIf1/8pPiFgUa/0tTTThPVeOAnXioau6P+JeTdaEKN3DYUB6mptqH/Mw5
PLpcw5j0cycc9FSp/MpXF9gIv8IwuDVwQ/LWybJ/jJ8vznTcEqdCgHLlLHha
g/zZ/aRmA7cUAUPHo9X8IhB/MOHoHzKLALdyr3ZDPcSbg8/NFCfve++7fQyi
75GfCUOXDyG5OESkwzUeU8SdlBr8n7jhoFKzWER+CvL/umoJlVVTcUhaIi3i
plT+j/Gzh+6DIxIWBOzxnzW+VrX2K18py3n85mYCgt/Vn13BgvhgpOx2eQUC
vFfffLAxD/k5bs4dhRYeAhI9GP137kK8ky1hSKYDB73GIZbxGuTnM0e7ek6Q
/Ty6zsfp8wfk5/0HjHV3SODwse/qYUeBin+Mn9cdWzTWd56AxX1E07ti5E8j
X+9peccJ2Houp7stDHHXa1zsOdYEjJ1LjVA0RHxDW0ZX8XoCytlr1h0fQn72
WDdPVFmQAKl3g1tCbRG/rG8sWVCHAyX+aPiyi8j/HP8nnnz6Uzz5u/tZ/6nw
YrdKAgScPz3TPFf3lScf231VOpeA8E0yocO7EPcX3tEinET6uZJvXFcE8Xxm
prnCQQSEsAiGeJQh/x+o6j+zfA8BBoY3sx21EOeq1aJMmUfAo2tX53UfQv5X
jaKaPbuKgzaxOk2noeof42dRucCaYhUKVO18c06jqf4rFytKf/RAlgJRmT7X
cjIRF4o9vY9DmAJue4K1Np9CvO2LZf8eZgocvbjiylUFxN+HKPOvbCHAsGbj
IUoWei4RUtGt3pcJiNVz8XqDIf/Pqj9xUGYmAZXdtu6z1tf8Y/w8/lBKmS2L
CjbrcZ6EcmTvCnjcNDMq7H3rM0NahqadMy3HnIOpcFaDM4rrOOJL6gN9t6VR
QXdGo53KY8Q/uiU8HyqgwpUxjU8fMcTXz6m0oBZRgd/N8aUcFfHxGqX4M25U
2DCLz/KlMeL09Mnfhcd3Ro3/Fp91a/a3/Ed8dk0QnEL2NzuLyxGG7xBvxx9E
et4goHZkRjAXA+qf5nJhr1rvECAxNqvjyDzEpz10WXnlHgGPP4W8aV6BuLP9
sjUj9wkQvslYyqSIuLpIWrPaNQI+Um7xr/hY+9P986N47ZEVW37TzxcpPry0
+vmNzPaxI6IEWA1BcNA5xDfvOccbKk2AsVWI9sxIxNXVlMauyRKgfvhz6/ZU
xL0HZGLC5Al46N4hZfMUcSpP/fqjpG5R6JGw4slH3LZnQcULCQI22DUOF12q
+en++VG8RG6llEArDjf3OMmcykB5//QqNyv2dzgsXFnz3jUfceUWWLeUgsN2
Eal3I5WIF/G8r9PswsHdJSXU+DXilw4Yqd/swSFwhmqeH4644yXcf3UvDns+
M7UbUxBX1V4WbYjjsKi3qd6itPqn++dH8fGpxTFb7uHQMnZdn5BG97WvfWor
NQ0H84CO089XIP6ozSI4PgOH1zUCExwqiC/SaRYyfYSDMd7WqLgWcQZZbFZo
Ng7pY6puH3UQ3/PETX+Y5JuV9aaK6SIe/sg/5xBZv9/oZ35pqvjP8TNPsY9n
5XkcHHxURPJOIB01z6E4cVcQDj6bbF3V/BE/uia6YOoFHGKL+7cvvYi4WfGT
T9EhOEiF+11jiEScwT2F/XMoDuMPOHj5biGu52lJXXURB3lnyPCLR9xZyOyu
djAOQ8JRu7ODJq/T/y68/2mxx3MHHOo+CpSx19DYdy1e730YB7mLH/P3NSB+
y2zuEw1HHDLm71v1sQnxO4vODzE44SBWt4TXqQVx7niOlOsk5+MXnS/Rjvh7
Ff+QRyTvDzAdr6bh+2dfDaGS/9vXwW3T2fjz/fOjuIOVu9xvXDdpnTMtnxt8
6nf+fO3Z/+BH1S/8zpU4qv+Ds1Re+51nM/K40PLHW2/9zlfd0vsPbjLt9u98
iGLyHzxtWsDvXHFHqvOv4J8fxfEnkQlCpzB4v89N8JNqKRq/WaWHllzHIFvB
7URUFeJ2Uf5Gs7Mw2BVb6H3ZE81bfrD0mabRgoGucnJJpgmaZ3twZcG9dE4c
TokGafB5oXkhevV169XU4fvxFCA6JeK+zHuB9MyO5uYj1ynAe1ruyvhYw1dO
4FZP1wZQoLrDZW5PKeICtzFPIXsKyGe1qKccRvxZSVB/mjJZZ7k2a000oHpq
YFRen6eJAMacA4/2JyKdmaJvz+Y4RPY33jd35MaqgWfwwKjIoi6YIiysndv6
GmbqLUrZpFT43fURPa4gdf3ohZZuuHbMhaM9HP/KO780Dp7soQJbidLn+Zve
feXGg4rib7mocG5wg21PNqqP5NavGdjESAE9X+PjqyTQ/bpJfjDp5aTAiRUr
DzptRjwkfRpHmyAFDKTvON90QfxkW8XoO3EK5IxxRzNeQdwiJPat5TIKuBuz
h6SnIr70yearbmIUuH62zjrjEuK5Fks01esJeP9WRL7wWt1P7//fyoVYsm24
SP087ymRV5OD9HBxQnOHNxUHbEfg3QWtSFcwOq1R4XqMQxHlusMhGh3imbI+
sO0yDtcUDa4+zkH50ff5mVtf3HEYLpse8YwT8aHKHe3dljhIjExfOe84up5n
V24MX59BgFiHT7yaAroekcqb67DZpJ+vhDoZGCA+YVcU/4oXhzyXuTM8M9B4
tC7rPnK6EYO2mYzl/cvR+JVnDB9xcsegRaDZ1GSshG7//8P+srzY/FvBGCy6
czUoz6f0Lxsv38rpjRd68wyzicyyeatIvTrb/GaCNZp3zfoYXGv0ESPr10Fp
i6aySf3zRWlFPJGAgeD0nPpHi57/cD/Q67et+hxMudw4JHSvFbkfUz7pdXou
vdvNXIbBlkpNVh38x13nZP+79fIscecBDPxL7caE2sp+uH/mHWuLbo0hYGDQ
OHIjK4o/kp/ZZbcPEfB4aO2K0akoXpXySt/svUDAecoD8dE6NM/Q2BXB0UQQ
sKBYMGNOA2on8OOgepMbAQKV3KVMfsg+MkwT16wmQF6j6XlaMLLf23lf2MKQ
gOydLuvD+ZH9gtQsyQXJBPTrBH3Rk0T2lKhBI8t5BDxYW8s3y4Gmfl94uTzU
lYBc8YQ9S3xrJ/WzUlD4p4alODzpmet2e03FD/dz0e1VFuUKFAjqmaiReY78
KdATmKA+SkBzU/mN9rmIM+zbOg2kyPwiO8tl8U3EE9zia2/NpUB4MfV8qSXi
qWeO3DUZJKCbMIgaZUA85g3joqGnBIgHiiQa0cxjnxyJUE/iI4DB5JRr/V7k
tyMM73pTdhHAXqs966Xy5H772OszJZasj8RmduBMZH30o+LbXxUP6emKb9Ub
36pD6PFILpaXEEOBW8Kv47xnIr2XMcrjMSOXCtl5zcFGr9E86kjsiCdvIgVO
aRdsXSOO7NPF7lGHL1Gg/xNzkB4F6T0ZTaEuozIq7Lks1ML4CbUz2vu06pYX
BSwW6kZnxSB7kYaMetN6Kkxs2hI6lwPd10Ej3wQFEwoYbx5auGMZss+I5DmQ
2kgFyxcJnjAX2S/yGWucOocCgYx67RWmqH8aGjCNcVVQYYM4m4rqF3Q9GMvc
Yxe9CThio3L1eByKAx21YvXtZ6mwue10xQInZP/nefs/uHOTq7dA7HsweFWq
sl+8le58/rf22x/dP+mtC9Czp7deQK/f0ltHoNdv6eV9ev22Mm9M6RwLBZyf
90TzK6Pn6xF3XaZfn9RjF5zZ5Gei5+ixgz3pt7g3LVsvjjbuudm0iR4g45tu
0MmXs2jiG+ejZP8txgSccp5/xk8UteMu9jFz0SIKzDwr1XfJD9lv3PdWrpWM
Y5m+7FLWKsje99iTwusyFHjirBq85TayP9URE99uRcDRwMIdMVuQ/Vixv9Kx
pRRgNWyW/nQX2Z95n5itcZCAfJZXye3myJ7bWJt6ayap8y2PrI7SR/bZ2ffO
cZLtXxPtERXWm3x+nolBQ8nRgcxrNasnLh36+83nX4u70bh/EwHbN5l89JlG
s+7pUXDvMfkcy/ffGSwXQ9x/fNqrMHYCNuff3K+mPvm8uk6U0bJY0t4zb0uJ
FY39esPexylTCYhji6rZIDp5O3vjq8w1anEgksf8o4NQPeKTNRByuwYHjZeP
2qvP08yHKy3USCjD4dltcbPEY5PPlwapHRR9cRsH7Xs2FxRmT27PrvOhJd0P
hx0ROt0tu1G9c0cLM3Q+hIOFquRtIh/Z82rLDijuxWHBdOuJPl/E406lOXKQ
vHKeekCnz/c/R1GlXvn4MRzaW6daTp+D/Fk66kdpZcXBdM0OPtya/v6WHx0/
6cWf//Z/J2v/V2vn7oOsYryYAMWPL8Z3uiL99sSuRJo5kwCLN716OmsRt2Pr
wFmiCDC/tYcp7gsaX1rWLM2hxwiImVM6tiEYce9+ly2Kawl4EXtgZnIH/XXw
n+0HevmIb1uRmXUIAcN+yxKsGtB9yctZn8y8SsDi1tlaER9o1me11y3UiCPr
EdaF3R6cyG98ubukf6svnKX8GfRp6gu1eN5ZcWkESNkbDLGtppkHyxtZPfsu
AbciU58uFkN8eeGtV4krCEhNO88bmvHXrQ+64V6/z8deGrD6r+Zjfaf0e7WK
4rCYyWuzJVvFXzYvUasesbRyHQ5uc2XEcsv/9//7b/v//+3/VXWZTGmSjJs/
BrxL2+cbmZd+dzvPRN1TNyZgkBex33Gm0PfPw1zlWTzQ1YCB7GW2fhXx759X
SX6lXBQviIN/UVCBdwXKg7xBaxcY8XQAU32g6KeDjV/5kYrd/UycHVDpnxhe
uRXxvqAISt0YBdqeK1jkCyNuqareua+VAmmJjnI3ClF99znzAU9jLAXmF29K
MeBGfKv0/vILkhR4kBs7zhuF9KdXU4Nd+Cscdi1Y3d96uxoihV5NGL7pgKPm
Q3l9fQ1wlvpA9c5wwffn5XNOV3JsesGdyUBqZGfnVz4+4uMYENwNWSdshl43
oTolcOaYe0kxFXR9K59s6kH1SKDjoMPTui6Y2OyearkLxfkFtvkrYDcBbh+u
fwhWR/HcSmJZ2qNRHDjVNUCeC8VbT7Hy7QLFOGThm+Ve2yHdtdlOImBzNA65
ttvzsVGkryZYHYU0T+Mg4xuZPssA8Z6wpHlaxzFYeS5a5RAnWvdR/Wx5dksE
BiVOZjprHtKsB91n2jb/CQaetTepsy+j9aBt6ftTH3/EQOyMH1PpazSf/L7p
ftk1vg7wdE8xee2InvuLqvoNXbM7wJgz0yJyN+KVX0S6VjJ3wKL3dzkk1BBf
uKT15ngfBfZ1Ju6mjKD+4MDtEcBZTAGNaE3p7mOIW55nzvR2okBS58W5w56o
fv9jHWrgT/miWsln8V4yD6Y76e3RVqqDUYtlJkkC3YDhzkSATxupx9kUX+gV
/XC9t0D5uICJeg/URijGb/AjvnLz7CfnLwp2Q0nfS5Gj2ahuZdpuwLtrGxVq
S+1iI0VQvxLLD7QyPUQB7ICfl6k9ul+LuNSe+UcopN5nXdN8GvGQBGEJfk8K
iLhIRTNFIT5hHXlN5TQFpE5q1CZkIn5on/d5u0AKhArsbnStRtxBhqXeM4wC
8QEHRrEOxMeqFM8tjqSAmoKGKzsDei7DOlXVb8hxbZS/j8OGZlxfrK33f36H
AqWUbMUtIohHHJbO2pZIAeFd7k/GaOZ/9ji8l3C9RYFYJTZH4Ed8JONcZPVF
CjA67TlY+Q5dj9heToZ0KwpsmIJ9WG6MePCmqw6X3hHwSkAxWbbs77c+9Xfh
uZunlMYuJiC/tXD+nLMojt317xzqaMGBu2Tqqr4HKI41REDa+jSyTiyVc2mS
pdk3peq4zCWUjIfiLZc+R1f9sPz+s+Zv/72e/zevZzLOa2Y2VMrdAUnn5FK0
rVEeDFj9fClnDhU25mjem1GP4v9woPSFCN4OUMO3uD23R/Y6yo8DVjqS8dnr
pP60Yyjurb/z2glj7QD7AK9G/Q3IPm7GhfG4Eir4FkwRsO1D7XsbWD1I5uoA
51cGT1+aIvuHC4/JiXtT4PWZbcGbEmn2Y2Dz7nZ+IuNt0t6EppnIvtzEs9ip
lgp+HQpz7Fho5s8NxJLaGTtgBuvEtdmyNHpA+Nnn4yEUOKcrN1rYjNrv5q9Q
Vq6ngHnZjbrqGBT/O05V30pvpEJZmG/LBpr5ed+Srfp4BwW8zu9v392O7N8z
qFTeuUmB6TVRmg9YEU98bVztS+Y7twcS657Q5DsfN8G1b2qo8EXxUeAoE2qf
SJtXcDiTAiUWl9rjdVE7J4/L3l9I5q+yNYVLdtLkr4eqd/xHBwkQfsf2uJMR
6Vie496FTClU2NGr7JJ6D/nf6bN/qsdWCozEn9/9RQBdT1JW9JeWKApcdB6a
uX46ap/eesH+bp27O/xI3rK0pWQX0oE1TQ95v1h3gcMUwW2qj9u+8gP3TOeq
m5K6RKKobbc0zfx2Ht8mTkUKLOxntxt4Xk933YGejpps3e3PeeRbx91k45Fe
nvpRcYPuPMY3roN8a/v01k3o6Ux66yn02qe3zkJPr9Jbf6HXPr15MHq6l958
Kb329avcTIIPUCArdpXt2z0NP6xffW8/9HVIaDRmIcD8RYya1Qqki5Y0Kinc
S8BgzcFg1SPCqM6SWrUx85IBBrZrG92+zCqhO75+VP0y2fXTq2ej+sRPX7XC
QCbG+4bMKfrXSa/9X81+svHyf7ue/r3XU9dxJvhzPhVm5voNnWlH46KS11rG
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
                "], VertexNormals -> CompressedData["
1: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
nq6bcP2zGtMwzmnw4odMN6oyWBFq8p39w/SkdF9ahTUjhrxpCHF64/CWdQAZ
iW2SWCZN/2H3Db9e8S1K8RXIh1Vt/8I4jQ5IJTSlTs3BO4UToevXX0LNwuGJ
l6k4lJn3NrKGcwq4L1mk/hDOAZsHdcxyN6dRenzfysbQOShRvtQxx5IGz/TO
xbTM4pCr6GLqtdJJOGpS3PN1azEsR82dhuxp9O4xRnyn1BwoTsW9Dy/KhmIB
q5bQvfPowqezC956k3AeDuIdIivB61UF85aZaXSNJuhdcA8WBOTufeNUfQfH
cfvmDpybR1iH3iGB7xMwuePGbg3lZhCGi3zvm6fR2xT5++zaWLBwVaeae1QD
9MdPDX09Oo+uHz18TzllgqKdMUrF+Yk3p+HeNcPv953G0bVPdNJfdSb/OD/s
IjRv7wiD3IzTzs1peJStgk4M2A7DYrUVm3TLc3DtmlPBeOBQjoK5ta3SFOyA
+24Jz+IBk2vQFNCOR70bDcJsGodAzSSe9zI+FajcznfRfcSj/pqVk6M8Q+AU
J5pKhc+B75t5ZkLoCegIcYeRmesgxKqNldxhKgd9kqSo7w888rolw1O7ZRDU
872y2u0xYHz+80XnMzh0NePxG02tCWiFUuMp3xZYq5Gw1DPAIxeL1TO5nwco
2i3+qZLYlfMTQFJU8jH0wqL5o0mDj44O/nL5jRJOiVf8LN/4WR5CCff1nzq3
3dUd0r4U6I1uJyHpm44lgeZtIMflkh1iOF6+ErT+21w3EsecmVDNDHvfP2Oe
tHEA89J9GztoyTyw7o755TPtEDGWjL1ZEgSmTOlN9PtISFTH4uKX8FZ4G6+T
73N6uPzd8tZ/zGlRUKYu7ZOBrSBzeXlS5dlzsHp4OBYnTEIDloYRr1taIOZI
++ATaUz5WQme3/Zj3WtOSawwQZnu+VSfV2kwlXjFX/IQCWXtXj+aIdwCqetl
i+4jWTLTJOHf9jM6qTPdEWMCDQ1qw+mrhWDeh7vazkFCS16imgVknomWP7El
DeNlaAv4ftsvvcrE6vmOEc7eD13y3NsEdVR9U222RDQkO5pgd6UVwpbyovZq
MUB+x93f7HDR43mW3jkminN7dt25qorPR+B1buT8P/anrt5UCm3bBpTm+X+V
31I6F6C0n9J5ASW/pXSOQMlvKdV9Sn5bIWVPezHKB10XHlZO2U4CdhtfZW2y
3wbVfo3YdyYERb7SHV1Kx4HPwsjVx9xTEBR1VD2kwhvlio9mX6clQca2hJwx
uXZwvqtXoxfkg9Lr+MUf7SPBQtDex7ciyHx7j+mxY40hSN1xtM0cjwOZd9JN
VhWTsCGnU/DBOS8kJt1AUBIlge7VcMHhthZgVplPq1MKQT0tg3kdovPQMurN
03trEqa91r9IJjujQyrb3/ufIMHh+cg3x462QEvo2fNMWwMQh9qNbv/b8zBN
dZdWnXUS6u+4Jg/ddIIIHbd4npMkmNn248gqews85mkciJS1ROqqgj+8fefh
hs34C8XxCdiaOOTH4ZQDszdp5GfpSFB78u3qpqlWeDXDdkZ0UxIsOHLVrevP
Q5O65n4ljn/WF9d/XRfhYfmnF3wBnWB0yT6MZWoettON7HhDGvnl+D8lXFe4
vSOoOxgFYDDSp71wYE7N+97z/BR0tSh5atm9g09yHfevduCAXuuuhnryJIRf
FBe2wr2E49oMzisMM1CF2609tH2OovwEM/Hj9iqdoHPAR2slfBpOJlluT1iY
BRyXSaqTYSHQJD/8RH99Gu6kxShMulOWo2z7PU/9VjMIsusdGNo6DgHVikzR
nfMgZpre8iY9GtCom1TF4jggjgsB07wLQB1qzZIwlg34IzCYfXEczoTcovK2
W6Ao/6hcZmi0fTX4Vx4SweAGwCNot77QIOX5KjVxqDdfrRhEtL+o3/Ttgf7x
N8cKvhHgUWXb2VvVqfDARINV+yoGYs4FtLO/JEIfB/enyw+vojMuWVpMSxhw
bRdy/R5EhNukN8Rt9Zoo72tcL3suBr6kCay9ifn5+YyOW+FnC7t8qLk20BOf
1IlUT6n52KYRIUvdNdGVYRCYbGkKpc07US2SadyJXaCYh6n+j9cf16f8Uff9
1eRoi+2+Ma6WAprx5qvvsmaRfq6J4y2vWag4SVPWeyMDjDDMyu/XZlGp4+F6
L9FZIDlv1FYbzYcnvvzfHRWxqOjjF+VtbTNwjr37rsPncmgRdxAus8ciEl+a
4P07M9DYHrQa96ABVFpNfJOvYVG3kWFR1PfpX84OlOrRVRbndHaRYHRIfZ/m
uXQ8pPvgjDTshqHvrO1r64hgxLpgmV/RiQecuvb74OYheErtNtFCH4zsSJU8
Nl/x8L5xC8043xD4EFbDTbDPUASvyoIwNwHK0lwKHIIG4UPjJK3uLnNEGHrb
d/AIARIAhPdLDAJvSbev8OsEqLrkp/dwOwHCVz4KqcUPguq1FSMpm0TYbReu
1BKBhZtLxza9jJz50/Ptcz6Dth1DAuW1L+S5uHM7QagwOTexgnK8zzDPr7ht
GIR3O/u5Pai7UWV5e4G+48Kfzn/W2aU4AjoG4HCx9VVpmz5UmS4t3Ns9/6ff
99/y/1pcPpLXSPjSDNh8YLdiN29HTw0+eNIH/Pz8ZKBn8UXh21nYtHnm1M0i
DOryFx7K8vv5ecgdrbutvUVY2J42JH8xtg85KNLcv/5h4qflLH1X4RC1w4Le
famI0ZfjyCd9n54z+zBkcp34ceHKbbi4lIa1qyKhD9sPqxSoIpBuP1ugrPMA
1pFtUlctCW1yN/2uZ14OM9xurXSuHrDLPXWgqIGE9Ps+dAYGl8E+qot6X0pD
4Uit6B7FJhLyCVjgPDBYCmemuO5Mn0+CSVzVvr31JJRu2SfC6FUKbxzv371u
UwiEur4zLq9I6C2julCqbxlYZAdrFSYNAMfZ8Tf0ODxybRPeFOFdDTVbrkhW
v/vdr1ZPf1hB7yp+2g7j+lxTJ5p+l7PQ/rjP93wZ+H3VtLtw5/c85Hhw+NS5
+S7Inp7p//L19/P8ulaRxdsnJiAwJsK5UOz3z1NY3hk9c3srFvz3ULE8tx6H
Dxb5x0oezUFU8hV0sbMfBs49MsrdNAGH7551nnKZAIk6+xr6nGlwLTDAdrEO
Q++P8LR6uSEgPpPQDVfHQXvaQ5mmvm6Qb2s6vXSiF0rSxLJC+PCQSVB4mmPX
DKYDastWURjQfVTiQNdHgKOomt8zkOxfHPXsdqKtyG9iK9vOO1ioqL51mZ16
FoTeafbd29qJqjhzRjOez8CjV9hc3FkslJ5Irhbt6kYrez4b9WpPwe1A7bLW
GSx4NezeLvVoCAVnupDZ3TjEXd+fUKpxDUarrKjzKkjI0+6k7IMqBDSRft1v
W+7B9kzfTNEaEvrKObJAM1IO5qL+M5ZdLlBQ3EFrQH7vIdjJYb7vZeD1drf6
uS3+0Ky/Q66mkYRCa6In6Q+XQZai45mN8BxmtmucrSLjbJeYrO7EloKnl8/N
C/ffAs1dev7HiISGRA+fulVaCtqc3gbcyjNAb8JoSV5R2NZ7HG8jesAt21ZY
8UANPG/Qkr6nQ0IC09Fy3e0IrhQwV5Ce/f7eK7bTmWo71P5heSPXkSgUe+V3
+QKM9KdXeJpA68ukqvDH33n0J8y5iS/yQ2CzO9k/L/V3vh+33P3U5PY0lNCG
MrIIuKIfqi9H7SpIoHRF/4sU2c6G/hU3LcxcUQMT/QPpKhLYPUr3e0SO0x8t
T0caQ12R1JrGt2/V5H6WNca1Z7gc5C+rvpoMdkUq6vHKObUk8L1o8kGaHL89
u80WP1xwRcm1Mqs69SQoE29t4yW/l9hrx3M5hF2QgN+uq8QGEshtv6xWTY7r
S6w0kluvPEJn1ywbjMhxs7f1wf548vsauJwvF73zATK56cOX3kyCE0ahx8yH
SiHe7VLBsYvmyFk3xi2qhQSlhc8mVuJL4ZyexOOtccqQZnaieJaMbzHsVT3l
R36/TCwera+fwp6hac33ZDmSXnh6h/pSoMq4ahvm9BzMe/dGzpP112/VYTiY
UgZqd8zEfNjyIH+i7c35dBIYHssTwTNXAM/+I+vim7rhhyJJU+cLAbrqGy7M
wj/rjuu/rr9eH/p3wUc5t13ZEz8Baqaqpi9Np4Hj2nRaxKkJiJU/pS9rOAYF
u06cv5Y2ChK2gpiFS1i4WI3xTnrcD6uayW9OP+kHu94TItnYedipZWb5QLoT
XrwRRKDQDVG3+XY/5yT8YfH4b/zf+K+AR14TZuwQsoArdAe9r1STUJNGqqEK
OwJ+2RyTmrzx8lS0+tt8+GxPyvi5NWY4dKOpGjYZQQJLind4JQnlPa9P3+OD
4FDkrctD5LzNpBmmoFNJgn113hnT3gh4O7bTKao4wenWe22xdSQ0OHqjXuNY
Obje4858VzpSrsDB8Nu8+pBQY245GzOYnuVReTdqA/z5U1Ybybzu9G7bz9+T
ykH0mz1faLQrmtkp79VXQ4KVF+s2XWRce132i85Xbzj3pTD7ArkuG1VFtVNf
L4OyxgT1ric95TyOnL/JZ58RVVA6tBVYVQKim588BSK3fcc2Mj/0Lpx9u6uu
DFLc0nRub3BFX+c9TwuS6wvjo6ZAUTLucNEj8wBvJBRnpUyLkXnj3GlquuCi
UjB5KFW5mfdNufU1od/k73AR6443YALpTRF9D7FB4CegwcZN3t8GG5YtqMtg
j6GB4OrOh0hzrbKQiVxHzt5UPXNhYxm8fx/yxlIxDbhPNO4/Q+YnHt5FxG3h
pdAYLkojHzQlQ9fxP+f/22q2Ce1oYoQPzTrshvwvoWRkghZD1n+wWGOC+1kp
nL0qYhCsoIN8+mJZhsn1a4i2Sa48oBSOwfv0INMy2MC20cg2kIRklQJT44zK
wdLyIZNr3kaoNmv97f0+jcyKjf3ICGYxl/XM3ubABRKbx8MiEurdUhUvuqUM
JqR3L3p5B4FN/An23kYSvM66LPJ9VxnFucR1oSFdeddJkNawmLcrnUNxWT59
EYUdsOWig1KGKj9ML46t/OO+w22tTKlSLPB18XOiXkcrzHhtV07AENGjuHQM
EqoEkchb9pz+lUAg5h4WMibBQeuqevWHlRTPHSjxqP9L3+f6r+sfHnf/z+X/
7DnIz8qndG5CiWdSOk+hJJ/SOQslvkrp/IWSfEpzMEq8l9K8lJJ89cnbDcbf
XFDJAQO3YEQCjctlVJar6C/L8/YoeeY+fR5MypVXZe7FoBS2HpqhKCJYe773
j388AVHxtO3K9G1oUEvI1awYB8ZcbuIr7hMgNR9OmlmsQ/FaSer7heYpxtef
3b9Q6mdlahjDTjJOASkuytI5qRFFzGKqh2fnflqfX23/n32e/rP6WHkxHJdd
Hiv/bLzxt3pEpC9dJ3gzg+xG7tQfllqgxzHQ3kbufx0tFMZfkf38wXjylTqz
wfK0Ttbf9oc2X7HNf7EVlvui3r5/1FKu0rfvN5zh4pRcaSUTfPbr4qtTapLB
JYr8hvNqOX4rp2WCOvT+9fzDTzI9qTt/wzFXptDnQkaQiKkGkiwbMCZk/uP7
UOjNHB/7rn4mis81oL17cEX1LJivEl/+Y3/nonZtUuyOP2xu87P4nz3noYTL
Oibv0XBzRcYGiQLc5H7c9Ig7LQeZ73nmP+nKTgpAkNIlrL1MAP/sN35nHHuB
1avowCFHV8SK6PO86kggn3PPT47M327f9d0t/MUZYdnedmSQ+UAa78ix62Te
tYHB/YsWiw1irMQLHiLzkMLCwmGDd6UgXM63QT/WGr5aZlyJJuMMBRYjobGl
8EiIp3hPSCroNNKY3yojgZqy8s7BwPJfrq/8o/BnuwWxTs0KSE3TTiVEFANN
OVxSsZmUzxco1XFK/kNJjnR+ZNiRilJQqOR46pjfDrTW7ZoSzURIodK8oGhk
IjOa132+rqMdBtXdM+fWiOBiYqXXgWpAtWy6s4q3E8qGXHlu3SJCncItc9cP
ORBRE5bSuRGDVsJX91a9IMKTix/l9PdPQNy+789U9euQHatnv829edgj/Mjl
RNYkwM3svaLvmtATzdsSo5w4wNtUK0QrTQI1TpZrSbwBjee/2CgVgANqyeNL
i+kT0HggO1SAqQPZTLTVn7Uh43CJ83vnBHz80YbxPNWJrvXa24Xx4UBIsbnN
VGUKTOPF9S/fa0OqdJEXZvXmKPJDqv/j9fPx++Se/valtilo1csMxSs2IzHz
U45OYnNw/9Tr00++TADnzQmmyFgMUhg9/KOucQ6kbO+Ye3NOwisG+v25kt3I
iBllSVyfA3CRePJ2fgpuQp0wVXEnipy9e9zQEvvT+gtzXLOZEZ+Ekw7rLx/z
9aJNd7O7Xoz9vJw/ez8lv6Uk5/+n//+n+/4sTonHUuK9lPI2Jb5Kid9SyvPV
J6sw6WOB0KnpP1FNTURWRYbDSKwXHr5aHdm+8ylspcfwpG8jof34Pn+ThDZw
nz087pAZChzP5p6+YCYiM5y4Tzq2B2grt9y1avUBS01N7qhlAlJj7Lt8n5zn
qe+rNGZ9dgLi7ff9PAzk+qudKj7A2A5G9+Ab6EfBinHf9CcuIpK8uI31XXwP
tEVtEHwQ7w/ujKcSeXlIqG/3bEN7UyuMyX65Z34xHmilW3isBImoLufZsdqr
PRBkoXf77rdEOK+Rm+d2hIjEX50N3rqtB844iaSqyUXBZJSZX5sQuS67pR9q
+d4CeTuPUB/ekg7fLhlPKkgSUfa0nI9Hezd8dQ16Ez6eCaaLAu+3nCaim5mJ
zyXDu4HtpKkC8kmG8DOMh58eIiF+95shTZdagDnuyA456XwQ0T4X7U2WY/Ld
9jzf7W7YSZqP3H+6BBguTZ9oJutpaFOwmqLcDQ+tkpKc23IhatbLM2Q/CTVF
HFeU/NQMmU7PO90Yq0FTfv3Ah89ku+Ucm76m1Q3R0Z+eFBxugU9pvi8D7Qno
i8bJCub4bthRHM23424N7GCUtg+uJqINHhI5PPktoNzxWNa7uRdc32Tizn9Y
QPH98tJj8j0UechfxU8o4ZTijhJOKY4oxcvPxhGleKGEU+rvKPElY5nxqylH
AlHsCHG2lZoIwk99HOrJcSffO1Xg6heIjvbkpe9jIYKPB38o7VwPfLQJkWnN
80En74kE4naSQBV3/2Pa8TZo2JrX0rnBB+VmeQQW0pNgc5m+mjU5vs41fB2e
CwtEPm8/V5/cTYQXa4KYhBc9kMy72fMQRyB6/kPEB3+ACPzx/I7e2j0Q9/yl
xIMLPuia6YBFMB8JNHl/aPrebAUD7uUFiwZ/ZJ+3kWHjCSIwWH9lO7q9BzTz
tuZqcD5DbTfm3u+TI4KCw/QqsbsbsKqv35Vt8EQ+WzldSIdJkHnG/EBnQgvQ
qih9KOfxRAx0+6xzLxAhdltdsifZn+8Sc9svCT9EX/iDulPVyO8npknd4kE3
HOXQ2dt80g7dvmedxXKSBM6HiiSVOFrAZfVw1E1jfXI9dGMZukIE3w1DVZfN
yfGVrGdjMxkMaaSPB/kvEcGiUk7zeHA3pAoodj+m8QclqR99R46T+WGgv7sE
tMDJlzRYnPRruLmnZMdxYSKs7SreUMfVA0eJXrY0S5Wg+Ui6vi2WAMxtRwWc
fMh57NJpnV7TMjC9G5c300625xb2D2fk28FByXqEbVsHmOWWM9wPx0OiYu6s
02gfPMuhupdZUwP6xQro8ut5YAyPX76JG4dnS4Y5+49iwEMt6FDKIRxsFR5G
uzzJfnXJsYG2uAayI5YPfYvFwrGFYrubK9PwzFHgdb1sNTiJr1252z8NqRoP
njO2YOGjx/CLJc8O0H6oS5t7fgquh91JnhSagzc2ent8hSsh0SSSZovjJKz6
XqjWqsPB8dqmDMH3ZSCuL3tkr9M4qE+ppJ8UXYA5HdbM+0aNsDj2UHyL9ijU
pCyVq9osAH/3AW6/He/gq9jOExUJI1CHdcnwF8P/dH9Hyf9/tt//o3BKelLC
219W2hc+ESh/oz54cm9YJwhOPVoh1lDm1bLV0ovBZ/NgVcBmysCrE311Ib2M
JvPw1Z6lktN3JgBvbbxVlqsVGe9O8d/cT/n3pijpQ2m+REnOX4X/rP4XhN3F
Dl4OQJdv2b+NIBLgDP7lwtm43l+uz/rVcBNeyytj9xSQVCbu/hFmDBgw7t2y
K4+yf1Ka8/wsH/6vKudn7R9ZVr33fWg4LDds9g8xbYZPJbFNe2VJ4DeFOVBU
mA0Jdp/OF9xtBf9XJ7d5s5KARuTh7jdrk6CZKZUibtuC+rXndEUq/skb/sO1
CEqdKDQgbgru7h4siL7WgfYVRLwhLlD+/h2l55o0+yx549g0sJVwlE+rd6GX
rlLGB4Ypf77rZ/sgSvt192IempwbhA2uJxzD0rDoYa691v4dE2ByrXN+NHsc
atO1NjiaTSMzt+a4l3snITJb9+0u+mng6Dvmlz06gWYjPHU6TH/+c18/i0sR
NN/1HfGConz767S7SChSSPppDZlfnU75FptJxtW37G8lEQkoyaGHyYuclzZI
XDu4jguBorrusQ4yn1+WU5PtNmyF94NnfTT0X8Dru5KlqSIkZJp8aqYlvgVC
6pbl3czewIMbL3rzybjlUuaLrcwtsDn00M6vw+/hUURx7iQdCQ2nH53auKsF
BDCWYdUanfDk8HbOhiECqt63jfrZpbY/rN/82c/n5IYlZOVa+SAlu0VH3W0k
6N/Da8FJ7ge3NjV/rcv3QX4PXoIWDwmMKvqCqJtbYUjt1ojrMW90DlVQOQuT
oDR9idZgrQU634vE0X58gmKd8XkJ4iRobut6rqPeAsf340330GrBK6OVuAOS
JEi9am/5nLYFdnTQrd7RSIHIOrHgeV4SfPmww3YHU+tPx2lafppwIK4T5mkP
VUpsmAXXKpL0tnszcLX14OT1a60QrmEVab5lAgzf+Yl6s83DWshRzB3TWhhP
tt6rcGYIqOfOz7LY4n/VOvv/2Q5/F5xSPtHUknvf2N0Pui+ucYScGkO7z+/X
LdqEg+QdN3THt41DHF3ovmqZYdSnoybPQ+bJV2oE2HTPTEK99Y+qSpt+1Brw
2mjXWSwUHRb+9llyEh69trdaURxCz9lfj+s5z8LA9JU5u5VeeDCiLNKXNoXu
H+4xNyTjjVThBWFVo6BBsD7QQJxA8cMYQffwGfihdxo+MUwCRDYF5DSOIu1R
7Ez0wxmwye4J0Hw+AdxOMSHkFeUN/BAJ4JiGWuvJaiqdYNh1U5BZ7OMQuFgK
CYg34KH47ILszrJU0GQSsXraPAjFw3SmQZsJYDz5Va8xPB++sHscD+sdBAm/
J/KZJDw8MnG7ZKOSDfmHX9CbPuyHQ3yjJ3ldCMCbc1dnLcgNFA9Xxaa/7ING
3xt7Z0oJsI4NMpmJjIatnBdDY2N6wcRHQfYygQD9zXe6ap+lg7/7mFLlg14Y
DFB79gxP+XdvKNXZnz2f/av2/6wfetkp+dRUjYA4d0ajOx6L7GKlusPJfdKR
1ZPY7WNjoMRU2Um1YxblfKk4fqlt/JeLo78Z/h8uyvhics5QrM007HSSlqk8
24OQVa2NytFZ6LDlUFBIngYeQ9dPIul9aPdp0evZJjNw9604x6XiaThCL2JI
+3YQBc0dzUo2m4Y0zjAVo4hpeB1/0CAneBTJe2eFi/BPUbwvJJkyjQZWQhkv
swZfZj9omAipax8lgPCLbIXRjhIYwtW8XnftBYFNnw/SVxLAT56Vup6QDxfG
bz0QSu0GlVTpQbwI8aef9/8R7vqv61+uz8/irv+6/u3w/3D9t8Vd/3X9ZfX5
b49vyp13F1ghQrzewdp47g5EmqK9yp8aCBcu64c+182VwbF8fHiosATs/HBd
w+0kaF+invh2moT24dVZz6k1IyV6m9pUkUSwssMrUkuQ0BMR7+15Nc2orfqA
DtuRJJhbmtRqI/dLmGRxdXqzFtRcWRR5IjoZLPU1t61ykdAHD87n4vdbkc7n
3RmRpangcXSDts5XItrOfZaF3a4dabgrzT2LfA3lzsHA8YiILM9oh7rOYtBO
ncODZ57lwp3jssYSOiRQZbzNuuzTAHwvCjbRuWVCH+PyZ5bLJLjLg7wTfOrh
WFtrRkR/EcQQbgNOkASnuKSZWLXrYdPgCddRv0povUBYiq0lAuFxxtWr5vVQ
5rofQzrYBJNUnKy7//E799I/qOv96yFDq9R/V1c3rP5wjZjLxsF5Q5YcnHId
xGDP6eTJTIJ2ejTuZmIF7KxsuKRhmQdt4yHh+YkkeHGrPl1Zl4Qay/e4nReq
RUzK15z2j5fCp70buKynSBCSwnV1j1IOcOx+hWXheAWNVn0zHV/Jdp6R20cv
aoUiC8/dvdecBNELu4z3kvEHJZdqcco26Ph8Q8fT7mSgjg1t2vOFhCB9Z5/4
FkdUKvA1c00yFeKle4gun0noC/2nGl7zJ2iG2kbg+tl0eMwgWqPykYSeRfHu
Jhg/Q2NjJdfd0t7Ax+tv8Wk4EspjtmFbYYhFFw7esy18lgM9b+ckN4yQQC/h
5JDnuyT4EcZup+xUABySMZ2Y9yR4Nm9s7Z+SAMWpm0SiqSrghOAQfe5dEgy5
CiS/CkuEIw2XDYT96iFRkzVI7y0R1jrcefpPpsKslR7Dxc0Y+HbmqNCelSmg
kTbRZnjciPZHXLoddWgOnK5d9ds0PwNWeWmPGuda0JAaBp9xcBZumM9fNs7C
wmvvLpqNap3o+NkuO1LuFIhok8LlF+bg9XTasiF7HzqRvIWn12IcPPbkqapJ
YuGFGZG2LXUKbffflxna3wXfFbV4TwkOQ6/eRJ382gJcCWuWPbbWCAfLHLN1
tKZAn2fbwEnCJFz17Zc8t30CzrYxMpgsjYNj9kHehpAR8M0zdtpZMwvNFk09
P/wHIeplVyXn3n6gPnyjvc5lHji2Rq0cK8KAk5r74MRiFywZTQeaEfF/WT4U
L/rsJtgyBkGeTtiaqFoU9WNK4/3pBYr7ez6xv9BfmgAJx8r+vRL1qMHu0gPN
QRww2qa67tyLB9mlzSddvmUC90qBZuy5UfjaGycjLlULFrcWae9gO4G1QIo+
9wwR9vBf/+p5eQjEUEl9sn49wseWXl3XomwHPf2Iw1yhY8A4OO/of/odmBsx
pBamLcBKym3o3ZENdCcI085eLeDAuyNBfR/pr64v/+XwM7OthVkeg2A/ncZV
vpGAWi46MBuw5v9yev4b/zf+d8S9z59Zfrx5AjJ/XKQjBjajyYrRm2fE56Fb
j7C0VjsJfcHaOlQLreg58x3b2vY5cPU40xzoNA3xFoG73GM7UC6PnBhxPxaq
Sp1rJ9lmYZYvzpfI1YXo7Gw9WThnQCH4cc6Wa1gwWjkzrKHchzSqu1pbXSah
NrCh+VsEFrZ571jlSR9DLjZNnd/tRsDYTMSuU2YGpDe6zA5gZ1Fb6xNOTF4z
iH6fbeKKGYcXKrfDn3DhQLLH6rjbux54PTrXslw/AWwxnUfw5eT68GjDCyfM
FIjfM/yCHx2B9LiUl5dih2BxPq3CJ38OSOJYr5ikXpireEzD4NsL/tC00eH9
Aphxp+l1J7WBr3zsj7Y+DNx75XlS4zkBtDwinbOnKyBA4oDrFlI7XI1iNljK
JYLSzWPTblMJYCnDFHtarRkMZi4+55chAV3/2XoWnilYuyfVm9QujkTWX2YZ
v8IBs+HD/R1204Ch5rOgulSIGL42NB67PwdU0mxdCtEzYLK49o60pRFp/Ohv
PEeu4zTy9fryOrNQiPGifRLbjeadFFx/2EzD7Sx1Qo/9LKyflhCxSBhBUQbR
TtvUJmBi0LIRs3kGjFwYxpqcp5HfzhYpfdsBYKeZeLXwaQa8OR6uXI6oB0Xf
sRsbPGZh7tOj9VmOCeht8rhxJSAPLndWKJSR5uHhBXZJmrMDMNWquOm+aA6c
TCLsKVMnwKr0MNX6o07gluLlvdFbCNjWoCz5VCLwtMt8U4yuhcdixjvevEdA
6MaV3rtAAlY7muJ5xXxyXXbHnI6sgcpmk0vSTiRYOGAs3s8yA7t1+RtNqiqR
yJE6n/G3WFAKsgifS5wCjT1xbh/N2tHkxtvc/Rvn4FE49tD8lllg2jXNM2Pd
gbLGxV9R583Avo9x2LPKM5DZqTxAU9yJXjRrOYyJzEK++Sszy6ez0CF3bI/m
j360Cfu27dqGKQiINh570DALtbzLXJew3cjxlPAn3ekpyLUM8kpjJ++vsNUU
M5xAhyXtF0ejRuFzPc749DsseEr23M1IH0QxhzoT3HvHgSaJ7cBV8n06LBJU
9EemEA2cEGNy7INE1YHuSbdZkJc0srMzHIFlwSNpunoT8GK86YyvRw+c0T7r
ILOLCI80tnnjDF6Bw/H+3UveU7CyMZrW9V4J+OEU3Iu5cYD7Xk/3VXwSpI/p
3RhsmAaer3tE5/ePg5k+6yF8+AjssafFOE9kA2/CyRXaS3iQYevJyvQdhyLv
lyrR9GNgwL/5hFbILJgcKch2k+6BoUS1EQ3DPODKepPCs5MIxl+v7OBQH4T7
bs1P3Pr74ab2ugTzrXmwD/lQTLulBZ599NUrYSuBck6dWAZ6EhSM3Xmt/QED
cCswICyoG/iIBi6o4a/jjfEpAterymZB55FWv0TsNPI0flk5tRsDe7crXzlg
Ngk3Nvh/L1pPgPRE5mxH/nmwHX+uIGU6BN8Udh7ud6tHz752GsFlPHBLOI7g
WqcgR5jo/PBrMrItc/44y4EDR5/V4qLZCWi/VZD5MLUFVeNtD6z74MDoRjPj
g9IO2G1sfWBggoicOTrxkxZBYN+YtOv461vQ9ahZ/PZQA2S8J2rQ3CKBcsn+
z2kXEPwY6nQxlq2ClIjnOZLkPqT51LuI8/H1oDe0NG6v3gl538enN50iQlc3
U5vSwWSodBf0qm6rg9bQkzTW9iTYuLl6XYG6AJZLuSy2PGkFL6+indS0/+aZ
/9Xx6SZZg5lqEmo2l+V9hclHr/NGhASwhcDdpLJt1msKFce2Dvg296Kzjzbe
heRZcN6ak35tlgT+rj43RNZyQP3Em6h6t0TIgO0u1t9IiP/HyAmO7yHIGt3L
8LjwEjRFmlIWyP27lPEhPs7yUER/wxzfxJoApIoZ3EEynrS3q091OAwN3ikk
5HInQhvPRosfKyRU9g3YODIikORKlLNHZBIcLeDmbV4mobMW16kU98Qg7+qD
p14sp0D3Wcl3TIsklOi3oybgYQLaIsazbbD4NQgWbOayw5KgqFHRksUvCfaH
DhoknMyB3ZF7sLMdJBix9OvhIvfvJ7oU8Rs+vQP/VYKh1AsSRIdPDgssJMDs
Ls5XOzmqwWpvJPXz/SQIuhMi61yXBO2YYaUh1ta/7H2tfrJjSP9CQipOps8M
U8IR1ZOabN36RHDuaS9iJ9stlL/wTsGOKFS7l9TiHpcMVzlDMio/klBy434H
7stxiLCBJ1a4Nw0y6h7bnsKSkGvKJ36blDS0OF1KuP4jC0Q9PITejhXDeU1q
Qw9aEuIu6HS8UtACjtukX4TgSbDy/ilLz1Qq4NjKxuSbX4PojuxrN0dJsJwQ
e8/wcCJUUi27cakWgJVH2IttZSSQuG8kdz8yAYwb9zVa2CCYPX5lc/A9Emi8
d4iTepEI9APKb32N6uHAsUdtUs+J8PbY8scNfilw5eT9vR6PML9cvLymi77T
tpOE6vNpxJQC6lBGpxRfysEacNxyaQM2nwSiLCXyn6gr4do3vfXHHVEQ8zVr
1WGBAJK3Mw66FofBjoAbhzRf9cLbMSaqIxx4mKtmtlTljAPpzirmcyGj0B8R
/uEYOY4MlKsOxGuEIk5VbYMz6S+hlGpZPpwcLzb59znWToehbJ26ydv+CRT1
BBYnfNcqCR06oc2pFnIPvEREnBbFX0JZ0NBUCdlPrq5F3pBZiQOZmOlOd+sE
mI9JfClHxqet033sI+PgR3JyEa1NIkSZdrqGfSYhXTGPtNsjsRBDZyT5aTAJ
KoK2iz0hx2PlQr3IO/nncFtq7MvmLalw/JXx88tkf9vDa7g9qj4Cqk5eHP7G
+Rok3quc9p0joaA2dTadZ9oofXvwooJeHuyKGYq+sUgCvoYniexe92GQ+fvk
cY8sCF+S+XhyiARiukQOk71qaMMqU1GyVDFI2VhEQzYJmmJM2K98vIw+Gwoq
7+ishAtZTwIXyXywO9fhzF06IzC3ZnVsq2oCyYJbcka5WJAM5NjhqpgCtq4w
UGQ/Ay8wNl98TQeg4OEQ3bXwTNBlesjfrkKAgkYeM+XPJJC5mlmo7xUIVyL3
7md6mQalnt+2EMj2wYnwySntiIcbpoZWqnQJkGxKtHIj4zcilx+WtcVBSb1H
c8lcAjAZSjt/JNvN+X2MQNaFOEjeXaUjyZ4ERpvj9HaT8TZLCaPwU7GQwXA2
q6gtGdjkEpxSP5GQoUKKY+XbaPAX6Dk3lZUG3x1XO0rJ+a12BntlU1QQZKjr
e1LzZAKhjqDrRs5vXVzMss1cZ4E/UL1Xtj4PcqrYY5saSUBy52Z4tlUbXWu6
ZiJrUgby6lNeKj4kGEwOxXZuOADV33kw7QV/3PdS/2xczpY2xmOcCILPupCI
0gM4wrm4It/a8cvp+W/874U3EqYe6y0lIfmxZCmiDh40iPjvwyGUfxc3Ot3S
N6RvCqS2HfgcvNKCdkhq0A7SzUHe/OyaXdIsGPvJJajkdKATTKy4XTQzIJbK
dzStfw7U+Jg9d1/sRgOszxp0LCfAL+pIVEwhDoQ9j2113zGM+Nk6N78qGwBG
LVEPzSdYwHgkJ1zBTQAIj8tR+/fDuWEImH09Cw2ziok5EgPQuNj6xKNsEmS/
RpikikzB1/em16I8u6Giq2GfgiMW6m+bOokYjQBDvj19nVsn7OIMrr/JsAAH
dj3Vok/vAqL+RMFrzTZwK0/itHtMAK5MgbmbgVMgc7bvXmn1HIKG8o/dx2vB
SXn8JcumKVBjKolLE8YB3XEziVX/WugOLTNZ5awBVV5Gx5P6TZA+dlLZbo4I
OJb8cvb4QXBiDtEmiNYjo5x3pbnueHCJk99AnTkOg6XVFy2rG9FpCZ49cz7z
wN6icVowqAHsDcLTFO/UIgVJHWeuD0Q4efh1U+C7HliLFXrwdLkeqYe/UnVy
IcCAE9XVF5vGgClz/GD2uyb07aB3g/WhBbi5jbchuGwKOHufxjR+aEWrb0zx
mxjnwPbpvLaFHBZWewSG1A51osJlxqw86Wm4uJAbxVOOg4iYD/y3OHrQqLLv
YMOLMWga5r7E04EDRIwQh64xhFHTYLG27oa0i/EN7tE4MLu0umB8YhCKfNub
eFiGwcOqq39eGwtFa0qEZqFu8G7eFRNrMQXtD+8KCt+bggZa0rWLYp2wILh3
/AQeC2ce7p2N3ToCJucSvc6faINMr6dK8HgBrh9PN+vlCQWqSlaHRUId4OUa
btA9JMGoxoEb9uI48NPV8I2MGAfzmkG1dNUeODEpbPf5WwecWY+4lfeqDmmI
dCjv1CDC/bPqzaN3B6F5mzxvsEojEju/9q3oPh7e5D7IMcudIPPgtZVzsi2I
WkeIz7wABzSx35TzYmaAtebGqWp8OzJSYXFUk5gFB5ojBO70OQiSzJM72YRB
4TOBDzo5J0HQCWWuac2T61x623xLP/owzFzI4z8IbHGMd05XzYGpYNHTHtde
4GCz6T07Mg43udypdvjNwAeDWKFJZwx8UNHRnqibATlthiT+7ROg+OC6OZad
3O8eVc9w78X9cvmBEo7ddjB0LL8P8EOqbhqGLXAkhvjx8shfN6/4X3+4/uv6
f8X/bH0o4f9JH/Ee+mtbV+aRqZy89uOuQpQXxY9lXRsHqaPtykXU86hsUNf+
hmURclN9ShNqOglxt3fKMeXPIKx84bpBRzV687o8u/P7LJg72smlbCbjKgl7
IzurkLHKyMWBdCx0vUkq5Pqcj94trEm9NcCgq7OuN9/7EuHcgTcHeRobkWxJ
OFsNSwfy6hwuYrtEhKrSyleF7lgYtE54HaDehQYfcNQcvzsFtrLppRv3TYJc
J55VwbkLjdQ7v892nSPz0oAnRQfw4HPFQvDxPAZtu8y3X6ihD87nLCucHiWC
ZLBf8PfcFnhZzjncV14JfLv2o7AOIgi9CT6tVoRgV2x3eGpaG2xZX1d/20kE
7ainvjr3a8E2rOfV689N4OZN1HnYQYC112JuM/ol8G7ra9ZsiV54Lzd9YpiJ
CMPuqo9PyVQAs/LTuEnzbrh6djgjon8BcgVaZI9sKAFkPFrq1joK/He3LtEa
42Fe0Y5vQLYcWB+qjHR5DoN9xivdR+R8yeh1/zb2Sik8VNepLGufBmzIN5R5
HgflurN9t6PK4ft7Fs9I6Sm4MspfaKxGgLOJzRr9X7qRU1SQVYJXK4zduV8l
WkJAsU+203rPpSDD0fzx+Kd9EAiXnz7UJaIsJRd0giMBLQbZ3vkg0A27pG3Z
F/rwaNVeaM/KiUx0gL9r/ardEDgkWFe4s+BRZvHmY58PZKNJidcFkU6jUDrk
s5fHoQdoFiLeHOIlovw+W6MtT5+DzAB/uyTDBLmvt7fJ6i2Dgi+65gpd8wCM
KqfO5UxBXJXdRpc8BG6ST86Q5uYgXQyzs0C+ES7deamXfqkM1g6fuTYmSIJe
GoODD172wIaKNxdGXiGQ7fa6fHroL/+9u/8UL38x/kfpSUnOv/H/nrjrv66/
rD6/DK6PrX7UITwAFjfbwSyrDplF726pHcWDxOX3TYnLY7BwkS3XWrQRYRs1
BXipFuAbLrJk/OgUtHw68tVTogVlijzduy92DpzoepXl2WdBEMsnzS3QgTrj
GOB13gwwWnPMvrw/B1sHc974X+1C1O7NIQoyk7A6Y1W0qxIHL1aotYJLBhB2
Pb9yYnEIOlAj8x7cLNycJ7k9OzaDys/xMx8SaYFqqmmZ5YhZuLf4VGkX3zTo
S+9xpG7qht4XA1Zrh7DQxspKUMgYBPXXu+skgieg6HqoL9BMQxyPO933yz0Q
4IdbIITMQs+dvM5DhmPQ5jRCXGLDQJ+q0FX9m/NQzxN+1f19D9hNbln1lWsH
O4OdR6W3EYBFOjrXjLUBmLkEnQYEmiHqqCzrYhYRup/J+EyMp4HT5yMbMbH1
ICur0atpRgL6uqt9gXkToA+Do8anG1Cyck5HzzIOmEMjPU4lk/ujPZx+nXLN
6NEDz6WgK3PAsvNu14DLDGyYV4rp1mhHkuZigK7NgkiFwvgOUSw0FX2a3PsG
g1ZsHDw116bAWDRsMMt4DoqXVK29K/vQxLumhzyfx6H0nmkATxsWfJ4mXba5
PYH8o7AgM9gPPV3Y3on0Kej+MnTExm8axHhb6aq0RuC6zaPE4AeTMPBwH7/2
6ghMbGfSZzOdAS6nguFC3AhY9njoq5P64Kzji2yJRBy8a+9UFR7vgagddTjD
8S7wHJ5ZYbz5P9h783gqu/ZvmCRFA5UoKkOlMheicCgNIhkSoqKkiQahEEVE
MmQumSUl8zxb5nnc5nnbm73Z9kAaUPG679d997u6n/17ft1v13Nd1/vc+5/z
42t91nmcx1rnWsd3rWN9TzJ8Od9+OmCwDq5kCPqrdjcDVkDr1Op1VBB9mHOr
UDsPksRSwwwn6+GSnKgjzFOhioprbw4chgs+MjHvtjYgvDzhfdQlIijfL1Ii
hA+BzKkYrschtSjkgV5U8cAYCLkunW5a8MeludM7fRha0L4N72yuKo5AyzXB
ktrUYbhqKpAQta4R7TYN5X8gS4R1a2P9srFEWKtC5BdubUOl8eLBnwJxULPW
i6f8DBFUt1c8K3BrQVSLXaxHVw5D1sco60nPBZ5X3nKLxNSHlpXKjk8xDADw
GxSHnRyDU6s1HOz625HmKYOvhYAF1gRTPaz0GBS6KHt2HMSiwYP1z5+qdADX
5Wchu5IX2iGM7bJD9hgIWoiqPzqLgReMhj2ElT2AGVaQylhHgUcbzGSwbdmA
jSpV8QvBgx+aOalzaAjWRIWdoNzHwd296nayGCKcseCQaHMchKXb7A5NDvZB
Gy7+jlU7Fq5kutYfedkDRXcaPiwvIsJ+drM0l6YRMGHWWWbg0wnnmJzQaflh
YCf1hjJRu2HHLhZrnsJ24JVyIN3ZNQ7NdetznKeGgGHfyo0GXq1wLIp/aix8
FAR2kTRKe1qg7ineMl0ZAxZVNkfO6FHAZoXU4dnQHvhiZuDBXNsMsxxndWz7
6ee//d74iS9n7xCUR4Fhs6LwSVE80vb9NJRu3gwm7idcsrKxIHNdbYntt0ok
ozklbZNAAuI9risb35SB22GzNweXVqDw3qNZp8Vo0KhiyO+ZiIOn29NVv72u
QZvqxdFSsTEwVc427A/qg4Kxk6QLQ1XI5/Y9CW4GMkiEKnWcMQyFy6pJ1Y1f
aZBW8SDkU7U5bGG64oQbtlVsW3qOd5K3Bj4oDOvUGNOg8Hbdyge65TB4YWrT
O/EmSLksZ1QbRgXXD2XvLTqaoWbEZc1avgaobB5Qs2Sgws0t/pXFj+KgpGFS
JItSC3PPBbuUFGnAV6xUoRZcCEu6tpgra9UALnTbvU07/rf7qo6/vf7hOD07
/4PTwTm3kDkEWCnQmiM/NT6GQb6pqbbXeFrp+nneSlJJ5AAVjo5rBo7hWoEt
4uFX5Zo8OGmMP2sHVOQQq3jE/XA0Qq8MBrGlbWD61TroUQwFYd/asaSlvUVC
54o6xMY6wfux9KHtt8mIg+2B0z6+NCSunbCWZ64P4m4fHB44PYb4Gc2JveeL
0NSBPpsPIniIMblqnve+B9VH8yg9PdSIJircXPyZycAnw6d1fz0OsnfdFXKI
aEP5ScmqZ0+OwraTaZIzK2kg9WboLXcIgg95Ls8fhtRCsnDzEcWjVKDuvpF0
8WsurDiZevB4SiuoVXvEmqeR4fP87ZfNcrmg9OSGrm1IL9jfCT7E+nwMnMIf
GfNb5kHYfedEBcqv+z7mz+I1Q1rNe9XH0YmObTsDZ7NQzaS8hZkFFlKm4ikZ
7iOoskDfhJWzAu3sYTvgvZYIjwNVNLlckyA8R+x56tI2NFrEFBl6mgq3yDIP
hMRJkLqmIedJDQYlY8jPMFGDwD+loBx9gQy4pT3dd5f2oQgGYUmXgVKQ2fI0
RVyYBq+69olrXCqHO11M8++CyyEBDup5FFLhmWRBpmZlPqSniu9Yf74ZXj+f
7RoPo0DJOE7h2OFcyDDg39Jn2gkbuw9IfbkyDl3XFVkfvMuF0Vic1BMpLOAj
dm5sYSNCvyp83HEjH4zZpSblaCN/uvflzLZxdhtVCqTdoZ26jGlHT02eijab
1cFnubnZuOdDINnez6iXTgLJVJ0CqlAMKA4/J30JHYZ4/D5x4WOF8GHzxQuu
e0ehPu7zfhNHLLBMSH7WxBdCbI+rifbCvNlWNjN49hsFLb2+qfQxx2vUcvNR
YqJwB/Bu2h/FspOC7nnX8O/2SETZ5E97r23uoWvnxmIrnJMEFZXoONaaikSj
B8anrOM2tkOU7ZpxgZMU9DCn8TF8i0MTazRZ2R27YWs7lz/m2zi6slWVnac8
DR3pZxQzejsAEmeZbag1o6jrxtukKusiVKnoUroUi4flb+ejXmB7UdJhLs3x
gHqkGXKyz404Dg3Tobqbn/XD1oP3lhlYtCG3ufhCEzsSfHJmlcHLk2FXpl0n
pz8G5V/A7+ZM64To5zu8dy6nwf2TfQLpPqXwPMmRQU6gBjaUiIwe06dCmYKn
yFGXAhjXPvD1xLJWSG16Uhw2SAaDkW1eToN5MLR7E6GhtAdKUvkHDrGQwNLU
TPBDeD6ImkSuq1fFgZnAWeK1pg5o2q7ct59WCIlKU9ATRwExtUm/1zcrQeLY
pndSuwrBRSPKa5UaDeQPvlC4854K1QmRVty5teArzGmsHVoKEVq7e+RTKahu
y6ue4uOx6IL6bC+kd4IM6Zv713IyCtjipRY6mIR8UrfyW5T0wgXj7VJXa0lI
LODt64z72UiHyfNuiNIQVOxQZJUWGEFvBJk7K/3Lkf3VbmKCDRFmFdRU01he
IOK3u26jrRjE2pV1WsCfChbKHq6xx0eBp7HQ8d72VuT/0cX5nhMOXHiPTGhX
UqHd0cq2Wx6BxUWFFd7XmmCNjnMQMY8CD5jyyVqH84E5PzCFOaEDVhjdCyQl
jQMj31Vi6Mp8OGy973jRAj9Z7DCOv73++eZx0v6jr8MKiKAl/1Zoz80C8HCO
4Ofd/W+PD/+f7fm/FHf87XUCVL/Ztp8b+n4evFZjs5/Klqw/2k56uONvrz9f
T8N6vkCX/6IXESX0Ggj7XH+6nr+K3+jZ+bP2d3MJ3X6E/15+91nENq+T+cva
5Wft/FX4z9qJnWa/5T7+vR5XJHtJjTONrn94xrW29vyX/lZt8P7KrnCbP934
Rs/+yzhZSut/sZ+Ze9OBtd52v9rOX1XPz+K/d/3/Y5xe/6TXLvTw/9Tz39fz
s/6nV54e/qvs+Q/+7+G/yv9/9Xr+D/VDx99e/3zj6n/w/+D/wf+D/8Vwx99e
J6DKwU1poOP7uC2lcF2ZMyIXPs6lSoV1f8cbQnaqjBTn0MX/U89/6vm/oZ6f
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
P6SvBx4UPTaSYaPADglf+zKxR6hntP/e0119ALNl+iP5ZIi3zQu0HHVEszOW
MzUNfcBe6F/L50+GI9IHXvMNWyOeyxHV20/1g5fvXm5tCzLcTM3d3q1iBQNr
s5Lir/eD5eucMGUzMtzoXNp01OMtDJ2oHmlM7oVJ5i1Z2k1/vv0Uerieblfy
M7Pb6GzjO+as9nY4NxsvdmM9FQ7L1WLHmW6hqmOrLjaptENj7kvaK1EqfNxr
JHq//jYa1dW6UXylA3bHWy9zm6HA4XWKh1acvIW2Bdd1+37qAO+dFRw2AxQ4
q68+4nriEiJkB4lvMuuEFIa3Fj1VFHCLn94b1HwRPIcqpfMedoIwz4BBXdlf
J89cmy3w6uFyIyTMOaxAKWiFzCVNqXG3qZAqJ37rwiFjxJzIefXs4TZgzdoc
c8GACm+wKamntc4jl5bae2tq2oDn4XgCSZkKEhNy87vjTyE7h/6TLtLtEH0i
8zKXJBW2bZnltjigDZe/3nbLX/B/lOCZ+b/l/78JEvwwzuoKYZiMpmcsbZB6
4KjBF5O//vo276Iu8cAPusQbWjNGn4vlg/HWxKYL31rR/GvrN5ekqbBpUZdY
dlGXWGFRl/jsXsOqloQaqDkVfccopg1Vv0m/v/ElBSbp6BK/yJSs3x/03X9n
N69m52/CwKEf9Fq1F/VaC5fZnIuM/n4ukGft6MHQcAKML+oMn/1BZ7h7UU+Y
/Qc94SihK2+bp7MhwKHUJrmjF+08KRB1/S0ZVrGZsp0PqwIj1JZ37U0fSnuQ
52EzPw7BP9ipu2jnMstvMe553+05M6R9OtCVAKKLvDX2B95KocM3x+nwysd0
+GMlHZ5oPf+3Hw3cGReM4ftSoMtoH/7kmZsivXb/MX6WWYyfFX+InxUX4+eq
H+Ln0cX4+cgP8XPKYvzMOMLXI6KSCvhWmz4m3RFkEpUTDsVEmLaveXBWrBS2
8pEue9aMoK2ETt51c4Sf9jM/Hd4ksMiD/Bd5kO4iD/qR70Qt8h1rOrwmiQ5/
+YefHf5mjONkQRzDdNh/5+f/qf9l6fAXJTr+H6Pj/3/wl3/o0BYs6tDqLOrQ
ivevdLAJ8kPy+zYHs7CPQUri6aMn8Hi6+rSJPjkrpPZ7oJnOjTb5vmPwkJIz
fU8eD+s+/Va3VmxRt/Zn/fCr8H/ozS75QW/2R13Z4UVdWXr1WC7qsn77QZeV
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
/dCLsX7ov6pfNh7+fwC4bLq5
                "]], {}}, 
             Method -> {
              "ShrinkWrap" -> False, "DefaultBoundaryStyle" -> Directive[
                 GrayLevel[0.3]], 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "RotationControl" -> "Globe"}, {
             DisplayFunction -> Identity, 
              PlotRange -> {Automatic, Automatic, All}, DisplayFunction -> 
              Identity, Ticks -> {Automatic, Automatic, Automatic}, FaceGrids -> 
              None, DisplayFunction -> Identity, Axes -> True, AxesLabel -> {
                FormBox[
                 TagBox["a", HoldForm], TraditionalForm], 
                FormBox[
                 TagBox["x", HoldForm], TraditionalForm], None}, 
              AxesOrigin -> {Automatic, Automatic, Automatic}, AxesStyle -> 
              Directive[
                GrayLevel[0.65], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], BaseStyle -> Automatic, BoxRatios -> {1, 1, 0.4}, 
              BoxStyle -> GrayLevel[0, 0.35], DisplayFunction :> Identity, 
              FaceGridsStyle -> Automatic, ImageSize -> 264., Lighting -> 
              "Neutral", Method -> {"DefaultBoundaryStyle" -> Directive[
                  GrayLevel[0.3]], 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "RotationControl" -> "Globe"}, 
              PlotRange -> {{-2.9999995714285714`, 
               2.9999995714285714`}, {-0.9999998571428572, 
               0.9999998571428572}, {-4.289401858839064, 7.149003098065107}}, 
              PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02], 
                Scaled[0.02]}, Ticks -> {Automatic, Automatic, Automatic}}, 
             Method -> {"ResolveAsTriangles" -> False}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "3DMathPlot"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "3DMathPlot"}, {}], "\n "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Contour plots", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "2"}, {
     XMLElement["subpod", {"title" -> "Real part"}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[Re[Log[x]/Log[a]], {a, -3., 3.}, {x, -1., 1.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max7200$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max7202$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min7199$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min7201$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7199$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7200$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7201$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7202$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2390794$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min7199$\
2390799$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max7200$2390800$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min7201$\
2390801$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max7202$2390802$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max7200$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max7202$\
$ = 0.5, CalculateUtilities`GraphicsUtilities`Private`min7199$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min7201$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2390794$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7199$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7199$\
2390799$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7200$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max7200$\
2390800$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7201$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7201$\
2390801$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7202$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`max7202$\
2390802$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    Re[
                    Log[$CellContext`a]^(-1) 
                    Log[$CellContext`x]], {$CellContext`a, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7199$$], 
                    (
                    Piecewise[{{
                    0. + 3.2071349029490923` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.2071349029490923` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min7199$$], \
-3.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7199$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max7200$$]], 
                    (
                    Piecewise[{{
                    0. + 3.2071349029490923` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.2071349029490923` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min7199$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max7200$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7199$$ + 
                    0.006, CalculateUtilities`GraphicsUtilities`Private`\
max7200$$]], 3.]}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7201$$], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min7201$$], \
-1.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7201$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max7202$$]], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min7201$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max7202$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7201$$ + 
                    0.002, CalculateUtilities`GraphicsUtilities`Private`\
max7202$$]], 1.]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], 
                    RawBoxes[
                    FormBox["x", TraditionalForm]]}, AspectRatio -> Automatic,
                     ImageSize -> 264., ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min7199$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max7200$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min7201$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max7202$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiM2IYEfEACOhiTBpSkfK8XX1IL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJPWaJrz0ixI/uTCZcJ4ewnPN7eefn0+\
YstD4OxjIgxoITeaQuZTxXRkPYQ6Io1bzkR3/zxQXn8VHAew/cCRAL6nvWOFaEWRgrCMZ/\
gWy82U7cxMUMEJYqeO01OnsO2F2ijmMjGMMvxjbPJ2moLTFSmPTd3Sm7WKciHfx0fyNjF5D0uaXd2B\
IaFccHoOy2rf87dAM+v28IrebyaOMzvDUfeiGFHoJfpfNK6Tp6Rqmtd9HOuzmu+bDTIs6dM/\
b90wLRZDmO7bRgwO7Q1Xq29ZfhnbeFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l2XMDKdEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5MMv3yR8Wt5HKqyZD3fWEgA7VW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAIjPT5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DVJNuI4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> "Imaginary part"}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[Im[Log[x]/Log[a]], {a, -3., 3.}, {x, -1., 1.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max7204$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max7206$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min7203$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min7205$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7203$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7204$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7205$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7206$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2390902$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min7203$\
2390903$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max7204$2390904$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min7205$\
2390905$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max7206$2390906$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max7204$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max7206$\
$ = 0.5, CalculateUtilities`GraphicsUtilities`Private`min7203$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min7205$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2390902$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7203$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7203$\
2390903$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7204$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max7204$\
2390904$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min7205$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7205$\
2390905$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max7206$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max7206$\
2390906$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    Im[
                    Log[$CellContext`a]^(-1) 
                    Log[$CellContext`x]], {$CellContext`a, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7203$$], 
                    (
                    Piecewise[{{
                    0. + 3.2071349029490923` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.2071349029490923` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min7203$$], \
-3.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7203$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max7204$$]], 
                    (
                    Piecewise[{{
                    0. + 3.2071349029490923` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    3.2071349029490923` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min7203$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max7204$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7203$$ + 
                    0.006, CalculateUtilities`GraphicsUtilities`Private`\
max7204$$]], 3.]}, {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7205$$], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min7205$$], \
-1.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min7205$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max7206$$]], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min7205$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max7206$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min7205$$ + 
                    0.002, CalculateUtilities`GraphicsUtilities`Private`\
max7206$$]], 1.]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["a", TraditionalForm]], 
                    RawBoxes[
                    FormBox["x", TraditionalForm]]}, AspectRatio -> Automatic,
                     ImageSize -> 264., ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min7203$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max7204$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["a", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min7205$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max7206$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["x", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbim/f8N/\
gMQzgo2H7QEJ6GBMGlCS8t5b7DQWrh1sZxv88+Czm6RZu0oxHaApfTjVl+bz3XffXe/JkYzSfq/\
X01et+SA5SW/\
g6bE1QznLZSHIu9NcUa2ZFOkVfHbbmpiaPcrhByXed92a91LNwPjzK3wfeFJwMPSrYZwZRvVkX0Ges\
UTXnpFix/YnEy4T4Ownfbq1vft8Z2fXw2AsIzCGKqG320LmmQJN0x4CXbPmLQfxzR8flcdPBecx/\
V5QkVD9wHrHCoiFkQI45hN86+Vm6i4mZkAQUOTCaXLyHLa9QBvFxHRMZzm+\
cT5ZL9oCg5pqz829kpt1CvLh38QHMnYxeY9L2p0dgWFhXDL6zsrqn3M3wPPrtvBKnqwmDvN7w5E3MO\
yY6mU6n7Wuk2ek6loX/Zyri5ovGw3y/ClT/y8dMm2Ww9hqGwadHdkar9beMvzLtvAyx66fi/u+NZ+\
9owRcNRwqwX2UpODzKJopD7xE26erc+vwGHcqvmN0hlSwwolsnGW/\
uP54WIHXm0KMtZtsQDqingERzal1EcftHpsyM8xAQWKB59f1yyYbyzqUgDvb154JwuwA84SsW57QHK\
QLdQeTZF/+qLiVXM40GfJ+IAydUrVW9LewPsqSK8hYBkYS4wVNvQZzWCU1AhUs+0EJEucgGEKyX/\
bjvvmHi5VAqvYVqkt5FgeuNKfhSfTLAh9SMTVZc8cOHF3BbYvZRPKkVl3E0nRx2myO6X6T6cYNzYEe\
SkJoScIHercpdJvCX90Ulvbgbk3o1oRuTejWhG5N+H/XBBcx/iv9Bpp0uNY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "ContourPlot"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "ContourPlot"}, {}], "\n "}]}],
    Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Root", "scanner" -> "Reduce", "id" -> "LocusSolution", 
     "position" -> "500", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[Log[x]/Log[a] == 0, {a, x}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   TemplateBox[{",   ", "\",   \"", 
                    RowBox[{
                    RowBox[{"log", "(", "a", ")"}], "\[NotEqual]", "0"}], 
                    RowBox[{"x", "\[LongEqual]", "1"}]}, "RowWithSeparators"],
                    BaselinePosition -> Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Properties as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsARealFunction", "position" -> 
     "600", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["minput", {}, {"FunctionDomain[Log[a, x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"x", "\[Element]", 
                TemplateBox[{}, "Reals"]}], "\" : \"", 
              TemplateBox[{
                StyleBox["\" or \"", {
                  GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}], 
                RowBox[{"(", "\[NoBreak]", 
                  TemplateBox[{
                    StyleBox["\" and \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    RowBox[{"a", "\[NotEqual]", "0"}], 
                    RowBox[{"a", "\[NotEqual]", "1"}], 
                    RowBox[{"a", "\[LongEqual]", "x"}]}, "RowWithSeparator"], 
                  "\[NoBreak]", ")"}], 
                RowBox[{"(", "\[NoBreak]", 
                  TemplateBox[{
                    StyleBox["\" and \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    RowBox[{"x", ">", "0"}], 
                    RowBox[{"0", "<", "a", "<", "1"}]}, "RowWithSeparator"], 
                  "\[NoBreak]", ")"}], 
                RowBox[{"(", "\[NoBreak]", 
                  TemplateBox[{
                    StyleBox["\" and \"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    RowBox[{"x", ">", "0"}], 
                    RowBox[{"a", ">", "1"}]}, "RowWithSeparator"], 
                  "\[NoBreak]", ")"}]}, "RowWithSeparator"], "\"}\""}, 
             "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["minput", {}, {"FunctionRange[Log[a, x], x, y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"y", "\[Element]", 
                TemplateBox[{}, "Reals"]}], "\" : \"", 
              RowBox[{
                RowBox[{"log", "(", "a", ")"}], "\[NotEqual]", "0"}], 
              "\"}\""}, "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[Log[x]/Log[a], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[PartialD]", 
                  RowBox[{"\"\[PartialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    TemplateBox[{"a", "x"}, "Log", DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", 
                RowBox[{"x", " ", 
                  RowBox[{"log", "(", "a", ")"}]}]], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Log[x]/Log[a], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                RowBox[{
                  TagBox[
                   RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"log", "(", "x", ")"}], 
                    RowBox[{"log", "(", "a", ")"}]], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                  "\[LongEqual]", 
                  TagBox[
                   StyleBox[
                    RowBox[{
                    StyleBox[
                    FractionBox[
                    RowBox[{"x", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "x", ")"}], "-", "1"}], ")"}]}], 
                    RowBox[{"log", "(", "a", ")"}]], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Identity]}]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a complex\[Hyphen]valued logarithm\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Alternative representation", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "position" -> "900", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Log[a, x] == Log[x]/Log[a]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{"a", "x"}, "Log", DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )], 
                "\[LongEqual]", 
                FractionBox[
                 RowBox[{"log", "(", "x", ")"}], 
                 RowBox[{"log", "(", "a", ")"}]]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Log2/27/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "SeriesRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "1000", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Log[a, x] == Sum[((-1)^k (-1 + x)^k)/k, {k, 1, \
Infinity}]/Sum[((-1)^k (-1 + a)^k)/k, {k, 1, Infinity}] /; Abs[-1 + a] < 1 && \
Abs[-1 + x] < 1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  TemplateBox[{"a", "x"}, "Log", DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )], 
                  "\[LongEqual]", 
                  FractionBox[
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "x"}], ")"}], "k"]}], "k"]}], 
                   RowBox[{
                    UnderoverscriptBox[
                    StyleBox["\[Sum]", ScriptLevel -> 0], 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "a"}], ")"}], "k"]}], "k"]}]]}], 
                HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{
                    RowBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "a"}]}, "Abs"], "<", "1"}], 
                    StyleBox[
                    "\" and \"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    RowBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "x"}]}, "Abs"], "<", "1"}]}, 
                    "RowDefault"], "\[NoBreak]", ")"}]}, "RowDefault"], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Log[a, x] == (Log[-1 + x] - Sum[(-1)^k/(k (-1 + x)^k), {k, 1, \
Infinity}])/(Log[-1 + a] - Sum[(-1)^k/((-1 + a)^k k), {k, 1, Infinity}]) /; \
Abs[-1 + a] > 1 && Abs[-1 + x] > 1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  TemplateBox[{"a", "x"}, "Log", DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )], 
                  "\[LongEqual]", 
                  FractionBox[
                   RowBox[{
                    RowBox[{"log", "(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "x"}], ")"}], "-", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "x"}], ")"}], 
                    RowBox[{"-", "k"}]]}], "k"]}]}], 
                   RowBox[{
                    RowBox[{"log", "(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "a"}], ")"}], "-", 
                    RowBox[{
                    UnderoverscriptBox[
                    StyleBox["\[Sum]", ScriptLevel -> 0], 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "a"}], ")"}], 
                    RowBox[{"-", "k"}]]}], "k"]}]}]]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{
                    RowBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "a"}]}, "Abs"], ">", "1"}], 
                    StyleBox[
                    "\" and \"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    RowBox[{
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", "1"}], "+", "x"}]}, "Abs"], ">", "1"}]}, 
                    "RowDefault"], "\[NoBreak]", ")"}]}, "RowDefault"], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Log[a, x] == (2 Pi Floor[Arg[x - \[Xi]]/(2 Pi)] - I Log[\[Xi]] + I \
Sum[((-1)^k (x - \[Xi])^k)/(k \[Xi]^k), {k, 1, Infinity}])/(2 Pi Floor[Arg[a \
- \[Xi]]/(2 Pi)] - I Log[\[Xi]] + I Sum[((-1)^k (a - \[Xi])^k)/(k \[Xi]^k), \
{k, 1, Infinity}]) /; \[Xi] < 0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  TemplateBox[{"a", "x"}, "Log", DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )], 
                  "\[LongEqual]", 
                  FractionBox[
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{"x", "-", "\[Xi]"}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"]}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", "\[Xi]", ")"}]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "\[Xi]"}], ")"}], "k"], " ", 
                    SuperscriptBox["\[Xi]", 
                    RowBox[{"-", "k"}]]}], "k"]}]}]}], 
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{"a", "-", "\[Xi]"}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"]}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", "\[Xi]", ")"}]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{
                    UnderoverscriptBox[
                    StyleBox["\[Sum]", ScriptLevel -> 0], 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"a", "-", "\[Xi]"}], ")"}], "k"], " ", 
                    SuperscriptBox["\[Xi]", 
                    RowBox[{"-", "k"}]]}], "k"]}]}]}]]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"\[Xi]", "<", "0"}]}, "RowDefault"], HoldForm]}, 
                 "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "SeriesRepresentations:MathematicalFunctionIdentityData__More"}, \
{}]}], 
     XMLElement["infos", {"count" -> "4"}, {
       XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "arg(z) is the complex argument"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Arg.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Arg", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexArgument.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "floor(x) is the floor function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Floor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/IntegerFunctions/Floor", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FloorFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Log2/06/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod11$$, 
   Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, 
   Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, 
   Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, 
   Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, 
   Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
   Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
   Typeset`pod36$$, Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, 
   Typeset`pod40$$, Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False, False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False, False, False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`aux40$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "10", "datatypes" -> "", "timedout" -> 
     "InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", 
     "timing" -> "2.618", "parsetiming" -> "0.16", "parsetimedout" -> "false",
      "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa35811h61a7c4fd38h30200003d2bfih21bh8ghei3142019838491228908", "id" -> 
     "MSP35821h61a7c4fd38h30200000ifi6b69daeih5ag", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "10", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa35831h61a7c4fd38h302000010794ha4dge52d493142019838491228908", "version" -> 
     "2.6", "inputstring" -> "Log_a(x)"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "", "timedout" -> 
     "InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", 
     "timing" -> "2.378", "parsetimedout" -> "false", "recalculate" -> "", 
     "id" -> "", "parseidserver" -> "10", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "10", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "Log_a(x)"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 8, 6, 21, 15, 33.2228202`9.274011394976405}, "Line" -> 8,
     "SessionID" -> 34206452839534933796}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10}, Typeset`failedpods$$ = {11, 12, 13, 14, 15, 16, 17, 18,
    19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 
   37, 38, 39, 40}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Log_a(x)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, 
         Typeset`pod40$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1088., {998.3544921875, 1003.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, 
          Typeset`pod40$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa35811h61a7c4fd38h30200003d2bfih21bh8ghei3142019838491228908", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.868805733327538*^9},ExpressionUUID->"58752ad4-7876-4879-b0c1-\
faf6491800d3"]
}, Closed]],

Cell[CellGroupData[{

Cell["log2(M)", "WolframAlphaLong",
 CellChangeTimes->{{3.868805835579424*^9, 3.868805851368136*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"0dd5be3a-4e9f-4e02-bb27-f188825870fb"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "log2(M)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Log[2, M]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{"2", "M"}, "Log", DisplayFunction -> (RowBox[{
                 SubscriptBox["log", #], "(", #2, ")"}]& )], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log_b(x) is the base- b logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Identity", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"log", "(", "M", ")"}], 
              RowBox[{"log", "(", "2", ")"}]], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[Log[M]/Log[2], {M, -3/Log[2], 3/Log[2]}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5853$$ = 0.5, 
                 
                 CalculateUtilities`GraphicsUtilities`Private`min5852$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5852$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5853$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3479693$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5852$\
3479698$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5853$3479699$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5853$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5852$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`more$3479693$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5852$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5852$\
3479698$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5853$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5853$\
3479699$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$3479670[
                    Plot[{
                    Re[Log[2]^(-1) Log[$CellContext`M]], 
                    Im[Log[2]^(-1) Log[$CellContext`M]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][Log[2]^(-1) Log[$CellContext`M], {$CellContext`M, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5852$$], 
                    (
                    Piecewise[{{
                    0. + 4.626917619946561 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    4.626917619946561 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5852$$], \
(-3)/Log[2]], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5852$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5853$$]], 
                    (
                    Piecewise[{{
                    0. + 4.626917619946561 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 4.626917619946561 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5852$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5853$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5852$$ + 
                    Rational[3, 500]/Log[2], 
                    CalculateUtilities`GraphicsUtilities`Private`max5853$$]], 
                    3/Log[2]]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["M", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5852$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5853$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3479670]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3479670[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3479670[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMxDbx8gEJ6GBMGlCS8r1efEktXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu96jQxml/\
V6vpy9b80Fyml7D00NrhnKWy0LQdye5Aq2ZFOklfHbTmhjMLnDyA6j3XbXmvVQzYvz5Fb5PeFJwYuC\
rYZwZBnqyp0g+ZYmuPSPFjuxPJlwmhLOf8Hh75/nLZy+\
2PAzGMiLGgBJ6uy1kPlVEQ9pDoCvWvOVEfPPHB+\
XxU8F5DN8LEAnoe9Y7VoRaGCkIx3yCb73YTN3GxAwRlCh67jQ5eQ7bXqCNYiIbwyzHN84m62lbYKIy\
7bm5U3KzTkE+/Ov4QMYuJu9xSbuzIzAsjAtG32lZ/XPuBnh+3RZeyePVxGF+\
bzjyRgw7Ar1M55PWdfKMVF3rop9zdV7zZaNBnj1l6v+\
lA6bNchhbbcOA2aGt8WrtLcPvtIWXOXb9XNx3rfnsHSXgquFQCe6jpAWfR9FMeeAl2j5dnVuHx7hV8\
R2jM6SCFU5k4yz7xfXH/Qq83hRirN1kA9IR9QyIIAfroo7bXZYxM5wSRRILPL+\
uXzbZWNahBNzZvvZMUGYHmCdk3fKEZj9dqDsxyfTLHxW3ksupJkPe94WBDNRa0d/A+\
ihLrqBjGRhJjBc09RrMYZXUiKhg2Q9KkDgngiEk+2U/7pt/uFgJpGpPobqUZ3HgSnMSnkS/\
LPABiMxMmzt24OgKblvMJpLHteoilqaL02ZzTPebTDduaA70UBJCSxI+0LtNodsU/\
uqmsLQHd2tCtyZ0a0K3JnRrwv+7JriI8V/pN5tEuNY="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[Log[M]/Log[2], {M, -26., 26.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5855$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5854$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5854$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5855$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3479790$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5854$\
3479791$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5855$3479792$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5855$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5854$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3479790$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5854$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5854$\
3479791$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5855$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5855$\
3479792$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$3479769[
                    Plot[{
                    Re[Log[2]^(-1) Log[$CellContext`M]], 
                    Im[Log[2]^(-1) Log[$CellContext`M]]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][Log[2]^(-1) Log[$CellContext`M], {$CellContext`M, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5854$$], 
                    (
                    Piecewise[{{
                    0. + 27.761505719679374` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    27.761505719679374` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5854$$], \
-25.968510736001342`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5854$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5855$$]], 
                    (
                    Piecewise[{{
                    0. + 27.761505719679374` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    27.761505719679374` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5854$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5855$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5854$$ + 
                    0.05193702147200269, 
                    CalculateUtilities`GraphicsUtilities`Private`max5855$$]], 
                    25.968510736001342`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["M", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5854$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5855$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3479769]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3479769[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3479769[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkWCTqn1AgnVsTBpQkvK9XnJJLFw72M42+PPgs5ukWbtKMR2gKf1wqi/\
N47vnnrve8xMRJP1er6duGvNBsDjZwtMzY0ZilouCx+/PcwlKUcGTG/\
jsnjEh6H1g5AfEznfbmAMhZ0S78xt8n7CoYETDV00Z1RTU9FCSPKORqj1jSU/NT6ZMRITRn/\
Bie2e4OxzuOhiMZUy0BsnVdlvIPJNEQdJDoFvG7DHCv7nj0/L4qWAshO8F8AjUY+\
OdSBIbGMEJw3y8b73eTD3AxDThMZHxldNk5Tlqe4HSkvJ0ArMc37icrFdtgYlMlePmYcnNOgW58O/\
gAxHamJzHJm3PlkC/MK4ZfRdl9c+5G+\
D5bVt4Kc5WE4f5vWPIG9H0FNQynS9b18kxUnWtjX7O1VXNl40GefmUqf+\
XjqnSy2G8bhsGzE5MjVdrbxl+py28yLHr5+J+\
ZMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIz7Fd8hOn0qWOEEJs6yX2x/\
PKnA600hxNpNNyAdXs+AAHIwrthyu09TqkcZkSQywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwlC3UnOsq+/FFxK7lcaDLk/\
YhrSEGuFf1drI805PJ4IjwjCfGCpl69OaySGhPpLftBCRLmhFOEpL/\
Mx35zDxcrgVQdSlSXdCwObGnO/ZPolwU+Bp7qrLlje44u77bFbAJxVqsuoEmyOG02x3S/\
yXTjhuZA9yXBtyT+A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgPvzrkO"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Complex-valued plots", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "Complex-valued plots", "input" -> 
           "Plot__Complex-valued plots"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Real-valued plots", "input" -> 
           "Plot__Real-valued plots"}, {}]}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Root", "scanner" -> "Reduce", "id" -> "Root", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[Log[M]/Log[2] == 0, M, Reals]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"M", "\[LongEqual]", "1"}], BaselinePosition -> 
                   Baseline, ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Root__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[Log[M]/Log[2], M]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "M"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "M"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    TemplateBox[{"2", "M"}, "Log", DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", 
                RowBox[{"M", " ", 
                  RowBox[{"log", "(", "2", ")"}]}]], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Derivative__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Log[M]/Log[2], M]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                RowBox[{
                  TagBox[
                   RowBox[{"\[Integral]", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"log", "(", "M", ")"}], 
                    RowBox[{"log", "(", "2", ")"}]], 
                    RowBox[{"\[DifferentialD]", "M"}]}]}], HoldForm], 
                  "\[LongEqual]", 
                  TagBox[
                   StyleBox[
                    RowBox[{
                    StyleBox[
                    FractionBox[
                    RowBox[{"M", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", "M", ")"}], "-", "1"}], ")"}]}], 
                    RowBox[{"log", "(", "2", ")"}]], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Helvetica",
                     FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Identity]}]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a complex\[Hyphen]valued logarithm\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Alternative representation", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "position" -> "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Log[2, M] == Log[M]/Log[2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{"2", "M"}, "Log", DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )], 
                "\[LongEqual]", 
                FractionBox[
                 RowBox[{"log", "(", "M", ")"}], 
                 RowBox[{"log", "(", "2", ")"}]]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Log2/27/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "SeriesRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "800", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Log[2, M] == (2 Pi Floor[Arg[M - x]/(2 Pi)] - I Log[x] + I \
Sum[((-1)^k (M - x)^k)/(k x^k), {k, 1, Infinity}])/(2 Pi Floor[Arg[2 - x]/(2 \
Pi)] - I Log[x] + I Sum[((-1)^k (2 - x)^k)/(k x^k), {k, 1, Infinity}]) /; x < \
0"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  TemplateBox[{"2", "M"}, "Log", DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )], 
                  "\[LongEqual]", 
                  FractionBox[
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{"M", "-", "x"}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"]}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", "x", ")"}]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"M", "-", "x"}], ")"}], "k"], " ", 
                    SuperscriptBox["x", 
                    RowBox[{"-", "k"}]]}], "k"]}]}]}], 
                   RowBox[{
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{"2", "-", "x"}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"]}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", "x", ")"}]}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{
                    UnderoverscriptBox[
                    StyleBox["\[Sum]", ScriptLevel -> 0], 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"2", "-", "x"}], ")"}], "k"], " ", 
                    SuperscriptBox["x", 
                    RowBox[{"-", "k"}]]}], "k"]}]}]}]]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"x", "<", "0"}]}, "RowDefault"], HoldForm]}, 
                 "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Log[2, M] == (Floor[Arg[M - Subscript[z, 0]]/(2 Pi)] \
Log[Subscript[z, 0]^(-1)] + Log[Subscript[z, 0]] + Floor[Arg[M - Subscript[z, \
0]]/(2 Pi)] Log[Subscript[z, 0]] - Sum[((-1)^k (M - Subscript[z, 0])^k)/(k \
Subscript[z, 0]^k), {k, 1, Infinity}])/(Floor[Arg[2 - Subscript[z, 0]]/(2 \
Pi)] Log[Subscript[z, 0]^(-1)] + Log[Subscript[z, 0]] + Floor[Arg[2 - \
Subscript[z, 0]]/(2 Pi)] Log[Subscript[z, 0]] - Sum[((-1)^k (2 - Subscript[z, \
0])^k)/(k Subscript[z, 0]^k), {k, 1, Infinity}])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{"2", "M"}, "Log", DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )], 
                "\[LongEqual]", 
                FractionBox[
                 RowBox[{
                   RowBox[{
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{"M", "-", 
                    SubscriptBox["z", "0"]}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"], " ", 
                    RowBox[{"log", "(", 
                    FractionBox["1", 
                    SubscriptBox["z", "0"]], ")"}]}], "+", 
                   RowBox[{"log", "(", 
                    SubscriptBox["z", "0"], ")"}], "+", 
                   RowBox[{
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{"M", "-", 
                    SubscriptBox["z", "0"]}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"], " ", 
                    RowBox[{"log", "(", 
                    SubscriptBox["z", "0"], ")"}]}], "-", 
                   RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"M", "-", 
                    SubscriptBox["z", "0"]}], ")"}], "k"], " ", 
                    SubsuperscriptBox["z", "0", 
                    RowBox[{"-", "k"}]]}], "k"]}]}], 
                 RowBox[{
                   RowBox[{
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{"2", "-", 
                    SubscriptBox["z", "0"]}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"], " ", 
                    RowBox[{"log", "(", 
                    FractionBox["1", 
                    SubscriptBox["z", "0"]], ")"}]}], "+", 
                   RowBox[{"log", "(", 
                    SubscriptBox["z", "0"], ")"}], "+", 
                   RowBox[{
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{"2", "-", 
                    SubscriptBox["z", "0"]}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"], " ", 
                    RowBox[{"log", "(", 
                    SubscriptBox["z", "0"], ")"}]}], "-", 
                   RowBox[{
                    UnderoverscriptBox[
                    StyleBox["\[Sum]", ScriptLevel -> 0], 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"2", "-", 
                    SubscriptBox["z", "0"]}], ")"}], "k"], " ", 
                    SubsuperscriptBox["z", "0", 
                    RowBox[{"-", "k"}]]}], "k"]}]}]]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Log[2, M] == (2 Pi Floor[(Pi - Arg[M/Subscript[z, 0]] - \
Arg[Subscript[z, 0]])/(2 Pi)] - I Log[Subscript[z, 0]] + I Sum[((-1)^k (M - \
Subscript[z, 0])^k)/(k Subscript[z, 0]^k), {k, 1, Infinity}])/(2 Pi Floor[(Pi \
- Arg[Subscript[z, 0]^(-1)] - Arg[Subscript[z, 0]])/(2 Pi)] - I \
Log[Subscript[z, 0]] + I Sum[((-1)^k (2 - Subscript[z, 0])^k)/(k Subscript[z, \
0]^k), {k, 1, Infinity}])"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                TemplateBox[{"2", "M"}, "Log", DisplayFunction -> (RowBox[{
                    SubscriptBox["log", #], "(", #2, ")"}]& )], 
                "\[LongEqual]", 
                FractionBox[
                 RowBox[{
                   RowBox[{"2", " ", "\[Pi]", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"\[Pi]", "-", 
                    RowBox[{"arg", "(", 
                    FractionBox["M", 
                    SubscriptBox["z", "0"]], ")"}], "-", 
                    RowBox[{"arg", "(", 
                    SubscriptBox["z", "0"], ")"}]}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"]}], "-", 
                   RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", 
                    SubscriptBox["z", "0"], ")"}]}], "+", 
                   RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"M", "-", 
                    SubscriptBox["z", "0"]}], ")"}], "k"], " ", 
                    SubsuperscriptBox["z", "0", 
                    RowBox[{"-", "k"}]]}], "k"]}]}]}], 
                 RowBox[{
                   RowBox[{"2", " ", "\[Pi]", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"\[Pi]", "-", 
                    RowBox[{"arg", "(", 
                    FractionBox["1", 
                    SubscriptBox["z", "0"]], ")"}], "-", 
                    RowBox[{"arg", "(", 
                    SubscriptBox["z", "0"], ")"}]}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"]}], "-", 
                   RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", 
                    SubscriptBox["z", "0"], ")"}]}], "+", 
                   RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{
                    UnderoverscriptBox[
                    StyleBox["\[Sum]", ScriptLevel -> 0], 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"2", "-", 
                    SubscriptBox["z", "0"]}], ")"}], "k"], " ", 
                    SubsuperscriptBox["z", "0", 
                    RowBox[{"-", "k"}]]}], "k"]}]}]}]]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "arg(z) is the complex argument"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Arg.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Arg", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexArgument.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "floor(x) is the floor function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Floor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/IntegerFunctions/Floor", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FloorFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ElementaryFunctions/Log2/06/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> "DefiniteIntegral", "position" -> 
     "900", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[Integrate[Log[M]/Log[2], {M, 0, 1}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "1"], 
                 RowBox[{
                   FractionBox[
                    RowBox[{"log", "(", "M", ")"}], 
                    RowBox[{"log", "(", "2", ")"}]], 
                   RowBox[{"\[DifferentialD]", "M"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox["1", 
                  RowBox[{"log", "(", "2", ")"}]]}], Identity], 
              "\[TildeTilde]", 
              TagBox[
               RowBox[{"-", "1.4426950408889634`"}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegral__1_More digits"}, {}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1000", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.0768646183954387, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.0768646183954387, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.0768646183954387, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.0768646183954387, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.0768646183954387, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.7853981633974483, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.7853981633974483, 
                    Subscript[
                    Style["M", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.7853981633974483, 
                    Subscript[
                    Style["M", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[CalculateScan`PlotterScanner`Private`sa$$ === True, 
                    Black, Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.0768646183954387, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.0768646183954387, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]
                    , Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.0768646183954387, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.0768646183954387, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.0768646183954387, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[Subtract, 
                    CalculateScan`PlotterScanner`Private`pRX]]], ImageSize -> 
                    Small, Appearance -> "Palette", BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3681055$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$3681060$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$3681061$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$3681062$$ = 
                 False, CalculateScan`PlotterScanner`Private`fy1$3681063$$ = 
                 0, CalculateScan`PlotterScanner`Private`fy2$3681064$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$3681065$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$3681066$$ = 
                 False, CalculateScan`PlotterScanner`Private`ar$3681067$$ = 0,
                  CalculateScan`PlotterScanner`Private`tangentCount$3681068$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$\
3681069$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$\
3681070$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$3681071$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$3681072$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.0768646183954387, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.0768646183954387, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.0768646183954387, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.0768646183954387, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.0768646183954387, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.7853981633974483, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.7853981633974483}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3681055$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$3681060$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$3681061$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$3681062$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$3681063$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$3681064$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$3681065$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$3681066$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$3681067$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$3681068$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$\
3681069$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
3681070$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
3681071$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$3681072$$\
, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`M}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    25.96851073600134/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    12.98425536800067], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    12.98425536800067]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/(Log[2]^(-1) Log[$CellContext`M]) == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`M < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`M,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`M, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {40, 60, 3, 
                    0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], 
                    Evaluate][$CellContext`M], {$CellContext`M, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {40, 60, 3, 
                    0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], 
                    Evaluate][$CellContext`M], {$CellContext`M, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {40, 60, 3, 
                    0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {40, 34, 3, 
                    0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate]}, {$CellContext`M, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    12.98425536800067]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {40, 60, 3, 
                    0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {40, 34, 3, 
                    0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate]}, {$CellContext`M, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    12.98425536800067], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {40, 60, 3, 
                    0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {40, 34, 3, 
                    0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate]}, {$CellContext`M, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 12.98425536800067], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {40, 60, 3, 
                    0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {40, 34, 3, 
                    0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 3}, {40, 60, 3, 0,
                     3, 3, 0, 1}, {16, 2, 1, 2}, {19, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, -$CellContext`M^(-2)/Log[2]], 
                    Evaluate]}, {$CellContext`M, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {40, 60, 3, 
                    0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {40, 34, 3, 
                    0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 3}, {40, 60, 3, 0,
                     3, 3, 0, 1}, {16, 2, 1, 2}, {19, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, -$CellContext`M^(-2)/Log[2]], 
                    Evaluate]}, {$CellContext`M, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {40, 60, 3, 
                    0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {40, 34, 3, 
                    0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 3}, {40, 60, 3, 0,
                     3, 3, 0, 1}, {16, 2, 1, 2}, {19, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, -$CellContext`M^(-2)/Log[2]], 
                    Evaluate]}, {$CellContext`M, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`M, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 
                    0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {40, 60, 3, 
                    0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]} + {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M], 1} (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {40, 34, 3, 
                    0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {16, 1, 2, 
                    1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M]^2)/
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 
                    0}, {{40, 56, 3, 0, 0, 3, 0, 1}, {40, 60, 3, 0, 1, 3, 0, 
                    2}, {10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 3}, {40, 60, 3, 0,
                     3, 3, 0, 1}, {16, 2, 1, 2}, {19, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, -$CellContext`M^(-2)/Log[2]], 
                    Evaluate][$CellContext`M], {$CellContext`M, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`M] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/(Log[2]^(-1) Log[$CellContext`M]) == 0, $CellContext`M, 
                    Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`M, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[CalculateScan`PlotterScanner`Private`iLength (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)^(-1) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
M] == Sqrt[1 + D[Log[2]^(-1) Log[$CellContext`M], $CellContext`M]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`M, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M]}], $CellContext`M], \
{$CellContext`M, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 12.98425536800067]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M], 
                    1}], $CellContext`M], {$CellContext`M, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 12.98425536800067], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M], 
                    1}]], $CellContext`M], {$CellContext`M, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`M, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`M) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], 
                    Evaluate][$CellContext`M]}, {$CellContext`M, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`M, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`M) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], 
                    Evaluate][$CellContext`M]}, {$CellContext`M, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`M) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`M) $CellContext`M + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`M)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`M) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], 
                    Evaluate][$CellContext`M] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`M)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M]), {$CellContext`M, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`M) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`M) $CellContext`M + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`M)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`M) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], 
                    Evaluate][$CellContext`M] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`M)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M]), {$CellContext`M, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`M, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`M)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M], 
                    1}, {$CellContext`M, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`M, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`M)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M], 
                    1}, {$CellContext`M, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M], 1}/(($CellContext`M + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`M, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`M + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M], 1}/(($CellContext`M + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`M, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`M + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`M - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
M - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`M, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`M - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
M - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`M, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`M, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] ($CellContext`M - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] ($CellContext`M - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M]^2), {$CellContext`M, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]}, 
                    ParametricPlot[{$CellContext`M, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] ($CellContext`M - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate][$CellContext`M] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M] ($CellContext`M - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][$CellContext`M]^2), {$CellContext`M, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$]^2) (
                    1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 3, 0, 0}, {{10, 0, 1}, {40, 34, 3, 0, 1, 3, 0, 2}, {
                    40, 60, 3, 0, 2, 3, 0, 1}, {40, 34, 3, 0, 0, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`M}, Log[2]^(-1) 
                    Log[$CellContext`M]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 1}}, {{2, {2, 0, 0}}}, {
                    0, 1, 4, 0, 0}, {{40, 60, 3, 0, 0, 3, 0, 1}, {10, 0, 2}, {
                    40, 34, 3, 0, 2, 3, 0, 3}, {40, 60, 3, 0, 3, 3, 0, 2}, {
                    16, 1, 2, 1}, {1}}, 
                    Function[{$CellContext`M}, $CellContext`M^(-1)/Log[2]], 
                    Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    FractionBox[
                    RowBox[{"log", "(", "M", ")"}], 
                    RowBox[{"log", "(", "2", ")"}]], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.7853981633974483, 
                    Subscript[
                    Style["M", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.7853981633974483, 
                    Subscript[
                    Style["M", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.0768646183954387, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.0768646183954387, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.0768646183954387, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.0768646183954387, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.0768646183954387, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfEWMV4gsSoxtj0oCSlO/\
1kkti4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJShFBU+u4bM7xoSg94CRHxA7301j3gs5I9qd3+D7hEUFIxq+\
asqopqCmB5LkGY1U7RlLemJ+MmUiIoz+hGc7r15vvxgOHQzGMiZag+\
Rqpy1knkmiIOkh0A1j3jHCv7nj4/L4qWAshO8F8AjUQ+\
OdSBIbGMEJw3y8b73aTN3DxDThMZHxpdNk5Tlqe4HSkvJ0ArMc37iYrO22wESmynFzv+RmnYJc+\
LfwgQhtTM5jk7ZnS6BfGFeMvvOy+ufcDfD8ti28FKericP8dhnyRjQ9AbVM5/\
PWdXKMVF1ro59zdVnzZaNBXjxl6v+\
lI6r0chgv24YBs2NT49XaW4YftoUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G34\
jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQQA7GFVtu92hK9SgjkkQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe5ER9mXPypuJZdzTYa8H3INKci1or+\
N9ZGGXB5PhGckIV7Q1Ks3h1VSYyK9ZT8oQcKccIqQ9Jf52G/\
u4WIlkKoDieqSjsWBLc2ZfxL9ssBHwFOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4l\
sR/oHebQrcp/NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb2szuG4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1100", 
     "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa34002029bech2f91f33f000021872b8h31f14d8c724077331436509559", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1200", "error" -> "false", 
     "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa34012029bech2f91f33f000022c1455b1e951g79724077331436509559", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False, False, False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "M", "template" -> 
        "Assuming \"M\" is a variable${separator}Use as ${desc} or ${desc} \
instead", "count" -> "3", "pulldown" -> "false", "default" -> 
        "{\"C\", \"M\"} -> {\"Variable\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Variable", "desc" -> "a variable", "input" -> 
          "{\"C\", \"M\"} -> {\"Variable\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Unit", "desc" -> "a unit", "input" -> 
          "{\"C\", \"M\"} -> {\"Unit\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "RomanNumeral", "desc" -> "a roman numeral", "input" -> 
          "{\"C\", \"M\"} -> {\"RomanNumeral\"}"}, {}]}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "12", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.803", "parsetiming" -> "0.325", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP33962029bech2f91f33f00003h7di993e8ia6d65", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "2", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa33972029bech2f91f33f00003ed4f12dcdb3194f724077331436509559", "version" -> 
    "2.6", "inputstring" -> "log2(M)"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 8, 6, 21, 17, 35.1910794`9.299007481653359}, "Line" -> 9,
     "SessionID" -> 34206452839534933796}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10, 11, 12}, Typeset`failedpods$$ = {11, 12}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = "log2(M)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1088., {1080.8544921875, 1086.1455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.868805855232994*^9},ExpressionUUID->"a9007529-9082-4e4f-af79-\
5869369bd6bb"]
}, Open  ]]
},
WindowSize->{1152., 579.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
FrontEndVersion->"13.0 pour Microsoft Windows (64-bit) (December 2, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"79286a1c-6972-42b6-a2c8-1513aa00a627"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 180, 2, 41, "WolframAlphaLong",ExpressionUUID->"57eff2fe-736b-4370-9806-05adc900567e"],
Cell[763, 26, 660635, 11177, 2012, "Print",ExpressionUUID->"58752ad4-7876-4879-b0c1-faf6491800d3"]
}, Closed]],
Cell[CellGroupData[{
Cell[661435, 11208, 179, 2, 35, "WolframAlphaLong",ExpressionUUID->"0dd5be3a-4e9f-4e02-bb27-f188825870fb"],
Cell[661617, 11212, 409593, 7514, 2177, "Print",ExpressionUUID->"a9007529-9082-4e4f-af79-5869369bd6bb"]
}, Open  ]]
}
]
*)

