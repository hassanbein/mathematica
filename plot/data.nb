(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    643362,      11730]
NotebookOptionsPosition[    639355,      11651]
NotebookOutlinePosition[    639828,      11669]
CellTagsIndexPosition[    639785,      11666]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{"2", 
        RowBox[{"Cos", "[", "t", "]"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", 
       RowBox[{"4", "*", "Pi"}], ",", 
       RowBox[{"Pi", "/", "50"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"N", "[", 
   RowBox[{
    RowBox[{"data", "//", "MatrixForm"}], ",", "7"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dataPlot", "=", 
  RowBox[{"ListPlot", "[", "data", "]"}]}]}], "Input",
 CellChangeTimes->{{3.8788234336620364`*^9, 3.878823436963278*^9}, 
   3.8788352579984245`*^9, {3.878835292321336*^9, 3.878835311600771*^9}, 
   3.8788365219889145`*^9, {3.8788387954897738`*^9, 3.87883880662575*^9}, {
   3.8788390307281237`*^9, 3.8788390316170964`*^9}, 3.8788396022807493`*^9},
 CellLabel->"In[2]:=",ExpressionUUID->"0944b31f-cbe6-42b2-9399-2709e60573e3"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668], 
    AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdlQtUzmccx9+U1Nv17fb21lu99/fFxEYLi+c/NcttlFpUq0hCE1uTFNE4
HKvjNtPKpcmlcgwbNUP+uS+c5RZJrVCKdKOL6u1ttt/z/HbGOR2n8/R/nt/z
vXwe+fxlgTGDBAJB6duff/5/5x/nohXv4B1PEINvHV/eOkDg9xJi/HBdUCw/
QPLOKMJyZH+QAXP10fp4tn6L1LrbuuUaDKS2bU/iSNd7ZCDIz956mYH+fQWp
D23de6aknyzdkE9sNFUkw7GqKqRDT7+vJXNL0j47JdSTfovQDSudn5CNngsG
zpr00f3qSH5H5u6VT3vIpfKaRQ1uz8iLuLBoi/w3dP9G4nT6jnHR7G7yXU7M
jBDlC+IgEwWXNXTS816Sc0aFhqsxHWTW4qb3r+laSEToChNl2St6fhsJGO7s
k6puJ+lZY9Ndxe0koIAPtypvofO8InvS1KXdpIksS01Zc1fymkgK8v1DtzbQ
+d7u+3ykd+vVpyQw+vyydGkn2TVE2isqr6HzdpFVycYxUv0D4uVvNN/Xo5vU
hu3/okl4i87/hqz6vtZVaF9CnEf4BfXJewgzBO7Ty9b5PtGmySdVfex7Hu6n
Z/vzNV2lY+O0/ex8Hu5rYPPxFx9ZDlcOG2Dz83B/AUfvx8+uzduydJeAo/fn
QQ8jjurDXw4s3VSaacRR/XjQZxBH9eU/vPJinTprEEf150EvY476w+d5Wyan
ZRtz1D8e9DPhqL+85MiIhOrdJhz1nwc9B3M0H3y6dOaX4/YO5mh+eNDXlKP5
4vVblsf8sM+Uo/njQe8hHM0nH2+0I6I9ZwhH88uD/mYczTdfk3AyZMZ+M47m
nwc/zDlqR0nAs3uzCnLNcR38EeL3l+Z0TRl8UIj7g18WeP6YG2LfeYcscD7w
zxLnPzxhnE/xYUu8H/hphfd3PhHqJcm3Qn3AX2vUb7NiteeKAmvUF/y2Qf37
du7V3j5ig/6A/7boX9H6yG1On9uiv5AHW/S/1act4/J923fyIcL86LrWbf46
RMSxfEFeRBzL37zjoo2yChHH8gn5seNYfrMW5X775xw7juUb8vR2neb/jnz0
2tUP7ZgfAsiXPVsnFo8upQwLteewX//mzZ7tT/x2BiVVVNqz82l/Hdh8ZM2M
+m82hjmw+Qnk0YHdjxSaJn41psqB3Z/23ZHpQ1p40/gn4Y5MPwJ5dWT6Eu2q
zCXbqh2Z/pQPTswfEvWBLnZihBPzj0CenZi/JKvpdPTLv5yY/5QnYpYPcvvg
lKjsSDHLD4G8i1m+iDCiMty/Vsz9n8/OLJ/EVxw3tyvKmeWXQB+cWb7J6lt9
wQcfO7P8U15JmB9c4eaMwMD5ElyHvkjw++ZJbjMFTyW4P/THBc/X6H+ediza
BeeDPrng/JGFE/3D61zwftAvV7z/j/FlfsIYV9QH+uaK+t3WRn18ut4V9YX+
SVF/4eO2CQsXStEf6KMU/ZuUnTbeoUGK/kI/3dD/lNl23hdj3TAf0Fc3zM8p
ywOjlze6Yb6gv+6Yv+Yro0e5L3bHfEKf3TG/mrWX37v53B3zDf32wPxHjA0e
mrzEA/sBfcd1PrO9Xq1r8sB+Qf9l2L9FwR+Jmrxk2E/ggQz7a/LreptJiTLs
N/BBhv3fb33TKqtIhnwAXsiQHxPiHCzbumTIF+CHHPlTeS1c+Km3HPkEPJEj
vxJVh8z2rZQj34AvcuSfXVqzaedvcuQj8EaO/Dxe7TV4+hs58hX4o0D+Thuf
anxgrAL5DDxSIL8bd1016k1SIN+BTwrk/4bX1oKA3xX4PgCvFPh+yGaFGPJ6
/lsHfinx++KjOXrDOCXuDzxT4vlzzRt7g5OVOB/wTYnzd8WM6jl6Ron3A94p
8f47LiZ1G/cpUR/gnwr18/S40Bn6kQr1BR6qUP8bKeYdv6So0B/gowr9i60I
eGV2ToX+Ai9V6L+JV3ZbpF6F+QB+qjE/P21/0lLko8Z8AU/VmD+flmHNVmvU
mE/gqxrz+3BqQtOCYjXmG3irxvyvyDv7/Gy/GvsB/NVgf+xMTBrtJmqwX8Bj
DfbvWNT0Z4tTNdhP4LMG+zu1eGddyXkN9ht4rcH+N0iqn4gHNMgH4LcW+bE+
Uf04nmiRL8BzLfJHdndpzZW1WuQT8F2L/Do3sqhaWqJFvgHvtci/ORmGRwkC
HfIR+K9DfnY2Tq68zumQr/Ae6JC/2z/ZWiFP0yGf4X3QIb89cx/cT7qgQ77D
e6FD/l83eJSXGQ195/0Yiu/H36Dt5L8=
     "]]}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 12.566370614359172`}, {-2., 2.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.878839602786375*^9, {3.8788402273278637`*^9, 3.878840254605228*^9}, 
   3.8788407443649216`*^9, 3.878840888493204*^9, 3.8788957725479255`*^9, 
   3.878930278984606*^9, 3.8789303109496636`*^9, 3.878983778610504*^9, 
   3.8789844479945755`*^9, 3.8790998573849897`*^9},
 CellLabel->"Out[4]=",ExpressionUUID->"385b57d4-b0d1-421a-bbf5-204a21e53cf1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{"4", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"400", " ", "\[Pi]", " ", "t"}], "]"}]}], "\[Pi]"], "+", 
    FractionBox[
     RowBox[{"4", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"1200", " ", "\[Pi]", " ", "t"}], "]"}]}], 
     RowBox[{"3", " ", "\[Pi]"}]], "+", 
    FractionBox[
     RowBox[{"4", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"2000", " ", "\[Pi]", " ", "t"}], "]"}]}], 
     RowBox[{"5", " ", "\[Pi]"}]], "+", 
    FractionBox[
     RowBox[{"4", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"2800", " ", "\[Pi]", " ", "t"}], "]"}]}], 
     RowBox[{"7", " ", "\[Pi]"}]], "+", 
    FractionBox[
     RowBox[{"4", " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"3600", " ", "\[Pi]", " ", "t"}], "]"}]}], 
     RowBox[{"9", " ", "\[Pi]"}]]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", 
     FractionBox["1", "200"]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.878836988390314*^9, 3.8788370325420637`*^9}, {
  3.878837729518939*^9, 3.8788377298111205`*^9}, {3.878840855895384*^9, 
  3.878840856178749*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"b855b246-12d0-47d0-8985-ee016e650b68"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwUWHk4lV8XRSpJUiElypCIhCQJy5Qpmeep6+K6LpVSKo00l4SQhCbJFJIK
pVdJc+kXkXme70xIxfd+f91nPfu8++y9zt7nrH0VqHudg4UEBARk5gkI/P93
i8UE66hYm1HfUeo87aAC48Vbnt94VllhbHfQLm/zmotQ9Kk5dbLyg7H7yn9/
b6y+AY3dVgcCK5uN/+ukyo3K5UE7asEet8phY9HE9UkJyyvwOHqEYV/525jb
NE8vZOY9xv96D9tWLkB1vfnu/vSfYHveUJa7IIoRzQVJCh7NGCpr2sVxW4jr
4mJVKUtb0Bru2niNJ4YyU83pxedbEcDOCdgjKQHl9ofhj4M7YO1/2/7ZjmV4
VnRW+8p0N6SMr6naVK7AOVa2iKHcINYvoFu3qK2E+hWhOyERgzBpMKSH3VgJ
h+WTqrWvB8FgDDy4clgWmczZLrHgIVSnbl33XU8OyUe16hJvDePpJCfpodca
PMpNuftkZBSmfi2KUYlr8L3WdWSBFhOfX78pNf6wBr26V97uO8BE95Ub3+v0
FcByyE2PmmZCTNl8KX+5ImjzOs5o/WGB6piaqNeoBI8lBw0PfuWA9eSUwuwi
Zfx5dz/UUIiLw7Jhj95tV8bHRUzF6lVcXBnAf55PlKGkmLDPzpGL8mPDEkeT
12KbwpWCyEdcmPfU3zb/vBZ/vue2nXzPxVerl1piwipQuRc7INbJRe/Sa46Z
kSr4WtpxMU+UB/E8wwTCeR2+91xoZvvwcEN83ZoLl9ZBSLAxeM5eHpQPLClx
fL0ODUGyaTdieNiKgbpubVUwzInuHfd5eJP9bVd+qCpu1A+doT/lwV70OWf/
HVXUpMT1z3/HQ9CPq4uFl6hB7d1Cy28DPLANom99tlbDSyxdOP2LhyO3gzam
nFJD+L1vy3OF+YgP2+qgwlWDQ914Z9IaPioEe+Ot69ZjZLt/wiNnPsbdL9f6
z1HHAmtKr70fH1qFm/4e2KIOix8Jq8+E8JHrfib0zi11+B4hTpZH89FXoHH7
Wb06VjpLvS0/zccawR+NX+ZrgPJ3o4FLHB9pBWstpvdqYIS6aK1XBh8NAl+j
JbI1cPykdl/tPT4k3KMeqfzUgFveq4C6fD7sCuSHDMU2YOuLoJ1Rj/i4IPBO
3sVkAxzPGfk8f8bHG7e9bqEHNkBcss38VhUfAgXL407mbkByheYbxRo+DrvR
fxdIaCJu/9qUhV/4KMuX0HptQWLfsQP7/+ODO1tO+3lYE1z/PNFjP/jQcAvI
ZBdqYvFvJVW1Zj7o+QsahLs1Mf3L+F50Gx/Zs49EZaU2gvPmjdu+Tj66XL1N
tW024m2an5x4Dx+r8oUOWx3fiDKHE61OfXx4zOYX+T3aiEvKHgeNBvhIcnXp
j+zfiIb1r+v/G+RjsOHfoloxLay+rt27eJiPs7NOat9UtJDdkHltisRK63Ms
Wk200BQa+TNuhI9XrtO7Bry1wC88lfuFxLtO2h/lHdCCgm3vv+ck/pd3N/Vv
vBb8Mn798CTxzYaJR/PztJDVsk37PulPf9b2y9IaLVxZ6bTs7hAfjWq3huTa
tWC9viHWkYzngOvYHLVJLRwyc734qJ+PpSetVusu0YZFktGmt718lOTdNIC6
NqJyaq9e7ebDvoHjZrtdG04Pm0rEST6YM+b73HZp41CaQIEFydcltbQ4yhFt
BMn7pOiQfKq6Mh+EXdNGb8bRi80k329PmNREPdSGUIfPPYPvfAg1DP2O69bG
zLuamo0f+bg9YyiV9kcbfvGxi97W8mGslqh1T0oHf5Ut58i+4iP6xNaQChsd
7GN+vjqXrAeZvCuxbwJ18CzvxZFMsl6e1ndn1h3XwcXjXU+mCvjgq15q6H+k
g99XRDv+3eKDUd9iunTlJmR9mOsSdJYPkRlNPzndTTDOilinf4KPHNXTh1Xt
N0Fk/5b+n1F89BxXLzaO3YSXv7gzZ8n691Y9tipsZBNm6ipEHlmS8a5M3js2
RxfTfXamBsZ8DIgVvj4qpwub0fGvNzfzsY/XSo9z1IWKVUsKU4ms58ptTx4+
1UViRH5i/wwPT+3+7OTGbkZksuycbcU8LN0XffKg7BY8vuy+95wgD56BSd//
6W6B9qSxsOcEF1lu+WvP2W+BeHGMn8ooF2oGLZ9SY7Zg9Uz59aoGLkzmGMiU
D26BOtfDZewBF3tSfpdMP9ZHaLp4p58DFx8rDvectDMAN/lE+D4nDtyXyevp
0A3wSnTuMMWQg57wmot9pw2w2/CRzpV1HEyvFte2eW4AD5ot9d4MG2rn7p1c
un4bcm5OxUwUs1HWaV3/Zvs2GFNTfv/NYMNkK1vlUMA2tPa9f7DzEhueTP2v
rWnbUGZin1kfzMYF56+r7s83RFlUqt+NNWxIFkZGeCgZwv/mXLMVEmzcnrvi
zQIYQoxB12fPslBeHhi2J8oQNfOez97sYmFI/nfFln5D5J2WX702h4UDh7MW
jQgYwY/vJxyexoLAd/OAjFVGkLbYryFxmQWZs/Eigq5G6Gx2vxq5jwWrUSWP
j6+N4PPlu8VzMxa+W3zIP9ZhhD6JBm1BfRb8s/bMaE4b4efhMy15G1iIcqq4
f03bGKkpFLu1K1kQKvD/vX2nMe4eWsubkmAhXlh45xTdGF4rf4poi7CQ88x+
3Pe2MRbnHPqvbpIJnSXjVotfGKN05Yf5W7hMvGTcuPmqyRi33/Y9nzPMhO0b
Y07kmDGmlzdK6fUw0SjXZ6ayGNBrWrbpaysT1EMXU3+uJ3F3nMrnH0ywv2mO
XLIEiOdPpjZ+Y2LemSOJnOMA42GbitpbJpLa5fvv3AAoKgO7Xr5iQn7LG33X
J8DlrU3aFVVM5CeExs37D9j4X96+FZVMbB4R7ypnAimxJiMdT5noUmi5sVnY
BIGDR3wXlDGR87WwRnypCTJeWZxMe8RE+NGTrMHVJsgeLJu9XEzmp+q8/NUG
E+hNyMT0PmRiqkHZNH2bCX7USmRmFZL5xkwyIm1MIHEnu/dFARNnND8m23mY
wHCrX6sRiW1bM16uDTZBl7uvoAKJJS7sHZrZbwJv86gPwSRu1DVb+vOUCR4O
7chaSPrL6JY0fBRvAsX7wd1LyP2o8YPBlzJMcKnOfvRQEROSz0J/R+WR8d4T
apMtYeJt52hc4FMTFOsdFFlaysRhkT1rHGtMIBrXWu9F5qeuzX1s+M0EtRfY
6Xwy/w6v/VZq7SY4VCRQ1lrBRELseIvUiAmEIblXkuTPrCBqj9CkCb6+40ll
VDMxXj8lyJljCtWlYO57Q/L1NzqlVcIU/6JSN6a8Z8Jz7T/V93KmaL2WtXzu
FyaqogQd72wxRWWa2vV3jUxE3Drde8XCFHbXl8TItDGh+H7uoWgnU1iF55SV
djNxboVolkuYKXa8/kAhWEzom8Vpmxw2xXIxQQGtcSZGGOK1GmdNMeEcpjdA
6h+HF0uZc2+Z4u6CuuOrF5D1v0vWoPy7KdxqrKZzVVn4eD7zS3anKSKFnk+r
abNwrGR1QCLTFH4dmaZDW1noFlS+wJhnhvib1ioydizkZ2s0rjIwQ+e1jnlr
I1nw/VIUusDKDLsjUyUjjrMgPqH175eLGfp3p4hxzrMQabVZuW63GVYdefLx
dCYLhiNG+2PumCErqtm0/yMLXzc6iA+ImOOjR0xC8AY2+JX7LIubzBGjHGjb
P58Dq+sGLSX95nAUUjJ0XM5BRuScPaVj5tgnKeFTq0LaNVJSniy2wJK/fUve
bSftmeV9z60scG/khPnkadJ+ajb2/TMLXKYV3Tw/S9p930t/rLWAumpJPHU+
F3z9xPxP9aS9XeLZlDgXGTzF7185FvC5un2OiDxpp1oq/Fi3HVcorh4Z20j7
9itE9/XteEgxjeBFknYFd5fe+9txIddGMj+aC6sZ+cG+x9uhsnuxjn0MaX9a
Ij5Utx13Kt7ru8eTdtUGP/Z8smGVFAtcyPs4QziTx5GyhJ1luqn7Q3J9V/BZ
npIl5ATu+uIxab8xWTgOS7CWyvS8fknaRWX/Th+yxNTZK5tOkfe71WDv1b9n
LfFmvLLrQTO5vqZQaeaaJRwTu9mPOkj7MeMdgiWWyGoM3BU2RNo953cKvbTE
9teXe1ewSH+63/YLf7aExqSbWB6PtLMC0ucPWaK1c1d5yDRp/7Bec8GEJda9
9zmaOkP6yxl7JSpshdiPJ6nZQjzw/c8OL1pjBcuyLktfUt9afcvVl/S0Qm6d
ef8mGR4iElzoDcFWmBt/b8hClod0x5nryZFWyLLduFhXngfmN5dJyatWeFVw
YqpAiQepxBmVHxlW2C/a66erwoOxU557Sr4Vqo3K1dNVeUj4b+aJ1FsrWAgO
7fmnwUNFYl7/j3or8l0ryp7W5KHHyVUqtdsKqidf1jRo8SC2dNbCnWOF6de3
n1zW4WHz97wD0v+soO2bFrJalwf/JNfsRlFrLNW78/HqZh75Hs3Wp8pYY8eH
PfVtejw8Wpo/x0PFGiv9GdHz9Hlo+e66abmuNfaNlTwX28rDnGuz1CZTa9z5
JHGdQ2INl/yk6w7WaMyaJ1FswCPfU7fXHn7WkDpQuWHHNh5O1s/ylodZY4HC
3+kaEudey1f4edga9vvI1jbk4buLm1PaOWvU/brevYPEf5YJxHgmW6PkWJmi
D4mVG/JLZO5aI1mnhWpF4p3Jbl0/i63xdnfnSwkSR7kKSNyosibnHhWPZ6T/
25IF8Ppkjc8LUx22kfhDg9veFc3WoISm1mWQ8fGTBW41D1jD4uJ8oTYy/lVu
BV9vjFvj9+A2qd9kvtul3Ge8hGxwRIRnML6Fhz0/BDRXSthAftoq9wvJz/WU
Ar8WORt8jK9KOUvyV+3mfiVd3QbuZopYRfI7IiVY5b3VBtoNib2JJP/LGguY
K61ssCKZUTtAno9hqvuqVlcbSAVarJfdyAPNXdDuJtUGyaGD3hs38FDe6F4g
e4JcHxzgPEWef3eqYGvrZRu8OUCtfEjWh6hHoWjGDRuMUsO1LJR58GsSZKx6
YoOvOfL5Uqt5EPpZqCrHtEFxtNZGt2U8qKd5eLb/toFafPBOOQkeXD2FLmTO
t8W7bR8vfRDj4cFPj0E5JVv8pxa9+ttcHuyahXLkvW1x7cVA4F1Sbx288fBH
R4gt0tQcVqXxSf3l5Tn31kFbJNkfLzzI5oLb/DBodaItPCxCfEf6uUhp8VRa
894W3dLJue/ruciXfvxirMEWn1xP9PrVcVHtvMj9Xbct3IOG33V/5IL58dWF
PX9sofHqQdCzV1yYPV/PfqG5A97V7VIPirhg3/xb7pWyA3U+n9bMPceFpd9t
+2tUO7x9J/t5hyYXvjemB2l77fDik+6yQlUu9v1wjTE4ZofYalXLhUpkf+9c
UNadYgfrMee498vJ/jbav0Lrgx3yBotcdgqS+chb9H3euBNduwYvDOVxUOad
dfy24U78aB19MecWBx9Sp6QP2Owk3+Vt1huSORgXf2gjG7gTExbr3YpPcGA7
K1UcmroTB7i2ey65cjDROXhk3r+d0LpolLBHmIOiugvLOKL22J8ZObVsmo0Q
Qu1hk4w9PlwLymnlsPEzK6wrV9ceZTK5Yo2tbFT6cSx3hNtjqFE789oTNvbv
TOjaFG0PymTQSEghG+pG2tGrLtjDVfBONO0eGxmrIh+y7tlDmL9PZCCRjZOt
E8sSWu3xM2p4y/x9bOh/uv7w8LA9RAPmyVuGssGt1LcKmLTHm/nt858GsEFN
j47WWeaAP6XNneoubKy8JCspq+CARI674SY7NuqPvHg4Z6MDzpavPLJnOxsW
XjNdDbYOYLHWaZ3WZ+Ov9a3oKk8HZAnzhv102HiibyKZQ3NAhkev0F4NNlRk
Yq0OxZLfj7+M11Ngo2O+UveuBAccND8nwZZl4/pkTbR1lgM+u8su7pBmQ6Rp
btGKSgccuFbnE7qIjeq3OVZC7x2goPT43NwFbBx5atU98sMBPUKtg63CbOjk
DEXX9zpA6eSTdqYAGyMpFyVf8Bxgts20Wv8fC/fOri/KnnXAGdq8buI3C0WV
/ffeznOETKbE5dgJFi7pPOVWLnKEzcFhoZgxFmj554yKJR0RUHHt3HMuC2aK
HpfuyTrCyf78Th02C/Lp65quKzoi593DC/2jLEwvmVKKU3NERO4u6o9hFpou
vo84peWILCfqjOAQC2WCN6oObHHElcyBI2EDLCQcCRUNNXZEqeqF0SX9LITz
tnr4bXfEfqudgb96WbAOFc12snNEee6DESkSK3e3cLe7OEL5/sEzkT2kvvcq
MDLwdkS0gfAGcRK3fTt6STPAEQOlS1r6u1mosLZrUqQ74uDkt+hpEqdWr1Je
vtcRT66wJneQ6/frsyIWRjlCFwmbWkhsX1JVNXvMEW8ZQQvuk/utV40XHT/t
iJMzmfaFfSzMu+3vMXTJEewVAt85ZLy9yzdmtyU6Qt+jz2fvIAvVV2e539LI
fCrNitaT+WfM/2ZUe8sRlVaVZxRIfg6fvH2pIofcf2t6sguLBdfJiKaHDx2x
s2s0rprDgtZeU+W7ZY44Jndcms5nYdHgkn2pzx2Rema03uYXC12rKvdLvib3
/2H8QnOKhVJn6oGk9464X/Ho0fY/LLi/LD0U/8MRL9t4biJCbKiOex8Ra3OE
4oZAs8dz2fijNufopR5y/3jHZ/Fk/dxOcTlxjuMIozuNZ34sIfvr05+TwhOO
0AnMmARZf9sFs2Ni/zqi6ZPDuuaVZD2Fj585scAJ+/579TpFmQ1di5TLUUpO
yFPapqJmwMa8aKMr42pO+LZKoHUabDQX98fv13LCmNEoc4LslxOyekl7jJzw
4+PBh2HObLznN6bRPJwQe2P7oc272fC5I5PjftkJI7ffhz3MY0OzqfpBQ6IT
GqfajesfsSGwKDTPOc0JkQenxpdXspF9uKLQ/r4T5O+4VE9/ZIPt4P3YknBC
/eCssTibjdiZm9V6Y07otLufn6vPQZ7P6lZpH2dIaf4z02jmgHa6fP2BAGfQ
whwfG/ZyoFjgFP1fiDNy7d9Y2rM4SJ8+vSLugDN4C90TygW4iLsx5CEY74wq
gxdNXyS52Nv0qGG02hnzdgXI+RhyoTFrq2zzzhlZLw+v32zKxZBKX2TOF2f4
fIyMFrHkghIlvSygxRm302ZW3yDnb2epo06NY84weuLm5k7lYrOLxddqFReY
Sb9r6z5L3s/R7XLyG1xgKvl3fNUlLoruRu0+uskFnhT7fFtST6rwc8X0TFxw
KzuOfiyVC5nERTsKvFzQ3VHQo5nDRUN5TroIxQV7jM5eGs/jIrELI8E0F+RN
LRzNI/WmqNb+i2siXfDpotzJnjIu/nxtfJcS5wL5JofhmNdclE/sXT6W5ALj
x9vNXtRycUB+QYjjDRfQKlXqet+T79XubfMW5rhApvt7wO+vXOSmNLjRC11Q
N/day8B/XARX7b5fW+oC+1u6u6tJvdohdtviFOGC1/xPzXotXKTrbk1ur3WB
lsvmzfVtXHj4fu81+OyCmoj9D707ufhWIHz6108XYEJUbH0fyX995nfnThcI
7hA5vW+AC+s/eool/S443qmif4/Ut69sQ18x+C4wSrh97Q2TC/vPaxOdf7vg
lZzFaBv5Prft7KEYCLgi/v2p6hYuF4y6LC3F+a6gvZNpryLf8ylHHwFRcVe0
RDxYdG6ci3Pfl3/jSbqi5EiOwiby/Zd0bbjVLOuKDUP7R99McqHlsRN5aq7o
tjkwlULq5Zc/FyxO1HKFz46/7IY/XNh5v+04vMUVS+/MCk795aKlNbaIYkzu
9/7y0tl/XND9cMJ6uytc5uQJj5D6eqLjz04tO1ck6fgR5bNcnKGUy8m4uCIl
oEgjTICHpT0HWLNertATvr9VUJDUd4HaVYMUV9T272yMJrFmPyuuLsQVvh+e
/2oi8Qtavu+zPa6wfC4SL0Pqddshmsatg6R9mUeaIYl/hir9PXfMFWqq3yUs
SEwb7fy057QrpkqLJjRJPB6ecdP9kiti+tbb/SP9xbI9w4wTXbFrfbx0MYkX
R0htU0kj47+v6m9B4gzef6Lit1xh7OisWUXGuz4yvuXXfVdI/wxNWUHi8nHb
/PZCV9Qp12d7kflZRs2Prn3sikPXfkUcJ/NvmKyxeVjpitTurUvOkvxQj5xa
kfLKFcof59+OIPnjThsOH3vvCn3XGgMTkt8Tx36XB9W54nX9B8Hx31yIzTy5
YNfoivSMPTJxU2R9ndzvqdvuCnX6ZLYIeV5PY0cn54y6IlEr4l3xGBcWwrnv
RnmuyP4TW95Czj/fzwZdr59yRdeKpz9GOKTeutCud2+eG1RvejKej3JxTDR9
3uVFbrC0eO9ybJjsnzj3xv2Sbghfv3On0iDZj1frDpopuuGiwuZI5R4u/FJe
lXUbuUGss1f3TyMXI9InznywcIPu8w+bx0k9eDjNwPXRDjeUdBKJP75xkXzz
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
d/rNRfJ8WDZ7zcn8d/c+STe5QsXlJ2NK4m0kn9uPGrxIoGIPwfoc8ZMP9gOT
li3JVIT0OlIYDXxois6Lfnydih/uAc2/6/jYE/5pxcabVDzn3deX/0R+/zWh
Ij+LirmrZk831pLfa7l7qdylYoZS9Vahmvz+muzvO/epGM55tmSWrIe9v7rS
5PKoUF4QcHT3Yz5KPHL0bxRSccu5Y3V4IR/cirCfkiVU1EvLKkxn8xFxYmK5
2DMqzFU6O6qTyfVdz5+dr6Sikdn0d/IyHzyzGI85L6nYkJBu8Jys3/3zxa5P
vyHrZU6BbO8ePkpD/9OLek/FVbdKJ0uyH/ifUht5n6hwTjL4ouPFR2SCgvTw
dyrmu54SuG9K1gt/4ElQI1mPXddPqG3mY9y10K2rmeSnq++rriofB1ZsSWnq
oqLk24IX7WLk+qN/dV36qKgp+uQaPcPDr/ZXDV8HqRhIfvzsJoeHqLt2km/Z
VOSNJK8O+8bDU+GlZaZ8sj7PtnrIVPMwQWtyqfpF1o/dn2rrYh4OqVOvlf2l
woPwadGOI/V72aGl90QDEWq++KGcCQ/l0kal8uKBqBfmV7WR89HUYSHn9CWB
WMMxXiu3nIcjRlcSE2UCwbFxS1FgchH99q7EKZVAaG+d4m5J4OLYzy/ifmaB
sPj3u8cthoPyFbMXMrcHwvXlCP+jHQdj3lpzOqwD8VGJnPzJ+5bRnjTp7xCI
Z4t2zF2Wz4ZHj0cXxTcQYdFqu9xrWdBhdj8KigpEEsM20KphFHs2LNO4fyQQ
wiJiqaeTRpG3xyKn/1gg8j6PSf5yGMUaXk467XQgKu8u33r8/QgWTYSdpicE
YvG6o7Y2JcMYmv3lGp4fiAzlAeUNvoNQNl1XV/gwkOwnZfH94oPYFetpwyoJ
ROGNrlXzqgfQKPzcaM+zQPwKLTunpDCAmgWnVCLeBOJ8pUpueGsfspaJTkV2
BGJzZIbvap0euKyTv3l0aRBOjWoF/eP9xJluqxcFUkF4o2aR+FfvJ8pu7mtv
lQmCdXXfAxxtgqRE7WrD1UHgVZjmPxBsRONUWPZf9SD4qap+vDmvHp4fKx4e
3x6EaHedjZrMD/Df7VZ98nAQzDR+vuy9EUvqjZPdxUeDcCHd776FfijxsjtX
qOtEEFZGhDg0bL5KrHb/a2FyNgjJiTOfw02yiS7jex8EkoIw8yFavyD+KREo
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
bqynY3fUuViFXSzi+9tftSKadPharz1/2YVFvNF5MHRImw5wpne4WbOIXFFR
TXd9OixWulNFN7GIvZV15Ust6fheYnhBZBGL8J3LemJpQwfFfjZJfC6LsHYU
fRxtR4fW8clJxj8moThg8bDHmQ4vSumddRwmsVibmi/tTgcVh7ddGGISf4+e
fGDrRYf+jQvN6GESjUsq75TuoqOqevmhskYmUePblDVApeNlXcaVff8xiZIH
4zdX0uhY/epy49nPTCKTv+SGfSgdTv1Otrx3TOKS0cbU2HA6+Eu/ND+uYRKH
Lthde7qXDgeO+54vBJMIqg9NGNlPB7Pi27DRCybhJH/+inwUHc3pxSpzK5iE
cWj2JecjpP/9C6YUnzIJ9bJX588do6ND5a7a9cdMQma240zlSTq2Hvx9MuAR
k5hr+zeGHUsHfatXeUwxk+AnrzipeI4OT72+C5MPmURnp94x94t0aHvcv/26
kEl8Xu965FIcHcGhtx70FDCJioP7ol5epSPRvt3Yg8Q51fGR/CQ6Zu7FCqwh
8bWFhREqqXQs6Gw7aUjiU+4fdnvfoKOv9YBNIYl33xlgxGfQMdq+pncP6d+b
OYf++hYdqbPSn0+T+1ttUQieuEvHegmB4yNFTEI31pi6PocO8Q5R+t0SJqHw
xWeXfx4dOqOzU/mlTEJc5ohvUiEdOZfcUuY8YRJ/qKleb4vpWBJskVHwjEkM
PXzsPl1KJ++TNtrdSibxY+qbi+ZTkp+JFdaDVUzitTnbkVpBxvv9T9wRUp8U
xy+0T31BRzIz7ZhnLZPIaFbd8ZGgo25cz/P0ByYRtTdwu85bsp5XzT6v+M4k
AitPmdE+0PF6JDy/polJOM7NQvpnOmztk5yk25nE+ps/twrV05HxnOOdRNbP
8oFfenqNdHBeX5mqYDMJYe1luoxmkj+d7lqVX0yi4+1Oze+ddCicl9n4WYhF
fFoSpj6vl46J0TsdQqIsotz3gqrBAB39nbv6o5ewiCT+a8W7TDo0BlqZ6xVY
hKW8/vL9v+mIiP+YtducRWwKdZPM+UuH+8V7vYl2LGJN2f4lLbN0DPyKnWa7
sYhpm4cLzeaFghU7KuEQyiKKDioKLF0WivOsXJxLYhFndjsZXZYOhVm83XzD
LBbhHXwqWnhlKCZ1a2hq+SxirlvH+MSaUHxiXb2Z/ZrsL9304VbNUDzNkG7n
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
x9kbTz+o/R9jtl0y
       "]]},
     Annotation[#, "Charting`Private`Tag$9184#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->NCache[{{0, 
      Rational[1, 200]}, {-1.1823282069084344`, 1.1823264708361734`}}, {{
     0, 0.005}, {-1.1823282069084344`, 1.1823264708361734`}}],
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.8788370337944202`*^9, 3.8788377303417015`*^9, {3.878840227408569*^9, 
   3.8788402547036977`*^9}, 3.8788407444533663`*^9, 3.8788408567023263`*^9, 
   3.878840888586576*^9, 3.878895772711751*^9, 3.8789302792292027`*^9, 
   3.8789303110083704`*^9, 3.878983779023029*^9, 3.878984448173609*^9, 
   3.879099857810852*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"baca58b5-f4f1-4487-afc5-9bc219032db0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"4", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"10", " ", "\[Pi]", " ", "t"}], "]"}]}], "\[Pi]"], "+", 
     FractionBox[
      RowBox[{"4", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"30", " ", "\[Pi]", " ", "t"}], "]"}]}], 
      RowBox[{"3", " ", "\[Pi]"}]], "+", 
     FractionBox[
      RowBox[{"4", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"50", " ", "\[Pi]", " ", "t"}], "]"}]}], 
      RowBox[{"5", " ", "\[Pi]"}]], "+", 
     FractionBox[
      RowBox[{"4", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"70", " ", "\[Pi]", " ", "t"}], "]"}]}], 
      RowBox[{"7", " ", "\[Pi]"}]], "+", 
     FractionBox[
      RowBox[{"4", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"90", " ", "\[Pi]", " ", "t"}], "]"}]}], 
      RowBox[{"9", " ", "\[Pi]"}]]}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", "0.2"}], "}"}]}], "]"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"t", "->", " ", 
     FractionBox["t", "40"]}], ",", " ", 
    RowBox[{
     FractionBox["40", "200"], "=", "0.2"}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.8788401249534826`*^9, 3.878840159051257*^9}, {
   3.878840213497548*^9, 3.878840251422416*^9}, {3.8788405799131308`*^9, 
   3.878840581350463*^9}, {3.8788408592898517`*^9, 3.878840885297862*^9}, {
   3.8788409939975595`*^9, 3.87884100594417*^9}, 3.8788417268511925`*^9, {
   3.8788417881638308`*^9, 3.878841820051546*^9}, {3.8788419553044405`*^9, 
   3.8788419781664944`*^9}, {3.87884218546698*^9, 3.8788422520481997`*^9}, {
   3.8788424807710857`*^9, 3.8788424826820307`*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"a26e23a3-d954-407c-af6b-8358ff3f45fc"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
+zdg9t/SVKyLF37sO0uDMjGcq7QyFYdu/ODy+UnDn2MTgl/XpMKuKjyghklD
5yTVOUguFTbmDw5q0GlI9Wa17dyciszXeQ9Hp2jwEJvdwtBMhVvmGftPP2jY
n7sQlKSfirTD9n85J2iQNvxHPWySirD4sVuXx2hgfeY+yG2eihLFh1MrR2lo
clmaV2qVipt7Dp6bGaYhmnv58gtnUlGTmTEpSmrn5ytdxC+mQiHthv/1IZLv
VcXaW1xTcXcHz9YVpF7VLLnV81YqRopX9o5+p2HshEzwZt9U/DfX6blA6irm
Blrfo1RUBNPmDpC/DwpQPBgSngothGr2ktpu7dY8xKXi9SUH/jQyn2ax+nJW
aip8/8ab547QwLdX2yU5LxXMNRwfGGS9vf072o+Wp0LXeuTk1XEa8q5jKy+R
irJqw3xlsn9vfuPg8tepqNpT7b+e9OdY4l6aYyepdWMijtJoUNA6eHBNTyrM
BqeCKAwaFloP57V+J/tZd1fsIpuGd3ZWy+9MpiLaf6pr3wwNoqkXnzxnp+Ln
J4NalXkabMc9V1YspCK9qqjI5Df5feKSKMoWSENdH8tyKRcd6kVFz4RWp2HD
1nOGJbx0/Df9cs1WqTRUh1hUhJDzw3d7Yt3FzWnQf9Ht/2klOe/1C4n3NdOg
fS5uDuT8RXAul0vRS0Pv20MKPZJ0yD1Ul/92IA1X3jc0Rm6kA5GeKsec05C9
QU9eaQcdAV+CCt3c0/BhLcfXBdDxTipR48mdNMzvnKLOkufFNvmldmtQGrpa
b+RdPkLWUyCIXXlp8H9u4qHlQs7rm4RDW+hpmEhquZyXRcecYNH7fbNp6J7v
N+gqosPA4uVRx79puH5jflq8mo627nHr5BXpkHxxlLLQSp6nYTU7CdV0dI3/
M1hBJ8/r30ZXHtd0fDNLy87UYeCpxvjTPlY6RFT+GG7pYUA/9YLW+1/pOHfZ
okR/mIEJ0bEvzZwZyDZvMjWnMWDwa0SmYGUGmMusQis5mKASQ3k+6hmo21H7
uV2Eib0Hv72Rd8sA35mz607qMzFdf8pF6lYG4ur/U9bazUSiWr+wsE8GTrZe
91xqysTs6j7rX6EZSIj+K/Oc/P5O7e0ZfVuYAb0yS0sre/I9ufiJ042ZgV1i
r/u+3yd5r+dY2vn5DEBkcXrtI5LnDnzce4IjE1Z25tn7SZ7MV+l6YiScicTU
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
nH8VEVYCdU6xPHuSx8zUNYKSokrgG5FeOH+WjoeX2sQrE8h4QQ9/3dxDB1c/
h+p4fglMJTJ2Da+mY6bB6ZRJRwk2OHaa5ZTQUD5rVpLRVYL1cTZJNzLI93mz
Gr/AlxJMrnpr7xFLw0LEbOm7QVILK2Ur+NPI73k/QRt2CQRVhEIcbWhoiLtg
Xz1bgmdS3PVrzGnwfb+vcu1vMv5ujk9CxjTw6gk7fOcuRbdWc1S7Gg0CK+Jr
LomW4oelhXHFcpInDL1Xtq8pBeuMeU4hLw3BHuccVaVLYWA+Kf3rDxXC35VW
T8uXIurbnj13GFS8F13uZLW5FAmt3v9VTVARtp9ZX6laCp+W6fz9Q1SIlpZf
uqtTion7/31y6aaie+I5ZUC/FAWN9Uu43lMRve6umOHuUnRWnHlJf0vF8SN2
zqkmpWB3CYhpvaZC8oFRI9/+Uhzb5Mjb3UhFX428hJN5KW5l00M+1FMRz+S/
8vYIua7fmrG5horTm2gvt1qX4qFovv5QBRWyJzrXhJ4sheVCufpcKRVDISVX
2WfIfnn22l8upiLlZVTzMYdSBK35kYRCKhzmb0lVXCyFPp98hXs+FfJbT7mt
cSnFH4sr55flUTF+dtfr226lCK6csefJpSIzasO6bzdK4Xsp8pRdDhWX3vJd
3+VZCht23i8ZUm/mmGxJ9irF1RH+D0akpm5rl+b1KwX2Nni0kTrfqdDd8UEp
1jWvu1ZNxruaEN765nEpeCLuGawg86t13ZTdEkrWq2tk0VJABXvJiZshEaU4
sjxT+EcRFSX6O9uY0aUYDaz45kr25+4mK3c0vhQrbmwVsiP7107n/q/sRSlE
uu2o5dVUzPWOtYunlyKkaWv5DdK/SqHWDZ7ZpagSGnwRR/rraZx3qy+f9J8i
3buZ9F/vVmiHQQnZz50vXhvaqFjMu77pRUUpLBrU0vzI/asfsrrNXVuK6OVX
rM0+U7HLbJ1CS1MpvlJ+HxYfoYLLh+Ou8ptSNI3+9FgzRcXLsuEPQe2l+KXA
PerHpsJUJtvrcHcpYpWsPoVy0bDkWPDHkt5StKlx9mssI/n8oauy2EApXv28
vU1fhIYDbO3u3vFS2C45csZPgQaD+s5aRWopms8OVz9Rp0Hj0aWUm8xSbLPb
sfKvHg2Scgmuq36VIs1CPeXvYRomDvMu2y9Qhs9666q9fGnoW5fIeraiDGe9
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
TWo=
       "]]},
     Annotation[#, "Charting`Private`Tag$9258#1"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.2}, {-1.1823282069084338`, 1.1823264708361738`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.8788402243659334`*^9, 3.878840254754801*^9}, 
   3.878840582772498*^9, 3.878840744526044*^9, {3.8788408600144186`*^9, 
   3.8788408886429224`*^9}, {3.8788417984230947`*^9, 
   3.8788418205520334`*^9}, {3.878841960935977*^9, 3.878841978765279*^9}, {
   3.8788422025547075`*^9, 3.8788422525297194`*^9}, 3.8788424870395403`*^9, 
   3.8788957727549753`*^9, 3.8789302792949944`*^9, 3.8789303110516825`*^9, 
   3.878983779124216*^9, 3.878984448239622*^9, 3.879099857877674*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"09195ff3-8a5d-434a-8341-9bdd40b440cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"data", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"t", ",", 
        RowBox[{"1000", "*", 
         RowBox[{"Sin", "[", 
          RowBox[{"2", "*", "Pi", "*", "t", "*", 
           FractionBox["1000", "8000"]}], "]"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "7", ",", "1"}], "}"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"exemple", " ", "de", " ", "DSP", " ", "Calasique"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"data", "//", "MatrixForm"}], ",", "7"}], "]"}]}], "Input",
 CellChangeTimes->{{3.8788439748674765`*^9, 3.878844019016571*^9}, {
  3.8788441137446337`*^9, 3.878844156723624*^9}, {3.8788445672850604`*^9, 
  3.8788445999157777`*^9}, {3.8788454481852703`*^9, 3.8788454489185843`*^9}, {
  3.8788455245442953`*^9, 3.878845615650421*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"fe58c9a1-36e0-4541-b36a-3062a3dbb291"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "0"},
     {"1.`7.", "707.106781186547524409`7."},
     {"2.`7.", "1000.`7."},
     {"3.`7.", "707.106781186547524409`7."},
     {"4.`7.", "0"},
     {"5.`7.", 
      RowBox[{"-", "707.106781186547524409`7."}]},
     {"6.`7.", 
      RowBox[{"-", "1000.`7."}]},
     {"7.`7.", 
      RowBox[{"-", "707.106781186547524409`7."}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.878844019560608*^9, {3.8788441148183517`*^9, 3.878844157395917*^9}, {
   3.8788445845584755`*^9, 3.8788446010210423`*^9}, 3.87884552952378*^9, 
   3.8788455728976636`*^9, 3.878895773235283*^9, 3.8789302795075717`*^9, 
   3.8789303111458254`*^9, 3.8789837791890273`*^9, 3.8789844482855*^9, 
   3.879099857911584*^9},
 CellLabel->
  "Out[8]//MatrixForm=",ExpressionUUID->"576f4ca0-15e1-47e8-9444-\
7f01b1a38849"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataPlot", "=", 
  RowBox[{"ListPlot", "[", 
   RowBox[{"{", 
    RowBox[{
    "0", ",", "78", ",", "156", ",", "233", ",", "309", ",", "383", ",", 
     "454", ",", "522", ",", "588", ",", "649", ",", "707", ",", "760", ",", 
     "809", ",", "853", ",", "891", ",", "924", ",", "951", ",", "972", ",", 
     "988", ",", "997", ",", "1000", ",", "997", ",", "988", ",", "972", ",", 
     "951", ",", "924", ",", "891", ",", "853", ",", "809", ",", "760", ",", 
     "707", ",", "649", ",", "588", ",", "522", ",", "454", ",", "383", ",", 
     "309", ",", "233", ",", "156", ",", "78", ",", "0", ",", 
     RowBox[{"-", "78"}], ",", 
     RowBox[{"-", "156"}], ",", 
     RowBox[{"-", "233"}], ",", 
     RowBox[{"-", "309"}], ",", 
     RowBox[{"-", "383"}], ",", 
     RowBox[{"-", "454"}], ",", 
     RowBox[{"-", "522"}], ",", 
     RowBox[{"-", "588"}], ",", 
     RowBox[{"-", "649"}], ",", 
     RowBox[{"-", "707"}], ",", 
     RowBox[{"-", "760"}], ",", 
     RowBox[{"-", "809"}], ",", 
     RowBox[{"-", "853"}], ",", 
     RowBox[{"-", "891"}], ",", 
     RowBox[{"-", "924"}], ",", 
     RowBox[{"-", "951"}], ",", 
     RowBox[{"-", "972"}], ",", 
     RowBox[{"-", "988"}], ",", 
     RowBox[{"-", "997"}], ",", 
     RowBox[{"-", "1000"}], ",", 
     RowBox[{"-", "997"}], ",", 
     RowBox[{"-", "988"}], ",", 
     RowBox[{"-", "972"}], ",", 
     RowBox[{"-", "951"}], ",", 
     RowBox[{"-", "924"}], ",", 
     RowBox[{"-", "891"}], ",", 
     RowBox[{"-", "853"}], ",", 
     RowBox[{"-", "809"}], ",", 
     RowBox[{"-", "760"}], ",", 
     RowBox[{"-", "707"}], ",", 
     RowBox[{"-", "649"}], ",", 
     RowBox[{"-", "588"}], ",", 
     RowBox[{"-", "522"}], ",", 
     RowBox[{"-", "454"}], ",", 
     RowBox[{"-", "383"}], ",", 
     RowBox[{"-", "309"}], ",", 
     RowBox[{"-", "233"}], ",", 
     RowBox[{"-", "156"}], ",", 
     RowBox[{"-", "78"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8788956032322187`*^9, 3.878895611820882*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"bcc5d5cb-fd97-4b89-969c-e5d0a8133fac"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.011000000000000001`], 
    AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdkrlOQkEUhm+sLC0sKCzQGEOMMe67Mm5wXbmCD0AklsbCwsZiQgyE/TV4
BMp5DEoegUdwOd+Z5M4k8OfLf+7M2RZf3suvM1EUJb+/P5UzzUfpY/7/bUU0
moVr8Jxo9g2eF00+4Izo9BNeEK1+wVniLbyEX4eXReNveEU004Bzoq4JrxLf
gtdEh214XXTcgTdEJ114U3TUg7fIpw9vE6+8I5obwLuiRnkv8PeD7w+C+w+D
94+C/I6D/E+C+k5Fff1nor4/eVHfP0M8/bWw7/+5qM7Hwn5+F6I6Xwv7+V+K
6n5Y2O/PFcx+Wdifa/WdqHJNOCro/fgFfR+/qPnhFzV//Fjrw4erdfwb4fgb
H8408G+FXRMfjlv4d8LDNj487uDfC0+6+PCoh/9APn18eAJHj8K5AT5s4KgU
+KXg+yR9v0nS79sknZ9Lgvyf0vUZWOu3sPbHwb5/ZeLpr4G1/xbW+Tj1dX7s
jc7XwDp/3SvdD6d7pvvzDFfcD+ncrE8=
     "]]}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 80.}, {-1000., 1000.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.8788956132118826`*^9, 3.878895773290599*^9, 
  3.878930279560481*^9, 3.8789303111873207`*^9, 3.8789835470683765`*^9, 
  3.878983779305645*^9, 3.8789844483413496`*^9, 3.879099857960452*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"be00f5e4-f2cb-4977-8fbf-9b9af135e687"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "78", ",", "156", ",", "233", ",", "309", ",", "383", ",", "454", 
   ",", "522", ",", "588", ",", "649", ",", "707", ",", "760", ",", "809", 
   ",", "853", ",", "891", ",", "924", ",", "951", ",", "972", ",", "988", 
   ",", "997", ",", "1000", ",", "997", ",", "988", ",", "972", ",", "951", 
   ",", "924", ",", "891", ",", "853", ",", "809", ",", "760", ",", "707", 
   ",", "649", ",", "588", ",", "522", ",", "454", ",", "383", ",", "309", 
   ",", "233", ",", "156", ",", "78", ",", "0", ",", 
   RowBox[{"-", "78"}], ",", 
   RowBox[{"-", "156"}], ",", 
   RowBox[{"-", "233"}], ",", 
   RowBox[{"-", "309"}], ",", 
   RowBox[{"-", "383"}], ",", 
   RowBox[{"-", "454"}], ",", 
   RowBox[{"-", "522"}], ",", 
   RowBox[{"-", "588"}], ",", 
   RowBox[{"-", "649"}], ",", 
   RowBox[{"-", "707"}], ",", 
   RowBox[{"-", "760"}], ",", 
   RowBox[{"-", "809"}], ",", 
   RowBox[{"-", "853"}], ",", 
   RowBox[{"-", "891"}], ",", 
   RowBox[{"-", "924"}], ",", 
   RowBox[{"-", "951"}], ",", 
   RowBox[{"-", "972"}], ",", 
   RowBox[{"-", "988"}], ",", 
   RowBox[{"-", "997"}], ",", 
   RowBox[{"-", "1000"}], ",", 
   RowBox[{"-", "997"}], ",", 
   RowBox[{"-", "988"}], ",", 
   RowBox[{"-", "972"}], ",", 
   RowBox[{"-", "951"}], ",", 
   RowBox[{"-", "924"}], ",", 
   RowBox[{"-", "891"}], ",", 
   RowBox[{"-", "853"}], ",", 
   RowBox[{"-", "809"}], ",", 
   RowBox[{"-", "760"}], ",", 
   RowBox[{"-", "707"}], ",", 
   RowBox[{"-", "649"}], ",", 
   RowBox[{"-", "588"}], ",", 
   RowBox[{"-", "522"}], ",", 
   RowBox[{"-", "454"}], ",", 
   RowBox[{"-", "383"}], ",", 
   RowBox[{"-", "309"}], ",", 
   RowBox[{"-", "233"}], ",", 
   RowBox[{"-", "156"}], ",", 
   RowBox[{"-", "78"}]}], "}"}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"dfa26b34-6cd7-4281-a40e-c31760c48070"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "78", ",", "156", ",", "233", ",", "309", ",", "383", ",", "454", 
   ",", "522", ",", "588", ",", "649", ",", "707", ",", "760", ",", "809", 
   ",", "853", ",", "891", ",", "924", ",", "951", ",", "972", ",", "988", 
   ",", "997", ",", "1000", ",", "997", ",", "988", ",", "972", ",", "951", 
   ",", "924", ",", "891", ",", "853", ",", "809", ",", "760", ",", "707", 
   ",", "649", ",", "588", ",", "522", ",", "454", ",", "383", ",", "309", 
   ",", "233", ",", "156", ",", "78", ",", "0", ",", 
   RowBox[{"-", "78"}], ",", 
   RowBox[{"-", "156"}], ",", 
   RowBox[{"-", "233"}], ",", 
   RowBox[{"-", "309"}], ",", 
   RowBox[{"-", "383"}], ",", 
   RowBox[{"-", "454"}], ",", 
   RowBox[{"-", "522"}], ",", 
   RowBox[{"-", "588"}], ",", 
   RowBox[{"-", "649"}], ",", 
   RowBox[{"-", "707"}], ",", 
   RowBox[{"-", "760"}], ",", 
   RowBox[{"-", "809"}], ",", 
   RowBox[{"-", "853"}], ",", 
   RowBox[{"-", "891"}], ",", 
   RowBox[{"-", "924"}], ",", 
   RowBox[{"-", "951"}], ",", 
   RowBox[{"-", "972"}], ",", 
   RowBox[{"-", "988"}], ",", 
   RowBox[{"-", "997"}], ",", 
   RowBox[{"-", "1000"}], ",", 
   RowBox[{"-", "997"}], ",", 
   RowBox[{"-", "988"}], ",", 
   RowBox[{"-", "972"}], ",", 
   RowBox[{"-", "951"}], ",", 
   RowBox[{"-", "924"}], ",", 
   RowBox[{"-", "891"}], ",", 
   RowBox[{"-", "853"}], ",", 
   RowBox[{"-", "809"}], ",", 
   RowBox[{"-", "760"}], ",", 
   RowBox[{"-", "707"}], ",", 
   RowBox[{"-", "649"}], ",", 
   RowBox[{"-", "588"}], ",", 
   RowBox[{"-", "522"}], ",", 
   RowBox[{"-", "454"}], ",", 
   RowBox[{"-", "383"}], ",", 
   RowBox[{"-", "309"}], ",", 
   RowBox[{"-", "233"}], ",", 
   RowBox[{"-", "156"}], ",", 
   RowBox[{"-", "78"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8788957733169875`*^9, 3.8789302796007204`*^9, 
  3.878930311213862*^9, 3.878983779367057*^9, 3.8789844483812428`*^9, 
  3.879099857994362*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"51683fd1-b7a1-4b57-8a00-6da77fd8b8b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Total", "[", 
  RowBox[{"{", 
   RowBox[{
   "0", ",", "78", ",", "156", ",", "233", ",", "309", ",", "383", ",", "454",
     ",", "522", ",", "588", ",", "649", ",", "707", ",", "760", ",", "809", 
    ",", "853", ",", "891", ",", "924", ",", "951", ",", "972", ",", "988", 
    ",", "997", ",", "1000", ",", "997", ",", "988", ",", "972", ",", "951", 
    ",", "924", ",", "891", ",", "853", ",", "809", ",", "760", ",", "707", 
    ",", "649", ",", "588", ",", "522", ",", "454", ",", "383", ",", "309", 
    ",", "233", ",", "156", ",", "78", ",", "0", ",", 
    RowBox[{"-", "78"}], ",", 
    RowBox[{"-", "156"}], ",", 
    RowBox[{"-", "233"}], ",", 
    RowBox[{"-", "309"}], ",", 
    RowBox[{"-", "383"}], ",", 
    RowBox[{"-", "454"}], ",", 
    RowBox[{"-", "522"}], ",", 
    RowBox[{"-", "588"}], ",", 
    RowBox[{"-", "649"}], ",", 
    RowBox[{"-", "707"}], ",", 
    RowBox[{"-", "760"}], ",", 
    RowBox[{"-", "809"}], ",", 
    RowBox[{"-", "853"}], ",", 
    RowBox[{"-", "891"}], ",", 
    RowBox[{"-", "924"}], ",", 
    RowBox[{"-", "951"}], ",", 
    RowBox[{"-", "972"}], ",", 
    RowBox[{"-", "988"}], ",", 
    RowBox[{"-", "997"}], ",", 
    RowBox[{"-", "1000"}], ",", 
    RowBox[{"-", "997"}], ",", 
    RowBox[{"-", "988"}], ",", 
    RowBox[{"-", "972"}], ",", 
    RowBox[{"-", "951"}], ",", 
    RowBox[{"-", "924"}], ",", 
    RowBox[{"-", "891"}], ",", 
    RowBox[{"-", "853"}], ",", 
    RowBox[{"-", "809"}], ",", 
    RowBox[{"-", "760"}], ",", 
    RowBox[{"-", "707"}], ",", 
    RowBox[{"-", "649"}], ",", 
    RowBox[{"-", "588"}], ",", 
    RowBox[{"-", "522"}], ",", 
    RowBox[{"-", "454"}], ",", 
    RowBox[{"-", "383"}], ",", 
    RowBox[{"-", "309"}], ",", 
    RowBox[{"-", "233"}], ",", 
    RowBox[{"-", "156"}], ",", 
    RowBox[{"-", "78"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.8788958018952675`*^9, 3.8788958105648136`*^9}},
 NumberMarks->False,
 CellLabel->"In[11]:=",ExpressionUUID->"6f953b5b-8339-4e72-b72d-ba2fd099bf66"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.878895790394349*^9, 3.878895811420839*^9}, 
   3.8789302796097555`*^9, 3.878930311220815*^9, 3.8789837794304266`*^9, 
   3.878984448415206*^9, 3.879099858023282*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"36c162f4-497d-4a9d-93ed-fde0391d7eaf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  FractionBox[
   RowBox[{"4", "*", "V"}], "\[Pi]"], "*", 
  RowBox[{"Sum", "[", 
   RowBox[{
    RowBox[{
     FractionBox["1", 
      RowBox[{
       RowBox[{"2", "p"}], "+", "1"}]], "*", 
     RowBox[{"Sin", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", "p"}], "+", "1"}], ")"}], "*", "2", "\[Pi]", "*", "f", 
       "*", "t"}], "]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"p", ",", "0", ",", "4"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"f", "=", "200"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"V", "=", "2"}], ";"}]}], "Input",
 CellChangeTimes->{{3.87892998164161*^9, 3.878930019804781*^9}, {
  3.878930081778327*^9, 3.878930146650318*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"f15e3a61-b65d-4ba3-82cf-b1a0af83f00e"],

Cell[BoxData[
 FractionBox[
  RowBox[{"4", " ", "V", " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"2", " ", "f", " ", "\[Pi]", " ", "t"}], "]"}], "+", 
     RowBox[{
      FractionBox["1", "3"], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"6", " ", "f", " ", "\[Pi]", " ", "t"}], "]"}]}], "+", 
     RowBox[{
      FractionBox["1", "5"], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"10", " ", "f", " ", "\[Pi]", " ", "t"}], "]"}]}], "+", 
     RowBox[{
      FractionBox["1", "7"], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"14", " ", "f", " ", "\[Pi]", " ", "t"}], "]"}]}], "+", 
     RowBox[{
      FractionBox["1", "9"], " ", 
      RowBox[{"Sin", "[", 
       RowBox[{"18", " ", "f", " ", "\[Pi]", " ", "t"}], "]"}]}]}], ")"}]}], 
  "\[Pi]"]], "Output",
 CellChangeTimes->{{3.87893010953478*^9, 3.8789301474063253`*^9}, 
   3.8789302796466866`*^9, 3.8789303112520137`*^9, 3.8789837794918985`*^9, 
   3.8789844484573803`*^9, 3.879099858052207*^9},
 CellLabel->"Out[12]=",ExpressionUUID->"47a170a6-6f4c-4af8-af19-d8fe9227db12"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox["1", "\[Pi]"], 
   RowBox[{"8", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"400", " ", "\[Pi]", " ", "t"}], "]"}], "+", 
      RowBox[{
       FractionBox["1", "3"], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"1200", " ", "\[Pi]", " ", "t"}], "]"}]}], "+", 
      RowBox[{
       FractionBox["1", "5"], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2000", " ", "\[Pi]", " ", "t"}], "]"}]}], "+", 
      RowBox[{
       FractionBox["1", "7"], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2800", " ", "\[Pi]", " ", "t"}], "]"}]}], "+", 
      RowBox[{
       FractionBox["1", "9"], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"3600", " ", "\[Pi]", " ", "t"}], "]"}]}]}], ")"}]}]}], "//", 
  "Expand"}]], "Input",
 CellChangeTimes->{{3.878930236173171*^9, 3.8789302417143307`*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"bbda90e7-d553-43bf-b649-373f884760b6"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"8", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"400", " ", "\[Pi]", " ", "t"}], "]"}]}], "\[Pi]"], "+", 
  FractionBox[
   RowBox[{"8", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"1200", " ", "\[Pi]", " ", "t"}], "]"}]}], 
   RowBox[{"3", " ", "\[Pi]"}]], "+", 
  FractionBox[
   RowBox[{"8", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"2000", " ", "\[Pi]", " ", "t"}], "]"}]}], 
   RowBox[{"5", " ", "\[Pi]"}]], "+", 
  FractionBox[
   RowBox[{"8", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"2800", " ", "\[Pi]", " ", "t"}], "]"}]}], 
   RowBox[{"7", " ", "\[Pi]"}]], "+", 
  FractionBox[
   RowBox[{"8", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"3600", " ", "\[Pi]", " ", "t"}], "]"}]}], 
   RowBox[{"9", " ", "\[Pi]"}]]}]], "Output",
 CellChangeTimes->{3.878930242215551*^9, 3.8789302796548033`*^9, 
  3.8789303112840753`*^9, 3.878983779570402*^9, 3.878984448494421*^9, 
  3.8790998580821314`*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"1f9c6afb-540e-4e56-921b-0a0df224e5f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox[
      RowBox[{"4", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"400", " ", "\[Pi]", " ", "t"}], "]"}]}], "\[Pi]"], "+", 
     FractionBox[
      RowBox[{"4", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"1200", " ", "\[Pi]", " ", "t"}], "]"}]}], 
      RowBox[{"3", " ", "\[Pi]"}]], "+", 
     FractionBox[
      RowBox[{"4", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2000", " ", "\[Pi]", " ", "t"}], "]"}]}], 
      RowBox[{"5", " ", "\[Pi]"}]], "+", 
     FractionBox[
      RowBox[{"4", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2800", " ", "\[Pi]", " ", "t"}], "]"}]}], 
      RowBox[{"7", " ", "\[Pi]"}]], "+", 
     FractionBox[
      RowBox[{"4", " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"3600", " ", "\[Pi]", " ", "t"}], "]"}]}], 
      RowBox[{"9", " ", "\[Pi]"}]]}], "/.", 
    RowBox[{"t", "->", " ", 
     FractionBox["t", "8000"]}]}], "//", "FullSimplify"}], "//", 
  "Expand"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"a4549021-4792-4b21-8568-a143ff1eecc0"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"4", " ", 
    RowBox[{"Sin", "[", 
     FractionBox[
      RowBox[{"\[Pi]", " ", "t"}], "20"], "]"}]}], "\[Pi]"], "+", 
  FractionBox[
   RowBox[{"4", " ", 
    RowBox[{"Sin", "[", 
     FractionBox[
      RowBox[{"3", " ", "\[Pi]", " ", "t"}], "20"], "]"}]}], 
   RowBox[{"3", " ", "\[Pi]"}]], "+", 
  FractionBox[
   RowBox[{"4", " ", 
    RowBox[{"Sin", "[", 
     FractionBox[
      RowBox[{"\[Pi]", " ", "t"}], "4"], "]"}]}], 
   RowBox[{"5", " ", "\[Pi]"}]], "+", 
  FractionBox[
   RowBox[{"4", " ", 
    RowBox[{"Sin", "[", 
     FractionBox[
      RowBox[{"7", " ", "\[Pi]", " ", "t"}], "20"], "]"}]}], 
   RowBox[{"7", " ", "\[Pi]"}]], "+", 
  FractionBox[
   RowBox[{"4", " ", 
    RowBox[{"Sin", "[", 
     FractionBox[
      RowBox[{"9", " ", "\[Pi]", " ", "t"}], "20"], "]"}]}], 
   RowBox[{"9", " ", "\[Pi]"}]]}]], "Output",
 CellChangeTimes->{{3.8789302741378007`*^9, 3.878930279842656*^9}, 
   3.8789303114746246`*^9, 3.8789837801659527`*^9, 3.8789844487782507`*^9, 
   3.879099858472085*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"47f58bde-6963-479e-8813-cd0b3a41f40a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"4", " ", 
    RowBox[{"Sin", "[", 
     FractionBox[
      RowBox[{"\[Pi]", " ", "t"}], "20"], "]"}]}], "\[Pi]"], "+", 
  FractionBox[
   RowBox[{"4", " ", 
    RowBox[{"Sin", "[", 
     FractionBox[
      RowBox[{"3", " ", "\[Pi]", " ", "t"}], "20"], "]"}]}], 
   RowBox[{"3", " ", "\[Pi]"}]], "+", 
  FractionBox[
   RowBox[{"4", " ", 
    RowBox[{"Sin", "[", 
     FractionBox[
      RowBox[{"\[Pi]", " ", "t"}], "4"], "]"}]}], 
   RowBox[{"5", " ", "\[Pi]"}]], "+", 
  FractionBox[
   RowBox[{"4", " ", 
    RowBox[{"Sin", "[", 
     FractionBox[
      RowBox[{"7", " ", "\[Pi]", " ", "t"}], "20"], "]"}]}], 
   RowBox[{"7", " ", "\[Pi]"}]], "+", 
  FractionBox[
   RowBox[{"4", " ", 
    RowBox[{"Sin", "[", 
     FractionBox[
      RowBox[{"9", " ", "\[Pi]", " ", "t"}], "20"], "]"}]}], 
   RowBox[{"9", " ", "\[Pi]"}]]}]], "Output",
 CellChangeTimes->{{3.8789302741378007`*^9, 3.878930279842656*^9}, 
   3.8789303114746246`*^9},ExpressionUUID->"17593516-3e7b-47bc-a2a1-\
daef5377ebf8"]], "WolframAlphaLong",
 CellChangeTimes->{{3.8789315496438494`*^9, 3.8789315508961043`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"a26c2631-52db-42c2-b86b-05ca4247a3c3"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "(4 Sin[(\[Pi] t)/20])/\[Pi] + (4 Sin[(3 \[Pi] t)/20])/(3 \[Pi]) + (4 \
Sin[(\[Pi] t)/4])/(5 \[Pi]) + (\n 4 Sin[(7 \[Pi] t)/20])/(7 \[Pi]) + (4 \
Sin[(9 \[Pi] t)/20])/(9 \[Pi])", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "(4 Sin[(Pi t)/20])/Pi + (4 Sin[(3 Pi t)/20])/(3 Pi) + (4 Sin[(Pi \
t)/4])/(5 Pi) + (4 Sin[(7 Pi t)/20])/(7 Pi) + (4 Sin[(9 Pi t)/20])/(9 Pi)"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               FractionBox[
                TagBox[
                 RowBox[{"4", " ", 
                   RowBox[{"sin", "(", 
                    FractionBox[
                    TagBox[
                    RowBox[{"\[Pi]", " ", "t"}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "20"], 
                    ")"}]}], PolynomialForm[#, TraditionalOrder -> False]& ], 
                "\[Pi]"], "+", 
               FractionBox[
                TagBox[
                 RowBox[{"4", " ", 
                   RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["1", "20"], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"3", " ", "\[Pi]", " ", "t"}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
                    ")"}]}], PolynomialForm[#, TraditionalOrder -> False]& ], 
                RowBox[{"3", " ", "\[Pi]"}]], "+", 
               FractionBox[
                TagBox[
                 RowBox[{"4", " ", 
                   RowBox[{"sin", "(", 
                    FractionBox[
                    TagBox[
                    RowBox[{"\[Pi]", " ", "t"}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "4"], 
                    ")"}]}], PolynomialForm[#, TraditionalOrder -> False]& ], 
                RowBox[{"5", " ", "\[Pi]"}]], "+", 
               FractionBox[
                TagBox[
                 RowBox[{"4", " ", 
                   RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["1", "20"], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"7", " ", "\[Pi]", " ", "t"}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
                    ")"}]}], PolynomialForm[#, TraditionalOrder -> False]& ], 
                RowBox[{"7", " ", "\[Pi]"}]], "+", 
               FractionBox[
                TagBox[
                 RowBox[{"4", " ", 
                   RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["1", "20"], " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"9", " ", "\[Pi]", " ", "t"}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
                    ")"}]}], PolynomialForm[#, TraditionalOrder -> False]& ], 
                RowBox[{"9", " ", "\[Pi]"}]]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(4 Sin[(Pi t)/20])/Pi + (4 Sin[(3 Pi t)/20])/(3 Pi) + (4 \
Sin[(Pi t)/4])/(5 Pi) + (4 Sin[(7 Pi t)/20])/(7 Pi) + (4 Sin[(9 Pi t)/20])/(9 \
Pi), {t, -40, 40}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2914$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2913$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2913$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2914$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1383388$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2913$\
1383393$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2914$1383394$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2914$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2913$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1383388$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2913$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2913$\
1383393$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2914$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2914$\
1383394$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1383365[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][(4/Pi) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3]/Pi) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5]/Pi) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7]/
                    Pi) Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9]/Pi) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t], {$CellContext`t, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2913$$], 
                    (
                    Piecewise[{{
                    0. + 42.76179870598789 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    42.76179870598789 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2913$$], \
-40], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2913$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2914$$]], 
                    (
                    Piecewise[{{
                    0. + 42.76179870598789 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 42.76179870598789 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2913$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2914$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2913$$ + 
                    Rational[2, 25], 
                    CalculateUtilities`GraphicsUtilities`Private`max2914$$]], 
                    40]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    Ticks -> {{{-40, -40}, {-20, -20}, {0, 0}, {20, 20}, {40, 
                    40}}, Automatic}, PlotRange -> {Full, Automatic}, 
                    LabelStyle -> {}, Ticks -> Automatic, ImageSize -> 
                    Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2913$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2914$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1383365]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1383365[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1383365[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMNIo0viABHYxJA0pSvteLL42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13tyJKO03+\
v19FVrPkhO0xt4emzNSM5zWQj67jRXoDWTIr2Cz25bE4PZA05+APW+69a8l2pOjD+/\
wvcJTwpODHw1jDPDQE/\
3FckzlujaM1bs2P5kymVCOPsJT3eGL4fD3V0Pg7GMiTGghB62hcwzRTSkPQS6Zs1bTsQ3f3xUHj8Vn\
MfwvQCRgH5gvRNFqIWRgnDMJ/jWy83UXUzMEEGJohdOk5PnqO0F2igmZhOY5/jG+WTttAUmaqY9N/\
dKbjYpyId/Ex/I2MXkPS5pd3YEhoVxyeg7K6t/zt0Az6/bwit5sp44zO8NR96IYcegV+\
l81rpOnpGqa130C64uar5sNcjzp0z9v3TItFkN43nbMGB+ZGu8Xnur8C/\
awsscu34h7vvWfPaOEnDdcKgE91HSgi+iaKY88BJtn67OrcNj3Kn4jtEZUsEKJ7Jxlv3i+\
uNhBV5vCjHWbroF6Yh6BkSQg3VRx+\
0emzEzyogiiQVeXNcvm2wi61AC7mxfeyYoswPME7JpeUJzkC7VnZgk+/\
JHxa3kcqbJkPcDYWAGaqPob2F9lCVX0IkMjCTGC5p6DeawSmpMVLDsByVInBPBEJL9sh/\
3zT9crgRSta9QXcqzOHClOQ1Pol8W+BDEzGTNHTtwdAW3LWYTyZNadRFL0+Vpsz2m+\
02mGzc0B3ooCaElCR/o3abQbQp/dVNY2YO7NaFbE7o1oVsTujXh/10TXMT4r/QbRZK4ng=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(4 Sin[(Pi t)/20])/Pi + (4 Sin[(3 Pi t)/20])/(3 Pi) + (4 \
Sin[(Pi t)/4])/(5 Pi) + (4 Sin[(7 Pi t)/20])/(7 Pi) + (4 Sin[(9 Pi t)/20])/(9 \
Pi), {t, -160, 160}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max2916$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min2915$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2915$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2916$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1383485$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min2915$\
1383486$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max2916$1383487$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max2916$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min2915$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1383485$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min2915$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2915$\
1383486$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max2916$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max2916$\
1383487$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$1383464[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], 
                    HoldAll][(4/Pi) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3]/Pi) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5]/Pi) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7]/
                    Pi) Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9]/Pi) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t], {$CellContext`t, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2915$$], 
                    (
                    Piecewise[{{
                    0. + 171.04719482395157` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    171.04719482395157` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min2915$$], \
-160], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min2915$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max2916$$]], 
                    (
                    Piecewise[{{
                    0. + 171.04719482395157` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    171.04719482395157` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min2915$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max2916$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min2915$$ + 
                    Rational[8, 25], 
                    CalculateUtilities`GraphicsUtilities`Private`max2916$$]], 
                    160]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min2915$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max2916$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$1383464]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1383464[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$1383464[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVtuO0zAQbSn3O/wBEs9ISyvBCxLQZZeVFihJee9s4iQWrh1sZy/\
8PHjsJmm23UoxXUCr9GFUT5rjmTNnpvPsSARJv9frqevGfBQsTm7h6akxYzHPRcHjD6e5JEpRwZNr+\
OyuMSHRu4TBGYmd76Yxe0LOQbvzG3wfWFQw0OSbpoxqStRsX0Ke0UjVnomkx+\
YnMyYiYPQneb4zfD0cvRo5GIxlAloTydWwLWSeSVAk6SHQDWPeM+\
Df3fFJefxcMBaSHwXhEVGPjHcqITYwggPDfLxvvdpM3cfENPAYZHzpNFl5jtteoLSkPJ2SeY5vXEzW\
TltgkKly3DwoudmkIBf+bXwgQhuT89ik7dkS6BfGFaPvvKz+OXcDPL9tCy/FyXriML93DHkDTY+\
JWqXzRes6OUaqrrXRL7i6rPmy1SAvnjL1/9IhVXo1jJdtwyDzI1Pj9dpbhR+1hRc5dv1C3A+N+\
eIcJeC64VAJ7pOIC7aIopnywEm0fboqNw6Hca/iO0SnTwUrnMDEWfaL7Y/\
HFXi9KYRYu9kWpMPrGRCQnBhXbLndpSnV4wwkRAZ4cV2/\
bLKpqEPxuLN97SmPqRlgjpBNyxOag2Sp7qCj7OsfFbeSy7kmQ94PuCYpkRtFfwfrIw25PJ4Kz0hCvK\
CpV28Oq6QmIL1lPyhBwhw4RUj6y3zsN/dwuRJI1b5EdUnH4sCW5tQ/\
iX5Z4EPCU501d2zP0eXdtphNIE5q1QU0SZanzfaY7jeZbtzQHOi+JPiWxH+gd5tCtyn81U1hZQ/\
u1oRuTejWhG5N6NaE/3dNsBHjv9JvUg24jg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigFactor[(4 Sin[(Pi t)/20])/Pi + (4 Sin[(3 Pi t)/20])/(3 Pi) + (4 \
Sin[(Pi t)/4])/(5 Pi) + (4 Sin[(7 Pi t)/20])/(7 Pi) + (4 Sin[(9 Pi t)/20])/(9 \
Pi)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FractionBox[
             RowBox[{"4", " ", 
               RowBox[{"sin", "(", 
                 FractionBox[
                  RowBox[{"\[Pi]", " ", "t"}], "20"], ")"}], " ", 
               RowBox[{"(", 
                 RowBox[{
                   RowBox[{"496", " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "10"], ")"}]}], "+", 
                   RowBox[{"286", " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "5"], ")"}]}], "+", 
                   RowBox[{"160", " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]", " ", "t"}], "10"], ")"}]}], 
                   "+", 
                   RowBox[{"70", " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "t"}], "5"], ")"}]}], "+",
                    "563"}], ")"}]}], 
             RowBox[{"315", " ", "\[Pi]"}]], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Factor[(4 Sin[(Pi t)/20])/Pi + (4 Sin[(3 Pi t)/20])/(3 Pi) + (4 \
Sin[(Pi t)/4])/(5 Pi) + (4 Sin[(7 Pi t)/20])/(7 Pi) + (4 Sin[(9 Pi t)/20])/(9 \
Pi)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FractionBox[
             RowBox[{"4", " ", 
               RowBox[{"(", 
                 RowBox[{
                   RowBox[{"315", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "20"], ")"}]}], "+", 
                   RowBox[{"105", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                   "+", 
                   RowBox[{"63", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "4"], ")"}]}], "+", 
                   RowBox[{"45", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"7", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                   "+", 
                   RowBox[{"35", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"9", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}]}], 
                 ")"}]}], 
             RowBox[{"315", " ", "\[Pi]"}]], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FractionBox[
             RowBox[{
               RowBox[{"4", " ", 
                 RowBox[{"sin", "(", 
                   FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "20"], ")"}]}], "+", 
               RowBox[{
                 FractionBox["4", "3"], " ", 
                 RowBox[{"sin", "(", 
                   FractionBox[
                    RowBox[{"3", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
               "+", 
               RowBox[{
                 FractionBox["4", "5"], " ", 
                 RowBox[{"sin", "(", 
                   FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "4"], ")"}]}], "+", 
               RowBox[{
                 FractionBox["4", "7"], " ", 
                 RowBox[{"sin", "(", 
                   FractionBox[
                    RowBox[{"7", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
               "+", 
               RowBox[{
                 FractionBox["4", "9"], " ", 
                 RowBox[{"sin", "(", 
                   FractionBox[
                    RowBox[{"9", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}]}], 
             "\[Pi]"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {"name" -> "More", "input" -> "AlternateForm__More"}, {}]}]}],
    Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Reduced trigonometric form", "scanner" -> 
     "Simplification", "id" -> "TrigReduce", "position" -> "400", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigReduce[(4 Sin[(Pi t)/20])/Pi + (4 Sin[(3 Pi t)/20])/(3 Pi) + (4 \
Sin[(Pi t)/4])/(5 Pi) + (4 Sin[(7 Pi t)/20])/(7 Pi) + (4 Sin[(9 Pi t)/20])/(9 \
Pi)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{
                RowBox[{"1260", " ", 
                  RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["1", "20"], " ", "\[Pi]", " ", "t"}], ")"}]}],
                 "+", 
                RowBox[{"420", " ", 
                  RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["3", "20"], " ", "\[Pi]", " ", "t"}], ")"}]}],
                 "+", 
                RowBox[{"252", " ", 
                  RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["1", "4"], " ", "\[Pi]", " ", "t"}], ")"}]}], 
                "+", 
                RowBox[{"180", " ", 
                  RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["7", "20"], " ", "\[Pi]", " ", "t"}], ")"}]}],
                 "+", 
                RowBox[{"140", " ", 
                  RowBox[{"sin", "(", 
                    RowBox[{
                    FractionBox["9", "20"], " ", "\[Pi]", " ", "t"}], 
                    ")"}]}]}], 
              RowBox[{"315", " ", "\[Pi]"}]], HoldForm], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "TrigReduce__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Series expansion at t = 0", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtt=0.", "position" -> "500", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(4 (315 Sin[(Pi t)/20] + 105 Sin[(3 Pi t)/20] + 63 Sin[(Pi \
t)/4] + 45 Sin[(7 Pi t)/20] + 35 Sin[(9 Pi t)/20]))/(315 Pi), {t, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{"t", "-", 
                    FractionBox[
                    RowBox[{"11", " ", 
                    SuperscriptBox["\[Pi]", "2"], " ", 
                    SuperscriptBox["t", "3"]}], "800"], "+", 
                    FractionBox[
                    RowBox[{"3223", " ", 
                    SuperscriptBox["\[Pi]", "4"], " ", 
                    SuperscriptBox["t", "5"]}], "32000000"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["t", "6"], ")"}], 
                    SeriesData[$CellContext`t, 0, {}, 1, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"t", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"11", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "800"]}], ",", "0", ",", 
                    FractionBox[
                    RowBox[{"3223", " ", 
                    SuperscriptBox["\[Pi]", "4"]}], "32000000"]}], "}"}], ",",
                     "1", ",", "6", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "D[(4 Sin[(Pi t)/20])/Pi + (4 Sin[(3 Pi t)/20])/(3 Pi) + (4 Sin[(Pi \
t)/4])/(5 Pi) + (4 Sin[(7 Pi t)/20])/(7 Pi) + (4 Sin[(9 Pi t)/20])/(9 Pi), \
t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "t"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "t"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "20"], ")"}]}], "\[Pi]"], 
                    "+", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                    RowBox[{"3", " ", "\[Pi]"}]], "+", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "4"], ")"}]}], 
                    RowBox[{"5", " ", "\[Pi]"}]], "+", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"7", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                    RowBox[{"7", " ", "\[Pi]"}]], "+", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"9", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                    RowBox[{"9", " ", "\[Pi]"}]]}], HoldForm], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{
                 FractionBox["1", "5"], " ", 
                 RowBox[{"(", 
                   RowBox[{
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "20"], ")"}], "+", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]", " ", "t"}], "20"], ")"}], "+", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "4"], ")"}], "+", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"7", " ", "\[Pi]", " ", "t"}], "20"], ")"}], "+", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"9", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                   ")"}]}], Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Derivative__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "700", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Integrate[(4 Sin[(Pi t)/20])/Pi + (4 Sin[(3 Pi t)/20])/(3 Pi) + (4 \
Sin[(Pi t)/4])/(5 Pi) + (4 Sin[(7 Pi t)/20])/(7 Pi) + (4 Sin[(9 Pi t)/20])/(9 \
Pi), t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "20"], ")"}]}], "\[Pi]"], 
                    "+", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                    RowBox[{"3", " ", "\[Pi]"}]], "+", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "4"], ")"}]}], 
                    RowBox[{"5", " ", "\[Pi]"}]], "+", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"7", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                    RowBox[{"7", " ", "\[Pi]"}]], "+", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"9", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                    RowBox[{"9", " ", "\[Pi]"}]]}], ")"}], 
                   RowBox[{"\[DifferentialD]", "t"}]}]}], HoldForm], 
              "\[LongEqual]", 
              StyleBox[
               RowBox[{
                 StyleBox[
                  RowBox[{"-", 
                    FractionBox[
                    RowBox[{"16", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"99225", " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "20"], ")"}]}], "+", 
                    RowBox[{"11025", " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                    "+", 
                    RowBox[{"3969", " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "4"], ")"}]}], "+", 
                    RowBox[{"2025", " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"7", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                    "+", 
                    RowBox[{"1225", " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"9", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}]}], 
                    ")"}]}], 
                    RowBox[{"19845", " ", 
                    SuperscriptBox["\[Pi]", "2"]}]]}], {
                   GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                   LineIndent -> 0}], "+", 
                 StyleBox[
                 "\"constant\"", {
                  Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                   FontSize -> Inherited, 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "800", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = ArcTan[
                   Rational[3, 220]], 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 ArcTan[
                   Rational[3, 220]], 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = ArcTan[
                   Rational[3, 220]], 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 ArcTan[
                   Rational[3, 220]], 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = ArcTan[
                   Rational[3, 220]], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., CalculateScan`PlotterScanner`Private`x1$$ = 
                 Rational[-1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`x2$$ = 
                 Rational[1, 4] Pi, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x1$$], 
                    Rational[-1, 4] Pi, 
                    Subscript[
                    Style["t", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    Rational[1, 4] Pi, 
                    Subscript[
                    Style["t", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    ArcTan[
                    Rational[3, 220]], ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$], 
                    ArcTan[
                    Rational[3, 220]], ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 
                    ArcTan[
                    Rational[3, 220]], ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 
                    ArcTan[
                    Rational[3, 220]], ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 
                    ArcTan[
                    Rational[3, 220]], ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1972548$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$1972553$$ = 0,
                  CalculateScan`PlotterScanner`Private`x2$1972554$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$1972555$$ = 
                 False, CalculateScan`PlotterScanner`Private`fy1$1972556$$ = 
                 0, CalculateScan`PlotterScanner`Private`fy2$1972557$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$1972558$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$1972559$$ = 
                 False, CalculateScan`PlotterScanner`Private`ar$1972560$$ = 0,
                  CalculateScan`PlotterScanner`Private`tangentCount$1972561$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$\
1972562$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$\
1972563$$ = 0, CalculateScan`PlotterScanner`Private`tangentOpacity$1972564$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$1972565$$\
 = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    ArcTan[
                    Rational[3, 220]], 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = ArcTan[
                    Rational[3, 220]], 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    ArcTan[
                    Rational[3, 220]], 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = ArcTan[
                    Rational[3, 220]], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = ArcTan[
                    Rational[3, 220]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., CalculateScan`PlotterScanner`Private`x1$$ = 
                    Rational[-1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    Rational[1, 4] Pi}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1972548$\
$, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$1972553$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$1972554$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$1972555$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$1972556$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$1972557$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$1972558$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$1972559$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$1972560$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$1972561$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$\
1972562$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
1972563$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
1972564$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$1972565$$\
, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`t}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    Rational[440, 3]/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    Rational[220, 3]], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    Rational[220, 3]]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/((4/Pi) Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3]/Pi) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5]/Pi) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7]/
                    Pi) Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9]/Pi) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]) == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`t < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`t,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`t, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = 
                    Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) 
                    Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t], {$CellContext`t, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = 
                    Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) 
                    Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t], {$CellContext`t, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = 
                    Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) 
                    Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate]}, {$CellContext`t, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    Rational[220, 3]]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = 
                    Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) 
                    Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate]}, {$CellContext`t, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    Rational[220, 3]], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = 
                    Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) 
                    Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate]}, {$CellContext`t, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 
                    Rational[220, 3]], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = 
                    Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) 
                    Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-0.01, {3, 0, 1}}, {-0.03, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {
                    0.25, {3, 0, 10}}, {-0.09, {3, 0, 15}}, {
                    3.141592653589793, {3, 0, 2}}, {
                    0.15, {3, 0, 7}}, {-0.05, {3, 0, 9}}, {0.05, {3, 0, 3}}, {
                    0.45, {3, 0, 16}}, {-0.07, {3, 0, 12}}}, {0, 0, 18, 0, 
                    0}, {{16, 3, 2, 0, 4}, {40, 1, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    2, 5, 4}, {16, 7, 2, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {
                    16, 6, 2, 8, 5}, {16, 10, 2, 0, 8}, {40, 1, 3, 0, 8, 3, 0,
                     11}, {16, 9, 2, 11, 8}, {16, 13, 2, 0, 11}, {40, 1, 3, 0,
                     11, 3, 0, 14}, {16, 12, 2, 14, 11}, {16, 16, 2, 0, 14}, {
                    40, 1, 3, 0, 14, 3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 
                    5, 8, 11, 14, 4}, {1}}, 
                    
                    Function[{$CellContext`t}, (Rational[-1, 100] Pi) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[-3, 100] Pi) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[-1, 20] Pi) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (
                    Rational[-7, 100] Pi) 
                    Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[-9, 100] Pi) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate]}, {$CellContext`t, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = 
                    Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) 
                    Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-0.01, {3, 0, 1}}, {-0.03, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {
                    0.25, {3, 0, 10}}, {-0.09, {3, 0, 15}}, {
                    3.141592653589793, {3, 0, 2}}, {
                    0.15, {3, 0, 7}}, {-0.05, {3, 0, 9}}, {0.05, {3, 0, 3}}, {
                    0.45, {3, 0, 16}}, {-0.07, {3, 0, 12}}}, {0, 0, 18, 0, 
                    0}, {{16, 3, 2, 0, 4}, {40, 1, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    2, 5, 4}, {16, 7, 2, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {
                    16, 6, 2, 8, 5}, {16, 10, 2, 0, 8}, {40, 1, 3, 0, 8, 3, 0,
                     11}, {16, 9, 2, 11, 8}, {16, 13, 2, 0, 11}, {40, 1, 3, 0,
                     11, 3, 0, 14}, {16, 12, 2, 14, 11}, {16, 16, 2, 0, 14}, {
                    40, 1, 3, 0, 14, 3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 
                    5, 8, 11, 14, 4}, {1}}, 
                    
                    Function[{$CellContext`t}, (Rational[-1, 100] Pi) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[-3, 100] Pi) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[-1, 20] Pi) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (
                    Rational[-7, 100] Pi) 
                    Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[-9, 100] Pi) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate]}, {$CellContext`t, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = 
                    Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) 
                    Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-0.01, {3, 0, 1}}, {-0.03, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {
                    0.25, {3, 0, 10}}, {-0.09, {3, 0, 15}}, {
                    3.141592653589793, {3, 0, 2}}, {
                    0.15, {3, 0, 7}}, {-0.05, {3, 0, 9}}, {0.05, {3, 0, 3}}, {
                    0.45, {3, 0, 16}}, {-0.07, {3, 0, 12}}}, {0, 0, 18, 0, 
                    0}, {{16, 3, 2, 0, 4}, {40, 1, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    2, 5, 4}, {16, 7, 2, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {
                    16, 6, 2, 8, 5}, {16, 10, 2, 0, 8}, {40, 1, 3, 0, 8, 3, 0,
                     11}, {16, 9, 2, 11, 8}, {16, 13, 2, 0, 11}, {40, 1, 3, 0,
                     11, 3, 0, 14}, {16, 12, 2, 14, 11}, {16, 16, 2, 0, 14}, {
                    40, 1, 3, 0, 14, 3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 
                    5, 8, 11, 14, 4}, {1}}, 
                    
                    Function[{$CellContext`t}, (Rational[-1, 100] Pi) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[-3, 100] Pi) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[-1, 20] Pi) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (
                    Rational[-7, 100] Pi) 
                    Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[-9, 100] Pi) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate]}, {$CellContext`t, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`t, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = 
                    Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) 
                    Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]} + {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t], 1} ((1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]^2)/
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{-0.01, {3, 0, 1}}, {-0.03, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {
                    0.25, {3, 0, 10}}, {-0.09, {3, 0, 15}}, {
                    3.141592653589793, {3, 0, 2}}, {
                    0.15, {3, 0, 7}}, {-0.05, {3, 0, 9}}, {0.05, {3, 0, 3}}, {
                    0.45, {3, 0, 16}}, {-0.07, {3, 0, 12}}}, {0, 0, 18, 0, 
                    0}, {{16, 3, 2, 0, 4}, {40, 1, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    2, 5, 4}, {16, 7, 2, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {
                    16, 6, 2, 8, 5}, {16, 10, 2, 0, 8}, {40, 1, 3, 0, 8, 3, 0,
                     11}, {16, 9, 2, 11, 8}, {16, 13, 2, 0, 11}, {40, 1, 3, 0,
                     11, 3, 0, 14}, {16, 12, 2, 14, 11}, {16, 16, 2, 0, 14}, {
                    40, 1, 3, 0, 14, 3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 
                    5, 8, 11, 14, 4}, {1}}, 
                    
                    Function[{$CellContext`t}, (Rational[-1, 100] Pi) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[-3, 100] Pi) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[-1, 20] Pi) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (
                    Rational[-7, 100] Pi) 
                    Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[-9, 100] Pi) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]), {$CellContext`t, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`t] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/((4/Pi) Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3]/Pi) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5]/Pi) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7]/
                    Pi) Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9]/Pi) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]) == 
                    0, $CellContext`t, Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`t, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[(CalculateScan`PlotterScanner`Private`iLength/(
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
t] == Sqrt[1 + D[(4/Pi) Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3]/Pi) Sin[(Rational[3, 20] 
                    Pi) $CellContext`t] + (Rational[4, 5]/Pi) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7]/
                    Pi) Sin[(Rational[7, 20] Pi) $CellContext`t] + (
                    Rational[4, 9]/Pi) Sin[(Rational[9, 20] 
                    Pi) $CellContext`t], $CellContext`t]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`t, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]}], $CellContext`t], \
{$CellContext`t, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + (
                    CalculateScan`PlotterScanner`Private`jk/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + (
                    CalculateScan`PlotterScanner`Private`jk/(
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 
                    Rational[220, 3]]}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t], 
                    1}], $CellContext`t], {$CellContext`t, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 
                    Rational[220, 3]], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t], 
                    1}]], $CellContext`t], {$CellContext`t, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - ((
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$)/
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`t, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]} + ((
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`t) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]))/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]^2)) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]}, {$CellContext`t, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`t, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]} + ((
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`t) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]))/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]^2)) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]}, {$CellContext`t, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{(-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`t)) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`t) $CellContext`t + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`t)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`t) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t])) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`t)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]), {$CellContext`t, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{(-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`t)) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`t) $CellContext`t + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`t)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]^2 + ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`t) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t])) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`t)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]), {$CellContext`t, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`t, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]} + ((
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`t))/(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]^2)) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t], 1}, {$CellContext`t, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`t, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]} + ((
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`t))/(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]^2)) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t], 1}, {$CellContext`t, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t], 1}/(($CellContext`t + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`t, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`t + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t], 1}/(($CellContext`t + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`t, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`t + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, (
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L) Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 \
({$CellContext`t - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
t - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] - 
                    CalculateScan`PlotterScanner`Private`py$)^2)), \
{$CellContext`t, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    
                    CalculateScan`PlotterScanner`Private`R$^2 \
({$CellContext`t - CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
t - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] - 
                    CalculateScan`PlotterScanner`Private`py$)^2)), \
{$CellContext`t, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`t, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]} + {((-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]) (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t] ($CellContext`t - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t] ($CellContext`t - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]^2), {$CellContext`t, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]}, 
                    ParametricPlot[{$CellContext`t, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t]} + {((-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]) (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t] ($CellContext`t - 
                    CalculateScan`PlotterScanner`Private`px$)), (2 1) (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], 
                    Evaluate][$CellContext`t] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t] ($CellContext`t - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][$CellContext`t]^2), {$CellContext`t, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x1$$]^2) (
                    1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate][CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.4444444444444444, {3, 0, 15}}, {4, {2, 0, 0}}, {
                    0.8, {3, 0, 9}}, {1.3333333333333333`, {3, 0, 6}}, {
                    0.35, {3, 0, 13}}, {0.25, {3, 0, 10}}, {
                    3.141592653589793, {3, 0, 1}}, {0.15, {3, 0, 7}}, {
                    0.05, {3, 0, 3}}, {0.45, {3, 0, 16}}, {
                    0.5714285714285714, {3, 0, 12}}}, {0, 1, 18, 0, 
                    0}, {{40, 60, 3, 0, 1, 3, 0, 2}, {16, 3, 1, 0, 4}, {40, 1,
                     3, 0, 4, 3, 0, 5}, {10, 0, 4}, {16, 4, 2, 5, 4}, {16, 7, 
                    1, 0, 5}, {40, 1, 3, 0, 5, 3, 0, 8}, {16, 6, 2, 8, 5}, {
                    16, 10, 1, 0, 8}, {40, 1, 3, 0, 8, 3, 0, 11}, {16, 9, 2, 
                    11, 8}, {16, 13, 1, 0, 11}, {40, 1, 3, 0, 11, 3, 0, 14}, {
                    16, 12, 2, 14, 11}, {16, 16, 1, 0, 14}, {40, 1, 3, 0, 14, 
                    3, 0, 17}, {16, 15, 2, 17, 14}, {13, 4, 5, 8, 11, 14, 
                    4}, {1}}, 
                    Function[{$CellContext`t}, 
                    
                    Block[{Compile`$5153}, 
                    Compile`$5153 = Pi^(-1); (4 Compile`$5153) 
                    Sin[(Rational[1, 20] Pi) $CellContext`t] + (
                    Rational[4, 3] Compile`$5153) 
                    Sin[(Rational[3, 20] Pi) $CellContext`t] + (
                    Rational[4, 5] Compile`$5153) 
                    Sin[(Rational[1, 4] Pi) $CellContext`t] + (Rational[4, 7] 
                    Compile`$5153) Sin[(Rational[7, 20] 
                    Pi) $CellContext`t] + (Rational[4, 9] Compile`$5153) 
                    Sin[(Rational[9, 20] Pi) $CellContext`t]]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    4}}, {{0.35, {3, 0, 10}}, {0.25, {3, 0, 8}}, {
                    0.2, {3, 0, 1}}, {3.141592653589793, {3, 0, 3}}, {
                    0.15, {3, 0, 6}}, {0.05, {3, 0, 2}}, {
                    0.45, {3, 0, 12}}}, {0, 0, 14, 0, 
                    0}, {{16, 2, 3, 0, 4}, {40, 2, 3, 0, 4, 3, 0, 5}, {16, 1, 
                    5, 4}, {16, 6, 3, 0, 5}, {40, 2, 3, 0, 5, 3, 0, 7}, {16, 
                    1, 7, 5}, {16, 8, 3, 0, 7}, {40, 2, 3, 0, 7, 3, 0, 9}, {
                    16, 1, 9, 7}, {16, 10, 3, 0, 9}, {40, 2, 3, 0, 9, 3, 0, 
                    11}, {16, 1, 11, 9}, {16, 12, 3, 0, 11}, {40, 2, 3, 0, 11,
                     3, 0, 13}, {16, 1, 13, 11}, {13, 4, 5, 7, 9, 11, 4}, {
                    1}}, 
                    
                    Function[{$CellContext`t}, 
                    Rational[1, 5] Cos[(Rational[1, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[3, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[1, 4] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[7, 20] Pi) $CellContext`t] + 
                    Rational[1, 5] Cos[(Rational[9, 20] Pi) $CellContext`t]], 
                    Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "20"], ")"}]}], "\[Pi]"], 
                    "+", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"3", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                    RowBox[{"3", " ", "\[Pi]"}]], "+", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"\[Pi]", " ", "t"}], "4"], ")"}]}], 
                    RowBox[{"5", " ", "\[Pi]"}]], "+", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"7", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                    RowBox[{"7", " ", "\[Pi]"}]], "+", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"9", " ", "\[Pi]", " ", "t"}], "20"], ")"}]}], 
                    RowBox[{"9", " ", "\[Pi]"}]]}], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    Rational[-1, 4] Pi, 
                    Subscript[
                    Style["t", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    Rational[1, 4] Pi, 
                    Subscript[
                    Style["t", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, True,
                     "symmetric"}, {True, False}, ControlPlacement -> 3}, {{
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 
                    ArcTan[
                    Rational[3, 220]], ""}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 
                    ArcTan[
                    Rational[3, 220]], ""}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 
                    ArcTan[
                    Rational[3, 220]], ""}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 
                    ArcTan[
                    Rational[3, 220]], ""}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 
                    ArcTan[
                    Rational[3, 220]], ""}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtA008QEJ6GBMGlCS8r232GksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu96TIxml/\
V6vp69a80Fykt7A02NrhnKWy0KQd6e5olozKdIr+Oy2NTE1e5TDD0q877o176WagfHnV/g+\
8KTgYOhXwzgzjOrJvoI8Y4muPSPFju1PJlwmwNlP+\
nTr5e72i51dD4OxjMAYqoTeaQuZZwo0TXsIdM2atxzEN398VB4/FZzH9HtBRUL1A+sdKyAWRgrgmE/\
wrZebqbuYmAFBQJELp8nJc9j2Am0UE9MxneX4xvlkbbUFBjXVnpt7JTfrFOTDv4kPZOxi8h6XtDs7A\
sPCuGT0nZXVP+dugOfXbeGVPFlNHOb3hiNvYNgx1ct0PmtdJ89I1bUu+jlXFzVfNhrk+VOm/\
l86ZNosh7HdNgw6O7I1Xq29ZfjnbeFljl0/F/\
d9az57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMe5UfMfoDKlghRPZOMt+\
cf3xsAKvN4UYazfZgHREPQMimlPrIo7bPTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyhOUgX6g4myb78UXEruZxpMuT9QBg6pWqt6G9hfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0rVJfyLA5caU7Dk+\
iXBT6kYmqy5o4dOLqC2xazieRJrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DTnfuK4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "900", 
     "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa23981896g028aaf4feb1000032hcfh1de6e06ig14222294402565530544", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa23991896g028aaf4feb10000613f6a02dfh55e174222294402565530544", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, 
   Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, Typeset`pod38$$, 
   Typeset`pod39$$, Typeset`pod40$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`aux40$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "10", "datatypes" -> "Math", "timedout" -> 
     "Simplification,FunctionProperties,Reduce,BranchPoint,ComplexMap,\
RiemannSurface,ODE,Sequence,DomainAndRange,GlobalExtrema,\
InterestingDefiniteIntegrals,InterestingMultiDimensionalDefiniteIntegrals,\
MathematicalFunctionData", "timedoutpods" -> "", "timing" -> 
     "4.7780000000000005", "parsetiming" -> "1.383", "parsetimedout" -> 
     "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa23931896g028aaf4feb100001hg1339i335304224222294402565530544", "id" -> 
     "MSP23941896g028aaf4feb10000317ia8fh8b6908c7", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "13", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa23951896g028aaf4feb100005af9d6277633c8884222294402565530544", "version" -> 
     "2.6", "inputstring" -> 
     "(4 Sin[(\[Pi] t)/20])/\[Pi] + (4 Sin[(3 \[Pi] t)/20])/(3 \[Pi]) + (4 \
Sin[(\[Pi] t)/4])/(5 \[Pi]) + (  4 Sin[(7 \[Pi] t)/20])/(7 \[Pi]) + (4 Sin[(9 \
\[Pi] t)/20])/(9 \[Pi])"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "Math", "timedout" -> 
     "Simplification,FunctionProperties,Reduce,BranchPoint,ComplexMap,\
RiemannSurface,ODE,Sequence,DomainAndRange,GlobalExtrema,\
InterestingDefiniteIntegrals,InterestingMultiDimensionalDefiniteIntegrals,\
MathematicalFunctionData", "timedoutpods" -> "", "timing" -> "5.098", 
     "parsetimedout" -> "false", "recalculate" -> "", "id" -> "", 
     "parseidserver" -> "20", "host" -> "https://www6b3.wolframalpha.com", 
     "server" -> "20", "related" -> "", "version" -> "2.6", "inputstring" -> 
     "(4 Sin[(\[Pi] t)/20])/\[Pi] + (4 Sin[(3 \[Pi] t)/20])/(3 \[Pi]) + (4 \
Sin[(\[Pi] t)/4])/(5 \[Pi]) + (  4 Sin[(7 \[Pi] t)/20])/(7 \[Pi]) + (4 Sin[(9 \
\[Pi] t)/20])/(9 \[Pi])"}}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 12, 4, 0, 44, 29.5374933`9.222948546190857}, "Line" -> 
    17, "SessionID" -> 25216070503868594180}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10}, Typeset`failedpods$$ = {9, 10, 11, 12, 13, 14, 15, 
   16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
    35, 36, 37, 38, 39, 40}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "(4 Sin[(\[Pi] t)/20])/\[Pi] + (4 Sin[(3 \[Pi] t)/20])/(3 \[Pi]) + (4 \
Sin[(\[Pi] t)/4])/(5 \[Pi]) + (\n 4 Sin[(7 \[Pi] t)/20])/(7 \[Pi]) + (4 \
Sin[(9 \[Pi] t)/20])/(9 \[Pi])"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, 
         Typeset`pod40$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1077., {927.3544921875, 932.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, 
          Typeset`pod40$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa23931896g028aaf4feb100001hg1339i335304224222294402565530544", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8790998698815827`*^9},ExpressionUUID->"09bbe145-53d8-444b-9f58-\
8607b6ae5816"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", 
       RowBox[{
        FractionBox[
         RowBox[{"4", " ", 
          RowBox[{"Sin", "[", 
           FractionBox[
            RowBox[{"\[Pi]", " ", "t"}], "20"], "]"}]}], "\[Pi]"], "+", 
        FractionBox[
         RowBox[{"4", " ", 
          RowBox[{"Sin", "[", 
           FractionBox[
            RowBox[{"3", " ", "\[Pi]", " ", "t"}], "20"], "]"}]}], 
         RowBox[{"3", " ", "\[Pi]"}]], "+", 
        FractionBox[
         RowBox[{"4", " ", 
          RowBox[{"Sin", "[", 
           FractionBox[
            RowBox[{"\[Pi]", " ", "t"}], "4"], "]"}]}], 
         RowBox[{"5", " ", "\[Pi]"}]], "+", 
        FractionBox[
         RowBox[{"4", " ", 
          RowBox[{"Sin", "[", 
           FractionBox[
            RowBox[{"7", " ", "\[Pi]", " ", "t"}], "20"], "]"}]}], 
         RowBox[{"7", " ", "\[Pi]"}]], "+", 
        FractionBox[
         RowBox[{"4", " ", 
          RowBox[{"Sin", "[", 
           FractionBox[
            RowBox[{"9", " ", "\[Pi]", " ", "t"}], "20"], "]"}]}], 
         RowBox[{"9", " ", "\[Pi]"}]]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "40", ",", "1"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"N", "[", 
   RowBox[{
    RowBox[{"data", "//", "MatrixForm"}], ",", "32"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dataPlot", "=", 
  RowBox[{"ListPlot", "[", "data", "]"}]}]}], "Input",
 CellChangeTimes->{{3.8790260693078084`*^9, 3.879026115611361*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"be2c8125-605e-4d3a-ad81-d2511e322557"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`], 
    AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGDQBGIQjR18sL838WlD7dfX9lABB8UXj35fePUJyudwmLFH
9XVQ7AcoX8BhrRb/J7nVb6B8EYew/a81F+95D+VLOOyyKjeNtvkI5cs4+Icu
fy7AB9Ov4GAt/57v6cO3UL6SA8fR46dZf8D0qzhszf30wIUJpl8NTV4DTb8W
mvk6aPbrobnPAM39hmj+M0Lzv7EDaviYOKCGnylMfj+EbwbTD+Wbw8yH8i1g
9kP5ljD3QflWMPdD+dYw/0H5NjD/Q/m2sPCB8u1g4Qfl26PJO6Dqb3BAM98R
1f4GRzT3OaG6v8EJzX/OqP5vcEYLHxd4+AEAQzXHcg==
     "]]}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 40.}, {-1.1823282088576053`, 1.1823282088576053`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.878931675689126*^9, 3.8789838015396423`*^9, 
  3.878984455466318*^9, 3.879026188743899*^9, 3.879099871290804*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"64cd7810-22da-4dba-9a53-82396eeec567"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   FractionBox[
    RowBox[{"4", " ", 
     RowBox[{"Sin", "[", 
      FractionBox[
       RowBox[{"\[Pi]", " ", "t"}], "20"], "]"}]}], "\[Pi]"], "+", 
   FractionBox[
    RowBox[{"4", " ", 
     RowBox[{"Sin", "[", 
      FractionBox[
       RowBox[{"3", " ", "\[Pi]", " ", "t"}], "20"], "]"}]}], 
    RowBox[{"3", " ", "\[Pi]"}]], "+", 
   FractionBox[
    RowBox[{"4", " ", 
     RowBox[{"Sin", "[", 
      FractionBox[
       RowBox[{"\[Pi]", " ", "t"}], "4"], "]"}]}], 
    RowBox[{"5", " ", "\[Pi]"}]], "+", 
   FractionBox[
    RowBox[{"4", " ", 
     RowBox[{"Sin", "[", 
      FractionBox[
       RowBox[{"7", " ", "\[Pi]", " ", "t"}], "20"], "]"}]}], 
    RowBox[{"7", " ", "\[Pi]"}]], "+", 
   FractionBox[
    RowBox[{"4", " ", 
     RowBox[{"Sin", "[", 
      FractionBox[
       RowBox[{"9", " ", "\[Pi]", " ", "t"}], "20"], "]"}]}], 
    RowBox[{"9", " ", "\[Pi]"}]]}], "/.", 
  RowBox[{"t", "->", "20"}]}]], "Input",
 CellChangeTimes->{{3.878837658099143*^9, 3.878837666044029*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"eb02e495-2f5b-4a44-b68c-314cb7192fa5"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{
  3.8788376669643793`*^9, {3.8788402287873406`*^9, 3.878840255725018*^9}, 
   3.8788407463088875`*^9, 3.8788408903228536`*^9, 3.8788957732032657`*^9, 
   3.8789302794747105`*^9, 3.878930311122151*^9, 3.878931713467148*^9, 
   3.87898380167397*^9, 3.878984455509205*^9, 3.8790998713287044`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"bb490637-09bd-43e8-8a3e-8798a09f93e4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"data", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"t", ",", 
        RowBox[{"1000", "*", 
         RowBox[{"Sin", "[", 
          FractionBox[
           RowBox[{"\[Pi]", " ", "t"}], "4"], "]"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "7", ",", "1"}], "}"}]}], "]"}]}], ";"}], 
  RowBox[{"(*", 
   RowBox[{"1000", "*", "sin", 
    RowBox[{"(", 
     RowBox[{"2", "*", "pi", "*", "1000", "*", "t"}], ")"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"N", "[", 
   RowBox[{
    RowBox[{"data", "//", "MatrixForm"}], ",", "32"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"dataPlot", "=", 
  RowBox[{"ListPlot", "[", "data", "]"}]}]}], "Input",
 CellChangeTimes->{{3.879003138358929*^9, 3.8790031647522383`*^9}, {
  3.879100261988097*^9, 
  3.879100334015067*^9}},ExpressionUUID->"1d1520ac-cbf5-4de3-aa7f-\
7905ae1edc55"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`], 
    AbsoluteThickness[1.6], 
    PointBox[{{0., 0.}, {1., 707.1067811865476}, {2., 1000.}, {3., 
     707.1067811865476}, {4., 0.}, {5., -707.1067811865476}, {6., -1000.}, {
     7., -707.1067811865476}}]}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 7.}, {-1000., 1000.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.87900316669802*^9, 3.879099871377573*^9, 
  3.8791002731693306`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"d58b3829-4313-428e-8e22-b2a0f87dc746"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"1000", "*", 
    RowBox[{"Sin", "[", 
     FractionBox[
      RowBox[{"\[Pi]", " ", "t"}], "4"], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "7", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8790163120708113`*^9, 3.8790163238374195`*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"48bbe86b-5ae8-4e1c-83b7-e6c259916e9f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   RowBox[{"500", " ", 
    SqrtBox["2"]}], ",", "1000", ",", 
   RowBox[{"500", " ", 
    SqrtBox["2"]}], ",", "0", ",", 
   RowBox[{
    RowBox[{"-", "500"}], " ", 
    SqrtBox["2"]}], ",", 
   RowBox[{"-", "1000"}], ",", 
   RowBox[{
    RowBox[{"-", "500"}], " ", 
    SqrtBox["2"]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8790163162625074`*^9, 3.879016324443141*^9}, 
   3.879099871412479*^9},
 CellLabel->"Out[25]=",ExpressionUUID->"ce3acda7-1ca4-4410-b62c-375776dd28bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"N", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{"500", " ", 
      SqrtBox["2"]}], ",", "1000", ",", 
     RowBox[{"500", " ", 
      SqrtBox["2"]}], ",", "0", ",", 
     RowBox[{
      RowBox[{"-", "500"}], " ", 
      SqrtBox["2"]}], ",", 
     RowBox[{"-", "1000"}], ",", 
     RowBox[{
      RowBox[{"-", "500"}], " ", 
      SqrtBox["2"]}]}], "}"}], ",", "8"}], "]"}]], "Input",
 CellChangeTimes->{{3.87901633039126*^9, 3.8790163440131135`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"ad6f209c-99e6-47d0-89cc-da0e25a410ba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "707.1067811865475244009`8.", ",", "1000.`8.", ",", 
   "707.1067811865475244009`8.", ",", "0", ",", 
   RowBox[{"-", "707.1067811865475244009`8."}], ",", 
   RowBox[{"-", "1000.`8."}], ",", 
   RowBox[{"-", "707.1067811865475244009`8."}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8790163380113325`*^9, 3.8790163445654955`*^9}, 
   3.879099871436415*^9},
 CellLabel->"Out[26]=",ExpressionUUID->"11afcd52-bf54-41d6-8694-11a7d930a040"]
}, Open  ]]
},
WindowSize->{1141.2, 587.4},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1. Inherited,
FrontEndVersion->"13.1 pour Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7457b64b-13c6-4d43-8b67-c63d3cbbb4a0"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 983, 25, 114, "Input",ExpressionUUID->"0944b31f-cbe6-42b2-9399-2709e60573e3"],
Cell[1566, 49, 3806, 78, 235, "Output",ExpressionUUID->"385b57d4-b0d1-421a-bbf5-204a21e53cf1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5409, 132, 1228, 34, 61, "Input",ExpressionUUID->"b855b246-12d0-47d0-8985-ee016e650b68"],
Cell[6640, 168, 34010, 577, 227, "Output",ExpressionUUID->"baca58b5-f4f1-4487-afc5-9bc219032db0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[40687, 750, 1737, 44, 61, "Input",ExpressionUUID->"a26e23a3-d954-407c-af6b-8358ff3f45fc"],
Cell[42427, 796, 34058, 576, 228, "Output",ExpressionUUID->"09195ff3-8a5d-434a-8341-9bdd40b440cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76522, 1377, 994, 24, 97, "Input",ExpressionUUID->"fe58c9a1-36e0-4541-b36a-3062a3dbb291"],
Cell[77519, 1403, 1223, 33, 165, "Output",ExpressionUUID->"576f4ca0-15e1-47e8-9444-7f01b1a38849"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78779, 1441, 2080, 52, 102, "Input",ExpressionUUID->"bcc5d5cb-fd97-4b89-969c-e5d0a8133fac"],
Cell[80862, 1495, 1949, 47, 225, "Output",ExpressionUUID->"be00f5e4-f2cb-4977-8fbf-9b9af135e687"]
}, Open  ]],
Cell[CellGroupData[{
Cell[82848, 1547, 1853, 49, 86, "Input",ExpressionUUID->"dfa26b34-6cd7-4281-a40e-c31760c48070"],
Cell[84704, 1598, 2018, 52, 71, "Output",ExpressionUUID->"51683fd1-b7a1-4b57-8a00-6da77fd8b8b4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[86759, 1655, 2023, 52, 102, "Input",ExpressionUUID->"6f953b5b-8339-4e72-b72d-ba2fd099bf66"],
Cell[88785, 1709, 295, 4, 32, "Output",ExpressionUUID->"36c162f4-497d-4a9d-93ed-fde0391d7eaf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89117, 1718, 828, 25, 105, "Input",ExpressionUUID->"f15e3a61-b65d-4ba3-82cf-b1a0af83f00e"],
Cell[89948, 1745, 1074, 27, 56, "Output",ExpressionUUID->"47a170a6-6f4c-4af8-af19-d8fe9227db12"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91059, 1777, 968, 27, 60, "Input",ExpressionUUID->"bbda90e7-d553-43bf-b649-373f884760b6"],
Cell[92030, 1806, 1038, 29, 49, "Output",ExpressionUUID->"1f9c6afb-540e-4e56-921b-0a0df224e5f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93105, 1840, 1097, 32, 61, "Input",ExpressionUUID->"a4549021-4792-4b21-8568-a143ff1eecc0"],
Cell[94205, 1874, 1139, 34, 56, "Output",ExpressionUUID->"47f58bde-6963-479e-8813-cd0b3a41f40a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[95381, 1913, 1227, 35, 47, "WolframAlphaLong",ExpressionUUID->"a26c2631-52db-42c2-b86b-05ca4247a3c3"],
Cell[96611, 1950, 533163, 9411, 1870, "Print",ExpressionUUID->"09bbe145-53d8-444b-9f58-8607b6ae5816"]
}, Open  ]],
Cell[CellGroupData[{
Cell[629811, 11366, 1683, 48, 144, "Input",ExpressionUUID->"be2c8125-605e-4d3a-ad81-d2511e322557"],
Cell[631497, 11416, 1730, 43, 230, "Output",ExpressionUUID->"64cd7810-22da-4dba-9a53-82396eeec567"]
}, Open  ]],
Cell[CellGroupData[{
Cell[633264, 11464, 1112, 34, 56, "Input",ExpressionUUID->"eb02e495-2f5b-4a44-b68c-314cb7192fa5"],
Cell[634379, 11500, 421, 6, 32, "Output",ExpressionUUID->"bb490637-09bd-43e8-8a3e-8798a09f93e4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[634837, 11511, 964, 29, 132, "Input",ExpressionUUID->"1d1520ac-cbf5-4de3-aa7f-7905ae1edc55"],
Cell[635804, 11542, 1446, 39, 225, "Output",ExpressionUUID->"d58b3829-4313-428e-8e22-b2a0f87dc746"]
}, Open  ]],
Cell[CellGroupData[{
Cell[637287, 11586, 413, 10, 59, "Input",ExpressionUUID->"48bbe86b-5ae8-4e1c-83b7-e6c259916e9f"],
Cell[637703, 11598, 531, 16, 36, "Output",ExpressionUUID->"ce3acda7-1ca4-4410-b62c-375776dd28bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[638271, 11619, 579, 17, 51, "Input",ExpressionUUID->"ad6f209c-99e6-47d0-89cc-da0e25a410ba"],
Cell[638853, 11638, 486, 10, 32, "Output",ExpressionUUID->"11afcd52-bf54-41d6-8694-11a7d930a040"]
}, Open  ]]
}
]
*)

