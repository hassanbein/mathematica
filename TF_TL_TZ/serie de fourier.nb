(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1478779,      27692]
NotebookOptionsPosition[   1473688,      27598]
NotebookOutlinePosition[   1474164,      27616]
CellTagsIndexPosition[   1474121,      27613]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["solve 2x+1y+1z=7,3x-y+z=4,x+y-z=0", "WolframAlphaLong",
 CellChangeTimes->{
  3.85652483074868*^9, {3.856524920491393*^9, 3.856524937075598*^9}, {
   3.8565252093192625`*^9, 3.8565252131936464`*^9}, {3.8565282033910227`*^9, 
   3.8565282037562485`*^9}, {3.8565287311570444`*^9, 3.856528738175318*^9}, {
   3.8565287850107746`*^9, 3.8565287958363833`*^9}, {3.8565292084300957`*^9, 
   3.8565292508837357`*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"eb6390d7-4651-4294-abea-686cbb5ea74a"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "solve 2x+1y+1z=7,3x-y+z=4,x+y-z=0", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {
     "Result__Step-by-step solution", "Result__Use substitution", 
      "Result__Use Gaussian elimination", 
      "Result__Use Gaussian elimination"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Solve[{2 x + 1 y + 1 z == 7, 3 x - y + z == 4, x + y - z == 0}, {x, \
y, z}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"solve\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949]}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center], 
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", 
                    RowBox[{"1", " ", "y"}], "+", 
                    RowBox[{"1", " ", "z"}]}], "\[LongEqual]", "7"}], 
                    HoldForm]}, {
                    TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"3", " ", "x"}], "-", "y", "+", "z"}], 
                    "\[LongEqual]", "4"}], HoldForm]}, {
                    TagBox[
                    RowBox[{
                    RowBox[{"x", "+", "y", "-", "z"}], "\[LongEqual]", "0"}], 
                    HoldForm]}}, 
                    GridBoxBackground -> {
                    "Columns" -> {None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {"Columns" -> {2, 2}, "Rows" -> {{1}}},
                     GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 
                    Automatic], 
                    $CellContext`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              $CellContext`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Results", "scanner" -> "Solve", "id" -> "Result", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Reduce[{2 x + y + z == 7, 3 x - y + z == 4, x + y - z == 0}, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              StyleBox["\" and \"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              RowBox[{"x", "\[LongEqual]", "1"}], 
              RowBox[{"y", "\[LongEqual]", "2"}], 
              RowBox[{"z", "\[LongEqual]", "3"}]}, "RowWithSeparator"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{"\"Solve the following system\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    StyleBox["{", SpanMaxSize -> DirectedInfinity[1]], 
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "y", "+", "z"}], HoldForm], 
                    "\[LongEqual]", "7"}]}, {
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"3", " ", "x"}], "-", "y", "+", "z"}], HoldForm], 
                    "\[LongEqual]", "4"}]}, {
                    RowBox[{
                    TagBox[
                    RowBox[{"x", "+", "y", "-", "z"}], HoldForm], 
                    "\[LongEqual]", "0"}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Express \"", "\"the \"", "\"system \"", "\"in \"", 
                    "\"matrix \"", "\"form\""}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{
                    TagBox[
                    RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{"2", "1", "1"}, {"3", 
                    RowBox[{"-", "1"}], "1"}, {"1", "1", 
                    RowBox[{"-", "1"}]}}, RowSpacings -> 1, ColumnSpacings -> 
                    1, RowAlignments -> Baseline, ColumnAlignments -> Center],
                     "\[NoBreak]", ")"}], 
                    Function[BoxForm`e$, 
                    MatrixForm[BoxForm`e$]]], 
                    TagBox[
                    RowBox[{"(", "\[NoBreak]", 
                    TagBox[
                    
                    GridBox[{{"x"}, {"y"}, {"z"}}, RowSpacings -> 1, 
                    ColumnAlignments -> Center, ColumnAlignments -> Left], 
                    Column], "\[NoBreak]", ")"}], 
                    Function[BoxForm`e$, 
                    MatrixForm[BoxForm`e$]]], "\" \""}, "RowDefault"], 
                    "\"= \"", 
                    TagBox[
                    RowBox[{"(", "\[NoBreak]", 
                    TagBox[
                    
                    GridBox[{{"7"}, {"4"}, {"0"}}, ColumnAlignments -> Center,
                     RowSpacings -> 1, ColumnAlignments -> Left], Column], 
                    "\[NoBreak]", ")"}], 
                    Function[BoxForm`e$, 
                    MatrixForm[BoxForm`e$]]]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Write \"", "\"the \"", "\"system \"", "\"in \"", 
                    "\"augmented \"", "\"matrix \"", "\"form \"", "\"and \"", 
                    "\"use \"", "\"Gaussian \"", "\"elimination\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{"2", "1", "1", "7"}, {"3", 
                    RowBox[{"-", "1"}], "1", "4"}, {"1", "1", 
                    RowBox[{"-", "1"}], "0"}}, AutoDelete -> False, 
                    GridBoxDividers -> {"ColumnsIndexed" -> {-2 -> {
                    Dashing[{Small, Small}], 
                    GrayLevel[0.5]}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ")"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Swap\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], 
                    TemplateBox[{"\"with\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["2", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{"3", 
                    RowBox[{"-", "1"}], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], "4"}, {"2", "1", 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], "7"}, {
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "1"}], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False]}}, AutoDelete -> 
                    False, GridBoxDividers -> {"ColumnsIndexed" -> {-2 -> {
                    Dashing[{Small, Small}], 
                    GrayLevel[0.5]}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ")"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Subtract \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    FractionBox["2", "3"], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\"\[ThinSpace]\"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    StyleBox[
                    StyleBox[
                    "\"\[Times]\"", FontColor -> GrayLevel[0.3], StripOnInput -> 
                    False], Small, StripOnInput -> False], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\"\[ThinSpace]\"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\"(\"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\"row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\")\"", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], 
                    TemplateBox[{"\"from\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["2", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "1"}], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["4", 
                    GrayLevel[0.5], StripOnInput -> False]}, {"0", 
                    FractionBox["5", "3"], 
                    FractionBox["1", "3"], 
                    FractionBox["13", "3"]}, {
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "1"}], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False]}}, AutoDelete -> 
                    False, GridBoxDividers -> {"ColumnsIndexed" -> {-2 -> {
                    Dashing[{Small, Small}], 
                    GrayLevel[0.5]}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ")"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Multiply\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["2", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"by \"", 
                    TemplateBox[{
                    StyleBox["3", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "1"}], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["4", 
                    GrayLevel[0.5], StripOnInput -> False]}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], "5", "1", "13"}, {
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "1"}], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False]}}, AutoDelete -> 
                    False, GridBoxDividers -> {"ColumnsIndexed" -> {-2 -> {
                    Dashing[{Small, Small}], 
                    GrayLevel[0.5]}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ")"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Subtract \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    FractionBox["1", "3"], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\"\[ThinSpace]\"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    StyleBox[
                    StyleBox[
                    "\"\[Times]\"", FontColor -> GrayLevel[0.3], StripOnInput -> 
                    False], Small, StripOnInput -> False], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\"\[ThinSpace]\"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\"(\"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\"row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\")\"", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], 
                    TemplateBox[{"\"from\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["3", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "1"}], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["4", 
                    GrayLevel[0.5], StripOnInput -> False]}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["5", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["13", 
                    GrayLevel[0.5], StripOnInput -> False]}, {"0", 
                    FractionBox["4", "3"], 
                    RowBox[{"-", 
                    FractionBox["4", "3"]}], 
                    RowBox[{"-", 
                    FractionBox["4", "3"]}]}}, AutoDelete -> False, 
                    GridBoxDividers -> {"ColumnsIndexed" -> {-2 -> {
                    Dashing[{Small, Small}], 
                    GrayLevel[0.5]}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ")"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Multiply\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["3", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"by \"", 
                    TemplateBox[{
                    StyleBox[
                    FractionBox["3", "4"], 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "1"}], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["4", 
                    GrayLevel[0.5], StripOnInput -> False]}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["5", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["13", 
                    GrayLevel[0.5], StripOnInput -> False]}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], "1", 
                    RowBox[{"-", "1"}], 
                    RowBox[{"-", "1"}]}}, AutoDelete -> False, 
                    GridBoxDividers -> {"ColumnsIndexed" -> {-2 -> {
                    Dashing[{Small, Small}], 
                    GrayLevel[0.5]}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ")"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Subtract \"", 
                    TemplateBox[{
                    TemplateBox[{
                    StyleBox[
                    FractionBox["1", "5"], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\"\[ThinSpace]\"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox[
                    StyleBox[
                    StyleBox[
                    "\"\[Times]\"", FontColor -> GrayLevel[0.3], StripOnInput -> 
                    False], Small, StripOnInput -> False], 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\"\[ThinSpace]\"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\"(\"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\"row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["2", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["\")\"", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], 
                    TemplateBox[{"\"from\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["3", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "1"}], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["4", 
                    GrayLevel[0.5], StripOnInput -> False]}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["5", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["13", 
                    GrayLevel[0.5], StripOnInput -> False]}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], "0", 
                    RowBox[{"-", 
                    FractionBox["6", "5"]}], 
                    RowBox[{"-", 
                    FractionBox["18", "5"]}]}}, AutoDelete -> False, 
                    GridBoxDividers -> {"ColumnsIndexed" -> {-2 -> {
                    Dashing[{Small, Small}], 
                    GrayLevel[0.5]}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ")"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Multiply\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["3", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"by \"", 
                    TemplateBox[{
                    StyleBox[
                    RowBox[{"-", 
                    FractionBox["5", "6"]}], 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "1"}], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["4", 
                    GrayLevel[0.5], StripOnInput -> False]}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["5", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["13", 
                    GrayLevel[0.5], StripOnInput -> False]}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], "1", "3"}}, 
                    AutoDelete -> False, 
                    GridBoxDividers -> {"ColumnsIndexed" -> {-2 -> {
                    Dashing[{Small, Small}], 
                    GrayLevel[0.5]}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ")"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Subtract\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["3", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], 
                    TemplateBox[{"\"from\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["2", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "1"}], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["4", 
                    GrayLevel[0.5], StripOnInput -> False]}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["5", 
                    GrayLevel[0.5], StripOnInput -> False], "0", "10"}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False]}}, AutoDelete -> 
                    False, GridBoxDividers -> {"ColumnsIndexed" -> {-2 -> {
                    Dashing[{Small, Small}], 
                    GrayLevel[0.5]}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ")"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Divide\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["2", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"by \"", 
                    TemplateBox[{
                    StyleBox["5", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox[
                    RowBox[{"-", "1"}], 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["4", 
                    GrayLevel[0.5], StripOnInput -> False]}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], "1", 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], "2"}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False]}}, AutoDelete -> 
                    False, GridBoxDividers -> {"ColumnsIndexed" -> {-2 -> {
                    Dashing[{Small, Small}], 
                    GrayLevel[0.5]}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ")"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Add\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["2", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], 
                    TemplateBox[{"\"to\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False], "0", 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], "6"}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["2", 
                    GrayLevel[0.5], StripOnInput -> False]}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False]}}, AutoDelete -> 
                    False, GridBoxDividers -> {"ColumnsIndexed" -> {-2 -> {
                    Dashing[{Small, Small}], 
                    GrayLevel[0.5]}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ")"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Subtract\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["3", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], 
                    TemplateBox[{"\"from\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], "\":\""}, 
                    "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], "0", "3"}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["2", 
                    GrayLevel[0.5], StripOnInput -> False]}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False]}}, AutoDelete -> 
                    False, GridBoxDividers -> {"ColumnsIndexed" -> {-2 -> {
                    Dashing[{Small, Small}], 
                    GrayLevel[0.5]}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ")"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{
                    TemplateBox[{"\"Divide\"", 
                    TemplateBox[{
                    StyleBox["\" row \"", 
                    GrayLevel[0.3], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"], 
                    "\" \""}, "RowDefault"], "\"by \"", 
                    TemplateBox[{
                    StyleBox["3", 
                    GrayLevel[0.3], StripOnInput -> False]}, "RowDefault"]}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{"(", 
                    TagBox[
                    GridBox[{{"1", 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], "1"}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["2", 
                    GrayLevel[0.5], StripOnInput -> False]}, {
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["0", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["1", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    StyleBox["3", 
                    GrayLevel[0.5], StripOnInput -> False]}}, AutoDelete -> 
                    False, GridBoxDividers -> {"ColumnsIndexed" -> {-2 -> {
                    Dashing[{Small, Small}], 
                    GrayLevel[0.5]}}, "Rows" -> {{False}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ")"}]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    TemplateBox[{"\"Collect \"", "\"results\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Helvetica", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    StyleBox["{", SpanMaxSize -> DirectedInfinity[1]], 
                    TagBox[
                    GridBox[{{
                    RowBox[{"x", "\[LongEqual]", "1"}]}, {
                    RowBox[{"y", "\[LongEqual]", "2"}]}, {
                    RowBox[{"z", "\[LongEqual]", "3"}]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "statelist", {
        "count" -> "4", "value" -> "Use Gaussian elimination", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "Use elimination", "input" -> 
           "Result__Use elimination"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Use substitution", "input" -> 
           "Result__Use substitution"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Use Gaussian elimination", "input" -> 
           "Result__Use Gaussian elimination"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Use Cramer's rule", "input" -> 
           "Result__Use Cramer's rule"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Result__Hide steps"}, {}]}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "Solve", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "1.053", "parsetiming" -> "0.8", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP5707223h9d39i98d1f2900000ebc869g88c95406", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "15", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa5708223h9d39i98d1f290000676h34h02hca47i38884920455003441207", "version" -> 
    "2.6", "inputstring" -> "solve 2x+1y+1z=7,3x-y+z=4,x+y-z=0"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 17, 19, 43, 11.4645066`8.811930327816773}, "Line" -> 
    11, "SessionID" -> 34125974179216610262}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "solve 2x+1y+1z=7,3x-y+z=4,x+y-z=0"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1090.6, {988.91904296875, 993.6809570312499}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.856531391481659*^9},ExpressionUUID->"6bfe5312-5dc8-4b2f-b998-\
c4f069df1fe4"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"integrate", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"2", "*", "A"}], "T"], "*", 
     RowBox[{"sin", "(", 
      FractionBox[
       RowBox[{"2", "*", "pi", "*", "t"}], "T"], ")"}], "*", 
     RowBox[{"cos", "(", 
      FractionBox[
       RowBox[{"2", "*", "pi", "*", "n", "*", "t"}], "T"], ")"}]}]}], 
   TraditionalForm]],ExpressionUUID->"e3fa9770-b7a5-4e43-9467-a328d8d2fd8d"],
 ",{t,0,T/2}]"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.856701700813016*^9, 3.8567018559209223`*^9}, 
   3.8567033534579544`*^9, {3.8567038982298837`*^9, 3.856703909342679*^9}, {
   3.8567042394413853`*^9, 3.8567042910683002`*^9}, {3.8567113570035152`*^9, 
   3.8567113603132315`*^9}, {3.856711781912712*^9, 3.8567117826225586`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"737ffd26-f411-44bf-9853-b766e9dbd5e6"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "integrate[(2*A)/T*sin((2*pi*t)/T)*cos((2*pi*n*t)/T),{t,0,T/2}]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> "Integral", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Integrate[(2 A Cos[(2 n Pi t)/T] Sin[(2 Pi t)/T])/T, {t, 0, T/2}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  FractionBox["T", "2"]], 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "A"}], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "t"}], "T"], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "n", " ", "t"}], "T"], 
                    ")"}]}], "T"], 
                   RowBox[{"\[DifferentialD]", "t"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox[
                RowBox[{"A", " ", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}], "+", "1"}], ")"}]}], 
                RowBox[{"\[Pi]", "-", 
                  RowBox[{"\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Input__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Values", "scanner" -> "Sequence", "id" -> "Values", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{"A", "\"\""}, {"0", "0"}, {"1", 
                 TagBox[
                  FractionBox[
                   RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}], "+", "1"}], 
                   RowBox[{"\[Pi]", "-", 
                    RowBox[{"\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]], Identity]}, {"2", 
                 TagBox[
                  FractionBox[
                   RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}], "+", "1"}], ")"}]}], 
                   RowBox[{"\[Pi]", "-", 
                    RowBox[{"\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]], Identity]}, {"3", 
                 TagBox[
                  FractionBox[
                   RowBox[{"3", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}], "+", "1"}], ")"}]}], 
                   RowBox[{"\[Pi]", "-", 
                    RowBox[{"\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]], Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata,\
numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "3D plot", "scanner" -> "Plot", "id" -> "3DPlot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa31061h1902f03ddb83g0000069d2036f8dehe5i11494138648170584556"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "3DMathPlot"}, {}], "\n  "}]}],
    Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa31071h1902f03ddb83g000002f1c23e9c4dac1771494138648170584556"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "ContourPlot"}, {}], 
       "\n  "}]}], Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Interactive plot", "scanner" -> "Sequence", "id" -> 
     "Plots", "position" -> "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`SequenceScanner`Private`iv$3058202$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`SequenceScanner`Private`nn$3058202$$ = 3, 
                 CalculateScan`SequenceScanner`Private`xmax2$3058202$$ = 4., 
                 CalculateScan`SequenceScanner`Private`xmin2$3058202$$ = -4., 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`SequenceScanner`Private`nn$3058202$$], 
                    3, 
                    Style["A", Italic]}, 0, 6, 1}, {{
                    Hold[CalculateScan`SequenceScanner`Private`nn$3058202$$], 
                    3, 
                    Style["A", Italic]}, 0, 6}, {{
                    Hold[CalculateScan`SequenceScanner`Private`iv$3058202$$], 
                    True, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
3058203["integer `1` only", {
                    Style["A", Italic]}]}, {True, False}}, {{
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmin2$3058202$$], \
-4., 
                    Subscript[
                    Defer[$CellContext`n], 
                    "min"]}, -8., -0.040000000000000036`}, {{
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmax2$3058202$$], 
                    4., 
                    Subscript[
                    Defer[$CellContext`n], "max"]}, 0., 8.}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    
                    PaneSelector[{
                    True -> Manipulate`Place[1], False -> 
                    Manipulate`Place[2]}, 
                    Dynamic[
                    CalculateScan`SequenceScanner`Private`iv$3058202$$]], 
                    Manipulate`Place[3]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Manipulate`Place[4], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[5], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3059122$$ = 
                 False, CalculateScan`SequenceScanner`Private`nn$3058202$\
3059123$$ = 0, CalculateScan`SequenceScanner`Private`iv$3058202$3059124$$ = 
                 False, CalculateScan`SequenceScanner`Private`xmin2$3058202$\
3059129$$ = 0, CalculateScan`SequenceScanner`Private`xmax2$3058202$3059130$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`SequenceScanner`Private`iv$3058202$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`SequenceScanner`Private`nn$3058202$$ = 
                    3, CalculateScan`SequenceScanner`Private`xmax2$3058202$$ = 
                    4., CalculateScan`SequenceScanner`Private`xmin2$3058202$$ = \
-4.}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3059122$\
$, False], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`nn$3058202$$, 
                    CalculateScan`SequenceScanner`Private`nn$3058202$3059123$$\
, 0], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`iv$3058202$$, 
                    CalculateScan`SequenceScanner`Private`iv$3058202$3059124$$\
, False], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmin2$3058202$$, 
                    CalculateScan`SequenceScanner`Private`xmin2$3058202$\
3059129$$, 0], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmax2$3058202$$, 
                    CalculateScan`SequenceScanner`Private`xmax2$3058202$\
3059130$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> 
                  Plot[CalculateScan`SequenceScanner`Private`nn$3058202$$ (
                    Pi - $CellContext`n^2 Pi)^(-1) (1 + 
                    Cos[$CellContext`n Pi]), {$CellContext`n, 
                    CalculateScan`SequenceScanner`Private`xmin2$3058202$$, 
                    CalculateScan`SequenceScanner`Private`xmax2$3058202$$}, 
                    PlotRange -> Automatic, ImageSize -> {300, Automatic}, 
                    Epilog -> Style[
                    Text[
                    Row[{
                    Style["A", Italic], "=", 
                    If[
                    CalculateScan`SequenceScanner`Private`iv$3058202$$, 
                    CalculateScan`SequenceScanner`Private`nn$3058202$$, 
                    SetPrecision[
                    If[
                    CalculateScan`SequenceScanner`Private`nn$3058202$$ != 0, 
                    CalculateScan`SequenceScanner`Private`nn$3058202$$, 
                    "0.00"], 
                    Which[
                    Abs[CalculateScan`SequenceScanner`Private`nn$3058202$$] < 
                    1/10, 1, 
                    Abs[CalculateScan`SequenceScanner`Private`nn$3058202$$] < 
                    1, 2, True, 3]]]}], 
                    Scaled[{0.1, 0.9}]], 12]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`SequenceScanner`Private`nn$3058202$$, 3, 
                    Style["A", Italic]}, 0, 6, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 1}, {{
                    CalculateScan`SequenceScanner`Private`nn$3058202$$, 3, 
                    Style["A", Italic]}, 0, 6, ImageSize -> Tiny, 
                    ControlPlacement -> 2}, {{
                    CalculateScan`SequenceScanner`Private`iv$3058202$$, True, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
3058203["integer `1` only", {
                    Style["A", Italic]}]}, {True, False}, ImageSize -> Tiny, 
                    ControlPlacement -> 3}, {{
                    CalculateScan`SequenceScanner`Private`xmin2$3058202$$, \
-4., 
                    Subscript[
                    Defer[$CellContext`n], 
                    "min"]}, -8., -0.040000000000000036`, ImageSize -> Tiny, 
                    ControlPlacement -> 4}, {{
                    CalculateScan`SequenceScanner`Private`xmax2$3058202$$, 4., 
                    Subscript[
                    Defer[$CellContext`n], "max"]}, 0., 8., ImageSize -> Tiny,
                     ControlPlacement -> 5}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    
                    PaneSelector[{
                    True -> Manipulate`Place[1], False -> 
                    Manipulate`Place[2]}, 
                    Dynamic[
                    CalculateScan`SequenceScanner`Private`iv$3058202$$]], 
                    Manipulate`Place[3]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Manipulate`Place[4], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[5], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKf0VhB4gsSoxtj0oCSlO/\
1kkti4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJShFBU+u4bM7xoSg94CRHxA7301j3gs5I9qd3+D7hEUFIxq+\
asqopqCmB5LkGY1U7RlLemJ+MmUiIoz+hGfD7Vevd7aHDgZjGROtQXI1bAuZZ5IoSHoIdMOYd4zwb+\
74uDx+KhgL4XsBPAL10HgnksQGRnDCMB/vW682U/\
cwMU14TGR86TRZeY7aXqC0pDydwCzHNy4m60VbYCJT5bi5X3KzTkEu/\
Fv4QIQ2JuexSduzJdAvjCtG33lZ/XPuBnh+2xZeitPVxGF+uwx5I5qegFqm83nrOjlGqq610c+\
5uqz5stEgL54y9f/\
SEVV6OYydtmHA7NjUeLX2luFftoUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G34\
jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQQA7GFVtu92hK9SgjkkQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe5ER9mXPypuJZdzTYa8H3INKci1or+\
N9ZGGXB5PhGckIV7Q1Ks3h1VSYyK9ZT8oQcKccIqQ9Jf52G/\
u4WIlkKoDieqSjsWBLc2ZfxL9ssBHwFOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4l\
sR/oHebQrcp/NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/SbwmeuEY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at n = 0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtn=0.", "position" -> 
     "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(A (1 + Cos[n Pi]))/(Pi - n^2 Pi), {n, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    RowBox[{"2", " ", "A"}], "\[Pi]"], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox["2", "\[Pi]"], "-", 
                    FractionBox["\[Pi]", "2"]}], ")"}], " ", "A", " ", 
                    SuperscriptBox["n", "2"]}], "+", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"48", "-", 
                    RowBox[{"12", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "+", 
                    SuperscriptBox["\[Pi]", "4"]}], ")"}], " ", "A", " ", 
                    SuperscriptBox["n", "4"]}], 
                    RowBox[{"24", " ", "\[Pi]"}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["n", "6"], ")"}], 
                    SeriesData[$CellContext`n, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"2", " ", "A"}], "\[Pi]"], ",", "0", ",", 
                    RowBox[{"A", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox["2", "\[Pi]"], "-", 
                    FractionBox["\[Pi]", "2"]}], ")"}]}], ",", "0", ",", 
                    FractionBox[
                    RowBox[{"A", " ", 
                    RowBox[{"(", 
                    RowBox[{"48", "-", 
                    RowBox[{"12", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "+", 
                    SuperscriptBox["\[Pi]", "4"]}], ")"}]}], 
                    RowBox[{"24", " ", "\[Pi]"}]]}], "}"}], ",", "0", ",", 
                    "6", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at n = \[Infinity]", 
     "scanner" -> "Series", "id" -> 
     "SeriesExpansionOfTheIntegralAtn=Infinity", "position" -> "700", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(A (1 + Cos[n Pi]))/(Pi - n^2 Pi), {n, Infinity, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"(", 
                RowBox[{
                  RowBox[{"cos", "(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}], "+", "1"}], ")"}], 
              " ", 
              RowBox[{"(", 
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox["A", 
                    RowBox[{"\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]]}], "-", 
                    FractionBox["A", 
                    RowBox[{"\[Pi]", " ", 
                    SuperscriptBox["n", "4"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "n"], ")"}], "6"], ")"}], 
                    SeriesData[$CellContext`n, 
                    DirectedInfinity[1], {}, 2, 6, 1], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["A", "\[Pi]"]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["A", "\[Pi]"]}]}], "}"}], ",", "2", ",", "6", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus], ")"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Integrate[(2 A Cos[(2 n Pi t)/T] Sin[(2 Pi t)/T])/T, t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "A"}], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "t"}], "T"], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "n", " ", "t"}], "T"], 
                    ")"}]}], "T"], HoldForm], 
                   RowBox[{"\[DifferentialD]", "t"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   FractionBox[
                    RowBox[{"A", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "-", "1"}], ")"}], " ", "t"}], "T"], ")"}], 
                    RowBox[{"n", "-", "1"}]], "-", 
                    FractionBox[
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "1"}], ")"}], " ", "t"}], "T"], ")"}], 
                    RowBox[{"n", "+", "1"}]]}], ")"}]}], 
                    RowBox[{"2", " ", "\[Pi]"}]], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"recalculate" -> "true"}, {"recalculate"}], Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, Typeset`pod34$$, 
   Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, Typeset`pod38$$, 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {{3, 
     Hold[Typeset`pod3$$], 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa31061h1902f03ddb83g0000069d2036f8dehe5i11494138648170584556"}, {4, 
     Hold[Typeset`pod4$$], 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa31071h1902f03ddb83g000002f1c23e9c4dac1771494138648170584556"}}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[False], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "8", "datatypes" -> "", "timedout" -> "Plot", "timedoutpods" -> 
    "", "timing" -> "3.888", "parsetiming" -> "0.907", "parsetimedout" -> 
    "false", "recalculate" -> 
    "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa31031h1902f03ddb83g000003gd48ibge15g878g1494138648170584556", "id" -> 
    "MSP31041h1902f03ddb83g000004bc480h6ad2g45cg", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "9", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa31051h1902f03ddb83g00000216agi9a3a4820d41494138648170584556", "version" -> 
    "2.6", "inputstring" -> 
    "integrate[(2*A)/T*sin((2*pi*t)/T)*cos((2*pi*n*t)/T),{t,0,T/2}]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 21, 22, 13, 37.139417`9.322409970314203}, "Line" -> 
    18, "SessionID" -> 34128199570832949953}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9}, Typeset`failedpods$$ = {10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
    37, 38}, Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "integrate[(2*A)/T*sin((2*pi*t)/T)*cos((2*pi*n*t)/T),{t,0,T/2}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1055.8000000000002`, {824.9026367187499, 833.8973632812501}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa31031h1902f03ddb83g000003gd48ibge15g878g1494138648170584556", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.856886017204291*^9},ExpressionUUID->"a5b51f39-3e36-4e1d-839a-\
e68c1dc6ce49"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"integrate", "[", 
    RowBox[{"cos", "(", 
     FractionBox[
      RowBox[{"2", "*", "pi", "*", "n", "*", "t"}], "T"], ")"}]}], 
   TraditionalForm]],ExpressionUUID->"5ab8d473-7a92-4a00-b798-f5976b671164"],
 ",{t,-T/2,T/2}]"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.856703048332489*^9, 3.8567031442223783`*^9}, {
  3.85670318080842*^9, 3.8567031962731133`*^9}, {3.856703307858878*^9, 
  3.8567033167787294`*^9}, {3.8567033576913257`*^9, 3.8567034629381495`*^9}, {
  3.8567044713352957`*^9, 3.8567045081983337`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"7d634c96-146d-4854-952f-22c8bb07b575"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "integrate[cos((2*pi*n*t)/T),{t,-T/2,T/2}]",
    Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> "Integral", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[Cos[(2 n Pi t)/T], {t, -T/2, T/2}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", 
                  RowBox[{"-", 
                    FractionBox["T", "2"]}], 
                  FractionBox["T", "2"]], 
                 RowBox[{
                   RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "n", " ", "t"}], "T"], 
                    ")"}], 
                   RowBox[{"\[DifferentialD]", "t"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox[
                RowBox[{"T", " ", 
                  RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}]}], 
                RowBox[{"\[Pi]", " ", "n"}]], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Input__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "3D plot", "scanner" -> "Plot", "id" -> "3DPlot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa26841hdbg66h85eb048i000013eha8h1a076a7ac822558548030476863", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "3DMathPlot"}, {}], "\n  "}]}],
    Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa26851hdbg66h85eb048i00005hbf6cac17bfgdi0822558548030476863", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "ContourPlot"}, {}], 
       "\n  "}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Interactive plot", "scanner" -> "Sequence", "id" -> 
     "Plots", "position" -> "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`SequenceScanner`Private`iv$2803637$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`SequenceScanner`Private`nn$2803637$$ = 3, 
                 CalculateScan`SequenceScanner`Private`xmax2$2803637$$ = 1, 
                 CalculateScan`SequenceScanner`Private`xmin2$2803637$$ = -1, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`SequenceScanner`Private`nn$2803637$$], 
                    3, 
                    Style["n", Italic]}, 0, 6, 1}, {{
                    Hold[CalculateScan`SequenceScanner`Private`nn$2803637$$], 
                    3, 
                    Style["n", Italic]}, 0, 6}, {{
                    Hold[CalculateScan`SequenceScanner`Private`iv$2803637$$], 
                    True, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
2803638["integer `1` only", {
                    Style["n", Italic]}]}, {True, False}}, {{
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmin2$2803637$$], \
-1, 
                    Subscript[
                    Defer[$CellContext`T], 
                    "min"]}, -2, -0.010000000000000009`}, {{
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmax2$2803637$$], 1, 
                    Subscript[
                    Defer[$CellContext`T], "max"]}, 0, 2}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    
                    PaneSelector[{
                    True -> Manipulate`Place[1], False -> 
                    Manipulate`Place[2]}, 
                    Dynamic[
                    CalculateScan`SequenceScanner`Private`iv$2803637$$]], 
                    Manipulate`Place[3]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Manipulate`Place[4], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[5], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2804062$$ = 
                 False, CalculateScan`SequenceScanner`Private`nn$2803637$\
2804067$$ = 0, CalculateScan`SequenceScanner`Private`iv$2803637$2804068$$ = 
                 False, CalculateScan`SequenceScanner`Private`xmin2$2803637$\
2804069$$ = 0, CalculateScan`SequenceScanner`Private`xmax2$2803637$2804070$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`SequenceScanner`Private`iv$2803637$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`SequenceScanner`Private`nn$2803637$$ = 
                    3, CalculateScan`SequenceScanner`Private`xmax2$2803637$$ = 
                    1, CalculateScan`SequenceScanner`Private`xmin2$2803637$$ = \
-1}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2804062$\
$, False], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`nn$2803637$$, 
                    CalculateScan`SequenceScanner`Private`nn$2803637$2804067$$\
, 0], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`iv$2803637$$, 
                    CalculateScan`SequenceScanner`Private`iv$2803637$2804068$$\
, False], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmin2$2803637$$, 
                    CalculateScan`SequenceScanner`Private`xmin2$2803637$\
2804069$$, 0], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmax2$2803637$$, 
                    CalculateScan`SequenceScanner`Private`xmax2$2803637$\
2804070$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> 
                  Plot[CalculateScan`SequenceScanner`Private`nn$2803637$$^(-1)
                     Pi^(-1) $CellContext`T 
                    Sin[CalculateScan`SequenceScanner`Private`nn$2803637$$ 
                    Pi], {$CellContext`T, 
                    CalculateScan`SequenceScanner`Private`xmin2$2803637$$, 
                    CalculateScan`SequenceScanner`Private`xmax2$2803637$$}, 
                    PlotRange -> Automatic, ImageSize -> {300, Automatic}, 
                    Epilog -> Style[
                    Text[
                    Row[{
                    Style["n", Italic], "=", 
                    If[
                    CalculateScan`SequenceScanner`Private`iv$2803637$$, 
                    CalculateScan`SequenceScanner`Private`nn$2803637$$, 
                    SetPrecision[
                    If[
                    CalculateScan`SequenceScanner`Private`nn$2803637$$ != 0, 
                    CalculateScan`SequenceScanner`Private`nn$2803637$$, 
                    "0.00"], 
                    Which[
                    Abs[CalculateScan`SequenceScanner`Private`nn$2803637$$] < 
                    1/10, 1, 
                    Abs[CalculateScan`SequenceScanner`Private`nn$2803637$$] < 
                    1, 2, True, 3]]]}], 
                    Scaled[{0.1, 0.9}]], 12]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`SequenceScanner`Private`nn$2803637$$, 3, 
                    Style["n", Italic]}, 0, 6, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 1}, {{
                    CalculateScan`SequenceScanner`Private`nn$2803637$$, 3, 
                    Style["n", Italic]}, 0, 6, ImageSize -> Tiny, 
                    ControlPlacement -> 2}, {{
                    CalculateScan`SequenceScanner`Private`iv$2803637$$, True, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
2803638["integer `1` only", {
                    Style["n", Italic]}]}, {True, False}, ImageSize -> Tiny, 
                    ControlPlacement -> 3}, {{
                    CalculateScan`SequenceScanner`Private`xmin2$2803637$$, -1, 
                    Subscript[
                    Defer[$CellContext`T], 
                    "min"]}, -2, -0.010000000000000009`, ImageSize -> Tiny, 
                    ControlPlacement -> 4}, {{
                    CalculateScan`SequenceScanner`Private`xmax2$2803637$$, 1, 
                    Subscript[
                    Defer[$CellContext`T], "max"]}, 0, 2, ImageSize -> Tiny, 
                    ControlPlacement -> 5}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    
                    PaneSelector[{
                    True -> Manipulate`Place[1], False -> 
                    Manipulate`Place[2]}, 
                    Dynamic[
                    CalculateScan`SequenceScanner`Private`iv$2803637$$]], 
                    Manipulate`Place[3]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Manipulate`Place[4], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[5], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfEawI7QsSoxtj0oCSlO+\
9JU5i4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJVGKCp5cw2d3jAmJ3iMMfpDY+\
W4a817IGWh3foPvA4sKBpp81ZRRTYmaHkjIMxqp2jOW9MT8ZMpEBIz+JM+\
2d14MXw93HAzGMgatieRq2BYyzyQokvQQ6IYx7xjwb+74uDx+\
KhgLyfeC8Iioh8Y7kRAbGMGBYT7et15tpu5hYhp4DDK+\
dJqsPEdtL1BaUp5OyCzHNy4m62VbYJCpctzcL7lZpyAX/i18IEIbk/PYpO3ZEugXxhWj77ys/\
jl3Azy/bQsvxelq4jC/XYa8gaYnRC3T+bx1nRwjVdfa6OdcXdZ82WiQF0+Z+n/\
piCq9HMZ22zDI7NjUeLX2luFftYUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G34\
jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQkJwYV2y53aMp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe6go+zLHxW3ksu5JkPeD7kmKZFrRX8b6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWBRHVJx+LAlubMP4l+\
WeAjwlOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb1IFuI4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at n = 0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtn=0.", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[(T Sin[n Pi])/(n Pi), {n, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{"T", "-", 
                    RowBox[{
                    FractionBox["1", "6"], " ", 
                    SuperscriptBox["n", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["\[Pi]", "2"], " ", "T"}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "120"], " ", 
                    SuperscriptBox["\[Pi]", "4"], " ", 
                    SuperscriptBox["n", "4"], " ", "T"}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["n", "6"], ")"}], 
                    SeriesData[$CellContext`n, 0, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{"T", ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[Pi]", "2"], " ", "T"}], "6"]}], ",", 
                    "0", ",", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["\[Pi]", "4"], " ", "T"}], "120"]}], "}"}],
                     ",", "0", ",", "6", ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[Cos[(2 n Pi t)/T], t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TagBox[
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "n", " ", "t"}], "T"], 
                    ")"}], HoldForm], 
                   RowBox[{"\[DifferentialD]", "t"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   FractionBox[
                    RowBox[{"T", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "n", " ", "t"}], "T"], 
                    ")"}]}], 
                    RowBox[{"2", " ", "\[Pi]", " ", "n"}]], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {True, False, {False}, True},
    Typeset`aux5$$ = {True, False, {False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "6", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.444", "parsetiming" -> "0.687", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP26821hdbg66h85eb048i00003fc8b6fe118b0b2e", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "12", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa26831hdbg66h85eb048i00003i21d2fa8i1agdc1822558548030476863", "version" -> 
    "2.6", "inputstring" -> "integrate[cos((2*pi*n*t)/T),{t,-T/2,T/2}]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 21, 21, 46, 18.2257841`9.013261161442802}, "Line" -> 
    14, "SessionID" -> 34128199570832949953}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6}, Typeset`failedpods$$ = {2, 3}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "integrate[cos((2*pi*n*t)/T),{t,-T/2,T/2}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1055.8000000000002`, {498.90263671875, 507.89736328124997`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8568843782660904`*^9},ExpressionUUID->"73f9094c-a882-4151-82f9-\
dad1e8b60e7b"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"integrate", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"2", "*", "A"}], "T"], "*", 
     RowBox[{"sin", "(", 
      FractionBox[
       RowBox[{"2", "*", "pi", "*", "t"}], "T"], ")"}], "*", 
     RowBox[{"sin", "(", 
      FractionBox[
       RowBox[{"2", "*", "pi", "*", "1", "*", "t"}], "T"], ")"}]}]}], 
   TraditionalForm]],ExpressionUUID->"24c41049-6d77-4097-b11c-e53beaecc28c"],
 ",{t,0,T/2}]"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.8567112814535017`*^9, 3.8567112969435735`*^9}, {
  3.856711339603341*^9, 3.8567113477134967`*^9}, {3.8567673282277637`*^9, 
  3.856767329023343*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"370d7ef0-9ab0-4c9d-8b00-d710ab334561"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "integrate[(2*A)/T*sin((2*pi*t)/T)*sin((2*pi*1*t)/T),{t,0,T/2}]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> "Integral", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Integrate[(2 A Sin[(2 Pi t)/T]^2)/T, {t, 0, T/2}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  FractionBox["T", "2"]], 
                 RowBox[{
                   FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "A"}], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "t"}], "T"], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "t"}], "T"], ")"}]}], 
                    "T"], 
                   RowBox[{"\[DifferentialD]", "t"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["A", "2"], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Input__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[(2 A Sin[(2 Pi t)/T]^2)/T, t]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "A"}], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "t"}], "T"], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "t"}], "T"], ")"}]}], 
                    "T"], HoldForm], 
                   RowBox[{"\[DifferentialD]", "t"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   FractionBox[
                    RowBox[{"2", " ", "A", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox["t", "2"], "-", 
                    FractionBox[
                    RowBox[{"T", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"4", " ", "\[Pi]", " ", "t"}], "T"], ")"}]}], 
                    RowBox[{"8", " ", "\[Pi]"}]]}], ")"}]}], "T"], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Helvetica", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`aux1$$ = {True, False, {False}, True}, 
   Typeset`aux2$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.331", "parsetiming" -> "0.9460000000000001", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP1489132h9c0hi2ie9fg100005142630a71h6iacf", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "8", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa1490132h9c0hi2ie9fg100004277g770ai75448a3172133347439184749", "version" -> 
    "2.6", "inputstring" -> 
    "integrate[(2*A)/T*sin((2*pi*t)/T)*sin((2*pi*1*t)/T),{t,0,T/2}]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 21, 21, 46, 15.6461825`8.946983339878647}, "Line" -> 
    13, "SessionID" -> 34128199570832949953}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "integrate[(2*A)/T*sin((2*pi*t)/T)*sin((2*pi*1*t)/T),{t,0,T/2}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1055.8000000000002`, {163.90263671875002`, 172.89736328124997`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8568843756657333`*^9},ExpressionUUID->"d6332e7e-20c2-457d-a97a-\
e9f289ed3555"]
}, Closed]],

Cell[CellGroupData[{

Cell["table[sin(pi-pi*n),{n,10}]", "WolframAlphaLong",
 CellChangeTimes->{3.8567120640122156`*^9},
 CellLabel->"In[39]:=",ExpressionUUID->"bf2a3020-0ff3-441b-bf21-4220dedc73cf"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "table[sin(pi-pi*n),{n,10}]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Table[Sin[Pi - Pi n], {n, 10}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               TagBox[
                StyleBox[
                "Table", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], HoldForm], "[", 
               RowBox[{
                 RowBox[{"sin", "(", 
                   RowBox[{"\[Pi]", "-", 
                    RowBox[{"\[Pi]", " ", "n"}]}], ")"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"n", ",", "10"}], "}"}]}], "]"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "List", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Table[Sin[Pi - Pi n], {n, 10}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   StyleBox["n", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "1", "2", "3", "4", 
                 "5", "6", "7", "8", "9", "10"}, {
                 TagBox[
                  PaneBox[
                   StyleBox[
                    RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "0", "0", "0", "0", 
                 "0", "0", "0", "0", "0", "0"}}, 
               GridBoxAlignment -> {
                "Columns" -> {
                  Left, ".", ".", ".", ".", ".", ".", ".", ".", ".", "."}, 
                 "Rows" -> {{Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata,\
numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.5680000000000001", "parsetiming" -> "0.338", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP20211db25hbe351694f200004ce49f6bfe5890e0", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "17", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa20221db25hbe351694f2000061de0g91373bch3f3454770973695860617", "version" -> 
    "2.6", "inputstring" -> "table[sin(pi-pi*n),{n,10}]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 19, 21, 54, 29.1121787`9.216649618488415}, "Line" -> 
    39, "SessionID" -> 34127120128274598448}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "table[sin(pi-pi*n),{n,10}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1079.1999999999998`, {118.16083984375, 125.03916015624999`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.856712069122344*^9},ExpressionUUID->"df61eeb5-7827-4137-9936-\
cb2f2ba6e335"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "2*abs(",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"A", "+", 
     RowBox[{"A", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", "n"}]]}]}], 
    RowBox[{
     RowBox[{"2", " ", "\[Pi]"}], "-", 
     RowBox[{"2", " ", "\[Pi]", " ", 
      SuperscriptBox["n", "2"]}]}]], TraditionalForm]], "Print", 
  "WolframAlphaFullOutput",
  CellChangeTimes->{3.856717481057328*^9},ExpressionUUID->
  "ad739938-92c4-44fc-ac65-912b94c28821"],
 ")"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.8567177003495474`*^9, 3.8567177148246126`*^9}, {
  3.856717765561653*^9, 3.85671777462245*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"a4f5bfb8-b253-407e-8951-e55932167c21"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "2*abs((A + A E^(-I \[Pi] n))/(2 \[Pi] - 2 \[Pi] n^2))", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"2 Abs[(A + A/E^(I Pi n))/(2 Pi - 2 Pi n^2)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"2", " ", 
               TemplateBox[{
                 FractionBox[
                  RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", 
                    "n"}]]}]}], 
                  RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]]}, "Abs"]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Values", "scanner" -> "Sequence", "id" -> "Values", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{"A", "\"\""}, {"0", "0"}, {"1", 
                 TagBox[
                  RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"1", "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]]}, "Abs"]}], 
                  Identity]}, {"2", 
                 TagBox[
                  RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"2", "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]]}, "Abs"]}], 
                  Identity]}, {"3", 
                 TagBox[
                  RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"3", "+", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]]}, "Abs"]}], 
                  Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata,\
numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {
    "title" -> "3D plot", "scanner" -> "Plot", "id" -> "3DPlot", "position" -> 
     "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], {A, -5., 5.}, \
{n, -1.51513, 1.51513}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            Graphics3DBox[{
              GraphicsComplex3DBox[CompressedData["
1:eJyFfXd8z9f3P4LU3mq0qora1KgVzpuqvaraau1doyhq1qi9asSoTe291Qhu
iJEIFcSMFRJCIiJLkMhXX+/zvK/P63B/v/yTR56Pk3Pvfd5zzz333Pu699Nu
A9v0TJcmTZpFmdOk8Xj7u9qWnEGpqXl8Bx5NbJ1SJ0mNKLxlnN/gZPJtnL2o
d/FcGi/i9csvnbol0aJ/P7zX2Durxk92qNT+5TfxtC1LnvG/hGTUeN8xcY0X
1IuhE5aetBr/1NITQTst+UQFvL8lf4/2WfhDjQ+y8CBKY/0EHwEekOmGn9/g
I16r3fIEvBvLr3fr13hP1n/UXR8X8IJcn03u+mu8N9ff291ejR/n9h5z86Px
wswP8+mSfILn/DmT+vQ7E69mVL/8JPepNC7wDDz63LXis1Wy5hn4mTKZhibG
v9A8A189rZZfpzJxmmfgzy09UZpn4Gss+QeaZ+AbLPyy5hl4u1Xp8+Q55at5
Br6I5cEz8KWsHzwDf8z1Ac/Al3P9wTPwk9xe8Az8CfMDniWf4Plot5cTbrR+
rr7fVPTFx6U8NM/A07wp3GtqvzQu8Az8h40VtoR2fK15Br69TYlp+8ISNM/A
01l6YjTPwHdZ8uGaZ+D7LPyK5hl4wvzMJYqU8tM8A/+b5cEz8PWsHzwDT0lx
1wc8A9/E9QfPwL/l9oJn4G9S3PyAZ8knePbvm1B9zr5IVT3TqguHGmXQPAN/
6Jm4e1SddJpn4OWyLS01vNcbzTPwGZkbP036JknzDPyxpSdW8wx8tiUfoXkG
Pt/Cr2uegZe+sSrd4UanNM/Ax7E8eAY+ifWDZ+APuD7gGfgUrj94Bl6K2wue
gYcxP+BZ8un0G2EqcOc07zZZPIXfCFM7FrWOnOPr4XL6jTDlPaZAg/O/pXE5
/UaYeuLvWzPf96+E3whTuyw9ccJvhKmnlvwT4TfCVJyF3xR+I0xNvOUX0CbL
GeE3wtQtlnf6jTB1n/U7/UaY2sb1cfqNMPWQ6+/0G2FqDrfX6TegR9utS/Lp
tOcQ1WjZzvD0nT4Q9hyipnRpsfru/fTCnkPU6RKRPx3undbltOcQlflqrrJl
brwW9hyiplt64oU9h6jslnyksOcQldfCQ4Q9h6jkWfmLZujkL+w5RL2+4pZ3
2nOISsv6nfYcoiZwfZz2HKIycP2d9hyi/Li9TnsOUZOYH6c923w6eQ5UZVsU
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
faHtyfemh9Yz/XK5ekml42lJnR3HAholK+iJyZiv/uqDUZTY2NVh7uJnqujd
zwvUfYt/1q5y97FZ7tHhG8Pr5Rr4nCB/ZGTKsdX7Qmlm5z/S+t9KpqeMhxWs
nxrT6intG3yqC5VI74J85o5+q1b/Fk/Lq531LXQrk8aLbA9Xjb96RVOT/i2a
6J1D40vfeAwa8UEal8/tPr4R63JrfGPJfOObP0vnqrni+4Tvg06pjz9fFNdm
TAyN7nbl47yj9tPrbHty7/kjlFoMPlX4m7d21a3Vtl51al2k1c+T/OdUiKfI
X9db+PGQgUcq3npA+Z4PWf+iwyWKiK/z6HVKNE0YfuNDrw0n9HoQ46vtxKS3
4+K0Xg8CL8945HKrPsT1URW5PtBzaI/bP/TJ8p+dnNF6gNdjXMiTQZ4gP3TG
tL7XXu6mKw3d9ffslKbD3HprKN9MC1dXGV/FuGgXoV113Two5kFtZR7q9v3d
0gP8r9tx7f/Ts62PhYM3lZZx4ZcIfgnzJtrbJYt73GX5JTnXrd9jVTG3vdGT
Qx5Dr5y+T2MT0w9NWhqmNv++J+3At3h3r7Ez2j8NpoNue/B95rYHWsz2MN1t
P7B/msf2s8ptbxrPxfZ22G2fGEeUi+1zkdueFdszxbA9b21hjQuKuueuZ9Gf
3ONioXscwf4pksfRLve4c/G4o8k87la5x6kL8qt5nE5zj2vYOe3jcV3L7Qe0
/CP2A8KvKvhV4T+VwX8qg/9UBv+pDP5TGfynMvhPZfCfyuA/lcF/KvhPMS8T
5mUx/5Jh/iXD/EuYf9Fe4Bkt+ask5lkyzLNkmGfJMM+SYZ4lzLOIG4G3tvB7
0u8p+D0hryAfMqtbwFt/qFqyfM/KfpY/7B1zekL2K1EqUym3H2tcbPGuzN1v
SXmC/JECh94svxOnqrvl6Xy3450zz7XjefiBppafuUqdXx33rrw8TLG/Uh+s
/v6zAdHBOr6FfEFL/h/67dy+Wve/u0p72c/fGNWg+ZyUU3To3pmtP+8eT/sY
b5kp/HzPgYN03LiB/fOetcPe8nmLvip7oliVIo8Uy6vx1SNz+Z+4quNS+PNR
3Ua95SeIPovqfnvj4oeKy1Wlc/z+oDldlfoJ+g9xPIl+acA8P/OtlzDz0VP6
+u9xjYq9xWfn9+25+Zfb1LZE8JMFtXP7/jK/0Wcr3+IeH5X1S45J6zo+de1v
LX2za3xCx0yZxtV/Q9dPrsw3JFMmjadOODIz/dokepZ26f6/2nhofPSmgdln
eMRRlrFlto6o/loBf7rs62Kf+D+hYp9kyFfwaQoBb/708InNg5/SuDZTn/Te
nt4FvOI3WzpdaBdPPfPNavpVj8wa31X2RUiTpJf0ef/G383JllPjVTM2+PHk
X6m08nzTDCkRuTXeeVDjfquWpXMxjnoq4KXdejReg/X0c5er8X+43PHuemq8
EteznLtdaK/6ntvVNqbe1Ynzn6G9asf5H1q1zX2X0rn50XgY8/PYzSfqr35j
Pq+4+dd4MvN/xN1fGh/L/dXG3b8aT8v922/UhcyTHp5B3KIahs+7lmbaARLx
jEI8M35RYKOFXreoAcdjDYp8tHvu9nOU4/Ega77GvP/1gqvWfI3596v6s75a
/jZOGHCiS2z11ie9RJyjEOcIeQV55H+AX/r2j5KFq9t5fugHPnRHeNW/Nj9T
/RMC863zeEapf/hl+iv3PXKV3PPTgx9DED9Qu16Xv05/JpBEPECIB0Q8rNdT
Yp2l4+TqpTqPORd6T91mP9CsxIUGmVe9Hb/l3Tj4/L2MGxf8E/gX8YNC/CDi
DYV4Q8QVyhBXKENcoRBXiPhHIf45fGDdm9w3Y3S87dMrKG3rj0NlvKEM8YYy
xBvKEG8oQ7yhEG+I9QgZ1iNkWI+QYT1ChvUIYT0i7J9g/6v7WrzpeCz8Hzdv
Yj1ChvUIGdYjZFiPkGE9QliPYP7CeBnP4yK6pGWHhPk04jO3HQp5MsgT5Au7
7VavL16Eue1WzNeE+VplteIBVYjn69ot3fEAOcejwnjEPIj6B7y516Ftn4v0
z3R3uZhnb8a5yxXrIMI6qOWf7nUQ5Lu0cfsx5KOyhLjlh4/7T34DhW3/uc7E
VlHqPrfrYGKpCXPuhtBPPx898UPvUD3/Hm5Zd8jkYhdlXKEQV1zd5tYDHqYk
uPWIPIPOS4i4TiGuE/kWQr5F5Dd0viLuz6gVARdy+Wa9+9kH/8VR33odq5t/
alpXcrvgkAMR2TROuyonrB2QQjkWXRh964sPNB78KKJ/4QsvqNTls4XTjk6n
8YGfrArzrhhLw4vOGt5s2ksFPNOOLQfzFn1M1xOXTPtvPZuNcdfCtdP/i8f2
/b62ccPlqQT5LCWrL3UVfkZf/fH9pDeTMrggP7J9zyulyidQ2Qbtw27UzqLx
sM92dtx97hXN8Ki05qeROTX++bDk2I++TONK37NyG/+2eVzQ/91Pn1YPzeDh
+tMt78vyVNopj3YR5Cu7y9XyT7jcRu56anws11O52wUeKB+3azU1ii5VLYqe
8Lp+3Yh4lfFECA1y8wYeyIN5K+rmGfWn3sxzVne/aPwi90uiux81XpP7Mcbd
7xpvzf2e+0DaNJk9YlXjl0UyjxsdQ+XuDu5760godbhZyFWoYYwq78ZV2y5b
au/JeE/Gzwrx8+RDlh7ameTWExLq1iPsjQz2RgZ7I4O9kcHeCPYm7IoMdkUG
uyKDXZHBrrSdCPsx2ZuCvQm7Uga7Uga7UrCrWtUyDCz91q4gP7pWhdae79qV
MtiVMtiVMtiVMtiVgl15Hzv0U9cCOIccr1q3O9O5X7s3FH2pW/iJSjn1ebPv
lnvk9vZ8oXHIz6wX8XhXyde00Hl+XvnxefKWL/okZPH7QOOVP+64rsvy51oe
ek7zOX/IA0+bt8yb2n7x5Fn0SOYLcem1nno+eULmnH+qcch7pTSd9se855xX
Tyvu5Yig2Pu+fbdseaXP770+cjq13Iv7Wt55v0SUlgfeY1XBmgU7PKQeVXsu
rJQ1TuvZNdpV/MWHIRqH/N4H/yxt/PwubXXsQ+HejyCqcXjAd49G/qvlS/2T
tOPyn4f4uwP7vo5+LM/6SZYLeed9F5e1PPB9XB9uF0kegMv2+or7QD5mPpl/
jbu4XyAv+YS87C/ud5e0E+DSHhaK+0Zgb2yfLmm3C53fleh7QiAv7ZnHhdYT
EXLVv8zRlxqX4wXjCPtQ/l/6R2b/Lq0L4wX44Bl3fVM9UrX96/si+Hsi2D/w
WifHzPc78ELbOfCPQ8/9vj5XvLZb530dMdpudX2qXV15acZjbW/AwwpM3R9T
6ai2H+Db+Psp2A/wOQOH/rqorm0nwM+wfvS7rA/6HfhHXH/0L/Ca3N6Fzu+t
ND/oL8kn+kXyj37BedFtHSvkCnd56H4BXnTP0TY5a9l5TuBl+Xs69AvwvP8c
3Hq+3SvdL8BTOl2rULxZou4X4I/4Oz70C/DVXUv3XdM5SvsN4EP29hrUqkGY
7i/gP3WYHLf+S1/dX8Bn8XeF6C/gQ1kP+kuWi/4C/pDrif6S7UJ/SR4WOr9D
1LyhvyTP6C/ZL875KEwdbNJ9xOgb6V3OeSdMrXtQp9O6jelcznkkTM3j70yd
80iYSq7w8NuoqclivghTV7ot+6Ru8STh/3FPSJzw/2Eqx8IsA/wORQs/H6ZO
JP+WoXdsuPDnYWpppbIXD84+Lvwz7hW5Kfyzrcfph8NUTi7X6VfD1E6up9Ov
hqmr3C6n/7R5cPpDmzenP7R5dvo9u1+c4ytEfTTUL2tUloxifIWomObXqlw+
5CHGV4g6xd9fO8dXiKqakuLxVdk3YnyFqNs7SrTJNfWlGF8haip/9+0cXyGq
Uu7forfXjRHjK0TtmVpzZFLVR2J8haifanY9c3ruCTG+cD9JiBhfth7n+ApR
Fblc5/jCvSjxYnzZ7XKOrxBVhXlwji+bN+f4snl2ji+7X5z9Fah69p0y7EKA
7K9AtWLq81WHuqcX/RWorvC9BM7+ClQfT5oTXrhiquivQDXnWM8aMd1eif7C
vSUJor8C1eAque8sPiv7K1AFhAR1vZks+ytQ1ci/cd+OSn6iv3DPyS3RX4HK
n/U4+8su19lfdj2d/WW3y9lfNg/O/rLvY3H2l82zs78CVQ/uF/QXzsNPrnm8
xqeZPXV/AT8zr2WJhivs/gKeme/rQH8BXzbpUvInU+3+Av5ptadX+my3+wv4
Br4nBP0FvNyiYtNSXtr9BbzHn6NOzHZF6P4CHlFn4bLrvez+An6X7y1Bf0k9
6C9ZLvoL+EauJ/oLeFFuF/pL8oD+Ao57XdBfwP2ZZ/QX8CncL2J8kWF8kWF8
kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kRhf
+t4SwzxFhnmKDPMUGeYpMsxTZJinyDBPkWGeIsM8RYZ5igzzFBnmKTLMU2SY
p8gwT5FhniLDPEVynsL3KYY4kAxxIBniQDLEgWSIA8kQB5IhDiRDHEiGOJAM
cSAZ4kAyxIFkiAPJEAeSIQ4kQxxIhjiQ3h8HRpJhnUWGdRYZ1llkWGeRYZ1F
hnUWGdZZZFhnkWGdRYZ1FhnWWWRYZ5FhnUWGdRYZ1llkWGeRYZ1Fcp2Fc6qG
fAUZ8hVkyFeQIV9BhnwFGfIVZMhXEPIVIi9BhrwEGfISZMhLkCEvQYa8BBny
EmTIS5DMS+D7L5l3BS7zq8AN+VKS+VLgMi/qvGfmnTwnyTwncOQzRd6SZN7S
eS/NO3lIknlIWa7IH5Ihf0gyfyh5EHk/MuT9SOb9ZL+gv/B9HPKBIk9OIt+o
cUM+nJDnFPltqufMo4r7at7JYxPytyIvTTI/DNyQT9byIj9MIk+uvx805IEJ
eWCR1yWR/3dJfkT+VvMJ/u82WdP1eXSCKtds3u3PA5I1/xsmNv9xeP4X6vsv
/x748O3/gf8B4v5t8H+b9aQdNWv1o1l63tR6bruqF0io90zzDz2fCP6h52zB
xNd7H4Vp/tezngJl2q2plfOW5v8X1jNA8H+L9bSutuqjDC/vaP6hZ3H9J17e
/cI0/9BTVPCP+gyqdehxy2sxmn/oqXrgVdr9l2I1/9BzSvCP+sza2HRWhxid
9/adsnztqM4jYlWFXD96d5mu4wTfFldbDA5fFad6+ca/3txExxW++US+HfxP
Yj1dvv71j7MLEjX/0OO7c/LL/K5YzT/0PBP+Cnr8groc2Vg+QvOcl+XXCv8z
keVrrF0TVPlsqOa5OZfbP/2cwg0OPdI8Q89z4X9Q7tIK3llydo/TPEPPbe8v
c1Z7mKB5hp4A4X9QnyVZLu/IGJqi/Q/0TFm7Prf/Mz2P+La/0+TzZR7Rar2f
X/+gVfa6/nvGD2f7a0GpUS81Pz8wPqJUi1Vd+kRqHr5jfPfRoUPHb3ug2wX5
LtfLjDu4LEHXE/IJm7J1W7wrjZ6/Nll29UjdOtK3elx9Oz7/8sXqxhN7PlZD
J6WtsWi9He+dMeTV17OetjM6Tb+367W2h2qsZ+HshHplz9nx3mlDXn0d67lX
7UKj/Qeeans4yfKzRfy2luX3Tc3asttyO96uyuVe9u05d1dXez/rpCgXvEFP
3SpjslZfq+3cBT1Hf3INu1FRz+NaT3kRv61hPd/kejWiiJcdb1dhPdOflGzz
yzU7fkss1Wrmt6XvqcZBWZ5nWJZB8++2z/uqy+kKPo2T7PVRPs7feov1URzr
OVL9o6avpqdo/ieyno83PGvvMdleH+U15MljWU/Qino9Lvo80/znZvlIsd55
zvITMmx7PTT+oeZ/Ape7uvC+hy1Gaz/sgp5dYr0DPYv6XczXvKS9PoWe3+LP
ZKtWOkXzDz1yvRPDeqr1fXi1Qh97ffoH6/nzaaEFXZtm0PxPt/BLakpQux7N
5tv5BLc9X1OJn6ZsD4y08wmnDXnvCawn982vnpcJtPMJa1nP7tBPmn3gZ+cT
/Ax57/GsZ3WaAuF/z47R/B9n+SwiPzCW5b17jOt1L9jOD6zmcj2+Hvho3Sg7
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
t3V/AZf9BVz2C3DJP3DJM3DJJ3DJG3CML+H3yOD3yOD3yOD3yOD3yOD3CH5P
+Dcy+Dcy+Dcy+Dcy+Dcy+Dcy+DeS/o3nEULcIuIcQpwj4hbCvCPiHMI8JeIW
Qtwi4hxCnCPiFkLcIuIcQpwj4hZC3CLiHEKcI+IWQtwi4hxCnINxAfm/cqSW
VN1DZHxCiE9EPEOIZ0R8QohPRDxDiGdEfEKIT0Q8Q4hnRHxCiE9EPEOIZ0R8
QohPRDxDiGdEfEKIT0Q8Q9ucduIy2IlL2olYp5BhnUKGdQoZ1ilkWKeQYZ1C
WKeI9QgZ1iNkWI+QYT1ChvUIGdYjZFiPkFyPYH9q+HetAr/clFbzpvdfeD2I
fRnIn3lQYdOuX1L0u4TA13ykDsXNsN9nBD7S0m+/zwh8nSX/SI8X4Jst/Jrm
E/hCxvFuI/AlrAfvNgIfwuVuZj6Br+R6gk/gftwu8Al8GPODd76AI88g8jxk
yPOQIc9DhjwPGfI8ZMjzEPI8Im9DhrwNGfI2ZMjbkCFvQ4a8Dcm8DefHCPlD
kSckQ56QDHlCMuQJyZAnpD6Zf+68teo7eUIy5AnJkCckQ56QDHlCMuQJqbUz
j6px5FHncZ4ZeUV8P1XT2tfIrvHZla78OqBgEuerPTT+aMrUlcfTRFM9Sz5a
50u7/hiwp/mKa1Tcwu/ovOjN6iWbFV3sT1Ut/I3GlWdopbkLI+iZlU/OrPOc
r2PS+lzpnkDdrXJ1/dXsq+MLZOj2huZy/ZGXW8f71DW4/sCnNc1xIKxDKnXj
+gN/E1RkcP+/4ijx9TjP+mme6vum/t14Il8H/9s0qOCGpMX/3IMfUM2b1B84
rcVFXX/gVav3PJT06zNdf+Cf5Vv799Cxr5k3Pa5VuzNNhiT+7eEC/1gvN+J7
BsA/8DyJWWemrZTO1ZPrD/zbiUXGPt+bSMT8A/+j+LeT/qlxn0ox/1rP1R++
zvX9JV1/4KUOXG7yVetYXX/gyZ9cCG2bnKr5B96nQbhXleCMuv5YR5Tn7ytR
f70efPY6bFobD11/4LNHelwYWSJJ2w/wpz9+9WxThwdUgusPvNLrvaWyd7lM
Vbj+wF/tvfFpyx/jdP2BU9be2YdEpXGh/nr9+Me5M5OrfSC+c7fvLanF9Qde
sX9736Pn0rl6cf2Bfzbs1sCoSS+oPtcf+PWlvSp3u3qfinH9gTcalaNHBXVJ
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
               "], {{{
                  EdgeForm[], 
                  Directive[
                   Specularity[
                    GrayLevel[1], 3], 
                   RGBColor[0.880722, 0.611041, 0.142051], Lighting -> 
                   "Neutral"], 
                  GraphicsGroup3DBox[
                   TagBox[{
                    Polygon3DBox[CompressedData["
1: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
0F+l9kuVS/0kdU5/cWI7RXnYhsz/TybrqsqPLjkXqByibELVRBwOr37JeT7l
BCuVHCtXbPzqzFbukTiOqXim6kJUC7kMfC28rdm9y3euV3IOVfnKjpF12ZXg
TqljrLMS6y/d+0ngnalrDJSrld0mnZKAl6SOeypGLX/qWT1zxRVSx30U09b3
U6qPV02IauP1bUA56bzUNqpi16OKjqGcB70m9XNWvH12antA8WfVdXfj+CCu
/YrU60SxbtUqHsTa2C7ZkDoeIZk5oeg4nWS4agVlJ8te7gUuy9gFsrNCf3+h
75j0DYi+BVKuXd+ANGFcD9V6FB1Hki3RM/IzuSZxPanibAsDf0cjP0Y5rRdS
x020bs/L7EPZifKP9F2Z8nlli85l6DnoezHVdammtC/zt9D7ShxjUX2ybKYZ
qe005Rf07Zjq21SbenbifS1bWPlE5baU45I9qvOqfq8v45dnOn1EYpkj+7dL
Fv/RM5XPuD1nvaI8n/Jcynddmjr2pByHvmNSHZXqfFTHpNiMvq9RfavkSRI4
H6k8kfJFx0TW4/Lvz0psR8l+H5pYzsjG75E6rnM9vFap47lTEucp5dsq13GZ
5GrofMr3qesYVFegWjHVjDUu+nsx+bD6bml4YrtFPkHl1LU/l5QcA1Ft9iBo
eY49yJp5S/o+dJ3D4cxXAf4jBdtVqllVHY7qcfSdgr7ZqAv9OLBM/rTgeury
0M3Q1aljbZLVqttXDb/q7XtHjo9dB29Taj9Ea0913NLXzaCvp45JaV3pew19
o7Eh8ylUM9Uh9bcV+v5CteiqP9c3dVqjqhtXve910FcUXAkt21VDLT1+NHRe
0TkC9dF3H8rBHFF03XGgvErR9drXZM9zTGJfUj6laqWUS1Tt06upY4XSU8oH
1So4L6nvQfSdRkPZnKlrw3S/z6WOJ0o3KbCv77/yeg8c/z3n+iHVrsu2UQ7q
mkxfS28PoT1G/2FFf3uob8ZUC6qaJsUW9B2m5LvkfO/E8St9izFCtn/qWJ5k
mnw5+XSq3VU9ouoS06K/gVKMTnnWcsp5FWwvn5/Yp5Bfq2+R9F2Svm15I3W9
nPbm2MS+g3xc1emrPrxl0d+S6HsTfeuh+nzJ1SaJa5vlPyoHuC61z6O4qL7r
mZz5TaqLl011bNHfGHTLsGrTlmX1aZekjh0r7yabRutXzyrhHZxVdLxuWLa/
VHOrb1VWZXJ1ZWrfQ7b3s6n1vewQfVelb5T0jZX8UvlH8pPkr8pfiBL729q/
8oceT22jy+YJS45Fqo6rUPJ7VdxS8RH5m6rjlb8qv1L+5b4l72XVO21LnXdX
rlnfcuibjv2hzQPH+rTXrk0dE1C+WN/sKMaunLS+x5GeOSeLrzyTdy3U16lr
mFTvVCo5Hqrc7vrUNo3shO2p68xUozUyk4eqUVfd9MTMV41Kjquqnk25MMWg
ZsX+Vlf1qfp+dmRke0x6fFXqWIZiFPIhVuRdJ6dvSSRvhpbsN8p/VJ2z/DT5
a/tI1qW2wyT3zohsh8wHP5XarpWfom94Vces75teS+3nyOZXLFExrsWx7RnV
Y6guQ9/JjMnWpGIikofy51T7qxrgX+QLpZZ9kr2qP1Yd8qFF272S580Tx1ak
X1R7r+/m9P2PatGfTB2TUgxE3wHqe8CK2n+p5aP8Pvmf8g3lI+q7Ku3Ls0rO
wyoGeG3s7waHZTJQslo5buW69wsc65OM+iV1bZlqxu5KnY9RnYm+V6iuHKbs
rcR5ilN5fotT59iUv1Ytb69MLml/6Hst1TfuSF3Tpro1xVkUb1Edu2KhqsmX
DVeJuR4vuGbontS5HNWx6HtPfb+k+nPFHFQL3ErfhaTOwynXr+8AajL2a+iF
ib/FCKHlS7Y5FDMfmMUwFctUzba+Sd8t/ZvaN5A9PD+1Lar6Cn0HpBhMb/n9
qetItU5eTm07yg6/KXVMRvUJ72R2jnIrG1L7D/KF9T3Q45lcLVty7F41EqMS
56w/4b5HJ34mikUtTG3Hqt5D3xrrO+t/5HunzgWqlmBNah9DvoZqpttmeueG
1HEM1YEoBqv7a1dyHblqyItFfzet+TqX/E2vvu3dI7s2tV0uW1S15X2y/v8H
riPnVQ==
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwtnAf8luMXxt/32c9rZSRFKQ2ViCSljPYwGlJIJU0ppcgsoUWRlZARGVlZ
iew90t9eGSHJigYySv7X1/V8Pt2f7vOc+xnv/dzPOde5zrl/dU4Z0+v0oFQq
vRuVSvpXOjYtld7T/8+HpdIDean0QVIq3Sr5NClvkfyO5BskD5N8g+RWGn+v
5Ks0/kbJX6nVUf9IHRujsQdJv0D9S3XsGunaSH5I8vWSb5X8ssZcLXmArnel
5MclXya5j+RLJO+r8fMkX6jx0yT3lPyW5Ccl3yP5KY2fJfkEjZ/O86pVk669
jq3S2Oelv1L9ftLPku51yddKHiT5WskHasxtkqfpnNmSe0l+R/Izku+TvFHj
X5A8WePvl/y5Wi3pujIn0q1Xe079idLfK93PkpdKPlfy3ZLrZaXSmZrgv8v6
Per/JP3j0k+Q/k7pD9b97pQ8S9ecK7ml5IWSr5B8veT3Ev/+UzV+nuRjpH9d
8qPS3yW5seTrJZ8v+SLJ+6R+PxdIvlhyfZ1fkfyZ5FaSP0r8e0/X9eZL/kXP
1FPPVo51bQ18Usf7Sp6v1oljOu8Mje8lOZBcV+frFqVrNO5wjQ91rLd0S9VG
qZ9KWUP6rwLfr4HGbyP5c13nEMkNJW8n+UvJbSSfrP8nl3zPROd/ovNvVb+j
+t11/Xoar2GlFRrXUp0Xdd9B0t+u1kVjfpJcTfqzJdeSXE3tdPVfVbtI/bt0
3tO8K8m7Sn41cn+BWlfJU3W/g4pzD2Z9S3+W5H3UflB/hebnFZ3/kK5zoJ5n
B40bLN3zaueo/5n0rxXv4yDp1+l5/8f70LkTJWe6/h6S12g+Wuv6X0i+Q+d2
07l9pH9c570p/Rk6VkPH/tD1xqpfXf3jpI81flfpP9H5Lfi2dH2pSh9xP8mR
9LtIfk/65pL/J/lqnd9Kg47X+Ufo/xsln6u2p/pV1B7Q+DmS26jfVm2e+heq
1Vf/Fd3/UulH6vpVdf5rkmdKHi25muQPdf2LNbahxp4g+YXI99tD7Sv1n9H4
szS+t8ZvW/Hv5Pc2VPtO+s90/rXqH6LjJ0n/ueS5kg+V3F/yVJ2/n87fqt/z
gn7PbrHn53qNOVz9l6Wfwfeg6++i8V9Jfrv4XltL3lPzo27pfd6Xzl+Z+X1g
L1pJn/LcutbTameov43aAPWfU5ugfqjn2Unjl+v+zXT+JTrvlpLX3PbS/6rr
9VM/V7+HrveLflMD6c/TsTo6dgZ2RPJJkiuSn9L48ZJ76nhF4z/F3kjXWbqe
ki+Svqb0a3W/53W/OaHfzzCN2Uljpkt/gORAx1+S/k7JfSXvL/lHyddL7ix5
D8krJN8ouUvJNgpbdbfkEyQfKHmt5MWSh0tuL/lfyUsknya5s+So4nfMu8am
YlsflX6Y+u10bKvGz8ts+/aU/IXkJySPltxNclLxmmHtYMOx5bwj3hVr6lHJ
D2v8UPWP0LHNOv9myd1K9hn4jjmSO0quLvlDyYdpvhZLvkXyAsmfJPYnZ2je
b5d8qPSPSJ4n/W3o1XYPPSfDNXa+rtdd/QY6tlq6TWqt1R+kY9/p3L01Zlv1
V4b+PlmzrN0JOrZAurk6v1PJ1+Ta20vfV/1z+CZ0/i3SH61+XR1bJf0CycdJ
3lfy95KP1phXC/txh+SHpB8i+XDJf0teKPkkyQdJ/kXyLMmtJG8r+Q3Jl0k+
WHIu+TXJoe7fKfQ7+1m6iWrVC3v7tPSzJR8quYrGLJd8heTWknfAzkjeS78p
wZ6EticdU9tH7GRvXTtQ66j+qTo2QroLdf7uhf16VuOrak2O1NpcpraL+jur
jVD/JbUL1L9H4/trfAtdY53GXyn5MMk7Sv5f7jXCWjldx27Sg9wv/UD1W+nY
r9LfJ3mA5JaSN0peJHmw5EMl/yH5GsltJVeV/K7kqyUfIXkXye/k/sb41s7U
sdt0/XOlr6L+Mj3/E9Jn0h8t/Vgd+zH1mmftj5J8o8bXToyDPgxtT1nzrH2+
mWsTvzPeHWv4SslP4lN17aqSm0reK/VaZ82fKd1Vun+uC76l/ttqu2b2HfiQ
RzX2FR2LuRfvUPLDusYccJjO2VnPdk9i+9tF8g4VrwHWQksd6yFdm2J9/MZv
qHgNsBbwwQcm9ndB2e8I//eLjr2BvdLxphr/oORruJbknSQP1HUu5NvV+FM1
/n3p78MfSF9H+ncl38O3Jbm25K95hyX7whGSWxb2aiNrVPLP+k1P6lqnS19d
8n0af7n0R+r8KgXe2FIyhsD/PyD9VZKP1vEd8TeSH5Q8SvJeFX8TfBuHgEmk
W5vY/54t/X4V+wx8R1NsmnR763nuUv9ynVNf+saSL5C+mlojvsXIOsa8rfEr
sHnqj9PxehrfS2Oma2ysNpPfomecpH51tSbS/aFjb+jZp+r4QI2fqf8/lPyJ
2t267jiNeURjD1bbpLG/6vrv6voX6foHaPyGxP5rkuT9K7bx2PpmzJF0m9Q+
VH9KZPzxh+SPJE+T3Lzib5JvE4xxkHQfY2PVHyN93Yp9Cr6llo4dLN2f2H3J
+0vuCnbV817M+cxZZnxVKtsn4u++DY0twBj7afx++g038fzYdF17Z53TWPLf
GnOt7reL5CaS/5F8neQ+GnOHrvmLjt0A9k99bfzuTOmqaHxt6X7R+Ms1vgX4
SPJMXf866Y/PbUuxqcN0/+bS367+DB27Wromkm9k/iRP5fvOjL8XSL5E19s2
M36/T/IMyYM0fr3kvfVMp2j8cWqNpOupYyn2IzOeX8j1NL4HNlP9o3TseN1/
B+n3xPbqeWdJv73klyQv0piZkh/Tdf+SfJx+44HMrY7fDD6RPF7yThrfUPIf
Ov9qjW+m55kvearGXaF7nZTbV+OzTycWyn0N5rxK7jl7TvfYWvJcrgqNVcAs
TRLbOGzdjpIb8+1qzIm6dwvd+zzwlO4/CVut9op0R8bGlmDMlZJ3lH4v9Tfo
2OyKv8eLJR+je16g80/MjT3AICMT248p4BvpJxG/6f+/JdfQ9VcSA2GDJXeM
bA/vknye5E7gbMmDc9tf/NnkxPbuAtam9GdL1yLxelqnMc/lfmf4v5Elv0ti
JGKluyW/pbHN9PxTWO9qB+AbCv+3SWNGV+wTLsH/RvYVtxfP31byNpLnF7/3
MMl5xRgFrNJWbQv+JzG+bSb9P7ljZGJlvmm+bWIyYgFsErZpotoI9etr/E/S
TUrsWxtExmNzJZ/Ntyu5rPvdIXma5A6St5M8r5iPVpLjin3U+XzLkX3XzZIn
SW4jOa0Y04HtOgCCK/bhm9R9MLJvX5MYL72g9z6uYowzVXK7yNgHn7hY725I
bF+Jj54o/SGRffcF0u8sfXNd/2fd6/zE+HAv6X/IjdHAathQbOmlamPAQ9L/
Lt0Zeh8P690cpPa7rtUc/Kn+dmpLJZ+pcQ/q/Jfxz4kx2sO638DY2G2Vji2S
7inJYysFpgodo/3AXCX21XUj42MwBdjiELXfcmNEsCI2Elu5OjEf8SzYXdf7
InH8vYQ4UvJ5iX197ch4Dhu6r+T1oW0rGAesc7DaevWnJsbDjTV+Q27MAnY5
TO1P8FnieKApdkLyuYnx4J6Sv5P8rX7vIv3eE3X/NZJ7JsbzgfSv58b4YP2a
ap/mtpHYysvU5uS2GdiOqhr/peSzEuOr3SPj3wmST5ZcU/K3uTEUWGpX7Lz6
ZybGXzWk/ya3TcI2TVG7XP3xifHdbpHx7smJbed2kt/Pzbncp+c/LjYXAycE
NwRmADuAeQYXsU0j1pf014bGGDvmxtTYjyWRsTacCNwIPuHNxDYH27MTsWRu
n4Bv2EHyx7ljBmKHGmof5Y5RiFVqq63MzfHA9WBzX0qMzXaSvHNojNY7MXeV
RMbLC9XeUD/UMz+jZzspcTxRiYznjk0cv8SSl+XmjIhF8en4djgqYk9iULgB
MBuxCSATLAeG6SoxjIxtuieON/7VOa/m5sjgysBAYKGbJb+CrdDzLNbzHKVj
7fC3fDNgSX1PSyTfKnlyxT4SXzld7SqeN3csxG/gt4AxwNObQ2OPbonx9N+S
X8zN2cHd4XNfS4ypwPN/hMZaYNaFepYesbFsz9yxEDFRH76d3Hifb4JvAx9y
ZmiMh28Bs4BdftGxdnxfeuYl6i/Dnurax0jfQv2tXDP3/IF9y5qDYyRvrzED
ZTvqw69kxihglTUaf7j0dQr7t6uecVLq3wu22oJPz42BwEJ/ST4yN4eD/YZj
+1O6A9R2U/97HTtC+kTX+LZkTgpuqjr+tWSfje+Gg+D9wyH+y7nSH1+yzzyx
+B57SN5Dzz8gN6bDfhEjgvXA7GD3n/A5uTkL1g+c5z+sV13vO56H+YUr07GL
SsYco1L7N2KfI3T9cbyL1LE4MTn+dmHhPzpLPyG3PyH2aSl5jOSBGr9Ocj+1
cdLtnlqPj8ZX31v4g24af05ue8vvqwcvhz0o8NWvakPVP1XtD/WrwTGpXy81
twDHgH+/KPHY9YU/5/eMU/9QXe+M3O8fPmAt61X6Bmr/lPyb70/sn4glW2v8
WLCc9JslT1d7JPEYxh4l/fm5eRf4l6vUDo7t/4j120s/vvgeiS0iyd1zv/+9
8UVqJ6S2f8eoX136/tLXSI1dwCSnFPMHVgQzfp277VV8D99ljmmJbbHJ03St
zWrL1b9M13sot0+9K/J84GvxOeDfPiX7oh8L/MWcM/esCdbG5Trn4dwcAlwC
Nvpi6W7UNTaqf4/0XSteY6y1qZIX5Y6ZiZ2xAf2lm516rm+VvoPGN9AcHaG5
+qlkfrC2Wiu40ZL5RDAMa59vAGzTRMe6Sb9B8j7qT0s9d/N0vSMq/qb4tmbg
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
                    "]], 
                    Polygon3DBox[CompressedData["
1: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
mI4e0fZ/TRmNmA==
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwN0L8uQ2EYgPFX/52qKImtGxHCxgW4BBEJaxsX0F6AoYKUiqQWtbAyNFQM
ykDCDejUa2iikzRi9Bue5DlP3u/9zjnze7XtaioiisihlEQsZyJuMcxH1MUD
HPFxOiKPBA/ZiEXtED+eJxDo6AvaMX49FzGNJ31Ju7KrjW/edccjRnwFz2Za
Zi/Q46vau9k3zExGVLUaZnmzENHnXS+/hTY/0xr44vfaJi75iVaxo4ycszva
LhK+5o4Pfu3OG3zyda1p9hQFM2Wtgin+5/9s2NvCndbAnD5wZt+3vNrxgnM9
pf0Dtt4q5Q==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$1860108#1"]& ]]}, {}, {}, {}, {}}, {{
                  GrayLevel[0], 
                  
                  Line3DBox[{305, 1, 298, 227, 1566, 16, 1579, 31, 2102, 663},
                    VertexColors -> None], 
                  Line3DBox[{715, 2, 1236, 268, 305}, VertexColors -> None], 
                  Line3DBox[{717, 3, 715}, VertexColors -> None], 
                  Line3DBox[{721, 4, 718, 717}, VertexColors -> None], 
                  Line3DBox[{723, 5, 721}, VertexColors -> None], 
                  Line3DBox[{727, 6, 724, 723}, VertexColors -> None], 
                  Line3DBox[{729, 7, 727}, VertexColors -> None], 
                  
                  Line3DBox[{293, 8, 300, 1237, 269, 729}, VertexColors -> 
                   None], 
                  Line3DBox[{731, 9, 230, 1254, 293}, VertexColors -> None], 
                  Line3DBox[{735, 10, 732, 731}, VertexColors -> None], 
                  Line3DBox[{737, 11, 735}, VertexColors -> None], 
                  Line3DBox[{741, 12, 738, 737}, VertexColors -> None], 
                  Line3DBox[{743, 13, 741}, VertexColors -> None], 
                  Line3DBox[{747, 14, 744, 743}, VertexColors -> None], 
                  Line3DBox[{307, 15, 301, 271, 747}, VertexColors -> None], 
                  Line3DBox[{1591, 30, 1878, 232, 307}, VertexColors -> None], 
                  
                  Line3DBox[{1593, 46, 1608, 61, 1623, 1624, 76, 1650, 91, 
                   1893, 243, 1665, 106, 1919, 279, 121, 1703, 136, 1717, 
                   1718, 151, 1743, 166, 2115, 618}, VertexColors -> None], 
                  Line3DBox[{1606, 45, 1591}, VertexColors -> None], 
                  Line3DBox[{1620, 60, 2113, 617}, VertexColors -> None], 
                  Line3DBox[{1647, 75, 1620}, VertexColors -> None], 
                  Line3DBox[{1662, 90, 1648, 1647}, VertexColors -> None], 
                  Line3DBox[{1688, 105, 1662}, VertexColors -> None], 
                  
                  Line3DBox[{1701, 120, 1918, 278, 1688}, VertexColors -> 
                   None], 
                  Line3DBox[{1714, 135, 281, 1701}, VertexColors -> None], 
                  Line3DBox[{1740, 150, 1714}, VertexColors -> None], 
                  Line3DBox[{1754, 165, 1741, 1740}, VertexColors -> None], 
                  
                  Line3DBox[{1756, 181, 1770, 196, 1909, 261, 365, 211, 302, 
                   287, 961, 212, 962, 213, 963, 964, 214, 965, 215, 966, 967,
                    216, 968, 217, 1231, 264, 1307, 371, 218, 373, 1232, 265, 
                   219, 969, 970, 220, 971, 221, 972, 973, 222, 974, 223, 975,
                    976, 224, 1235, 267, 372, 225, 304, 289, 1793, 210, 1780, 
                   195, 2126, 666}, VertexColors -> None], 
                  Line3DBox[{1768, 180, 1754}, VertexColors -> None], 
                  Line3DBox[{1593, 475}, VertexColors -> None], 
                  Line3DBox[{1606, 486}, VertexColors -> None], 
                  Line3DBox[{1756, 488}, VertexColors -> None], 
                  Line3DBox[{1768, 499}, VertexColors -> None]}, {}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{1566, 1876, 2353, 1794, 1565, 2354, 1795, 1567, 
                   2355, 2164, 2483, 1568, 2356, 1796, 1569, 2357, 2165, 2484,
                    1570, 2358, 1797, 1571, 2623, 1877, 1923, 2301, 2622, 
                   1986, 1914, 1987, 2274, 2359, 1925, 1798, 1572, 2360, 2166,
                    2485, 1573, 2361, 1799, 1574, 2362, 2167, 2486, 1575, 
                   2363, 1800, 1576, 2364, 2168, 2487, 1577, 2275, 2365, 1801,
                    1878}, VertexColors -> None], 
                  Line3DBox[{1579, 2169, 2488, 1578, 994, 1580, 2366, 2170, 
                   2489, 1581, 997, 1582, 2367, 2171, 2490, 1583, 1355, 2014, 
                   1584, 2654, 2015, 1879, 1924, 1880, 2625, 2003, 1928, 1929,
                    1927, 2276, 2624, 1926, 1881, 1585, 2368, 2172, 2491, 
                   1586, 2173, 2492, 1587, 2369, 2174, 2493, 1588, 2175, 2494,
                    1589, 2370, 2176, 2495, 1590, 2177, 2496, 1591}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1593, 2081, 2371, 1802, 2101, 2333, 2372, 1803, 
                   2103, 2675, 2082, 2178, 2667, 2104, 2334, 2373, 1804, 2105,
                    2676, 2083, 1011, 2106, 2331, 2374, 1805, 2078, 2655, 
                   2039, 2137, 2069, 1932, 2647, 1988, 2076, 1989, 2072, 1990,
                    2128, 2325, 2375, 1934, 1806, 2107, 2677, 2084, 2179, 
                   2668, 2108, 2335, 2376, 1807, 2109, 2678, 2085, 1013, 2110,
                    2336, 2377, 1808, 2111, 2679, 2086, 2180, 2669, 2112, 
                   2337, 2378, 1809, 2113}, VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0DkzQ3EUhvGjQGgEKUhjlCbRGiP2oHeHBrHEmhQxo/QRYl+iiDE+Dp8o
VSy/W7zz3POc9/yLO1m9TBo9EZHIRl9EPRPxNhiRw5qscxfY4j57I6YHIta4
c+6VG8UzKXOn+MJ96BX1VrkT7pkbwWNZ4ar4xL3rFfSWuU0ukZv+iLH01n7c
vGSXT99PZ75pP2H+w8CmNxZ1fsy/0pVt/ko6vqfcXLvdMi/oHeGjue3uW+a5
Q+6BG8YDKXH7eJ/+B/dfenNchbvjsrgns9wu3nJDuCMz8g97KiPh
                   "], VertexColors -> None], 
                  
                  Line3DBox[{1608, 2181, 2497, 1607, 1016, 1609, 2379, 2182, 
                   2498, 1610, 2183, 2499, 1611, 2380, 2184, 2500, 1612, 2309,
                    2501, 2016, 1613, 2656, 2017, 1882, 1933, 1883, 2629, 
                   2004, 1937, 1938, 1936, 2277, 2628, 1935, 1884, 1614, 2381,
                    2185, 2502, 1615, 2186, 2503, 1616, 2382, 2187, 2504, 
                   1617, 2188, 2505, 1618, 2383, 2189, 2506, 1619, 2190, 2507,
                    1620}, VertexColors -> None], 
                  
                  Line3DBox[{1624, 2384, 1810, 1622, 2385, 1811, 1626, 2386, 
                   2193, 2511, 1628, 2387, 1812, 1630, 2388, 2196, 2515, 1632,
                    2311, 2389, 1813, 2019, 2657, 1885, 1943, 2302, 2649, 
                   2005, 1991, 1915, 1992, 2278, 2390, 1945, 1814, 1636, 2391,
                    2198, 2519, 1638, 2392, 1815, 1640, 2393, 2201, 2523, 
                   1642, 2394, 1816, 1644, 2395, 2204, 2527, 1646, 2396, 1817,
                    1648}, VertexColors -> None], 
                  
                  Line3DBox[{1647, 2528, 2205, 1645, 2526, 2525, 2203, 1643, 
                   2524, 2202, 1641, 2522, 2521, 2200, 1639, 2520, 2199, 1637,
                    2518, 2517, 2197, 1635, 1886, 1940, 2297, 2631, 1941, 
                   1634, 1942, 2632, 2298, 1939, 2020, 2630, 2312, 1633, 2018,
                    2516, 2310, 1631, 2514, 2513, 2195, 1629, 2512, 2194, 
                   1627, 2510, 1033, 1625, 2509, 2192, 1621, 2508, 2191, 
                   1623}, VertexColors -> None], 
                  
                  Line3DBox[{1650, 1887, 2529, 2279, 1649, 2206, 2530, 1651, 
                   2397, 2207, 2531, 1652, 2208, 2532, 1653, 2398, 2209, 2533,
                    1654, 2313, 2534, 2021, 1655, 2658, 2022, 1890, 1944, 
                   1891, 2634, 2006, 1948, 1949, 1947, 2281, 2633, 1946, 1892,
                    1656, 2399, 2210, 2535, 1657, 2211, 2536, 1658, 2400, 
                   2212, 2537, 1659, 2213, 2538, 1660, 2401, 2214, 2539, 1661,
                    2215, 2540, 1662}, VertexColors -> None], 
                  
                  Line3DBox[{1665, 1889, 2402, 1818, 1664, 2403, 1819, 1667, 
                   2404, 2218, 2545, 1669, 2405, 1820, 1671, 2406, 2221, 2549,
                    1673, 2315, 2407, 1821, 2024, 2659, 1894, 1954, 2303, 
                   2650, 2007, 1993, 1917, 1994, 2282, 2408, 1956, 1822, 1677,
                    2409, 2223, 2553, 1679, 2410, 1823, 1681, 2411, 2226, 
                   2557, 1683, 2412, 1824, 1685, 2413, 2229, 2561, 1687, 2284,
                    2414, 1825, 1918}, VertexColors -> None], 
                  
                  Line3DBox[{1688, 1896, 2562, 2283, 1686, 2560, 2559, 2228, 
                   1684, 2558, 2227, 1682, 2556, 2555, 2225, 1680, 2554, 2224,
                    1678, 2552, 2551, 2222, 1676, 1895, 1951, 2299, 2636, 
                   1952, 1675, 1953, 2637, 2300, 1950, 2025, 2635, 2316, 1674,
                    2023, 2550, 2314, 1672, 2548, 2547, 2220, 1670, 2546, 
                   2219, 1668, 2544, 2543, 2217, 1666, 2542, 2216, 1663, 2280,
                    2541, 1916, 1888, 1893}, VertexColors -> None], 
                  
                  Line3DBox[{121, 856, 122, 857, 123, 858, 859, 124, 860, 125,
                    861, 862, 126, 863, 127, 1283, 340, 864, 128, 1284, 341, 
                   129, 865, 866, 130, 867, 131, 868, 869, 132, 870, 133, 871,
                    872, 134, 1246, 282, 135}, VertexColors -> None], 
                  
                  Line3DBox[{1701, 1901, 2574, 2287, 1700, 2573, 2238, 2419, 
                   1699, 2572, 2237, 1698, 2571, 2236, 2418, 1697, 2570, 2235,
                    1696, 2569, 2234, 2417, 1695, 1900, 1957, 2638, 2286, 
                   1958, 1960, 1959, 2008, 2639, 1899, 1955, 1898, 2027, 2660,
                    1694, 2026, 2568, 2317, 1693, 2567, 2233, 2416, 1692, 
                   2566, 2232, 1691, 2565, 2231, 2415, 1690, 2564, 2230, 1689,
                    2285, 2563, 1897, 1919}, VertexColors -> None], 
                  
                  Line3DBox[{1703, 2420, 1826, 1702, 2421, 1827, 1704, 2422, 
                   2239, 2575, 1705, 2423, 1828, 1706, 2424, 2240, 2576, 1707,
                    2318, 2425, 1829, 2028, 2661, 1902, 1961, 2304, 2651, 
                   2009, 1995, 1920, 1996, 2289, 2426, 1963, 1830, 1708, 2427,
                    2241, 2577, 1709, 2428, 1831, 1710, 2429, 2242, 2578, 
                   1711, 2430, 1832, 1712, 2431, 2243, 2579, 1713, 2288, 2432,
                    1833, 1714}, VertexColors -> None], 
                  
                  Line3DBox[{1718, 2433, 1834, 1716, 2434, 1835, 1720, 2436, 
                   2437, 1836, 1722, 2438, 1837, 1724, 2440, 2441, 1838, 1726,
                    2320, 2442, 1839, 2030, 2290, 2443, 1968, 2305, 2642, 
                   1840, 1998, 1997, 2648, 2306, 1969, 1841, 1729, 2445, 2446,
                    1842, 1731, 2447, 1843, 1733, 2449, 2450, 1844, 1735, 
                   2451, 1845, 1737, 2453, 2454, 1846, 1739, 2455, 1847, 
                   1741}, VertexColors -> None], 
                  
                  Line3DBox[{1740, 2591, 2254, 1738, 2590, 2253, 2452, 1736, 
                   2589, 2252, 1734, 2588, 2251, 2448, 1732, 2587, 2250, 1730,
                    2586, 2249, 2444, 1728, 1905, 1964, 2640, 2291, 1965, 
                   1967, 1966, 2010, 2641, 1904, 1962, 1903, 2031, 2662, 1727,
                    2029, 2585, 2319, 1725, 2584, 2248, 2439, 1723, 2583, 
                   2247, 1721, 2582, 2246, 2435, 1719, 2581, 2245, 1715, 2580,
                    2244, 1717}, VertexColors -> None], 
                  
                  Line3DBox[{1743, 1124, 1742, 2456, 1848, 1744, 2457, 2255, 
                   2592, 1745, 2458, 1849, 1746, 2459, 2256, 2593, 1747, 2321,
                    2460, 1850, 2032, 2663, 1906, 1970, 2307, 2652, 2011, 
                   1999, 1921, 2000, 2292, 2461, 1972, 1851, 1748, 2462, 2257,
                    2594, 1749, 2463, 1852, 1750, 2464, 2258, 2595, 1751, 
                   2465, 1853, 1752, 2466, 2259, 2596, 1753, 2467, 1854, 
                   1754}, VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwNzLlOAlAQheEhkdWlsdPK1gIs7EVkBzEhBK1tVcBYaqK44Fb5OFpb6hv4
GiagDV9x8p/5Z+7dOB52B4mI6MtPKuIkE3GTi0jiTjqihKcy5lJY5Mr4lYy4
5dL6LlfBM7njMljiqvjt7p7L6ntcDftyyW1mI871X/4QE1LWj/DTu218N6+5
67mv6OvcH/7LVFbtruxm+occ2Fexjnm7N/8s6Bdy7a5m19AH8mDOYZ1rYsH9
hHuURXODb+FQnrglbHJt3HL7zL3IsrnF7+NIXrkVbHMdnAO4qCRz
                   "], VertexColors -> None], 
                  
                  Line3DBox[{1768, 2099, 2605, 2344, 1767, 2681, 2098, 2097, 
                   2674, 1766, 2096, 2604, 2343, 1765, 1471, 2095, 2673, 1764,
                    2094, 2603, 2342, 1763, 2341, 2602, 2093, 2672, 1762, 
                   2071, 1973, 2643, 2327, 2131, 1974, 1976, 1975, 2077, 2326,
                    2601, 1971, 2070, 2033, 2664, 1761, 2080, 2600, 2332, 
                   1760, 1466, 2092, 2671, 1759, 2091, 2599, 2340, 1758, 2680,
                    2090, 2089, 2670, 1757, 2088, 2598, 2339, 1755, 2338, 
                   2597, 2087, 2115}, VertexColors -> None], 
                  
                  Line3DBox[{1770, 1140, 1769, 2468, 1869, 1771, 2469, 2260, 
                   2606, 1772, 2470, 1870, 1773, 2471, 2261, 2607, 1774, 1402,
                    1871, 2034, 2665, 1907, 1979, 2308, 2653, 2012, 2001, 
                   1922, 2002, 2293, 2472, 1981, 1872, 2051, 2686, 2050, 2262,
                    2685, 1775, 2473, 1873, 1776, 2474, 2263, 2608, 1777, 
                   2475, 1874, 1778, 2476, 2264, 2609, 1779, 2477, 1875, 
                   1780}, VertexColors -> None], 
                  
                  Line3DBox[{1793, 1913, 2621, 2296, 1792, 2620, 2273, 2482, 
                   1791, 2619, 2272, 1790, 2618, 2271, 2481, 1789, 2617, 2270,
                    1788, 2616, 2269, 2480, 1787, 1912, 1982, 2645, 2295, 
                   1983, 1985, 1984, 2013, 2646, 1911, 1980, 1910, 2036, 2666,
                    1786, 2035, 2615, 2322, 1785, 2614, 2268, 2479, 1784, 
                   2613, 2267, 1783, 2612, 2266, 2478, 1782, 2611, 2265, 1781,
                    2294, 2610, 1908, 1909}, VertexColors -> None]}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{715, 978, 2354, 716, 994, 750, 2701, 1431, 1560},
                    VertexColors -> None], 
                  
                  Line3DBox[{717, 979, 2355, 719, 995, 2366, 751, 1432, 1479, 
                   476}, VertexColors -> None], 
                  
                  Line3DBox[{721, 981, 2356, 722, 997, 753, 2703, 1433, 1561},
                    VertexColors -> None], 
                  
                  Line3DBox[{723, 982, 2357, 725, 998, 2367, 754, 1434}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{727, 984, 2358, 728, 1355, 1356, 1412, 2682, 
                   1477, 1554}, VertexColors -> None], 
                  
                  Line3DBox[{729, 1171, 2623, 1173, 1258, 1358, 2654, 1359, 
                   1357, 1416, 1415, 1417, 1418, 1532}, VertexColors -> None], 
                  
                  Line3DBox[{731, 985, 2360, 733, 1000, 2368, 757, 1435, 1481,
                    1546}, VertexColors -> None], 
                  
                  Line3DBox[{735, 987, 2361, 736, 2492, 1002, 759, 2706, 1436,
                    1562}, VertexColors -> None], 
                  
                  Line3DBox[{737, 988, 2362, 739, 1003, 2369, 760, 1437, 1482,
                    1547}, VertexColors -> None], 
                  
                  Line3DBox[{741, 990, 2363, 742, 2494, 1005, 762, 2708, 1438,
                    1563}, VertexColors -> None], 
                  
                  Line3DBox[{743, 991, 2364, 745, 1006, 2370, 763, 1439, 1483,
                    1548}, VertexColors -> None], 
                  
                  Line3DBox[{747, 1176, 1177, 2365, 748, 2496, 1008, 765, 
                   2710, 1440, 1564}, VertexColors -> None], 
                  
                  Line3DBox[{961, 1155, 1226, 2610, 943, 1140, 927, 2688, 
                   1426, 1555}, VertexColors -> None], 
                  
                  Line3DBox[{962, 1156, 2611, 944, 2468, 1141, 928, 2689, 
                   1534}, VertexColors -> None], 
                  
                  Line3DBox[{964, 1158, 2612, 946, 1143, 2606, 930, 2690, 
                   1427, 1556}, VertexColors -> None], 
                  
                  Line3DBox[{965, 1159, 2613, 947, 2470, 1144, 931, 2691, 
                   1535}, VertexColors -> None], 
                  
                  Line3DBox[{967, 1161, 2614, 949, 1146, 2607, 933, 2692, 
                   1428, 1557}, VertexColors -> None], 
                  
                  Line3DBox[{968, 1407, 1406, 2615, 950, 1402, 1401, 1411, 
                   2683, 1478, 1553}, VertexColors -> None], 
                  
                  Line3DBox[{970, 1163, 2616, 953, 1147, 2685, 1419, 935, 
                   2687, 1533}, VertexColors -> None], 
                  
                  Line3DBox[{971, 1164, 2617, 954, 2473, 1148, 936, 2693, 
                   1536}, VertexColors -> None], 
                  
                  Line3DBox[{973, 1166, 2618, 956, 1150, 2608, 938, 2695, 
                   1429, 1558}, VertexColors -> None], 
                  
                  Line3DBox[{974, 1167, 2619, 957, 2475, 1151, 939, 2696, 
                   1537}, VertexColors -> None], 
                  
                  Line3DBox[{976, 1169, 2620, 959, 1153, 2609, 941, 2698, 
                   1430, 1559}, VertexColors -> None], 
                  
                  Line3DBox[{1231, 1228, 1408, 1410, 2666, 1409, 1303, 1223, 
                   2665, 1403, 1405, 1404, 1299, 1476, 1531}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{1232, 1257, 1230, 1251, 1229, 2645, 1305, 1304, 
                   1343, 2472, 1225, 1250, 1224, 1301, 1300, 2684, 1414, 1447,
                    1489}, VertexColors -> None], 
                  
                  Line3DBox[{1235, 1234, 1233, 2621, 960, 2477, 1154, 942, 
                   2699, 1538}, VertexColors -> None], 
                  
                  Line3DBox[{1236, 1170, 977, 2353, 714, 2488, 993, 749, 2700,
                    1539}, VertexColors -> None], 
                  
                  Line3DBox[{1237, 1252, 1172, 1238, 2622, 1308, 1309, 730, 
                   1261, 1178, 2625, 1344, 1311, 1312, 756, 2627, 1445, 1490},
                    VertexColors -> None], 
                  
                  Line3DBox[{1254, 1253, 1174, 1239, 1175, 2359, 1310, 1259, 
                   1260, 2624, 1179, 1240, 1180, 1313, 1262, 2626, 1444, 
                   1530}, VertexColors -> None], 
                  
                  Line3DBox[{1307, 1256, 1255, 1354, 2646, 1227, 1306, 951, 
                   1342, 1341, 2653, 1353, 1222, 1302, 934, 2644, 1446, 1512},
                    VertexColors -> None], 
                  Line3DBox[{1491, 1442, 2601, 1298, 917, 1339, 1338, 2652, 
                   1352, 1218, 1294, 899, 2642, 1336, 1335, 1351, 2641, 1214, 
                   1290, 881, 1333, 1332, 2651, 1350, 1210, 1286, 864, 1330, 
                   1329, 1349, 2639, 1202, 1282, 846, 1327, 1326, 2650, 1348, 
                   1195, 1278, 2637, 828, 1324, 1323, 1347, 2634, 1191, 1274, 
                   810, 1321, 1320, 2649, 1346, 1185, 1270, 2632, 792, 1318, 
                   1317, 1345, 2629, 1181, 1266, 774, 1315, 2647, 1314, 1493},
                    VertexColors -> None], 
                  
                  Line3DBox[{1492, 1441, 2375, 1316, 1264, 1265, 2628, 1183, 
                   1241, 1184, 1319, 1268, 2631, 1269, 1187, 1242, 1188, 2390,
                    1322, 1272, 1273, 2633, 1193, 1243, 1194, 1325, 1276, 
                   2636, 1277, 1197, 1244, 1198, 2408, 1328, 1280, 1281, 2638,
                    1204, 1245, 1205, 1331, 1284, 1285, 1212, 1247, 1213, 
                   2426, 1334, 1288, 1289, 2640, 1216, 1248, 1217, 1337, 2648,
                    1292, 1293, 1220, 1249, 1221, 2461, 1340, 1296, 1297, 
                   2643, 1443, 1529}, VertexColors -> None], 
                  
                  Line3DBox[{1494, 2655, 1413, 1263, 1363, 2656, 1364, 1362, 
                   1182, 1267, 2630, 1368, 1369, 1367, 2657, 1186, 1271, 1373,
                    2658, 1374, 1372, 1192, 1275, 2635, 1378, 1379, 1377, 
                   2659, 1196, 1279, 1383, 2660, 1384, 1382, 1203, 1283, 1388,
                    1389, 1387, 2661, 1211, 1287, 1393, 2662, 1394, 1392, 
                   1215, 2443, 1291, 1398, 1399, 1397, 2663, 1219, 1295, 1400,
                    2664, 1496}, VertexColors -> None], 
                  
                  Line3DBox[{1495, 1449, 2600, 916, 2460, 1396, 1395, 898, 
                   2442, 1391, 1390, 2585, 880, 2425, 1386, 1385, 863, 1381, 
                   1380, 2568, 845, 2407, 1376, 1375, 2550, 827, 1371, 1370, 
                   2534, 809, 2389, 1366, 1365, 2516, 791, 1361, 1360, 2501, 
                   773, 2374, 1448, 1516}, VertexColors -> None], 
                  
                  Line3DBox[{1497, 1009, 2371, 766, 2497, 1015, 784, 2508, 
                   1031, 2384, 802, 2529, 1189, 1047, 820, 2541, 1190, 1063, 
                   2402, 838, 2563, 1201, 1078, 856, 1093, 2420, 873, 2580, 
                   1108, 2433, 891, 1124, 909, 2597, 1460, 1523}, 
                   VertexColors -> None], 
                  Line3DBox[{545, 2675, 1451, 768, 1017, 2379, 786, 1033, 
                   2386, 804, 1049, 2397, 822, 2543, 1065, 2404, 840, 1080, 
                   2415, 858, 1095, 2422, 875, 1110, 2435, 2436, 893, 1126, 
                   2457, 911, 1462, 2670, 489}, VertexColors -> None], 
                  
                  Line3DBox[{1498, 2667, 1010, 769, 2498, 1018, 787, 2510, 
                   2511, 1034, 805, 2531, 1050, 823, 2544, 2545, 1066, 841, 
                   2565, 1081, 859, 2575, 1096, 876, 2582, 1111, 2437, 894, 
                   2592, 1127, 912, 1463, 2680, 1524}, VertexColors -> None], 
                  
                  Line3DBox[{1499, 1011, 772, 2500, 1021, 790, 2514, 2515, 
                   1037, 808, 2533, 1053, 826, 2548, 2549, 1069, 844, 2567, 
                   1084, 862, 2576, 1099, 879, 2584, 1114, 2441, 897, 2593, 
                   1130, 915, 1466, 1525}, VertexColors -> None], 
                  
                  Line3DBox[{1500, 2668, 1012, 776, 2502, 1023, 794, 2518, 
                   2519, 1039, 812, 2535, 1055, 830, 2552, 2553, 1071, 848, 
                   2569, 1086, 866, 2577, 1101, 883, 2586, 1116, 2446, 901, 
                   2594, 1132, 919, 2602, 1468, 1526}, VertexColors -> None], 
                  
                  Line3DBox[{1501, 1013, 779, 2504, 1026, 797, 2522, 2523, 
                   1042, 815, 2537, 1058, 833, 2556, 2557, 1074, 851, 2571, 
                   1089, 869, 2578, 1104, 886, 2588, 1119, 2450, 904, 2595, 
                   1135, 922, 1471, 1527}, VertexColors -> None], 
                  
                  Line3DBox[{1502, 2669, 1014, 782, 2506, 1029, 800, 2526, 
                   2527, 1045, 818, 2539, 1061, 836, 2560, 2561, 1077, 854, 
                   2573, 1092, 872, 2579, 1107, 889, 2590, 1122, 2454, 907, 
                   2596, 1138, 925, 1474, 2681, 1528}, VertexColors -> None], 
                  
                  Line3DBox[{1503, 1461, 2598, 910, 2456, 1125, 892, 2434, 
                   1109, 2581, 874, 2421, 1094, 857, 1079, 2564, 839, 2403, 
                   1064, 2542, 821, 1048, 2530, 803, 2385, 1032, 2509, 785, 
                   1016, 767, 2372, 1450, 1513}, VertexColors -> None], 
                  
                  Line3DBox[{1504, 1464, 2599, 913, 2458, 1128, 895, 2438, 
                   1112, 2583, 877, 2423, 1097, 860, 1082, 2566, 842, 2405, 
                   1067, 2546, 824, 1051, 2532, 806, 2387, 1035, 2512, 788, 
                   1019, 2499, 770, 2373, 1452, 1514}, VertexColors -> None], 
                  
                  Line3DBox[{1505, 2671, 1465, 914, 2459, 1129, 896, 2440, 
                   2439, 1113, 878, 2424, 1098, 861, 2416, 1083, 843, 2406, 
                   1068, 2547, 825, 2398, 1052, 807, 2388, 1036, 2513, 789, 
                   2380, 1020, 771, 1453, 2676, 1515}, VertexColors -> None], 
                  
                  Line3DBox[{1506, 2672, 1467, 918, 2462, 1131, 900, 2445, 
                   2444, 1115, 882, 2427, 1100, 865, 2417, 1085, 847, 2409, 
                   1070, 2551, 829, 2399, 1054, 811, 2391, 1038, 2517, 793, 
                   2381, 1022, 775, 1454, 2677, 1517}, VertexColors -> None], 
                  
                  Line3DBox[{1507, 1469, 2603, 920, 2463, 1133, 902, 2447, 
                   1117, 2587, 884, 2428, 1102, 867, 1087, 2570, 849, 2410, 
                   1072, 2554, 831, 1056, 2536, 813, 2392, 1040, 2520, 795, 
                   1024, 2503, 777, 2376, 1455, 1518}, VertexColors -> None], 
                  
                  Line3DBox[{1508, 2673, 1470, 921, 2464, 1134, 903, 2449, 
                   2448, 1118, 885, 2429, 1103, 868, 2418, 1088, 850, 2411, 
                   1073, 2555, 832, 2400, 1057, 814, 2393, 1041, 2521, 796, 
                   2382, 1025, 778, 1456, 2678, 1519}, VertexColors -> None], 
                  
                  Line3DBox[{1509, 1472, 2604, 923, 2465, 1136, 905, 2451, 
                   1120, 2589, 887, 2430, 1105, 870, 1090, 2572, 852, 2412, 
                   1075, 2558, 834, 1059, 2538, 816, 2394, 1043, 2524, 798, 
                   1027, 2505, 780, 2377, 1457, 1520}, VertexColors -> None], 
                  
                  Line3DBox[{1510, 2674, 1473, 924, 2466, 1137, 906, 2453, 
                   2452, 1121, 888, 2431, 1106, 871, 2419, 1091, 853, 2413, 
                   1076, 2559, 835, 2401, 1060, 817, 2395, 1044, 2525, 799, 
                   2383, 1028, 781, 1458, 2679, 1521}, VertexColors -> None], 
                  
                  Line3DBox[{1511, 1475, 2605, 926, 2467, 1139, 908, 2455, 
                   1123, 2591, 890, 2432, 1209, 1208, 1246, 1207, 1206, 2574, 
                   855, 2414, 1200, 1199, 2562, 837, 1062, 2540, 819, 2396, 
                   1046, 2528, 801, 1030, 2507, 783, 2378, 1459, 1522}, 
                   VertexColors -> None], 
                  Line3DBox[{1540, 2702, 752, 996, 2489, 720, 980, 2483, 718},
                    VertexColors -> None], 
                  
                  Line3DBox[{1541, 2704, 755, 999, 2490, 726, 983, 2484, 724},
                    VertexColors -> None], 
                  
                  Line3DBox[{1542, 2705, 758, 1001, 2491, 734, 986, 2485, 
                   732}, VertexColors -> None], 
                  
                  Line3DBox[{1543, 2707, 761, 1004, 2493, 740, 989, 2486, 
                   738}, VertexColors -> None], 
                  
                  Line3DBox[{1544, 2709, 764, 1007, 2495, 746, 992, 2487, 
                   744}, VertexColors -> None], 
                  Line3DBox[{1480, 1545}, VertexColors -> None], 
                  
                  Line3DBox[{556, 1484, 929, 1142, 2469, 945, 1157, 2478, 
                   963}, VertexColors -> None], 
                  
                  Line3DBox[{1549, 1485, 932, 1145, 2471, 948, 1160, 2479, 
                   966}, VertexColors -> None], 
                  
                  Line3DBox[{1550, 1486, 1425, 1422, 1423, 1424, 1421, 2686, 
                   1420, 952, 1162, 2480, 969}, VertexColors -> None], 
                  
                  Line3DBox[{1551, 1487, 2694, 937, 1149, 2474, 955, 1165, 
                   2481, 972}, VertexColors -> None], 
                  
                  Line3DBox[{1552, 1488, 2697, 940, 1152, 2476, 958, 1168, 
                   2482, 975}, VertexColors -> None]}, {}, {}}}, 
               VertexColors -> CompressedData["
1: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
vC+n4hn6vEl6v0P0jlIyrjcLcL1Jmpcldje+CzauhaI7u27YyFSARWLjvkvN
8cTvinD9Q+F2W/WF8bK685E11YVdtiuyxWyDyusasNeTrG3QpvyJzsGMxro2
Pjj6rH02Y+xfxmn0OMpvrMHhnpJsqFirPTPQ6hMxHjuI6+tFtHdOQ8Z8H+9h
WA32iZ+3emSXwK2fTxrlC5i/+eQQ4jpPb7Pki3c5UD1qvsKoxswu5VThlc8/
clG4PjOZl9mzidIDPV4lxb0eGD8b0O496CpOpsf5v+0Z83g/MI/ngPnA0bT3
u4twn5eD+7ytuM8rQ8tD0vd5Se+Yk/RA1+dL7Jc9tH6xcrxV4S8hgOTb92V7
/MwHC9mShrX34uAM5mklaPu8JDv5/4o7t5CogyiMb1qRmJcKXC2yqxvShYow
omJEwYqSTHpREmpLWCi2xcwgKszCxMKWXrJCu1DZKpQlWQiVFGtoLoSVyFZa
qV3wUqJBpmGC37B14GPdoHo9DLNz+8+c+X5z9mh7L/TeSsF5l2AdZop1eJRw
Xrae2Xeh+WwBdGn23bHv+pmr8lpPRocamxS3KKjilVp43r73U7pTZUEnD4ZO
flVw22jsJzliPwmG3n5OcFu2XzFu6+s5yPZhIzhChuAI7Lwb7bmWBq6RAK7x
FlzD1/OOld8ALjxFcGFv55qv59d28J0dgu+w8fT1/NK8qV/wJja/zC9inIv5
XZovF4KXBRK/jvmNrbeM1T0pnWrfm7zr00Na1Nc7G2Nt7U4VCn43CH5XJrgz
81c1BzwpuHMe/GGD8IeZ/yzzLGt7WFV2qKGnS8Uvdk3xr/HUw3h0+f6K6LXr
O1T7Lcdgnd3THj/wTYfgm9nLV24q7/6o4qOG2sYPePqVBF78ALx43iRLnrv5
s4qaXbLv0Kw2lZBU//JJ42OVCt46D7y1GLy1zxE9+d2RTrXsstVYe6BFle6q
Tzs96KR50GR5B8qbwLtjwLvHVI3wbtYe1n5v/W0Ad64V3JmNJxt/Nl8rwcFn
Cg6u5z1WzDu79zGezu6Vul916Be7t7J78ZlLsyrCTg2P/9I4d/fFFlX23u23
e2yNSsG8mzDvRYKzs/u4XoclYh0mkvs+Gwf53bHvtxn8vRX8PVjwd7mfeNuX
mH7C9kOmz+j3PGbsz0z/YfpS9TiT9XVop3JfSD7un9SsInJ+hIffc9LzS/8u
07X0eWoT5ynTzbTOliV0Nukn6HdiQcLfSAeXvwgu3ya4vHyfpu3fweUXCC7/
t/RSF/RS88MRvTTANaKXRqK8FeWPofxoddT7o9RR++B/3oX/6c2PXY13Bcni
XUE93hXcEO8KmO7N3htIXZ35+YnQ7Zug2/dDt9d5FVcI7sZ4gb53mMT7UsYj
dDvl/UXb54B3WATvkOMg82VrTs3uWez+qO1rhf0L8ok/Rz7xF8gn/oXkGWf3
dG2vFVze1zzsA7DbYM+BnelsLB+0r/nrT8A+EfbdsDM9luXFZno7y+vN+sv4
CJsXxrPY+tH154v62byw9rNxYPPC1glbn0OIQwwU8aHhiK+ZJOLCtiL+NBfx
p4cRf7oH8bxGxPOWI57XgnjYOYiHXYN42ATE4U4QcbjMzuphv8vayfrFxiEP
/z8ZIP5/Uu8n8l33DLzrnuvru24SJ3UV8UqrEK/E2s/Ke6v/f/0ui6eT4+Nr
ntzP5PtleYQNiI+eKOad1a/bOf9KUdrhuuHzObvX8K3PM4+5y9+aQ2I6VMHm
D9ZSm8fvnWoxlG8rHvb7L/gXOg2/3N8N9sb8hnaVMS3y60H7U9W0xS88KKRL
3e4ve5Sa+UaNbzh7c+e6Gmpn+WF1/WbUb0P92h6B9gyd/709LO6M9YuNw78e
HzZfrPyfjs9ox+Enr+4cpA==
                "], VertexNormals -> CompressedData["
1:eJx8fHdczu/3f1tJKjOVjLQQWaF1lLJHVtGkUFZFhJZRNCVEJZGSSiSVRONq
b+2997jv0pBI1O91ve7X/X5/3veXn3/uR+dxPc51zvOM65xzu88iE8v9JzjY
2NgeTWVj4yQ+Y65UvXpWlgthiTac2iI01DXBr+Fg3QoL1hdO3axXAJ7cD1Xv
hPYg5fyrBwqV2uFC7In3EUpFcDbOXIce04XepWy/f3NTJ1RJuJV8iS0Bh+07
1qgKdyD1jAHl9fbdoDRtVqi6fhnksueOGLu3II8LufyWxb3Qsb5zwKCjHNZx
i71e0FWN9PUKNi/9QYeN9/mmuHNXAv+R3dc81fPQs8luzwyvfug5UK956Xwl
cnQw8Ctyj09KNg85cUP6C5zISuYkzqOs4Rzy/E/by3fI86v3jRD80ftHbpGY
f4r0IpL/Kz/tYEIepCTN/g3LszRw0TQsj5WfYQUhPzqmMLIayy/C5kHKv9/z
VQKhL8rt7dLF+i6TMPPG+p4pUeYg8EGXPL+S+NxxzyDxofBErHjKP3ORM63+
DGuWPOBWdelFv7fFDlgWtIL53kRhZFgCYuuyR/ex9aBn3rJ1mc7tcDtevV3k
VyncS9PzfPGzE7XsfmPx5UInKAqcq1+SXA5daUpzdXa1oy1rjKZfde8GH2fH
ty63K8FZTNFW814zqmoKR98ie8HvleamG1LVwNY2bWzD8ypUeTuopfExHdju
K6fc0q6BK3a+97yzctCM0FWcdpN9kHZyh/vHlBrUpXBuodSy90kbyg+s7b3Z
D9/Gz+HzaDJxjSc+P5J5jjz/nMEfTbYy+FdQ/L8d144m5EE/s6/YYHk0l4ek
YnmaHJNrCflR65C4KJYfOetPw/L3vdvXTOiLaJmp7ljfnZ+WnMf6nmLgg0Qp
fJ5S+FB4IlY8b2ziZHtcXQpzjoidUDrfg8pm8nlEBrWB/qMEYU3zcvC/UlHy
Oa8LLXW2rfqh0QHhXr0GQeKV0J1uFWYf3oE+ihz3c5/aBd7f46M3dVXB6YD4
X9z9rSh0hy2vdk83pJaxrXIMq4GfbkkTfF8bUOyjp7IHk3shwinWll2hDgZl
K2+MXKtA2pMzUyV06aCoPHWoRr0evnltkNyvk4W+a/OocF3qA86oBXqNL+pR
s9TFEr2BmKQowaGs4w19YOVYNEicR9phT+Tw+cnhHGV83j2g+SrBH8XOve6C
+YtnKCLMX3C5hCIhDxoOiv6N5ZE0iZbB8jyQko4h5EeWp2ez8RDyW1oEcGP5
XzH0Raz6cvhyziHwQS/y95H4XD7AQ+LjwbtkzL+6FHFbdZF4nq4LIfEU3Bqd
MqxZCdf4Eq0/PulCYWWH3Ux/t4PeTn0arbIK9hT2f5Qu7kDnauTvqNh0wqNf
Ro4vrtTAcFA2bfPDNiRt8vl21mQXhMxdoXZFrA7EOlSO3EhoRt16DWJmbj0w
p8w91iK4HrJFX6LQFbXI0mPGzZofveBjdVS4rLsBzi/8mWl1txSpJDTHhC+l
w9aPn4M40xthi0rJs4mZ6WiT4NDYx+90GE2dFJcWbEKOn4+YTI68Tar8bF6x
YVMfTN+bG0CcRw+beB7g89EbC8bx+SujcVMI/ui7wMpPmP/L9wofMP9uDp13
hDyosupZPpbHP37yGpZnSqa/EiE/qpMU08Pyi2m5imP5j5lx2hP6ImfFqcNY
32Wn7t7A+l6rFflK4IPe6WYmYHzOCo57YHy8P6ilE3iipw0aJJ6RD7+4Yjw/
6PXWp62rBSnufN/l4e3I51pNj0JrJ8zgaFTa8qAO5nIKbWtPb0ULhwRE3IS6
IW1moh1XXz0cKx2+IyPajExLP/onKfeAdvXemGSFRpDJ+bB0Lmcdki/UlPQ+
1AtVd9AmvT1NoDIowL9WvQKZht9PPr+bBv6h6SphK5shxGuhp3F+AQo3yjcY
F6LD2kPOTsGpzZBknpJwb2cS2tlacrfYiw79fM3JKcPNSH2Gg+3q3vAkUYvA
k7s/0SEnOg6fR09EFkfi83a1P8nzIQz+KIjiH0rx93oZrUnIg8x7Tb6uIeRp
uDCRiuXhGSuMIuRHA8vdl2H5TeKFl2D50xn6oqOUviaUvmmV5ooEPmgoO4rE
J128gcSHwhOx4klv3jokZdoIX00Dvmyd04TubJzrVCjRA8H3xMK7tjfB1+ig
aRd96tB+64fFqxp6YOG93MNvJJrhd93Mlz/TqlDxy3vtle69sEujI9eirhms
ZSTdgoLLEPfuTx8Gl9Dgw4PbKuzKLfBJY1HwZftCdPnT7o3BL2iQG3JI7uil
FrDS49g6pJ6B5tW8+mjNRYeTER9++Pu3QJHCa9ODZ2PRL8kICTrQgSs5JLot
tAXJtjR9NuR/niQR7/Bo9kE6mB4cHSPOo4GexeT5n+498/F5/upiWYI/4t90
+hjm77u2OAHzT2TIgxIoeWwoefYx5EcXKPk5KflnjhkeJPRFMztNk7C+76OH
mrG+360nXhP4IGvF6T+sCXycl/iVY3woPBErnguk4nXzCX0NZE91PibeWyH1
yMBxSRpsPmFw49iTFrhUByWJHYUo5LVUneYxGhwUT1FsSW6BqZIhCtc0c1GO
3tybNo9oUHph6FVLbQssvWUgfMU9A1UvEv38JZ0GoVovtKcOtkCck1nPJptk
9Gab9spFXTTIiOtrmsXWCkobNE5mxceisJhFzY8naTA0uS4vn68VdEq8FvGm
h6CD0sc+8wgS/plowMEv0Ip+X2avm7n7XtJCu43JCrPo8FpUHp9HRrcfqODz
mdwHyPOfPF3rCf6oeHaRGeY/UQWtmP+2eWO7CXmQThPXAnVCniMKggpYnqLe
vAhCfuTI/fP7ZUJ+/YJfRVj+eoULGwl90UkhuZVYX9fFV69jfV8ll1wj8EFz
5fdzJBH47Dz4rhrjQ+GJWPH0i+PgPLyyFdw6w8SuTuipMT5psJhmzo7pQjmv
xQl6CuOTwCGsnqTPTzTFdDXGJw2spilyYfoJlQ5RTGd80oj39yXJn43x7/oh
DyD5v8x04fhf+jq5UZIutVSFPC+zz4n4W0mN8UmDAQW3Dt2VrSjAcfrKqxOi
yozPf84jxrml/5x/zeCPVpN8ldRWM/kz9EIMfXaoMfWyZsiPGHLv+Ef+YYa+
SJzSV5zSV4GhF2LKf5DSi8ITseJ5qX7NQezPluGL5gQQ9a97pIgfxn/aHC1H
7M9R146vJewFw+Mqldhe7zzOrsP+HJ/aZUrYF1Q3T17D9n0k3IT9AR5OC9Ei
/BmkCo8XYH94EnlqL/ZnRaEIF8J/gDfCQB77j7lBHunPZ6tEbhD+BuXevU3Y
36S0xUh/thp+coHwT8Ieiv/x5yu1ckKzdt9TYfrzqXVLSH82U/HTxefXdWqS
543XniD9mTPuxU3Mf+n7KaQ/ayl7k/5c+0H0IJanMNScjC8f1/hw7M9DnpuW
Y/kjL20l43F90MIN2J8Fos6aYH1/Tz3m+Ad/BqY/U3giVjyT8uxHcX6WUCut
J/IJPFAzdMH5REOn9R3Oz7REu3Yi/8D7ysfVf8jPwMzPV5Y/KML5+TBd7QSR
3+DjxeNJf8jPwMzP5skzyPwMuxUPEvkT9HhUyfxsNF5L5ufWcz7biHwL3rat
/8nP43GKvkR+VmHmZ91iuZ84P3tqXlPC56umqZLn5d39MH/01KxoI+ZfESHy
CfOXuj1FDednx0A7SyzPeHCWMpYnc01UIc7PAq/WncfyO5hVfcLyr5JbY4jz
c31Jxl2sb+eTVd1/yM/AzM8UnogVT1X+p1W43nhe7f+UeB8hT2lTxx/qDfhL
vQF/qTeAWW+4MN53OMV436GRet9Z6g34S70Bf6k3VJj1BnUesZ7/eYyfrDcG
k7j9Mf9P2stI/g2M+gcpM+ofMKHqH5Z6A/5Sb8Bf6g1g1hsUnogVz0O3Jz7i
+tlfNOkKUe/BQ8MBZ1zvOYnqDOD6udAgKZaoD6F0tP4erg+j9pTa4fo5Uv7R
F6KeBM0pZs64ntQTiVXG9fOQoKMJUX9Cn5fLPFx/tjHqVahm1KvwhKpXr/x0
FcL1c0ynegFR34Lehtl/qp+BtX4+wPPYkaifVZj1c9aF4Me4fj7KvuM9Ps/F
/+EnPi/ls4Ib18/JhjyfMf/JdaVxf6ifgVk/o0yJDbh+jtlrYIrlX3x1jegf
6mdg1s/h4TN/4Pp5Rc/9GIxPsXyEN8anatQzGdfPH/o3k3j6L7xF4pmrod9F
9C+wtXiNI9G/wNNvYIX7l3dPb/zeTPSDeyc7u4l+B/RTjNNwvyNr7L0T94NL
PFcjoj+CLeZbb+P+aH/U+ue4H/QIUZ1L9FMwarDrx16in1L4Gi+L+8HSjfeX
TP3aALJ7vy/A/dedpT0XcT+4PfpGBNGvwfCRKZ9wv+ZdFDKA+8EZi+5tJ/o7
kJzvrfS//aDKvgWTRD+owuwHOQ4tx+dR1r4jOvi8wrGZ5PmHDP5oK8V/kOLv
sKtCHveDudq3JbE8/qJ8pDzfjWaF4X5wrgzvTCy/cu+0n1j+ZQx9Eau+EYHV
3LgftFTMbsP4PBVbkoXxqZ1q34z7wbVdEySea5LqSDx1ln9cg+cb6wt92Yh+
HBxMcr79Yb4Bf5lvAHO+0cCYD0AbYz4AqdR8YJAxT4BfjHkCaFHzhJ3Bw+R8
Y6fPyZENz6vgC5tVKzl/YMwrgJpXAHNewZxvLHcRk5Za9l6FOd+g5iGImocA
cx5ykMEf7aD49zP5/3e+AX+ZbwBzvmEa8bERzzcOLhog9XWcp2b5h/kGMOcb
FJ6IFc8LvsaheF7H7qvPoy1Cgxfua9XwfCk45ikPntfdq5XbdCe0B5a2u2nj
edT94JhoPK+r/NBxhB7TBctHxr3+MK8D5rxO5vSFF3heF2unO2rs3gJOKzqn
/mFeB8x5Xal4Kw+e183T+u3kqZ4HjuJv/zOvy49rfljkHq/CnNc9rDtLzuta
82Xc8PmEOO4/zevgL/M6+Mu8DpjzujbOffF4XudAf0Hq27shldR3YOf0CQ29
AmR71JXExz6knMSHwhOx4unLta0q36sQ5ObdVP8l34uMNJwf3T3VBhfajhyY
VC0Aocoz53ibetFnesTp096tsOqHTNU3nmqoP8CbM+d3Avqxml/V8l0/2C4x
rSXoaKz6ZjamJz48q4Lp4btGpjYfqkQ7OLNHBIM/okSl5FUfJvuB74BTGXEv
+hwWRd6rX/3if+9FrPcmxv4WVZSqAzP9jDlcg/GonDOxa4FwP2wB23kEHS2y
njIX04N2C3dj+uzLbB5TOZqh4cfsi1XbolHhu/m8++lEn6it40nQkUB3kzWm
P92KpmC6lo/3ybgDLbA83XKxFH848vA3qPppSwd9/tuYjmw21qti+o6mHSQ9
Oyx7pPdZM+wRfrBZxaIKTTo9EQq51AuLVQI3H+Yi+oia2IdNEwjRF153ffeZ
6O+eCHtpt7RAHnfWRItNIFL+2q4vt5zOpCNWunXLku30iRYwf/IjYGxtGprk
m5kklUUDVWhdcU+6FWo1jvMvrnFC+18fafTjJOqrwA5MR2P3959aRNBHx4xI
us+atK2EPCiEN/g+ludjZf8tLA+LnMCU08uojeTvbWhUSfCBZit9kg9FR6x0
Fv7A5O8p+41O4IO2y6haEfjAI3EnPoxP497pDBzO0ue12gTCnZAmUl+Kjljp
LHYBpl0oOmKlT0yKkXZPzFpxkrAv3LFXJO1+IvAaaXcDUS5jTE+53EHanXY9
k/SrjvzxFYT/QP5ZO9KvLk1TJ/3qaRusxHTf+FKSPijvU4PjJVJ88ybCb8Hm
yqQv9ltPr1BdHC+9UzTOEH4Lt/oszmG/1Y0GMl4cHvskEXEB7blyZLwENdiS
8RIgIUjSXy7zIOPlycdeHC/QcPX1GBEvYGMQRcbLXelmMo7ODd6fwHQFx2ck
/Zh9cQWOo72RlqQ81gIL/bA8y3I30HX481FTg2iy+dleeLvKyV5nbxsktDWM
EHSQM3j8kaAjLR/n65jOci9i3jsr1bRdTbIapRhMHdr7432Spkvw+57KfpAS
nT2E+cvJZZB8Ekefk3x2HBR0Vd1UhzjkxZ9lSMclvaBzFC9f2Q9K35o1pWc0
o2sJmWlaXq+TTsY/Vi8fo8Pymb/49x9uQeve3HWIFQxNcj7x7ge6SQdD0doV
MW4toPIkSpUuV4xGX2QY+22mweD6VG/RthbkOyNPIC3fP2nlVv8Z/CvpMJy5
rzKL8M+tK522HzC8kfTFkmt6H+GfL5qFdhJxhKQ61pJxJOzR9gnHEUt8ATO+
WPio/IUPMPmEJZ6QIeREQhH6IYSccMaQZvC/cibJymgScqow5WTqu+LcDH9C
XxWmvkx8mopyYgl8VJj4MPHs4A36QOCpwsQz2ZttANuxSXA4Cdt3Y/EJ0r5M
e1mnmX4h7KXCtBfln4jVP31kzvq8Cs6HG6HmQmmvepG0ol9laG8r2G6YfrdS
qwrmcYaf47WKQCnnI8QXfuuH+roWTEdBDbdJ+mGzmyTd6syF8lunK9GTUf03
zZ8i0Kd2q4RU8S/w+oD2HYI/qudKIPlnPS4m+bPcC8x7PacLk/fGj7qbE/zh
gMYbkj8LH2DyqW90XTDGkQ9nPSWPukz0IlHeWPtNjq3A7tJFytmYscsU83Hh
dSf50ByflBFygoixPSmnVukjUs7ijmu+amfz0Gjx0o6LWb3IbaHJZofmVhA2
2I7p0HNpbhdBhwdPgzZhOi0qfWPbriq0ucNfaeb2eJW5nt2fAib6Yb97uQgh
D9pz9RyWB2pzOkh5Mi4IBmA+Yw1cJP/vRVs3/y+f7Z8TgeCT9Bc+iMlH7uc0
u6DgGpgozp5WNTsBzdNJ0zl5rJ9JR6x0mSXrd/60q0Xl86OyowLDkOztnad4
9/VD2CGLHQQdzOnRhZiuuv8CSb8QtN29/2Ytkns4yP3kbVySjjLX9SlH+uFa
iJjxB4960C1I1Zfyfo/q5swWk0zvY9IRK91iisDV0PFGeGAs/459fQwKvzxX
s0O+D970GtoSdPTI/+sHTBfSfb0Z05c8XOFo7d2EdnEudTLY9RytdeJ6vEik
D/rinR0IOizj32yP6e6jiiT9fo/fJbpPExrZrm4vuCMqafKo7ElV8T6oXvn0
2aKuZvix60PE+NnXqNJllr/eWzrUc28IJuhIbcXXcEy3uHXID9N/z3VrC5Nr
QePXxqPDtz9GxsrxhpIBdLgn095K0EHg6GKE6Rpcs4wwff60ojGuZS1oqtmz
z8c5wpJsc7LbLgfS4ckpbv6i4Ba43uglOu9yCFIbvp7As5cO60XYMR1dPbBK
FtOj66+SdGP51TJ3s1oQ34s7j8wX3EPuOrGuh4EOXYvWYDqcHvriiumf2+NI
eiFv3SfZ7BaUbPXzB9+PwKQXK7x2799E9KErVJuUprXCkY74wfrMByhHpJ/e
OYMOY9tfNBJ0ZN7QX4npqzT292G6p8Gv1EGxVrT4q+XPjAQHNHq9QM11Kh0W
DI1jOrBvd1bIJOjLqvNJeplelsx08VakUR9YUMPunnTmudHPeIKu5BhMzj8/
SnWKXZ0QVWN80ph0xPh76T/0WTtPb1aQb0VCQjnNvxpMwf3GxoGSyX/owEo/
11NnvYY4/+XonVLjY+dVTqRqK1bhud9/9QWmvnGCwaS+vPITJN0tYQ+p7zZr
13mnx1rQ2smnRftCXWH1yZDU4gVE3bLEDdOhVeF6LKY73XhB0uHyOvdPxHkN
M/qi6fceqqRdf+ilvZAOHIl8pH1dzfqmEXaEIl5X0o5m06aT9vUe2j4pQtAN
F9wl6V33BG7uu96C0luz1zvlP4S3pSmPX5nT4XitAabD64UHtDD9+QlPkp4W
LaCz5UYLqr0eI7NnRohKptAGN/XTdMg4/4r0534PWgDht7Bx2QLSn3O2apL+
vOacNEkvkz1K+vMbscaF8k7NaCP/MLv4/adg/Exj5UglHc663lxE0OHqlVBB
TM+bKkTSV4u0V2fdbkY/57YHdKW/UvG+25eyqJYO7GwTV3D87vmwMoGIU4jW
5SPjV3zoLBm/DepD0Zg+9fInMn4vt2/uCLZrRGFfjw5yy4WA98u99U5H/6ED
K11nD31q//VGpJnM7dqdHa3S7sjlEHCiD7YcDDLCeabp5S1vIp8At56PKM4n
xjRvTEd7NSR8Mf2MhjNJp1e/7U0ZqEO6Tifu7NR9CWcvyuTZTfTBubU2NIIO
XxNcrmO6wi5Okr7h7ETkvtE69OzSriiZe7EqM6KFDe9y97O+I8B8R3Y1Tdri
fNvaemwGkVehKvbdn/ItMPPtjbPWij191cjMyjDeOCwcDPVWRxeE9IPl+bB1
BB2+P7xG0ivN9El60TeZIa6RalRcWl3Y6PdepcLJ8EHA6//zTgHznVpQ9PEB
fqe6zFXJ90hq8BP5HrG8v8B8fztT35D3GgfciyTuRYs3mpL3vmu3J+W8ceVH
KKbvnaX2H3l2fdXPIeRJYspzLsaTxFP10UE9Ak/Ec1OMxLPfp5TEf0uxyEFM
l8/a+R+cP2zbYEfgnMTEeeHzvaQ/CK1eWE/4A7L9qkf6A0VHrHSmn7x0/XiB
8JMkpp+Y6XmS/jxd+Eun2P2nyPqDCOnPr4+1kP4/R23qCKb7OWn9x8+VR/mu
E36exPRzlnhEzHjsNZxGxq9u0FWSLl6W9J84nXX09zwiTpOYccqSTxAzn7RV
knTkbXLMD9OrnoT+J8/EzingIfJMEjPPsE0y8qHlnYKMnw2m6MgTJTIfctUz
8ufdsPyV4wQ931TpP3ky56On6tFj55OYeZLK80DleWDmeZb8/w+dJc+rMPM8
9U4B9U4ByzuFqHcKWN8pK4lPjcQ7pcJ8p8QfdZDv6e3Fuu+I9xS0beaQ76l1
hAv5/t5Mzk7B9H15sYb/+872N6n0Eu+sCvOdXWvjQNYDi9l3uhP1ADTtVCDr
AZb6AZj1A7NOCDPf607UCSrMOqFmnhNZ/yxotIgg6h9oXOdO1j/aF7aR9ZK6
2S6S7mRh/J+6aPU3/S8Bb+NUmHXRi+rXY9Yb60Cw2Wl1NnsYWrGptjhIph+m
J1+XnT+9GbheXPWS3xuEHgeb5SqM0uGt1bDeUt0WiMvqKVUV8kPSrfFcRdfp
sGfCdV54awuEb6G93XD1Dlrtev/6/hV0kJ5pl55A9OPsxa9P7a2xRmJz2ddU
c/4fOjDpAu9ukXy+FAaKb7x6B2D9HZJPbuEAea9x9Il+4l64ZRlD3nsozIWU
84D8zeuEnODecI6U83lQKKmX7O4kNUIvyFUqJfX6YVfDLileDXte9b0VnhUB
7mJWH5IL+6Hy4d5HoodrIVe3bsb0NyVI26Rp3jziXdBT+xbEV1ULiqIax7xe
ZaOq/Vv8RT/2waqIm1qyWrWQmfBwjZx3GtJcv37iO9Ffm6/YF+nn3AQeeQXx
llNzUaCP8Axjoq9vXfjy9M6yJtj4yVM+Y2UqqhYpsDmYSofEqy7t3882QRvy
2H2m4iNSORA10/k7HV66J/7WXknEtdnkrmUtachecqgoUZUOvodazg1rtQBK
+x3aNvoBjd2YQy8zJeLxc/qjfIkWUNTWzPgdEYu2JMzo9HGlw2maTsvMshaw
Szuh6swTj7qupE1TnU34M1f13W91LbDZdoaDy7k3qH7arS9ukkR+CFjQnZHa
AkK2fcZZYRGI9vVEotd6OlwrOr6HvqQVfqqOLdBJC0Sby3casrHT4cTdz/Rh
qVaI3bkw4XT1A5SVrOb7jIMOk9FGb7iI+P18QGuH8fZHaFdC4fyZfHRAXdtJ
Pk+9yr4TfODwhUV/4gNMPnVBjoWziXziS9c23V3gAPnvBveFEfmh7zYvqZf3
IzlrQi9YpLGZ1KugKY/UK0xogR+hFxxusyT18vVL1OwabYGB9MC9m64Gg+Bp
9t58sf+DMzBxPrj6G4nz2nun/QicYcGzjSTOKUuke99eaYHxK4G+B7SjwWcs
P+S3Ph0kV3i+xnafeXf7E8LuELNGfuYf7A5Mu0+8Pfzs3slmuECruJ5ZEw/7
ZxQteZtEhxXxbEfe72uEwdLMmAifJOA5qvhNdgORB6pyfbB/3pB9sZDwT9Ab
WyaC/dP81V7SP6cfybtA+CccVfPyw/6Z8b2IpyyxDuyy0+uXPU8Fid6XN32z
+0CbZ9zRaHUVcGnLpuQLlcFhY67ju58R75ec2pKrcVXwuH2B9oOQXNBaG/pS
eGs/zFEoONAaVw13I4Qllfenw6KigPmmRv0wd/LE/U8FdXBd1Fcmz6YYDCPm
JMUQ/f7jfR8fYvoFnmZark0xCr90F2H6j1mGpF7ycV2PCL1Q/ta7pF6jQm3e
d57Wo5diu892PA0FgxrHB58r+0BYXSfnGL0edTXzaGSUv4X5H3PmFhB6eSVa
7Yz+Xo/o54OqV6k/BJHwc34XCb1UInYMHdetg2Oi9ceX7S2AYm31Z456fXCo
d/cIpn//YiBJ0JGH7bVgTH8cVZw2xF8P4qdU+WQv56OrHD/8k1X6wEao5rrZ
tXoIbXE0vn4zB0n9FnKM2dEHyZWpUzCeUZ4uHwk8UdqmSCeMp21xtk7Y2Xpw
nZ+i3TwvFSVxXp+Me94HwfUH9uVF1cPxcqtX3ubpaF/c6ZcX7Ii6Yi4gfC9/
mKU6cS/kOO3wxffO37TJl7AvktghKInty3tMYy62b9DztmDCvui85TcHbN/8
ybO+2L6neY/xEvIgB6mLNdi+umLmpH19GjnvEPgjG+EBWWyXOQ7bkjH+LVoq
GAdklaZM4jOtJeApxsFaZI+x/pQK2EObUNxwvwvl+L2ysNDrABXfTgGen+Vw
Ju7Q3H0rutHu8Py4fZHtcK3l1U6u1Eo4+lbQifNcB1o98FpMWbQL/F+22Ph6
VIOp0zN7++hWNN2Yy35TfzfMi5hZyLGrFvgl3s6dcbMBpZtxpQ3E9cL9ZvfW
C6V14JtXaDwqVYHu3B9a9pZ4Z0+9anU7V9ulMrWp5rU1+5skxn/vGIQpB216
ifPolYGrET5flqq0FJ+XYvBHHCz88xjyoH2UPEKUPLoM+ZEPJT8/Jf8lBg5o
I4VDE4WDqcm+6+1WZejV69tzP6j1oCnDvR5bktvgYNRHznaXSoC21n23T3fC
YY6KLbvWdDLPA3UemOe3W/7eVLC8Gm6u+mkTvq4dorTl21JKiXvzd1wLrq4B
H/VFRcuutoDSosIVfDY90FO+tqPkTB3sDvrVk7uVeJ+juMM5uWgQv2TtlLbU
etAY7NfTNCsDu6Uz8+IPEH3cZS95yfAGZJjedcKRLQMOnLSTVl3fBwGM80iP
Ou9Inf/N4I/WUvyFKP5RDHnQBUqezZQ8Exak/OgRJX80Jf96Bg5oHYXDGQoH
2iPSf9BOhv+AC+U/zsO8g2e9KsHuXtGp2ZWdKHfuUoPPGR1QpnBLq2JtNXDL
nGE/mtyOMlSszF7pdYHJPRubL501EC0UmyW5pBV9y7w3L2m8G9aMzpRucKkD
C6KyNu6vRxNRKw5P8eqFkxJ2cxxG6iFqtKDGwLACPU/ptcvsI/QSiFx1g9YA
z1bu8F14JQdN8Vz9eekg8f4GpkptcW9AnBPTK8RWlKA9vWm/8q7SoS/r+coD
O+qRVqVOotWeGrT9UfG3eVo0ULi45N6KlFqU6hFle2lzM5LTuBW/M6cHxunR
c8eFalDdjuBpuTfb0Jf4uqvNct2Qxu63qtGkCj1M5dNYXdOBAlXGLBM8OsFk
maRbc04FOvHeV93gQxfypM0OmsnWAX3aN5ofj9bD+usWMsN7H8K+AXmt90Rc
z176SsX2dT16bnfbw8MiHWyPnjbKJPJJLm+PTsfnOuTkV356QWoZyO7UVBG7
QfQLzSU5bNKNSOmE5gJvi0gw+fpWptyyDwJfRw9aLmuA3UcVg5fKvEcLp98+
5/OkD84z6CiIoi+l6O8Y8iBfW1IedJSSx0jxUmWDTiPMNfXRvyUVixzlZ0yP
1OkDfT+N8Dy3RpT6rGbzYYk4ZBM6b0/ilj7YuoZxfvUC8jxwrPzv+QTGeWCe
78+/J2sp24gSW6+vD1vgD2M2w7Uvr/YBFJB0cGxk0NspuhOllyVDfpCm5F/M
wAEOM3BAJykc6uMYfGKHHDEfJODA4BPGoKPQUQZ9HkUXYV/2+xzPcbAAq4x3
xgD9nRcdxyYHwGN6kJx4cwNUDx1/9jAoHR0UcWDbQORtp5m8fRKXG0Brq6z7
mVUlUElXPKHpSNQnl4K2Bw42wCHFM5Iclqmw9oj7aw+1PjjM8Ad4wfAH2EL5
Qz7DfyCe4T9gS/kPbx/pbyC2k/Q3iKf8bSnDP6GM4Z8gRflnG8OfwZjhz7CF
8mdrRlwgUQUyLkCQigsjRhyhQEYcwUsqjhQZcYdOMOIO2N4y4u4jI07RCUac
wqwsRpyyryLjGg1Lk3ENOVRcFzPyAFJn5AEYpvKANpVXtRj5BB2k8skmKn/e
ZuQf9IYlf7oz8hVSp/JVN5U/dRn5DQlQ+e09lT/3MvIhukrlQ3elU3fYiPy5
X65MxpktA7munRurReRPgdXTR7KI/KmSEvNqG3E+u2GaQjJxnquCkT9XUPyZ
+TOGyp8XKXk2/Tl/Imb+XE3lTyVK35OUvjbUu7yD8R5BPvUeXaXe3+OM9wtW
Uu/Xc+r9NWK8dyD85/cXmO9jSLiXfk5zPUo6pbZRcCgTji/rGjp+oA+25fri
dxlVJ+Tjdxm25nwh3+VF1Ds7i+KTTPEpo95ZdepeUereo9Q760bJOYuS04J6
ZzUovaoovSSuR507bFEPtktGRB90FkEgu4KoXgP9n7znych7yI7Ke2c7ZMNP
WNbDDb5XdXs6i1DGqTwvceL8q6HxhUExddCv1hN4lb8cmd4U25mPv29999xA
S6Me1I0e83n4FSLlewIbdk0n4p06/5VxHpjnNSTio6aw1wNvk/WjjTElMG61
a8dILh0amm8YSLXWw6X45vDSwUxIzTn/WpjAbeRd7BJPIq5brxyM3muZigZW
lqjdIeL61wd9DSEif+ZZunZlq4VCm3Bn5vdUIt/SjmVETmtAU0rZ2c4axUCb
466+4sg+kLAZP1K+oAF9WS2fdWXwFnQ8OLlTPKUPhrdG9V9WrgdhH/mz3yTy
0daDP55YK/aB8rPeHRve14O8l2n+u5XZaOL2nZTIPX3QLmiYqPisHhpOX328
4gFC3ZIcaw/79cEiadHmT3n10GW3fcsarww0v8hpebB5H/BP6eQcmFMPj0di
fnLPyyf6/zezHkIfxIwZRcRsrUcXRY1p0n6fYbXB0Temv+hw4dRvHnuneiR7
dSRzIDAXmrN9mp8q9cFNM82AW6fL4XOPTo30nG7Qzh+8qEFvh7vyxpEcIpVQ
s1PrmPDsTvDdpX+hK6QTHusmtL1trIIMu0Mzp95qg7YOjrFTl7qJ92jxwgXB
NZAyQsu+cK8J9s7S7UNavcS5S8GuSnVwZNrU74sDq6Bv/vi56b006Dkh/7DC
oxaJXefaGq9TB0NPNs77vp4GG+Mf24jUVqNWoQDf8yUtEPBw86lfV3vAQdbr
UK5gFartmv9gLKkdpOqlvn940QVvF30tjtxfgdTYAxc+4OsCJd3Glq76DuhQ
+DDXKa4MdUYd/txV0Q3PL6+8XbK6HWgMOtQw6Ciaot9n8IGdDD5oLcXnJONe
eMO4F+2j7r3EkBPGGHIiB0rOWoZecIShF+qk9HpgPm+L/rl6JBEmeLrzdj5K
XzVLYfuSPihh4IOyGPigcgqf9Qw8kdg3Ek+kQeHpwcAflTLwR3UU/ikMeyE6
w17oKmWvPQz7om8M+6KVlH0bDAJm+6s2gMjl3TYyVaFo0RENJ563fVA6PVMp
Rq0Buhete9v6JQQpVbrNWBLdB5me3APyNQ0oOMhd+KNbAuIXTg92P9kHuzW3
Vd+nNxD12wtOA7Zo0GN3vDtCvL+6802+3/nZgJTrGtxDL71T4ctv+D7ftQ8G
L9XWEOdRzbFlX/TZopHbqW3/OX/vctjCl5feJTHPW3L7P+wfaQDOhW/Mdg6G
oNOrPt5+cLMP2B1+k/THa9Lf7xgMAVVxcRdMH23/6Vak3QBDRkG5/HwFsI//
W99gOx3e3ohx5qxrANrX1Fut2R/Ao2Gu6isijiK6Vy/mCW6AuAszWtZ9yIAq
/Z/NXxX6YGzt53fzfcrRs6LBQ3d9u9E8T3pD4ZZ2sG/eFE7QQflAnAlBh18r
PhZj+s+JmKH5Qg0wP+ON8/WwFFhZ1hFXcb0Pth/gHcH0uUplrwk6ChILjcV0
mWUDJP6G0ifo0lWhMOWKL4l/ms313JUjlZB6ZuWxtLYOpDIU/3AgsBM8zk/l
+b23AtZ67DXbW9aFFp2vfbmSqDfWdj+eBm+qwW3GIev0C23obeQ3biXtbjBb
H5yaf7wWri3/fv5LeRPqui7cxMPeCw0vjafsGa2Dpfwyd+9cqEa/I9zijnrS
YElQZtD8eQ1Qz++17ueuYtRyQU/wzCs6THfSSnFUbUBHAn0cXr0pRKp6Pzg9
i4j35am2fTNvPZqpUYIO8VWjcTb/VRFPaTDH3a3NxbYWDWi2bhiya0KfJAr9
Leb0grmMyEZaRjXSS4n5NXNvG+qj/VroebIbdGR5c7ZOrUKjVgI7d2d3oO4Z
9PTo2E64ZV/7KfJ4BXo6MiUoK7ELneddveDOrA4I3yq+m6BDTXiDWHZiF1hf
aYzyJOgqoweSCT7Q/yBAl+ADnmyGHzEf8cvfFYh74fXUb1yz9hJ119AjcXxv
g8mBSEJOUH1mtHTYrgn6Ky8aYTmdglbaEHrBlKCMUkIvMFumtRLr5ZnCNYj9
f77NnPgEtwSwOpQcgv3fxGtVAIEbmnSu2UzgBptF0kncetfI/949Wocyw4c+
EDhDQIJEFMZZ/uS5dMIu6N2qp7aEXeDQyuE6bJdg9uAphB3R76Pz7Qg7ws89
QuzYjr/DwjIIf0Bmv36eJfwBtnp6emB/iLzz69evvRXI/rbkecIf4MWCgUDs
DzeP73hExAVSq3tlgeNFUtOFjJemFOmvhB8iB76QudgPV5sZxWM/fNEZT56v
Xu4cheMoR2SYPE/5MypI/68/22R0zSL8FulNOljivLHxlzXpt8JaTzOPva0H
gZtduRzleZAWqDP5QKIPjp748EmNrwG+qap+H8xH4K8isMfVgcgbpxpdcTym
c5/lIeIR1WrEkvH4mzvllmFuA6wRCTQ4/SkZ1VievhRL9B22Z6/ieEFbzpvZ
43jZOczrjO9dtc/8x4BsAzrY1CWpXBsHH5c1xMx52gcdu74rE3kMHZJKLGn5
EgJm+TVkHvskssHsIjSgsXGllq5eH1jXuLvgR1wfbNKr1b0bVw8SR1/9kjya
h7hSF+hXSRJ0DaEZ7dOIOuGz+Uy9RwjJTUo1eBLyb5duttBqI/Rde6q750Um
irP5vHwLIWeJc9BBzOfL3s+aS47mwauxWl3MR+aXzZUjfmUw7b2Lx+u5PehD
zlS3951tULHI8SzBB5W92V2H+RQI/5LHfDxX3EifXl8H+W2Pi/nayuF1ofrF
3B104L92QJbggx6daa4j+EBJp/96zCd01K2Pu6AcNO1Pus2p6kIfzo6nSMzv
ANU3caENVyohnDc5J7awA+k6W+3rK+0Eq1Dj6eoq1fBlrlms6Lo2VL4qjP35
k27YY2NxT2S8BmpcS7jMuxvRcMHt3vcmveDVtcojwL0O4rInn78erkSGVle+
v/tBgw/BKlWvpOqR/K3hkEcppehJ7PITmo/osL9faMYmVIuOzL3xmsugDkk0
3+TlX0qDK7GZLzYSfbdO3BbBi1kt6LiyTCbvxR6Ywp5gnbijCkmkP2d3j2hH
6Irxi1VhRP25fnSmk3cFCtVuHi4Y6kQRHlO4izs7oE2Dbfrk1zKkNtsx0Dux
G22cKzQeoNEOY7dvZ9z0rgBZ79A9hUOdME/1QkIRcV7JxEyCOA+DH6I9ifPg
Con8T4jzW7M2yBP3QrqmtDlxL+yvTDTA957e53OKkBO22iRZEHJCoLraPSyn
5PqJuYRe0DIs+4TQC7islvFjvT7tE+y8FlOPPu6ofvZ+dx6g2zcjj0n1QdZl
LR8CN3Q3JN+RwA3OnTr5C+Nm3CnnR+CMjrd/6zbrbgQjGaNBjHPQ9suzCbug
NQsKwgi7QO2mBl5sF9Ezuq8JO6JTm6sTCTvC+0EpfWzH4FXTOXgKytHBfNvz
hN3BraumAtt99hy7j5uO1cMnrt6gso5i8NKtO+TzmQ4Gx9ce83arhzMW/g7H
xwvRxtLFlk6jdBB9uiRCeFU9rI2JzkmxLUWLtsnc2faUDhd7YqoJPmhbx+OO
EoJPd4SmBeazwTP1N/Y3d5fNNvjeTLOrJfheUZMvUdjf4opukXKyOZToYTkD
GXoBq146DBzgBIWDMYWDdX6WN/a3bNvj1zBuxTaSvzFuvKXrZ2O/SjR5T+L/
tDKexL/0fII19itajvspbK+zbnvvY3vtZtgXsdqXO+gJ9hNkyX/xAPYT+6ij
sf/jJ4jVTyh/A1Z/SwoYnkr4J9znKfyB/XP4Lg879k8Ohj/DAsqfUyl/djLf
9Qz7VW5gMz/2/0VylTlYzq0nk3G8wIZL9vE4XuQrK7ixXorDZl3Yr1qFUlH8
7jyUbM4WgP2q4pbdPexXbttFvHE8ruvyHsP46DLiF1VT8TtExW+CBcc07Fey
qVofcLwXL980GUTgrxY/PwT7laHD9FycH/h/ZJH5IYKRTxBrPrFYwv5lIK8Y
UjOmp/vd7kEHXD1kPo20gbzp3bWHdQphVod6yTBXD7JbZCfE3dcO7cvjYmro
JRAReL1S/Ug3Ek56Y6u6ogOs/7Lvws17MI5/dQlkBE/1Eh/rQN/TR9c8yur6
696G9OYFR/lWlINopZwW34YO9PCXTVdhcxeMJhx9PLy9FGYbLTTl+9KGvm6t
V5Ha2wPOs5KuBhlXQOANmV1Gcm1IoeJb+qZdPaBM7dPIpvZpeFL7NEw7iti8
Lcvh487gvMt89ehEYkPmwAE6PKT2Qtyg9kJUU3shvq2ec879VRVMtuas2POm
FjmHN79Yz0sHZZnpzocPV8CsRrnZxesrkFXyQRO1gD74LnwsMiSwGr5G92z+
IV6OZlTpyi1Z2gdK1L4ODmpfRxC1r8Pv2Pesu/fTQDZn1oZS9XfoCs/tVc+e
Dfyzr6OMZV/HuStdt4h7UZ9i3Sx8b0DldPJe5t4J/qT/7p3YzmaP5UEColNJ
eXRHLpPyZBvWcRA4oJ7QMyQOjsvvkDiUft2D9UUOaVfksb4NupKhWN8I6vcF
KtQ+EDnq9wVPXdieEHZBFoWjJtgu+xLekXYZoX73MUHttdhM/e5jg9nvK4S9
0IYNd3Zje7mfnUHai949I4HwE6SopU/6SVjVfNJPolz8DQl/QNMKbLZgf7Bc
WtOJ/WEftW8kn2XfyMOgnpWE3yJRl5+k3woc4yH9lk7tzaBTezN2UHszsjpO
vSP8Ga2WYSP9eaO/ix3251aXGWIL7fPR6YT3korLehGbU8zq50/bmPGCmPGy
n4qXsuGb/M2dZfDgzffPtXrdSLCy7kjVp3a4+Hj/MbOJcjhkOM9z3bwu5LeQ
Pjeh+e/7NF7blYSwHaqCkt/n5+k0tKEv8wokIom6sWHGC2GH29XQ6Hsxi7Oo
BUnWnZJ9fLcH0qg9G9+pPRtx1J4N8f1LdVYnEf2CkvmB50bVSObzaVfFJhp8
HmyKGOfPBIsd33tsr71FTVG2Rqs9Bv7Zp6HPsk/japWrqPbTOrQ9YdFJI61S
ZGzSZLMtnw7Sb5V0Cf6osz1dB/PvarRwwfynU3s2Rqk9G4upPRvJXSdnEfKj
VTf8c7D8fFO2S2P5JzTiXhD6otTdIWJY32P2ReJY3whq/0YPhU8ChY+Hn/xx
Ak+05j7ywHjqSQWQeP48LDqNwB8NXaGR+Nesyybx1zI4m8d2sAoEjs6w9j/b
iVY0Kq+Q/NUBu5bHt7w9WQ3PNq7KCJ3dgURDPMd3Tvx9/wafiMPVHb61cPK+
ao1NXgtyF9z+fblADzgG/ZwfGVYHvXoLZzs/bERa5Z1VSwV6/9nLkcGyl8Ok
6n3xQdcGeH2Q++3k4gr0bpkKH62EBs9nZh/7BY1wJq2oTfr6ZxTp9mjjLQc6
zFqrn9Golg3B6pe6R0UiUfO3jkVvLg/8s5fjKcteDkmR+0cIPujS82klmA9t
/RRVzMf9UFEucS/q/BgVie8dzojhx/cyf29Yy7KvY29ckiihF+opUp2H9XK5
70HqNbfKxobAAf3+IFCPcfA6tnAU43CU+h3iLWqPx1Lqd4hnjAI6CZyRt1x8
JsZZVbThB8aZ38C6hLALKjGVvoDtcnrTHnlsl/scxteTFtfBDc+HwefN2lDq
hjG1xqgu6D4pJKbEXw9Ky3u1L/G1otIH/odeXPn3d7VHWfZ43M6vMhvLb4C0
SnbzqMR65Lttp7Xq7x7wyHr/IM+3ESrlXd6vlKhBhukeSyaj/t3vocSy34Ov
Xf5lb38TPPUbZI/nLUF5PRNT+qtpwJPDdvHM6WaQvWwh2quVg+58OSn/azMd
bsZnjU0I58KUNNMsL7tQdM4i5uGNkwP/7Pd4xbLfw1JDDPNBGmEKIpjPEZoD
yed0zfow4l4kUN459p64Nyexkxffe4fa+3GG2vtRT/0uuHHn4H1CL9Ry2DQK
6/Uo5bw01uvGD/sTBA5o9SZPEgcrlTISB+bvc01Z9oEEBYuKEDijPvrBfRjn
ty+kdDDOF3tNHQi7ILHXv0m7eN25DtguIou3T13O1gSt5n0cUen1KOO0Mm/U
sx5wu8mTdMWnCbZ9vCSvva8Wpe/mtDw5rxcWsewDKaF+b179+cFlrqBmMCkX
YBPgrkC9Ec1PJkZ6YWbp+IkLfC2gXnnAeOeKUuTUcW/ltgM0SKB+h87cy3GF
+h26IHf5JovjLbCrZP6MlsPZaEbtjtrgHhroObsQjtwC+vN4E/tnp6L2xG01
T8XpUFT2SpjTKg80FYtrufMCUYbkQy7hIwNgQu0J+UHtCflB7Qk5eTYM80Hh
4oGFmA8c96rGfM7ansH3ovLnYZL4XunWoBp8L3N/SDLL/pA5DL2QJqXXDUqv
W9bbbAgcUGdqwBSMQ3xMcQCJA7VXZDbLXpHdIw7JBM6oTJ0mjXHWv7TeCuOc
vCVagLALEp2j8+0NYZd753j4sV32Oh3KnuVN4GD3wdbWvAj1GSrvSiL859MI
375V4S1gJ/SgYZp+Afq4s5N7ykUaHGLZK5JL7RWpDFiycX1pC7BvPVcRJpGF
8i8EqMu/pwHXBZWIkdYW0H2iYpI2mIbUppixZxTT4CW1bySG2jcSRe0byQkc
ZDs/3gIPH7xk8/oej0wF7p1UIerecaOjnHxcrVD1cIuyolU0Uj8hsaWNmw6C
lo/nJG/LB8HflyQ22XuhazKbn1/THvhn34g5y76RRYUi7AQfVF/xeRPms8r8
+lbMZ3dc6W+r8RYks/zLTHyvr+UWc3wvcw+JPssekvPXnMMIvVC4qJ4e1mvs
cgkH1muB4G6MA4pOnJqBcVAaNNTAODD3k5iz7CfxPvxdm8AZVT2/+xvjrLKx
mBPjPDVIwk/SuwV9XJ5zLPZkEaoVkKwpJ+wyenOI3DfCJbbo1PiEeopy6SFy
/4a53F2S/r01xBzT0875/H/3k2zZdI7cK7Jb+Di5l4PxSQN9VR5yb0l3mYbZ
+MQ+Nf7XHCR9xX/3lrDpUPs9yk26/3dvCRt9+0eSbt+VQdJrW14TfBaprWot
JuluBRL8EvfzwWoGe5xR0yy1x59OzfbaPQDS1N4SRWpviSy1t+Qagw/iiuhQ
/+SoqLaS4nNNWpakz9dWxPqq2fOuEf//7TPhYt9K8n962l4M0xmfhH0ZOKCG
sHRSXyYOX6k9J4IsuIkHC5Dng+w1yHt9B4PI8xHjliS9dHOWGaYLHzQh6Y98
fzwk7AinnFJCCDtCs9vHCmxH/2DfPTi+HKNuKwjoF4BxEAcHtnsMy54TNWrP
ydrNv9bj+NqsY8wbLpEFAqWZgP2qduWscBxfk/YBzwg/hGVu3pPpxf/uP1nD
sv9kzTknMr66qpO3En4O9qHtJ7Cff6WrkvElmv5aj4gLePa2W+sP8QXM+GLu
PznPsv+kXZGNjC/p+nW6mE+h4REyvvawB5Dx9X2Vx3p878Z7A2b4XuZelCaW
vSgORu9e4vgquDznNtaLd/kNMm9ci1+yAcfX9/xfo0R8wbU9LpswDhuofSlC
1L6UCWpfytHbV8j4Gjp6dzrGeU0pNxlfWqvfzcDv1BI//VYiH0Jr1iJBnA8V
bimn43cq+l66MJE/wfiW2MU/vFPAfKeMZ760w+/U6pc7eqZxV0D7ovVBOD8v
E0o0w+/UkTVKW4l8Dq7CVqv/8E4B851KgmfkOzXtY5so8V7A/MZv5HuxQuES
+U6J+R5FxPsCV0KXku/UT+kP5DuVJT2USbxTEHzFn3ynmPtSHrHsS+ENWqOG
36mWY8aRmM8U94skn7vHz6jjd8rEc8+PZuLesDHNOnwvc4+KE8seFc43qVgv
5J/dtwXrJbvtKqmXIvsjjAM6cyGcxGHmkByJA3O/SiPLfhXrmZmp+J1azrdH
BOOcadh9AeP8UmCHIH6nvtKGvmC7zMjQmYbtMrwtwRHXgauLB14Q9QbM1XVX
/UMdCH+pA+EvdSAw68CgFq2HuA78OaPyDVEvgRVHtxSul5h7V8xY9q6YMOox
4GXUY5BP1WMsdSAw68A8WhVZB7rHjXwi6kAoTUkg60Dm3pV8lr0rIiceW+M6
sK9DRBLzmTJzOsnHrCwoFNeBKx+s5SHqT0i0dSbrz3pqH4satY/lGFWvZikc
vYfrwETr2fFYr5uOc6T+UAfCX+pA+EsdCMw6sHxlsh2uAwu/6IZiu3RECpP1
+ZYjBgW4zxq9k2tF1PMQxTldAdfzJk6TbbjP6tZenkrU//AsI+Y3rv//tqfF
eekP3F/AtALfBqK/gM1faCO4v7B/dV8M91lnlo9IEP0InKQHV+B+hLm/pYJl
f8vvd7ZFuM8K8+mPJ/odiPg1kxf3O/07d5N9VozyDjrRH8E0Himyz/Lx3kL2
WU8TOoaIPguq2xrIPou5v+UUy/4WC1VXXdxnLf0SM4L5TE8XV8Z8jqPmbNxn
nfGfm4DvjfvSyveHPuufvS5THq+ah/usWC+PBVgvAVWRSqxXkHP8RdxneWye
1YRxsOK1G/lDnwXMPquUraQH91lX79qSOJ8yaib7Wf4jpmW4z/p0r8ES24V2
cuFKbJfXV12+NXWWgavO506iXwaj4G4N3C/XGwrvwfMKSf3zIUR/DULdJZy4
v/7bvpdmwVcP8LzC+K3wGqJ/h9VRXwRw/z4lLYULzysWWYQ2Ev0+lK/9Kor7
/VXUHpgiag+MHLUH5jSv6148r+jd7m373KgafqU63CDnFZkbyXnFq1eSinbX
3sLbFWvJecUSy/Nlpk+IfiTHX3zjoVL43fDk9pZcOvwI2rgPzyUeb1tD8tko
vZTkY0/teymk9r34Ufteop9smYrnEld3+tVhObOexYthOXksInzxXGJh/EEF
rJfCGwVBrNdSag+MFIWDFoXDjmy3A3guMXuC/gzjxlakzINxe6/e9oPAGXUv
SWvDOMe7vtfCOPft1hzCc9c7q3ak+t3ugcWeDnJ4jsQyXwXmfPVve2DqVYeN
8Lx0ly7vVr4NHTBHXZCcj61nzNlAkTFnAw9qzjZE7YcZo/axbKHmcuMJZeSc
836YxdI9b2ohxjGVnPt5L2gi55lp85rhh3g5zP7ZR84Pr2p1kXPLHS9FVUrV
38H9Kgdybjl5j7EfxonaDyNM7YfZsiqDnEN+iE7ehPnk1xeSfNg/kvcif+re
t9S9LPND+Mv8EJjzw80+4uScMJtTlcThhdRmEgfmPhkdln0ye91ro/Hcb7PY
WxLnUKt6Eud+hl2QF2WXhZRdtgjK4Xkg0H/4SCsu64UfL4pW4HngBzUFBTwn
P/NrYfkwVw8s0TUXwPPGB3/ZJyN3Zz05D3f6vO2u+FgHbHo2vBrPOTNWSpLz
7f0ugXi+DVzpzuQcVY7aMxND7Zm5Re2ZmfUrmJxja9kk5l/mq4e6iafk/Nb3
xQ8nPJeOjKLhuTRkOyqS82Efap9MP7VP5gO1T0bKOpGcJ4vW6c/B57ceLjuG
z7PMh4E5H2aZA8Nf5sDAnAMrn4z/gOe6vno/8VwXCjIDSH1bqP0zjtT+mR5q
/8z+y4bL8fw2xmQPieeyp64knrOdVlmIjX4GgUY2zvGCHmS+wPdwZx5hl66H
nYFbi2D7tSbtkcJuNGLRaX6RvQMusXwfEUN9HyHpubw+W7UMgg9ei5ey60Br
XhuFra/sgs1Fp9PUjcqg4/fX3vSYNmTBrhmov6MHVP7yPYLM/pwXvsGVoGOR
nXZ7fR1KlXTMnjOfDt99lNc02lSC5t0ivhO/ytGl1Wz71p/vAzNqnl/KMs+X
Ey1eO3SzChV1zt7QrF+OMlwSNy840gdzvm474mRXgU7Lbcz65FSH9jzcfSuV
qAciKfyVWebws+MyTbbtKUd6fgnr8szaUNmvRS9nHuoBp4SkGmWpUvT+a+oB
0Y8dyIhLvz2ivAsOUPPzPGp+vpSan9OUpPhP0orRz0dzWm75dCOaS9ocF7EO
+Dl8aGXccClYuBTp01A36qu5ecbTth0+p0xV3D1RCvxfnwlUDHUh5+dO3+RP
dYALla+8Wb7fmXcgtTL3QCUIxA/MUNFpR4bu8960y3aD6YB/38+LlWDQlN3p
n9aKlrGV3VQ17IFH1Pcy11m+l3lgyq7fn1QDtKkFc8J31KA8l6rIkk4afKe+
B+Fj+R7Et49dYfxZLfqu5h9eEFmKgh0eSZd+o8MRuylLzN9Wo+6lu5/KZteg
tpL74Uo8hB2p/PObZS83es42Z75NFYo7/iJHUqkVOQaIrLVw7gH/3NCaprUV
KOuC+p7O9HbErtutdFagG/pZ9nUzv3cQ2u/3QGmwDN3W46vTv92FZl7kuJwZ
0QHv8nNdTzeUIOttsfN+Sfcge55WLq+N7eDTG9X2a7ASviV7bVBx7UQK6PGq
USKeZmhFOHtvroXx/S28jzKIvkpnrd4RmR7Yrjxb00utAdjyzWLaXMvR5s0z
nmax0UHb8tVs75cNKOLGyy03fUvQnm+fp78xoYPJE9p7vrpahIr0C8xONiPn
Sv60H3E9sOjpoiOLb1UhC4kgS7fKDrRYQv2wwS0ij85/eU6DVgP7due1O9u0
I/X1Q6qli7vgV7Cqc9CLGlg8OOdW0pJ2FGJ67Xm3fRf4UnP1IZa5uuKKgfM+
KfWQnT5m9aWxEXEe5uZRjuyBM1qa/RVBRF1nMNTmw92AFM5eFbRR6YW51Fw9
nWWuHrnS+1S/RBMorz7jsOZTKbof/OzjkyIaCFJz8sesc/JFgqsGE5vQmMHi
fTfv5yIr7W99pqZ0sOTd4V12rBFFKL3R6rcpQ6vY4gzXtNOgl6rfqqg5+WOq
fuNpsVhOe92AAg94Xl6QXIu8OTgyKjx74VYAx3vhD3VoUOmyboBzM+KrCNi1
xurf+s2JZU6OdEeTOVtrUeNykdc9fG3Ic5aC4dxp3XDckEfvfHA1inP9fcHW
ogMphwUVBgd0wqfbQzZ7shog17Mrz4CzGbmW3b+gytkDokLtGTybGmB+ZOnX
uRea0Rs2oRWFPP/U+WDMMie/Ke0Mj2Oa4HaMTea0nip0MDn28s/gXtDiDdtW
b94ELx3OeHWuqEKq2jYqBq29UE3NyTewzMlbAwIafGcS9ZPbzjml5/IRG0/O
4nVE3ZVLzb2fs8y9czq+GMVrtqCe211XJ7zSkKbNvtXb1tJhu8/8Tz+fNKPc
WzYB63kK0cM7Uh4H+mlwl5p7m7Hsu86TkRG4pduMPA5dXnhdvhzdk31x0ngN
DU7/HHhrWtOI/OaomHQO1CDZUnjbcqoXMqh+x4hl7v3RUHP48a1GpB7Va4rE
GtDBwrNHzxN+KO3FX7/Jox7luRlVtzW3oF8vFdWtz3dDwdSzfl1iRH/yfNo8
96Jy9Du6aMfbkl7QtAwzUb/TDJ6OL9UHuyrR6xLHYzl+/84TfrHMvdM7E8Vu
X2+BBLNDmZ+Id6/+meOpA/Y0mH3QnzdkfwsYsjkt9W38jA7lHxGnO/w7T3hP
zZOvUvMEl7lhIbW5LXD8XA+/hFgqenYhTm7mMO2v+67V532p4WlqQR5yc0/N
ehqLVosrKivOpsOhLyPx35+2oJAxzbVnU9NQ77tfsfbj/86xY1nm2DNpA+pn
wlpQnlhV0wq3bCSyMMewJokG0x33NtDXtyDvmLdHZziUIA6vlldLDtBgFjXH
FmSZY89pZwvX3dmCcrJuVSRsKkU3rtHLI2RoMGSb8yBAoxmlhPYUeehXowXW
nAHTDHvhovOu89qirXBXdnxEwug9yg8Wuvijl/DDUt+BzV0tILzvmF+McQYK
C/g2Jpj87xx7CsscW+h64ch6sVbYP12W44paNDrjfa4i9jsNJsryShLZW6H1
odyOMws+oeidI5yZPf/OsSNZ5thZXlF5iQtb4bj9ucBnkSFopV/6RV+2f/dg
H2SZS7ddQP7ekq3op6/P2PIj7ijXiTtEhpsOz6aPeibOaEWv86cEO+x+hXbV
rSko5qT/M5feyjKXtj0imk/ci+6mcNnie0c4/ch7ld97FBPyo9o7OlxYfgG7
Qm4sfwM1l9aj5tJu1FzapYfjG4ED8vBesh3jMI8rqBzj0FfzbSKRwDNXVzH/
y75MyHyVle38jgaljdnDGLft61KXEOeBdtekEp9nzp8tL8yT+N85ql+uDZYH
zuxbEEfIAw8lVpJ4iorbY/lBLXGqX1BkCCwLdbPG8jPnz/2fZi+18w9QYc6f
lc/U3CXwgW0myd0EPpCvOz8P48OcJ9udU1T433lySp7FHYxnOVv+MD4/p88v
H5/PjCjIxbiZvXf/f8T9eVyPT9QHjKsU2SmKUEkqiVAJcSwJEdmiJIlIKLKX
IksiCVlalIhK2pRCYlJkqbTv+758SspO9MxMc/ne9/XcvZ7ff79/z2tec811
ZuZsc855i5PvSiaJHCTf5eLJf4e1Tfif8WTzOxc+EH52eimdIOuvqLvQm6z/
QvgIyrelFs88CB/uWTZlEz5w8eSIzT8V/icfhI+pfcTnE50wf1KGzyeoJsZ9
J+fz23hLcs7h8JHDmficw5PW1z7knAcmrgnG9wI0h24rw/cCpn+vzCb3guuP
/YTXH3tegz25dyB/SmEVvnfQOkgznNy7oPe55J7CaqE9w6acS4EMA7mN5J5y
ceOZvLixuPKFx1gOwDTzAh0sB2D/ykVUDnBx4DO8OPDfzcu928Mq0fj9V3uV
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
+wvrDB5Xkv2tXfGG8B+u+Cb7YP5D/I1qyn8ON6SQhxvy83YK3a+LT9MDyfhp
p6roeMed3fs7rciS7C/Mqeje345rW8l5g+hLz+PxeQP/6GP0vGmxexHF0+99
OyfT8ykbE/uQjC977k/Hx03qouf5rHVjMj7P8DytDz3Py8S0yX2BUsUBZfi+
gNy57vuyhOFEzOXhRORWzqX3y+52dA4Zf/vBRzq+aZEevY8u8kai+D7CynPy
9D7e1DVRx/cdzoompuD7Dg8/1B0n953FOeEb69v/lcMZ3LSGyodczRMZZLzM
2JFUPuSfL6DyZIZ22lAsT0Dozy8qT1b7xNiSuHqgsJIwlkvQrHzJmMilY45v
nbF8g41rug5g+QYX3g6fReRbDutjP5jXx37pga1UHsrlpNDxYjavqDysWD+M
yk+LJePFsfyEELdvVH5m9TDPwKcvzVQs81BHCfKcJvcQjNqff9ca/hHyvk7d
Q+RngaoeXWf77yC6ziZDJSpvJbWbqJ6VOWVA5e2L+W+Hk/ztBIUM+l7z2PoX
fa/ZvW6/HHnH8XJ3oHnd85+70LzuIVaa5LvgtU/pCv4umuxSTL97HwpD2xYm
Qt3PZNiR8BDFu+s+e3G/Db4qJcuFjihAwlnCyxaER6E/LRE7Il+3wv2RQ7W0
NYpRu8H2MNObEWiD0GjbDPlWSNaob+vsV4Gy9UaM/fLkHopq9zc1/yyAwbc7
0nSNKtGfRJVU274BaGvMi2fLjgtAROd675VVlcg0fMChAfc80fAAOZVkNXw+
R145GDGhCo0STvvhedAeXc1zHvIG+7OBIy9Tunl1qevVg/ZguPAEpS+YVJUo
eakS3f44N8Pe6gP4j/JYSvL97r66SudvuqjkiueHmIVj6fzyht/pelRCy5/g
9cDVayl0PRqeP+j6Y2CuMF4/PHaIpOvvuvtdk/xvSNqbNPy/cPxRlw35379x
6ZQ/w5aL6mL+gPP5BMqfVSoZtle+54FdsKq7WZ+HKOX15hDh362gOs1sL6Yj
b09HN0I/sXUppR+ySaHnYeG+o5fIvsy49Iruy96vNlSPq1kO7k/O1UH9+VSP
W0dm0fk17x8m88Bfta10nspb3fMH9jOldG/f7vk5fE9bHr6nuViJwazoQnQz
Ya2T37AotDxzqJvQATx+T9HKFZpFSP7NiIT5GZFou8IYCY8NreB+aDWhQ56X
VCKhL3qrSemrVGdsifAuQatWLLgskhKGfkuPvfY4s+UfjgzwcBi15Ycsthcr
RytGPMktXB6Cbjy+YDxMuwUiTZdOGGdejgbWGEU3hQcjeePhOVfk8DoVdihi
OviXzbhP6KdHmVC6JpNv0Ty9H7RLXVehtQJN8cle2/nlDur4HbnZNhb76dW5
RTVSlWh9rPMxszl3kOiiV9V+dwQwT/J7IabDlwB7Z0KfqryghtA5vZ/C0/sf
YgdOPH23El1uv1s27as3itc+LZS/SgC708+smx5fiebEezWGbvNCsuENXz/p
CiDU9yyhQ+C93fmE3na7mdI5PW7A0+MoWcMlYkAVylWbsFbK9Dza524U5Sch
ADGF7W9SRlQhq5cjdy0YcRa5/Rn/wHYg1oOtXoQOxpM7LxK60l9hSuf0uDTD
WeP0uMJgnx8EZ01v5Eeax7hp4ZJxhJ75WK21Ua0KeXb+lPnrYAINfyee2NzV
DB/eUDos0RC+8AfT+0qrUjqnf614+ndxynS6/vOSc47g9UPDr7V0/Y9iIqc+
7qpEmkcir6jedId18YvfuMsI4KpoLaHDuLu7ThD6jonKlM7pxyKefhQ9IkH5
37pJMhjzH56GuVP+V9wL3/3VrRIJlWTZGDr7wjWpZb82mgugdkYVocMtq/YT
hP7CTInSeefnn378W65Jz4+IsN8yfH7ga9wjen6i5Q57f7hbgWTFdduTQwNh
Vn9Rh+B3AhCXESN0UMoY/o3Qp2fIUzrv/P/Tj4GZI+j5l7+6MRWffxjQy5Oe
/+ChTS7GwWXog0SH9iVBCKwO3dIv0LAFfn+2JXSIv/JmDqFLyzpSOocf1I+H
H1T27fL0UHwfz/T1H2ufGgbHB2rJxeD76NbnVO5YxRJ00kF//QG9cNDXsisq
EOB7pzwgD9NhfMtKfUKfO2kzpX9j+vc7T//y5AZwcqN4fqPzYNVCtKHyW6v8
vCg4fzs61ssDy41jmwgdLuZWtRH6yDfvKZ2nj4DTR+s/d+vl9qNFRM+iC6Ij
qF6OEdtO59myx6wZz4NylPLoPPben+h3+9adaCT04W0JlC4psKd2RVH4WD/i
Rwy8KU7thH7fZ9P/9XLzH4j/F0lvu0z/99fURMqfNR6HxQm96E40pc+0fbey
bHkZjM3NEDr9KBjtnGQ9RX1nC6z1cqT74j3l00S8Lyhb/jzdl6tZbXQfq0Yd
mkLo7+daUbq8/GxqR73K311I/I7tSi3ULtKO6U/Pz03jdy34/CDdtAn0/Lwa
2X3enKbokPOGkoZ1nzeevYc4e+/ztEp6zgepiJ/H5xy9i1Gk5/yJ5316Lywf
zPIk9FVWupSe8avbLg3Ti7tM/ILd4TXUzuTdR8Tdx2VmD+n9bdvtYEroChb6
lH5lB7X/4eo+/c3E/u+t0W3/v5gxmcqNEQukb/50MEF/3nTLDUZHiRtkKf03
ozP7HO7z7PNNpt5UvlW6fj2G5RuIR4hQ+ab1yJLKw1tyio6ErmTQLQ+1bt2k
ftMkFfsnxE7Ouj6I2smvvbvlcOcXKyKHoTWwWw4LWZ2jclu4SucVoT/3aqX0
psIr1B8UnWWDiD3stECf2sN9Yn9SfbF7+eIjWF/A12g9qi+WlHfrl16fjxP9
As1LuvWLy5Ruv9XlSjnxW8HiarffOnLZJqrXNNfCY6zXYNdnQ6rXfnktp3ow
ReJ+OKHX7ZSmdMVX1F8GG484at9+Pvyb2reyWhZUL889aByG9TK0pS2mevlC
ayPV43aCUyGEHik2hdKLpuqMnq5RDM3i3oGf7kQggdbl0HfYnjkVp3fod78K
sPpctcLg2T2UVTS+wwzbP5WDS72wvQQaTp+MtogHoD5K+QbEXvIYWS6K7Suw
FVlwwgHbb9Mn60oS+6r38MfHsZ0GWWttnO5h+83bOk2c2Glla7vpM6dYm2A6
TMzopgfYFNN53judD8fzwC69uXSehY+L6HdXxow0x98FOY1s+t23v1bTde5p
XKaD1wl6dVPoOkcPVqH/tWGG4Bn+L3j3yYH+l/OMwJeBIwogadncylMPo+Bq
L8uRwdhOe9a/N4m/wetXHWonI7LRt/5FoiT+9rJj7b3lgUUQuLkrze9rFnqy
c4Xp0ibBvz69arw+vcLMvrLh2VfGbPxkNr6AjfcrV/AXEy7H9v2ydzuTUtHs
8xdUtbYLYMXbEXK+L8ohaUf7t1nL3qEok98Wshv+6+86ndfXl+d//bOvKtl4
Dd746SuuNeztqoB+K12cJae9Rnuull5B0wXgk/4r5I1eJUi/25U1wygJHbJV
/5098b8+wHG8PsCcXxnJs7u48U944zXELQ20YiuhXKZk+V/XZ0h1xeuiT8ME
IKnVtuwI3vfME7c11s+PRQUOYYFjBwlgDOsbrM36BpeyvsGcPfaKZ49x4+fy
xn/9Ix/1amQVDILpnxWHBqOXYxbZrBLGdkLSM68PylUw0NDtXky+J5pj3r/z
Q6//+gM/4PUZ5uy0xTw7jRv/mDde60MknX9Og4Pmo3xPmHLux28yv+markiy
nv19+hlMGBoMd4wG0fXwvvuvLzFnv4nL2439n/YbN/4Wb7zPiCjKT+3G3Vsw
P+H3yMWUnycrJCj/jzTZH8X8h47i+ZT/XB9jX14fY86us+HZddz467zxhhfr
6PlJDcrJw+cH+l8fSM8P77wBd964vseqvL7HnL1XyrP3uPHKvPF3iz7T+3L1
lUEdvi/gtzhpK7kv+16U0ft1zOXHM3y/4FTo1EnkfvHu0b8+ybz44T87sJqN
n8obr8fu3TyeXbc00/UOkRvPN7nWYLkB+4tXGxO5YdxniB+RM16y9pokzr90
ZzqN83N9lUV5fZU9mF3Xn9l145ldt5ON780bj+2CZ4ewn2hfr/j4vXcO+Ekv
rfI0aAH76Kens/bnwfKYDfOW9M2Fz2FNMjG2//VhvsTrw/ylh3jLuB7GT5Xs
l7/1ZjFMq1Si+ckDJmWfIfnJ1ZvHFBP69Zv+v7TXZaGWbRLnCZ3Ht3/yamHL
ffEx2SVoyEg9N6U9YXD/t7KbQ3ILaM3u10740HZRW4HUa/80FNMhfNjI5Ook
nhzWZuM/8sZz9FZG/8HoxvnKd/F+oeRn8nVkv24cfriB7JcQw388yXsv4Pok
O/L6JIswXM4sHi6nEKPnMPpURr/D5jnWwzxpvPGiL0PL9K1zIMD6WcK1AQ2w
ROZN25ZvNXA6KndBe3k+zJL+vLKXXTVoD875NeJ0A+xK1hwdPrMYhDQcjyww
zgctxSlae743w49eSw73e1aApNcMfZv8pRJOZUyX0LRqhGHtIqd3auaiWtFZ
QyeNq4dJL59s/fi2FuLyD5zBdJiiXT8I05HthSJLQu+prr+XgtURPD8sbpjy
Gs+Pjkt8lCTzc/X7P1j9fgyr3+fq8dfz6vFLEmvJ+pH8dDiA14+SfOvo+gez
uvsvvLp7gxG9F2E+oF5zhhpgPiBId+8kfAjtob7eI/9dJeYnWvPm/VPMT9SQ
s7OD8PNRqKO+sloZ8lq3KOnxjFB0d6RGxjh8Xz5o+y/FdBiw43ANpkNqxgpK
X1eXRPwCJPHGoj/2C6CzfCv1Cz77rNMyF8frk8g6eXxBGPJJF9uqHYfvu1IO
oYOG55WzhD76aI0Foc+9LzaD0Ou2HdTDdGjqHEHHn/mZYFKF5zGTV3ASqISB
k8BGeCqm7/fPfCirUQqNcz/8Ln+fgW4Fa+Vc9BHAuM/blmecKQWBwt74nWaZ
8H7Szcr3+wUQM3XH2mMz8qHEdvXq/mW16EtTcxZc6bkPwGsT/ehTvkVw+57R
pa3SFehinePgd2WN/+r9X/PyEgew/MPbvPxD5SvDegf5lSDLcyuD+u3JQzdm
FfW3/NAM9SzPsJRXj5+Rv2tMqUMhWi/iefS8VxUKWjM14khSA5ixfEIXXj7h
kHlbCu6Oy0MPHk+qNlCrR72vu330dq6F7M+T3DAdCtyrZq5Qq4f7smsDCd1x
kfCGcWfyYc9gOZtzebWwQaqXCcnz7KlOR+A4VhqvB/qmR53A64HM3KWhZD0b
E+bFiRdju+56WfqO7RVgZqmSSPJIuTqdfF6dztAZNsKYD7DUq/8TzAfQXRrf
l/DhFau72cGru0npsHiA9xcdil3dr+J9BoQfy6D7O1DZat7FuaVoTcKrR9Wu
OaDxyYfmu/Lrbri8zbEfEx7ifUQl7dbeeB+hOix1ANlHS5OMk5cWFiGtSuN+
15Mr4a92qDHJp+2p7uY0kl6Hzw+6Lmy7AZ8f8P+Wk0rOj2Vcbn3npzzU67iN
lo5rHSxKjJlG8nUvM/0lzotLfLy9o2KyRAnIuq90WfElE51fdKL2dLwA1q0q
HafSXgztc0X0P+3IhEX9Dq8rLhBw/TGgnidnkpg8+cbrB2LH5IkJT54M6UFu
PGDygS/HJvLyARaz9/Fp7H0/nfe+35vJ7Qye/Hdi7/Xvee/1k3rAWe5qHJKU
MrkUzRTxG3f0YihkSfRWj4pogRc23uM3zCyFHe1zs4REwtCyUUHHHoW2wKqb
O2OXfyqFKwM0LbZdDoXWuOLU9U4tcHHnujhMR/2Ol/lhOjo1YwelSx/522/k
kDKwcq64t2hQCBI9IanucKQFLrD+0hmsv/Q61l8aXd922tC8FNBTVdm59plw
6dr6e+uPCuAB6z8ZwvpPFrD+k3Wy5pMjL+TBxjUX267G1qGBs5LN1epqwc19
auKY6kKonfrO/1J7JapvXrjTXa4R0K2DZ77WlcDaex0b3d7moAlGkjemDxCA
6+eX2qYrS5HUXPG10oWZSDJ4XIq9rQD6xlnXzbPH8kJ71cpTryrQswsnE19F
NoK/+N2LQ8flI3Sgc93w3nVop7CKUPK+OnjYTYfCbjoYMPrnWDoPxHbPA4/Z
PE2sn/NyXj98ru/9Vl7f++ju9aMV3esHVbZ+ru+9Fm+ewm4+oPvdfIBOxgeu
b/MN1vc+kvVtHipH+YnUuvkJUxk/o8/V0vNgt2/BXnweoN2ig56Hza/W1s/N
zYOmvwa9bfrXIX2nxMnHnOpAzltJNGV2ERg7Jmt6HKpASr30lgYW/te/eh2v
f7WI9fZy30GlIF76LXaeUCa6vvr7MumA//pXb+L1rz64Vepj2cIS9EW76u2H
B3logefpClSI58n9X/3/EceHxvUz7v6QLkR2g+OWHH1dhcrdPlksj2+AP4wP
Xqx/NceHGeIf+sg+z0V7Fc7/MTGuR5HN4wR3d9XC2bQBCWOf50K/ABGjjcb1
0GfWeT9C98666Y/nhwc7vVbg+eGY+5fNZH576xiD+oUlsHigpmf6gzwInPny
z3O8zlXtZ4rw/6JzrlMS8P+CZKDBcvK/LnMsxDDf0KKn6bMx30Dh5oDFhG8m
VyurMZ/R18FuAzCfIbX3JSXC56Gdrv3x/UL6Lw6uxvcLpG7PoPfLfchosl9o
wV3HNHJ/t/q+o/tVxvo827A+zy9Zn+fFrE9j4/TuPo2PWZ/Ge8d9rz0dXYJ0
TYaNlNPPgvBJLiYtoQJ4pHzwycRHuTAgV9vf5Wkd+Iq3ZV2WqoPJs31W+s4o
hO0RraVrt1WCU/DBNS0PGqFWZa+JxfJidLTT8Mg3qQKwc7BacfF9M/gmXrwQ
/ikfdSz+llTlWw1nq7eHhpg1gPeNglFjT+cg8QsNkv1HNkCyXpn0vaoaeCoZ
3Q/TwXX93gmYjsaHH+hL6Ncq1c7ieUC7xCEVz4MuB7TdJfOsW+qwBn8X9E7M
v4K/i6qcXfTJdxfvitK4P7sELTFPPOLplYkWz8y0cHghgDCdYHu8fmT9+MQ1
vH4k/8r4CFn/JN/Ln/H/otZaV2P8v2i+YFK/K/h/R7E+5H0ZTkcy6x/O9ass
5fWrHM/6jYuy8S/ZeA6/4zoPv4M3PyTz+pyn8Pqcc/3MpXn9zDez+c+zvuUS
bP6+ax/5JaqWwOhntu77NmXC80WlaRNSBdD0wtIvSLcExqlmeh8oz0RVCVel
4x8K4JVY72yZ8zlg4HZz/CqhBuh9Wrnd73cNeHhkJYd25oPcmy03RXZVw/d9
ar1Wn2yA0vCTHm/XFkPyHWOdi5b5oBO7Rl33YzP0/jjBU0ZQgF7knLpcmlYJ
d+enqg880ghTxrxRqNqei3SPrpiTI1QPIhoqNydU1MKQveNnYzpU3k2RxXT0
49b1WEKveGN1G88DQyvb7fA8KNtz+QIyz/BXT8l3UT/j9/Pxd5FY5Pgp5LtB
zQ8T8TrRoStWt/E60Yx3vf6swutEtiZp+L/Qm68ZE/F/oR9mOwTkv3JOP7u9
veMDlB90dfys3Yg2VwiiN+6pgfKOpsXzR6eBwbqQ4S4vm9CR2U6d5neroF3O
I3dn3yxQ/DRsUOTMenT2oUFe+NY66KvgKHntWTbUPWx75eZRg9yvu9zwO9sA
A8fFFJUfzQVPm9ZUr36V6JjU2ou94pvgT/Ey5RdD82FO8MMuj8EF6O2ih6t2
JQhAVr/XvsszCyBNY0/SRr236PZ+nc0fprbC02kD92I6+p0mjAhdZo4PpW/c
kqiC50HrhY7Reb6ssqPz/Bq3gXwXOY17/Z58t//nsR7ku1U6fmSdaG3L4xSy
TufW3tfJOjU8j2bj/0K3Co8PJP81/qVhPvmvTS/r/DF/kOKQMMofved9Ygh/
umZ6CjZszQK1gj+XQnwb0EjT4avdU2pgv9lHR9f0DDC7uKDvZrUmJN/XSeqs
ZDWsMdt+dL14Dpav35zuXqhDI5/YaE4PqYMgYeOSA+m50P/S+udeRdVo/5Xb
Qk/DGmBYvra9/NV8+Jw+2WFnbDma0WZ9/Ck+52sfPXy1SbUQ3M9KV/q25qGf
O+bO++kiwPJc+E7c2iJYL5BXMhV/g4Sd92QpZrWA6YW6zf4GRUi7dpjQre8p
KMKi7+QbOS0Qb7edzINS1H9UkXnubG8DMo/1Codj+Lto6EHjI+S7Eede0e/q
rIstxutErTMtE8k6+6us73qC13n8+OtD+L+Q6otaR/JfQXoSM8h/bVURbcX8
QQua8yl/Ek52rCL8CTq38ijmD1J86UT54zYnjPJn0/UnQ3WtcsDnSG5m+rt6
pHraPv/Hglp4WfXE/JJpLkgN/hYTKtKALhjWJEq+qvlnx/LtzCvf46Lm1efD
Lt+4TtFW7O/o2/c1bGz45y//5PnLIadi7IXUi6FNOc/5y/FctKJLInHsesG/
+MZXXnyjLlzWpOxuCSpTPJBp0had8Hhw++ttpS2wj9nJK3l2sptvxVE8P4qR
OnGWzD86WQuR+Tn7uZ3ZzwrMfr6qOCEarx/ZWg/vJYbXb2vjK0rW35NdLXJD
ZATmG7r7fhXl2+E1YpRv7n3H//QuyEJie+stZ+1rRLuKA90eBFRD3dPeh9bJ
FsKYCVHlLjk1KKBGzMmqbz2I306ZtP1WPsRPzr+qH1qH5evXjM/BtXB615Q5
5SFFsHFDwSgd7yr0U+3D2d52DdC0NSmkc2IJ9CnUORlQXIZyQyz8lfMawfnD
aNOnF0pB+v5ugy0eBajfr/Fu2aOaIVZp1aAlEWUwy37dwowNmShn05n+txSJ
vB0S3etIOYgWJznZZCWi0NgCmZk5AsjJSR0nalOO8i4Vql57nYjsvead2J4v
gGrHgj54HqTYNFaHzGNmZz6IzKObOZ98F+kkjKTfvXtZjX5Xasz0e3idyDlF
6hRZ55xRo26RdSZKvp2N/ws9KfogS/7rneSh0+S/5EP07TF/kOTeQZQ/mzp3
OxL+WNjLT8H8QUXfTlD+KO69T/kjIVw2S8+zGEaIDFlSk1SF5NoHSp8b0gDL
biY13RlXBioRKYPc75WhwzM9mkTXNUK8SVPJS80iUBR9f2NSSA26drywUb0K
2zvu/XODRpSCu1SZj0hgJdIesMnEd3/PfeqObJG+/Vm2HGyidu0/4l2EHL9r
3lwxsQkMC1ZGP1cvgwlvHk+UEilGamm6CpfWNYH+gRWn+4hWQJhDwgtX+Tw0
dcvVxWaC//rXzebV5d07fnjR7DcVMDcg/1r1wkwUNsbw4WSPZvC+l6QTPKUC
7lyUu7D5fSoKMXtv+nuIAD7siMtvVKsEhcPDh20Yk4KcJ0ZI+g34Lx8ggfeu
8VG84vmLjgo0f5ij/bSmkAQZG7/tBthv5frd+fLq/vJbBkyNMK1EsQG+sh4W
caiw6N0X/40CCOxeD7rF1nOPref9aEOyHtQrL0CBrGdMsShdz8Ue6gHdHE7p
4f9F1k7p7uR/pzXOiib/2+dnWgTmJ2qbdF6V8HNr3NDxhJ+FRUqnMD/RtlNi
iPBznm0Z5SfXF2Uzr05QMeqtH94vNNFM7CTZrzslx7zJfiXlWWnh84M+pUTQ
85M0upSen+VhnwT4/KD8NYVC5PxMPl3Y8j/OD+rh/CD++Rn29OdzXasK2O05
6ql0YD7abHTTV9kBn4cOwUvF5+XQGSCTueV1ESo0v9F/ZRu+v0/ENpQKVcLt
mkGjKxfnoDLnBIM5v5rgvJDifvdFlfDj8COZqzYZyLFTouKTFfbjHI1293Gs
BOsbJyd9/PgG9dEuGRmZ3Ax/f182NgiqBPOzN8w3jUtEzUKbT2v0EYBf2sKP
Zq8rIWyY09OMJVHId42Izyo1ASg/fmv0ClWihmEh8oFzo1DS0yDbcnUBJPgp
bMDzoG1DTtmReVLPXaPzOBpt3IW/i8wtnTTJd1OsvtLvZtWX2OF1oogaawmy
zqkF5XSd/Toersf/hVQ7xVTJfyVGqSwj/9W4WAlh/qCRRh3RhD/DnPxu/g/+
ID5/dC1NnbfcrISDxZD5rDYN3Q1TLNbd0gzrbS+bnJOqgo/KAzuiN8cgz1b1
za/am2GapNTVOkx/ExzQMvlPHDK0Sp+hUt9zf7wBpdqfSX2c+n0lWldY7ruH
1sdl2bWHVhZVgsoZ06FHziejAvlR6R+TmiGyeL/Y8rFVkHZjary1bCjKkXo4
PLTzv3rDR7x6wxw9G1o3N+lxd73hn99LaN1f8qOWcsleVTBTe8H213ExKDha
vsKnqxk+Pp+25Pi4KjDoX53saOCDbt8KGWcr8t/73Vre+13gM1Ph/gOrUOdh
oWIJg8sJcg4zn6tL/lfPuIlXz/inQtOH1DNueHVpvprxeXRQOO4OqWeMv+Ba
gteDPgz/sIOs528+VJH17JkwajFeD7Iv+e5I1nPl1i4F2/9R57iOV+e4ceBs
Wq9Xrtpd57i731tar5fR9O4+5idyEv31/TDmp2lq5wfCz0eVOaKYn2iYyNBK
ws/3je2Un1xfPkteX77xOWNIHSjSG6wsRPbrYEo5rQN98DzzOD4nSEpttXAC
PifL1z4sIOfEPEzXFJ8TtHGOeBo5J6mTzpuRcyKnGLf+/cFKZKq8s84nJhMN
nf/A77dCM0QnfqXn6uvu3kF4PMT9TKXnyq3wEK2jHPPwySNSP5hsO4t+d+PJ
ArJ+mK9pIbdbNhRa3J5KkvVrRS2j+37Be1hfUrcYqjOU7vvIksl0fy9JkLpI
H1hseofu7+So288WqlSBivUozYID50G277krZ4UE4NOqTvdrvJ/nV7xfoKIW
Qffr+k4xui8vS95PdcLzhJgtp/sSMbwX5f99B1c18t2WB9aU/6aXD1E+X3NY
GrcLr/NFwibK57sZG8n5R1OlnsaQ/zL1eUDrSTm+mXXzDTi+jVH8RO4Xqls2
YfqUP3HQYbFai9yvp/lrE4ncS5Z+H4bvNby95+9H7nWtwloq9xZM25aN7zV8
GjuF3uvO0+uIfICYPmvHY/kAx0oClhP5kLtF9QCRe8YztTo9bTJgeL/3lUSe
DDYOJ/IH9K4+1cPyB4KM06SJ/Gl3NqZyb4po5R4sr6CqVZjKq/GulVS+bXvR
tz+Wb/BhzAcq387tOkHl23mjA6ZkfL/+U86Q8dctflH5tj9symgy/4DTf0aR
+Zd1GRM5jMJWyfTG8g1+PXpE1zPM5rgxkW9Pv9ZKkvVfe6C84n/Kt1Hd8g04
+cb4gPh8CNXr007slkeeIl8u3CsD5dHn2ojeGfa/7Rzg7JyViTvyid1yLmfO
Dax34Gz7TFOid+b2988ndk5Agbc/1lPwbta8WqKneHYLcHZLUg992GTveLsS
u+XkVJlgrGehad/oZUTP8uwc4OycM916HHZ363HQYHq8pzo+/QWnqN0iMaFk
FLYTwFDYhNoJPDsHODtnuYjfDHGLSvD6uOLQvf1x8OCDss60DQL4PXwytU/E
rw4Xx/YJHEvoovYJs39QAu8dfIZNFrVP/G/eG0i+e7pfIf3ury39qT3TliDq
Tb4bb6hKv7ux78vFxD5J9pI8Q/5L5u3UGPJfpaxOkPUfBgtmvw0N7O1C7BP9
4EWRhG9DFbX1Cd949gxw9kzWMKu7xD4JFc7aRvbFSKLN/3/sC2fP/OvztozZ
J3nd9glw9gnPngHOnmHnBPVwThD/nATqTz5K/JTT8ruKsR0OK0t6ORM7/Pal
AiXip3zbt9sH2+EwI8Muldjht2quEHsexkvsH4PteTApWOpC7Pm22RrBxE8J
tHVxxfY/9E4V3CT2/9xufwHmdvsLEMT8hQzv1IHET7l2yG0x9i9g0o0+1E95
vE6E+iOpnp262B+BtL5njhN/ZO7WLlHij9wPqdIn4//eDhlAxtsVJ5gQf6Tx
b85aMn+CR9E5Mr/M17uBxB+RMdtyjqxnj06g3//hjwDnj1RoH3Ak/ojDrndF
hA8Dvmw/QfjQuXPaROKPDJ8lRfmgJ69E+dC56IbLNkEeLFF5uKJDpw7c+/XR
819cB+8WbKzH/iAszpjuhP1B8P8Ke4k/2Pd1cnk4Xt9a6d13XMVqYIt1wtHa
inqYf7wuXEG7CJ7UCwz+6FdCieGPk3rHGmGHqs7xjW+LYeMQ/YCGL0Xg8ys9
QlmoGWzmlGjHSJdCdh8/LzelbLgpPLmoZTHW++Hbut5/L4XfXds7tGYnQ+MF
Ze8tci1wtGNlolBnKRJSfLzBKz4JUud8lX8yvgXuxhzWxPOgS8tkvck8dY++
03mOdH8XLeF99+CI3DC8TpQU3X8FWaeQh8opss41OzPIf6HNV2wDyX8t8qk6
Qv7rlf60c5g/qPiKKeXP74eRiwh/NBI3kTgDEvuwJDZUpAEmmu1FJM6gZXyz
lsR5Jrzd4hXi2wAOYe/1SRwjdPOA/STOk15VPGCzWhOcm6s/jMQxDFda7Cdx
HsGGAJe7F+qgj7H8FBIPsRPk5ZI4z4espjdeRdUwtt+9XyR+0q6Xd5jEeVZc
GXZmZ2w5PBz15xiJt4hOl0gmcZ4dH6WbfVvzYKyj71wSnxnQTUfbGX0Moy+L
9zhK4jafx748TeaR03tE5/FRK8gncZtLQy6mkO8uVlv6m3xXvDDOlsRtAoXF
z5J1/gg6S9f5pcSugcRtCg4nXif/u1dlzHLyvzXn99iQuM1VSamB5H879h+h
/2sTuimAxA/9hlo7fdZuBBurrw9JfKxGMTWHxAkvbVgwOHJmPbjvm5lL4mnW
14wlSJwwbUAhib/B0sCJNP7WqDqwmMQJ5c9qkTghSM18ROOEv7pe0jihzxCf
To/BBbB75dzVJL53KMd3z+q5BbBpsYOOtMlbKJcqVc+b0gprB2TZkjhh6d1n
rzfqvYXi18tpnHC9i9ZEEid8ZL2NzuO1sev/ihNCD3FC4OKEsR69s0icMEfS
lf7Xbjsn+l8/6s/6kThh3QN3ygcjvaE0jnp82tQV80enIem0y8NcXjZB3FLz
XlvuVoEU60s2gPUl28n6klnN0fmR5pkJ93YLMsc01SOpoPHqwqgWVk6rXrD/
Vw5Yebatua9bhWZZer8G0SbYOst5rWJ7PtyzmX6nsT0DPVeatXTWuxZAr65O
um5fgJzvDNtcrZuI9YNM7ibHVlAwiIsf0icPBVQMLikeVoamqqYXHzneDBp3
5ZoeXMlCuXNHhK80rUMn1ozfmaNYD9tbLpVldKahyNFp51SWN6EFay4WKGtW
w3XWV+oL6ys1lfWV2tTXPu/k9QJ4sjlHceP2GtRZ5G4+xL0edBNHVXmXFUMv
xeP728eUIPRKTW57ZBPAmENnek8qgxV7JNfsq3iN4hYP7ij7LIDV5/78PS1b
ho6W9RVCf5+hQO9x4scWt0B1aJ/g5G0lKNV6fL7J5UJ0vkzP9tbkZhBf92Nf
xZRCFFYepLzKtRoZW915uHVMA3hYa42Sb81FJe+kvx6NrMd+otJqw64aeMb6
IL1ifZDOsT5IEjU++/+8KoPre57dfa9WgobeVvtWVdwIAq8NNp4nKiCyxt34
+LxsNOSD9plVq5rhc3jp5bi1lZArIz0tZPUL9PbOCgM0XwD3rDVT9++qRMkq
g3JlfoehgRr2If2siJ/lYFbduxIJD7hlf21+GiqaP8JF810zKFyqWDjUsRyl
R85Zo1BcgPpJZbkHYjvt2Lbo+8YOpejpuhWN4W0VaNvI+RtvpDb862NznNfH
Zr21gaEN9hfS8u5/GWATg5Qz/k4Jw3ZyzAM9C13sF7gOfCoxSTkU+Xe47g/C
9vaIll80r3LiLw9nkrepWdRE8ypF76wbeF6lCl3sdauT1It9qx6/5Ru2/58d
tB/shO183/yTFU9W+qAxl39uIna+mHK2OZ4f+Wa926KK5/eOkT9I5te49vcA
qQMVLTd8QNb51uI2rQPl+pYc4fUt6Xo22VKxpgJmLVz5LFQsF9CXPxvHVjaB
kn/obDu7SjgufvDW89Pv4AxcmvkiuhnivkxbYoQqYdnXmiwP5VjwmIV9FAUs
H8Z+3FbwrhKtf2A55kFKEJiXowgXDQGoz9h3fvjZSnR1aUfCy9UpELapYe/T
nGZINLhQKj2sEs05MNV4y8lsmKQS+EpCshlEZ6hlz/hUjjTrh6o39CkCp6td
P6MGN/2zh6V49nBP/YR7slc5u3Qnzy7l7M9Anv3JxdMQz57MZvE0UdJcfV6U
jgKLp3H25xPeeM7O/MizM3uyJ/syu/Ejz27k9cX6Zx/2ZAfy7b33zN4LXe4x
5IBaEYROtb7Tz7AaHgarPT4h1gBXZ60WUlAuxXaNVpHBoSK4YvJozMLkJtBV
qD7auqgchNZvm6w9OAVMduu6KwcJ4InyjqyOm+XI9vRtk4SWOPAZs7XQ/YsA
hqa8/r6krRSFrz1yQu94Hrj4rbOQ2NcMbyQLX/yZWIzcRp+v7EythBf2B26f
r2kAW9lkU5fxBWiATXHItuF1IDPhs32NTB1E+zv/WWiVA4ZddQ3p7+rB9MXm
lyTe3lO/i9URM26T9wi3wDlSYq1V8M10+Y+VjQ2gzvJeslneizLLe3Gf2HiA
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
1dcEM7618+pruLqYKF5dDKeXY3uol2lj9TLjefUyNkxf72X62vP/o46Gq3+P
59XRBDL9foTp9570PldfI8rqa3az+houz0qP5VndYnlWMbz7vondd+7+nmf3
9zu7v9fZvdPn3bsfPdyv+z3cI+68Ofdgn/PPLWdnHubZmeMY/l0gw7+bxvDv
ODw7Ex6enTLDp3vL8Olecfh0PLy5XIY318TDj2th+HGfnCLcD+3PBK2BE01/
3G9E/i9KFMh73FidwpdJkTlgMchiXkhULVokKRpG3u/+SKZsXTq5AHRKqj7L
/ilBUvtKF5P3vpjgR6t+dBUiv6Our+NupCPzD9dv7z/VAiYMx62e4bjVMBy3
iQ2mW7J75SOv8cMMFp6qRJu3xWiS98ee8Nr6uH11yT6UjaSXKoYsm1+PVii5
/SLvmD3hsvWEv8bhrIXwcNZ6wlPbfrDIzGV8AZiYHrm3bXgdGvz0pSN5p365
fvnLPxOLIdlkU0lnaiXqU7/rLnnXtmb4aPk8fLTdNRY/l7SVQk5t/SG943mo
1i5/K3kf77Xs9yCRBeWoWEp/67Z1r5H/vFI5oygB7OXhnU1jeGdvihV6KSiX
olF/j5L3emQ+5xt9r+dwzdoZrlk/hmsW/0hj8AG1IiQb3XK3n2E1itzhHkve
/Tn8sliGX6bD4Zf1UD/VUx0Wh1N2juGUrWM4ZatYPoYir06Kq4ea1QNOWSoP
p4x7J/XrAaesnodTxtUrBfDqlbi6JCteXdJbhlN2gYdTxuXxfuLVJXH5uua8
+qMnDKdMl4dT9pLlabTz6o84PDJ3Hh7ZWa1FJE8GAm4M3rblZDbyXFmVRPJk
ONwxCx7umMbhRpJvA9OyNxa/XJ2CXFeMsCX5Nlv65Lwpe1aJxvbe83fhmRg0
TybAPGiiAIwYjlgQwxFrZjhip7TTSP4Pan6ecub56Xfox5Les0n+D4cX5snD
C3uSLrpNsaYCqXQuSgoVy0WnnXvRPKJPDBfsNQ8XrKe6np7qdIYy/K9NDP9r
N8P/6qlOp6d6HA7/60gP+F/8d2oO/2uc1//G/+qpXqanuhgO/yuUh//VU11M
T/UvHP5XEA//i8P50uXhfL3bEEfyxMB8fFvTJOVQCJj/mOahcXhek3l4XnJW
YsOcxlXB79RZl5+u9AG9JHVTkm9WnegzhOShCefpPSb0JSqDaB7aa4bPpc/w
uYYzfC7bC31pftq6lYXHyXct11w4QL7rznC4NBgOVxDD4XI4uX2ljVQVmq2l
FzTQJgaUv1+aTPLo5jOcLDmGk/WR4WRxuFfqPNyrLoZvNYLhWzkxfCsVhlcV
zsOrSmX4U6YMf2o9w59yrsqPMHYohXval0vC2yrAwfTPJpIHmMvwpwx4+FMW
LaOXDHUsh5CWKboKxQUQNnvYJZJP+I7hTC3h4Uyh7rxEEO3OS4QSlpeYH6a/
Z5VBJRr3SNRY9xKCNPm+S8/PE0A6w41qYLhRNxluVHZ8oq3niQo0MEB36fF5
2bCg8dZZkif5m+FDfWf4UGYMHypdP/jgn1dl6KfGh+vv1Uogae7mnyTfciTD
gVJgOFAfGQ7UmR7wmw4xPKZUHh5THMNdkmW4SwUMd+kLw1EyYThKKgxHqZbh
Ih1juEgPGS7SUYZbtILhFtUx3KJVDIfIgodD9JjhEJ1hOEQvGA7RAIYrFMhw
hbwYrtB8hhN0heEEGTGcoCCG+xPEw/2J1Drd/OBKFhwcsipipWkdLJwYsYPk
63L4Pj8Yvk8Yw/d5YDD36ZA+efC+ayHJ+4X6Q+IlJO937tuv6xTb89Hcste3
G9szwMLl+xKSP3yG4fUYMryePQyvJ3bqc939v3JQaLHX6vu6VaA1WimF5CEn
MFyeJQyXp4rh8rgcP9SR5pmJPoVuyh7TVA/Tf0VPIfnM8xgOTiEPB8ef4d0A
w7vZy/BuxjNcG3Uerg2HR2PL8Gh+MjwaDi/m/cn/jRdziOHFOPLwYnqS/xz+
SzwP/4XDZznNw2fpqe5vFcND2cjwWTR5+CwD/298FlTByyPi5tnEcFW4eTic
lGIeTgqHbzKGh2/CvS9weaHL2PuCOMMxqYnuxjEpZzgmHM7IQYYzYshwRvIY
PsgYHj7IWoYPcofhgwgYPsgyhvchwsP7KGY4HfkMp6OD4XRweReavLwL7j2o
jfcexOUnbOflJ3DvOOt57zhGrC/6YPvuvujurC86L58KcflUXF/uFF5fbq4/
9iJef2zuXb62h3f5ibx3eVfW1zqG19daifWpfsb6VHewPtU3Wd/jL7y+x1z+
cACvTp/rSzyS15eYdx4Qdx64PsONvD7DPdULc32Af678332Ae6oX5vr6qvL6
+nL9dU/y+uuuYn1x01lf3AGsLy7vf//lS3N9a4/z+tYms/6ujqy/603W35V7
P3rBez/i983j4gavHXPdUvXKkGWfETHPWoORS1u/gEvWLdDfbBahw+AOq0xM
h8hPIyk90P8cecdHO6s7/8jMDoJAi7v0HZ+LR+n/3/lUwKdz8dhsXjx2cqud
xNH1pXDQ2WCPjnYm+nFvb6HNGQHIvN3XNMC7FEJbZ/285Z0JFvM84qotBfCo
hz6Wb1i/yru8fpWqrP/kZtZ/0pv1n8xmfSbXsj6TwazPpCTrJxnC+kmKsX6S
eayfZB7rJ/mA9ZN0Yv0kbVg/SWPWT9KU9YecwusPaVZd1x//LzqtHncA/y/k
lOoXkf8dxPo6GvL6Om5nfRo1WJ/GLtancQfru/jXqbvvoh7ru+jL4iSHeXES
KRZXOcmLq3DxxnU99Ev8zOuXGNpTXxcWj33fQ//Dd/8/9j/k6owGsjojK1Zn
NC7OP3Z930xwcRLqU+bZgP1CiflO0rU99nfKsvvo83RzDiTMX7Uxw6Ya1Wit
vLN0eSMMYv2dLrP+To6sv1PmtqId893yQaxz11l39xxUd+eM9acVLf/0/hee
3n/C+juJpXf3dxrF+judvm1v2OmZhwZJ/14XPrIY7XHSE6gr/Ve35czr76Q7
XmWe2cRs9DYMllkerUVL1mseCS7Gdgfr7xTA+jspsP5ON3vA1+upX5ME68v0
ifVl0mZ9mbg+Swt5fZa4fkrDWT+lcNZPyYn1TVLj9U26xuqqvrK6KnVWVxXL
u6df2T19x+6pP7unHuyevrhWm7nGqhR0jU59v2ecgU4nhS7VvSYA0dez5pbq
lqGOvUN17b7fR36DkazezpZ/93obu9de7F5z/WPX8frHcvc6lHeve+oXxPUF
GsHrC8T1+Snl9flZyPr5zOP18+HqZOP/n8LOPZ7L6w/g6aL7ZJtyWdIoWhe3
VEKnWRdlSuWyNEQbKiqVGnLpsiLTkgiplZEol0rWVDs/WYSU3OOLr0p8UdJs
+Am/c54+h9fO7/fd79/v63md73nOeZ7nXN6fz/uAt+cB5MmyfK77XD7XV8bV
Cwy8alHTzN3dK9xFeOPl6QMoesif48H5c+J0X/qKltUjmalrZw9cL8Upa7R9
tNTI+h18OCacD4eNpwrceMrmn++4+Sfz2GDw2FSCx+Zk1bCzCcpirFK4ZLqr
bj62nmKo3tU25KXx4Lw0p67Yfjwppw6/E4V5+wVUYMmBsE9n35QMembmcp4Z
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
eohDsNuUcs2WzKsanhuNqQ1vQurT3ZdS3lEF3LkSuHMHcGcN4MJdcF72GeDC
anA+xT04nyIOzqdg8QnmXHzCNPC6dKhyXpfZC51So2uw5RrTsBG5V3GvomrE
L8VtaGJHXVLv+N/R9tVdzT4BaViU6uOgF9I+GOdwmItzYL6XBPC97APfC7cP
M5hfeWm7jnAO+7yYEqt3nXH4bW+acA57Yub9nn75B2hU9pb7J3wTsPuO6xEH
XdoH4x8qufgH5mnZx3laOoDzWgDn3QCcF+fMF86vL50702rK18exZ6iNcH69
4s6YyXfNCtDEPi/VpQdOYH/NLy4GWLYPxj+85eIfmF/lDvc7i1tQuPH3uAXG
8TM5L8rrlgrhfoMyOrPI/aLi324J96uh9/vHWx1q8fjums57bxJRxhX/Uq9v
SL/cNxT65XKy+gLfgDSUOm++0C8snmEaF8/gC56Tr8FzEgqek83hGbR8dFrP
o4WUj38/GCKUP1BnIPTLiOHnzEm/oL8yM4R+4er/X3EI8VLiEDS5OIRjEFdw
mIsr0IK4AncuroCdJ7KGO0+E5YUVQl5YMOSFsfzTgad/P8eB5fNWQT5vHOTz
Mg98AnjgY8EDHwp5uLO5PFxt8FFPBx+1KvioWV5tIp9XC57ek5ynl6vnYJ5s
CnhKO8BTKgFPaTfkya7n8mT3g3/SivNPSovrXgtx3clS4rp3Qly3OsR1S/Oy
uoF/dSPnQWU+1dGcT5V5U83h+mi4nuUxbQY/6jLIY5KWn6ULeVjJkIcVDHlY
0ZBvZc/lWx2A/10NeVXsf9fD/zpB/hT7X2nnQkrLU3sO5+FGcOfh6sH5uTrc
+bl1f4XpJ5Pv7ZEx51V9Cq+igIkL1G6Q720mxOmFQpzeXYjT+x7ycH/i8nBn
7PQsIeVjlbxoofw+UexRWn6q97E/6xpLULBNUeNTuybkGNdkWpH1HIns5de4
9pci9U2ePxsovUSTmopH3Kp/gRrkksOHWVcgxzR5fRvRM6Sf+nriFcsmNCb7
t5F+RyuR2o6E2hHkPS6d/4dyzI/NyH1M0Fq9O0+RZNVJn4sOlajvX34HF5B5
Xc8Fw3Xkdxxjpi/8bjjzM+F3P4gTKOTiBNJjV4wj5WNv86hqWv79nzJVaPlj
diSdIfXB0zOtdGh9dFN05Gh9ZkuJK1idG7yB3BdW6G/9id7XsEdGsvS+Mj9/
1k3aATdpZD+j7ZAZdHM5bYfSt4fG15P2CU/pKiK/Y7ny6o30970x651o+1jb
K/1AysFRaq1TaDmpvsU/0/Z50uepROqD25UKVWl9aj+Ml6ftU3dm731Sf6xR
vVWL1n/q+s9saPsELHbbQNoBaxZtC6Lt4FMRpGx5vhqb3Zru4rD8CXZ0rttn
VtCKNNMW29J2e/H8ng29/mXtjmP0evzS5WPaProHo/No+eNGr5pJyx8wzYin
7YMtflah9XE68OgTWp8fouZ+Q9tB/xQOofW3m3FWqH/vV8oTyP3iju9ahPut
MsgV7vc/1himAw==
                "]], {}}, 
             Method -> {
              "ShrinkWrap" -> False, "DefaultBoundaryStyle" -> Directive[
                 GrayLevel[0.3]], 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "RotationControl" -> "Globe"}, {
             BoxRatios -> Automatic, DisplayFunction -> Identity, 
              PlotRange -> {Automatic, Automatic, All}, DisplayFunction -> 
              Identity, Ticks -> {Automatic, Automatic, Automatic}, FaceGrids -> 
              None, DisplayFunction -> Identity, Axes -> True, AxesLabel -> {
                FormBox[
                 TagBox["A", HoldForm], TraditionalForm], 
                FormBox[
                 TagBox["n", HoldForm], TraditionalForm], None}, 
              AxesOrigin -> {Automatic, Automatic, Automatic}, AxesStyle -> 
              Directive[
                GrayLevel[0.65], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], BaseStyle -> Automatic, BoxRatios -> {1, 1, 0.4}, 
              BoxStyle -> GrayLevel[0, 0.35], DisplayFunction :> Identity, 
              FaceGridsStyle -> Automatic, ImageSize -> 264., Lighting -> 
              "Neutral", Method -> {"DefaultBoundaryStyle" -> Directive[
                  GrayLevel[0.3]], 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "RotationControl" -> "Globe"}, 
              PlotRange -> {{-4.999999285714287, 
               4.999999285714287}, {-1.5151341593408139`, 
               1.5151341593408139`}, {0., 3.1830984071094983`}}, 
              PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02], 
                Scaled[0.02]}, Ticks -> {Automatic, Automatic, Automatic}}, 
             Method -> {"ResolveAsTriangles" -> False}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "3DMathPlot"}, {}], "\n "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], {A, -5., \
5.}, {n, -1.51513, 1.51513}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max18$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max20$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min17$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min19$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min17$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["A", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max18$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["A", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min19$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max20$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1268913$$ = 
                 False, 
                 CalculateUtilities`GraphicsUtilities`Private`min17$1268918$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`max18$\
1268919$$ = 0, CalculateUtilities`GraphicsUtilities`Private`min19$1268920$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`max20$\
1268921$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max18$$ = 0.5,
                     CalculateUtilities`GraphicsUtilities`Private`max20$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min17$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min19$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1268913$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min17$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min17$\
1268918$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max18$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max18$\
1268919$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min19$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min19$\
1268920$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max20$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max20$\
1268921$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    2 Abs[($CellContext`A + $CellContext`A 
                    E^((Complex[0, -1] $CellContext`n) Pi))/(
                    2 Pi - (2 $CellContext`n^2) Pi)], {$CellContext`A, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min17$$], 
                    (
                    Piecewise[{{
                    0. + 5.345224838248487 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    5.345224838248487 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min17$$], \
-5.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min17$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max18$$]], 
                    (
                    Piecewise[{{
                    0. + 5.345224838248487 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 5.345224838248487 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min17$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max18$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min17$$ + 
                    0.01, CalculateUtilities`GraphicsUtilities`Private`max18$$\
]], 5.]}, {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min19$$], 
                    (
                    Piecewise[{{
                    0. + 1.6197467797498488` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.6197467797498488` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min19$$], \
-1.5151343757885818`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min19$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max20$$]], 
                    (
                    Piecewise[{{
                    0. + 1.6197467797498488` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.6197467797498488` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min19$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max20$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min19$$ + 
                    0.003030268751577164, 
                    CalculateUtilities`GraphicsUtilities`Private`max20$$]], 
                    1.5151343757885818`]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["A", TraditionalForm]], 
                    RawBoxes[
                    FormBox["n", TraditionalForm]]}, AspectRatio -> Automatic,
                     ImageSize -> 264., ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min17$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["A", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max18$$, 0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["A", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min19$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max20$$, 0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMtoEQfEACOhiTBpSkfO8tdhoL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcpNfw9NCaoZzlshDk3UmuqNZMivQSPrtpTUzNLuXwgxLvu2rNe6lm\
YPz5Fb4PPCk4GPrVMM4Mo3qypyDPWKJrz0ixI/uTCZcJcPaTPt7eef7i5daWh8FYRmAMVUI/\
bQuZZwo0TXsIdMWatxzEN398UB4/FZzH9HtBRUL1PesdKyAWRgrgmE/\
wrRebqduYmAFBQJFzp8nJc9j2Am0UE9MxneX4xtlkbbcFBjXVnps7JTfrFOTDv44PZOxi8h6XtDs7A\
sPCuGD0nZbVP+dugOfXbeGVPF5NHOb3hiNvYNgR1ct0PmldJ89I1bUu+jlX5zVfNhrk2VOm/\
l86YNosh7HTNgw6O7Q1Xq29ZfhnbeFljl0/F/\
ddaz57Rwm4ajhUgvsoScHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMimlPrIo7bXTZlZpiBgsQCz6/\
rl002lnUoAXe2rz0ThNkB5glZtzyh2U8X6g4myb78UXEruZxqMuR9Xxg6pWqt6G9gfZQlV5CxDIwkx\
guaeg3msEpqBCpY9oMSJM5BMIRkv+zHffMPFyuBVO0pVJfyLA5caU7Ck+\
iXBT6gYmqy5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DWsLuG4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "ContourPlot"}, {}], "\n "}]}],
    Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Interactive plot", "scanner" -> "Sequence", "id" -> 
     "Plots", "position" -> "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`SequenceScanner`Private`iv$4354092$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`SequenceScanner`Private`nn$4354092$$ = 3, 
                 CalculateScan`SequenceScanner`Private`xmax2$4354092$$ = \
-4.993815670531455, 
                 CalculateScan`SequenceScanner`Private`xmin2$4354092$$ = \
-51.883875068327114`, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`SequenceScanner`Private`nn$4354092$$], 
                    3, 
                    Style["A", Italic]}, 0, 6, 1}, {{
                    Hold[CalculateScan`SequenceScanner`Private`nn$4354092$$], 
                    3, 
                    Style["A", Italic]}, 0, 6}, {{
                    Hold[CalculateScan`SequenceScanner`Private`iv$4354092$$], 
                    True, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
4354093["integer `1` only", {
                    Style["A", Italic]}]}, {True, False}}, {{
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmin2$4354092$$], \
-51.883875068327114`, 
                    Subscript[
                    Defer[$CellContext`n], 
                    "min"]}, -75.32890476722494, -28.673295666418262`}, {{
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmax2$4354092$$], \
-4.993815670531455, 
                    Subscript[
                    Defer[$CellContext`n], "max"]}, -28.438845369429284`, 
                    18.451214028366373`}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    
                    PaneSelector[{
                    True -> Manipulate`Place[1], False -> 
                    Manipulate`Place[2]}, 
                    Dynamic[
                    CalculateScan`SequenceScanner`Private`iv$4354092$$]], 
                    Manipulate`Place[3]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Manipulate`Place[4], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[5], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4357056$$ = 
                 False, CalculateScan`SequenceScanner`Private`nn$4354092$\
4357061$$ = 0, CalculateScan`SequenceScanner`Private`iv$4354092$4357062$$ = 
                 False, CalculateScan`SequenceScanner`Private`xmin2$4354092$\
4357063$$ = 0, CalculateScan`SequenceScanner`Private`xmax2$4354092$4357064$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`SequenceScanner`Private`iv$4354092$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`SequenceScanner`Private`nn$4354092$$ = 
                    3, CalculateScan`SequenceScanner`Private`xmax2$4354092$$ = \
-4.993815670531455, 
                    CalculateScan`SequenceScanner`Private`xmin2$4354092$$ = \
-51.883875068327114`}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4357056$\
$, False], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`nn$4354092$$, 
                    CalculateScan`SequenceScanner`Private`nn$4354092$4357061$$\
, 0], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`iv$4354092$$, 
                    CalculateScan`SequenceScanner`Private`iv$4354092$4357062$$\
, False], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmin2$4354092$$, 
                    CalculateScan`SequenceScanner`Private`xmin2$4354092$\
4357063$$, 0], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmax2$4354092$$, 
                    CalculateScan`SequenceScanner`Private`xmax2$4354092$\
4357064$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> 
                  Plot[2 Abs[(
                    CalculateScan`SequenceScanner`Private`nn$4354092$$ + 
                    E^((Complex[0, -1] $CellContext`n) Pi) 
                    CalculateScan`SequenceScanner`Private`nn$4354092$$)/(
                    2 Pi - (2 $CellContext`n^2) Pi)], {$CellContext`n, 
                    CalculateScan`SequenceScanner`Private`xmin2$4354092$$, 
                    CalculateScan`SequenceScanner`Private`xmax2$4354092$$}, 
                    PlotRange -> Automatic, ImageSize -> {300, Automatic}, 
                    Epilog -> Style[
                    Text[
                    Row[{
                    Style["A", Italic], "=", 
                    If[
                    CalculateScan`SequenceScanner`Private`iv$4354092$$, 
                    CalculateScan`SequenceScanner`Private`nn$4354092$$, 
                    SetPrecision[
                    If[
                    CalculateScan`SequenceScanner`Private`nn$4354092$$ != 0, 
                    CalculateScan`SequenceScanner`Private`nn$4354092$$, 
                    "0.00"], 
                    Which[
                    Abs[CalculateScan`SequenceScanner`Private`nn$4354092$$] < 
                    1/10, 1, 
                    Abs[CalculateScan`SequenceScanner`Private`nn$4354092$$] < 
                    1, 2, True, 3]]]}], 
                    Scaled[{0.1, 0.9}]], 12]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`SequenceScanner`Private`nn$4354092$$, 3, 
                    Style["A", Italic]}, 0, 6, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 1}, {{
                    CalculateScan`SequenceScanner`Private`nn$4354092$$, 3, 
                    Style["A", Italic]}, 0, 6, ImageSize -> Tiny, 
                    ControlPlacement -> 2}, {{
                    CalculateScan`SequenceScanner`Private`iv$4354092$$, True, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
4354093["integer `1` only", {
                    Style["A", Italic]}]}, {True, False}, ImageSize -> Tiny, 
                    ControlPlacement -> 3}, {{
                    CalculateScan`SequenceScanner`Private`xmin2$4354092$$, \
-51.883875068327114`, 
                    Subscript[
                    Defer[$CellContext`n], 
                    "min"]}, -75.32890476722494, -28.673295666418262`, 
                    ImageSize -> Tiny, ControlPlacement -> 4}, {{
                    
                    CalculateScan`SequenceScanner`Private`xmax2$4354092$$, \
-4.993815670531455, 
                    Subscript[
                    Defer[$CellContext`n], "max"]}, -28.438845369429284`, 
                    18.451214028366373`, ImageSize -> Tiny, ControlPlacement -> 
                    5}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    
                    PaneSelector[{
                    True -> Manipulate`Place[1], False -> 
                    Manipulate`Place[2]}, 
                    Dynamic[
                    CalculateScan`SequenceScanner`Private`iv$4354092$$]], 
                    Manipulate`Place[3]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Manipulate`Place[4], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[5], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVtuO0zAQbSn3O/\
wBEs8IaHngAQnoLstKC5SkvHc2cRIL1w62sxd+Hjx2kzTbbqWYLqBV+jCqJ83xzJkz03lyKIKk3+\
v11FVjPgoWJzfw9NiYsZjnouDx7kkuiVJU8OQKPrttTEj0DmFwSmLnu27MByHnoN35Db4PLCoYaPJN\
U0Y1JWq2JyHPaKRqz0TSI/OTGRMRMPqTPB0NX42evx46GIxlAloTydWwLWSeSVAk6SHQNWPeM+\
Df3fFRefxcMBaSHwXhEVEPjHcqITYwggPDfLxvvdxM3cXENPAYZHzhNFl5jtteoLSkPJ2SeY5vnE/\
Wi7bAIFPluLlXcrNJQS78m/hAhDYm57FJ27Ml0C+MS0bfWVn9c+4GeH7bFl6K4/\
XEYX7vGPIGmh4RtUrns9Z1coxUXWujX3B1UfNlq0GeP2Xq/6UDqvRqGC/\
bhkHmh6bG67W3Cj9qCy9y7PqFuO8b88U5SsB1w6ES3CcRF2wRRTPlgZNo+\
3RVbhwO407Fd4hOnwpWOIGJs+wX2x8PK/B6UwixdrMtSIfXMyAgOTGu2HK7Q1OqxxlIiAzw4rp+\
2WRTUYficWf72lMeUzPAHCGblic0+8lS3UFH2dc/Km4llzNNhrzvc01SIjeK/\
hbWRxpyeTwVnpGEeEFTr94cVklNQHrLflCChDlwipD0l/nYb+7hciWQqj2J6pKOxYEtzYl/\
Ev2ywAeEpzpr7tieo8u7bTGbQBzXqgtokixPm+\
0x3W8y3bihOdB9SfAtif9A7zaFblP4q5vCyh7crQndmtCtCd2a0K0J/++aYCPGf6XfXpC4fg=="]]}\
; Typeset`initDone$$ = True), DynamicModuleValues :> {}, Deinitialization :> 
                None, UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Alternate forms assuming A and n are real", "scanner" -> 
     "Simplification", "id" -> "RealAlternateForm", "position" -> "600", 
     "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], Element[A \
| n, Reals]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"2", " ", 
                TemplateBox[{
                  FractionBox[
                   RowBox[{"A", " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"n", " ", "\[Pi]"}], "2"], ")"}]}], 
                   RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]]}, "Abs"]}], 
              "\[Pi]"], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ComplexExpand[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"2", " ", 
                SqrtBox[
                 RowBox[{
                   RowBox[{
                    SuperscriptBox["A", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}]}], "+", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"A", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}]}], "+", "A"}], ")"}], 
                    "2"]}]]}], 
              SqrtBox[
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}], ")"}], "2"]]], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              TemplateBox[{
                RowBox[{
                  RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", "\[Pi]"}]],
                     " ", "A"}], "+", "A"}]}, "Abs"], 
              RowBox[{"\[Pi]", " ", 
                TemplateBox[{
                  RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]}, "Abs"]}]], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FunctionExpand[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"2", " ", 
                TemplateBox[{
                  RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", "\[Pi]"}]],
                     " ", "A"}], "+", "A"}]}, "Abs"]}], 
              TemplateBox[{
                RowBox[{
                  RowBox[{"2", " ", "\[Pi]"}], "-", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]}, "Abs"]], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{"\[Pi]", " ", 
                   RowBox[{"Im", "(", "n", ")"}]}]], " ", 
                TemplateBox[{
                  FractionBox[
                   RowBox[{"A", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "n", " ", "\[Pi]"}]]}], 
                    ")"}]}], 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "-", "1"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "1"}], ")"}]}]]}, "Abs"]}], "\[Pi]"], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "Im(z) is the imaginary part of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Im.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Im", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ImaginaryPart.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod8$$ = 
   XMLElement[
   "pod", {"title" -> "Alternate form assuming A and n are positive", 
     "scanner" -> "Simplification", "id" -> "PositiveAlternateForm", 
     "position" -> "800", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], A > 0 && n \
> 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"2", " ", "A", " ", 
                TemplateBox[{
                  RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"n", " ", "\[Pi]"}], "2"], ")"}]}, "Abs"]}], 
              RowBox[{"\[Pi]", " ", 
                TemplateBox[{
                  RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]}, "Abs"]}]], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Series expansion at n = \[Infinity]", "scanner" -> 
     "Series", "id" -> "SeriesExpansionAtn=Infinity", "position" -> "900", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], {n, Infinity, \
4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"2", " ", 
              SuperscriptBox["\[ExponentialE]", 
               RowBox[{"\[Pi]", " ", 
                 RowBox[{"Im", "(", "n", ")"}]}]], " ", 
              TemplateBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"1", "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "n", " ", "\[Pi]"}]]}], 
                    ")"}], " ", 
                  RowBox[{"(", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["A", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]]}], "-", 
                    FractionBox["A", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "4"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "n"], ")"}], "6"], ")"}], 
                    SeriesData[$CellContext`n, 
                    DirectedInfinity[1], {}, 2, 6, 1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["A", 
                    RowBox[{"2", " ", "\[Pi]"}]]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["A", 
                    RowBox[{"2", " ", "\[Pi]"}]]}]}], "}"}], ",", "2", ",", 
                    "6", ",", "1"}], "]"}]}, "SeriesData", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                    ")"}]}]}, "Abs"]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Derivative", "position" -> "1000", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"D[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                RowBox[{
                  RowBox[{
                    TagBox[
                    FractionBox["\[PartialD]", 
                    RowBox[{"\"\[PartialD]\"", "\[InvisibleSpace]", "n"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"d/d", "\[InvisibleSpace]", "n"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    TagBox[
                    TagBox[
                    RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", 
                    "n"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]]}, "Abs"]}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
                  "\[LongEqual]", 
                  RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox["A", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", "\[Pi]", 
                    " ", "n"}]], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", "n"}]]}], 
                    ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", "n"}]]}], 
                    ")"}], " ", "n"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]"}]}], ")"}]}], 
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[Pi]", "2"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}], ")"}], "3"], " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", "\[Pi]"}]],
                     " ", "A"}], "+", "A"}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]]}, 
                    "Abs"]}]]}]}]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a function from reals to reals\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Verdana", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Derivative__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Derivative__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Alternative representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "position" -> "1100", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "2 Abs[(A + A/E^(I Pi n))/(2 Pi - 2 Pi n^2)] == 2 Abs[(A + A w^a)/(2 \
Pi - 2 Pi n^2)] /; a == ((-I) n Pi)/Log[w]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}]}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]]}, "Abs"]}], "\[LongEqual]", 
                  RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["w", "a"]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]]}, "Abs"]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"a", "\[LongEqual]", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "n", " ", "\[Pi]"}], 
                    RowBox[{"log", "(", "w", ")"}]]}]}]}, "RowDefault"], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "2 Abs[(A + A/E^(I Pi n))/(2 Pi - 2 Pi n^2)] == 2 Abs[(A + A/z^(I Pi \
n))/(2 Pi - 2 Pi n^2)] /; z == E"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}]}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]]}, "Abs"]}], "\[LongEqual]", 
                  RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["z", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}]}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]]}, "Abs"]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"z", "\[LongEqual]", "\[ExponentialE]"}]}, 
                    "RowDefault"], HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "2 Abs[(A + A/E^(I Pi n))/(2 Pi - 2 Pi n^2)] == 2 Sqrt[(Conjugate[(A \
+ A/E^(I n Pi))/(2 Pi - 2 Pi n^2)] (A + A/E^(I n Pi)))/(2 Pi - 2 Pi n^2)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{
                RowBox[{"2", " ", 
                  TemplateBox[{
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}]}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]]}, "Abs"]}], "\[LongEqual]", 
                RowBox[{"2", " ", 
                  SqrtBox[
                   FractionBox[
                    RowBox[{
                    TemplateBox[{
                    RowBox[{"(", 
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", " ", "\[Pi]"}], ")"}]}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]], ")"}]}, "Conjugate", 
                    SyntaxForm -> SuperscriptBox], " ", 
                    RowBox[{"(", 
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", " ", "\[Pi]"}], ")"}]}]]}]}], ")"}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]]]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternativeRepresentations:MathematicalFunctionIdentityData__More"},\
 {}]}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "z^* is the complex conjugate of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Conjugate.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Conjugate",
            "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexConjugate.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ComplexComponents/Abs/27/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "SeriesRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "1200", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "2 Abs[(A + A/E^(I Pi n))/(2 Pi - 2 Pi n^2)] == 4/Pi - (8 Sum[((-1)^k \
ChebyshevT[2 k, (A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)])/(-1 + 4 k^2), {k, 1, \
Infinity}])/Pi /; Element[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi), Reals] && -1 \
< (A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi) < 1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}]}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]]}, "Abs"]}], "\[LongEqual]", 
                  RowBox[{
                    FractionBox["4", "\[Pi]"], "-", 
                    FractionBox[
                    RowBox[{"8", " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    TemplateBox[{
                    RowBox[{"2", " ", "k"}], 
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]]}, 
                    "ChebyshevT"]}], 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    RowBox[{"4", " ", 
                    SuperscriptBox["k", "2"]}]}]]}]}], "\[Pi]"]}]}], 
                HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]], "\[Element]", 
                    TemplateBox[{}, "Reals"]}], 
                    StyleBox[
                    "\" and \"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    RowBox[{
                    RowBox[{"-", "1"}], "<", 
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]], "<", "1"}]}, 
                    "RowDefault"], "\[NoBreak]", ")"}]}, "RowDefault"], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "2 Abs[(A + A/E^(I Pi n))/(2 Pi - 2 Pi n^2)] == 2 Sum[((-1)^k (1/2 + \
2 k) LegendreP[2 k, (A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)] Pochhammer[-1/2, \
k])/(1 + k)!, {k, 0, Infinity}] /; Element[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 \
Pi), Reals] && -1 < (A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi) < 1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}]}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]]}, "Abs"]}], "\[LongEqual]", 
                  RowBox[{"2", " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    FractionBox["1", "2"], "+", 
                    RowBox[{"2", " ", "k"}]}], ")"}], " ", 
                    TemplateBox[{
                    RowBox[{"2", " ", "k"}], 
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]]}, 
                    "LegendreP"], " ", 
                    TemplateBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], "k"}, "Pochhammer", SyntaxForm -> 
                    SubscriptBox]}], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "+", "k"}], ")"}], "!"}]]}]}]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]], "\[Element]", 
                    TemplateBox[{}, "Reals"]}], 
                    StyleBox[
                    "\" and \"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    RowBox[{
                    RowBox[{"-", "1"}], "<", 
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]], "<", "1"}]}, 
                    "RowDefault"], "\[NoBreak]", ")"}]}, "RowDefault"], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "2 Abs[(A + A/E^(I Pi n))/(2 Pi - 2 Pi n^2)] == (2 Sum[((-1)^k \
HermiteH[2 k, (A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)] Pochhammer[-1/2, k])/(2 \
k)!, {k, 0, Infinity}])/Sqrt[Pi] /; Element[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 \
Pi), Reals] && -1 < (A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi) < 1"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TemplateBox[{
               TagBox[
                RowBox[{
                  RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}]}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]]}, "Abs"]}], "\[LongEqual]", 
                  FractionBox[
                   RowBox[{"2", " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], " ", 
                    TemplateBox[{
                    RowBox[{"2", " ", "k"}], 
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]]}, "HermiteH"],
                     " ", 
                    TemplateBox[{
                    RowBox[{"-", 
                    FractionBox["1", "2"]}], "k"}, "Pochhammer", SyntaxForm -> 
                    SubscriptBox]}], 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "k"}], ")"}], "!"}]]}]}], 
                   SqrtBox["\[Pi]"]]}], HoldForm], 
               StyleBox[
                TemplateBox[{"\"  for \"", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"(", "\[NoBreak]", 
                    TemplateBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]], "\[Element]", 
                    TemplateBox[{}, "Reals"]}], 
                    StyleBox[
                    "\" and \"", {
                    FontFamily -> "Helvetica", FontSize -> Smaller, 
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], 
                    RowBox[{
                    RowBox[{"-", "1"}], "<", 
                    FractionBox[
                    RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]], "<", "1"}]}, 
                    "RowDefault"], "\[NoBreak]", ")"}]}, "RowDefault"], 
                   HoldForm]}, "RowDefault"], 
                GrayLevel[0.6], StripOnInput -> False]}, "RowDefault"], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "7"}, {
       XMLElement[
       "info", {
        "text" -> "T_n(x) is the Chebyshev polynomial of the first kind"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/ChebyshevT.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/Polynomials/ChebyshevT", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://mathworld.wolfram.com/ChebyshevPolynomialoftheFirstKind.\
html", "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "n! is the factorial function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Factorial.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Factorial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Factorial.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {
        "text" -> "P_n(x) is the Legendre function P of the first kind"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/LegendreP.html",
            "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/HypergeometricFunctions/\
LegendrePGeneral", "text" -> "Properties", "title" -> 
           "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/LegendrePolynomial.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {
        "text" -> "(a)_n is the Pochhammer symbol (rising factorial)"}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://reference.wolfram.com/language/ref/Pochhammer.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Pochhammer", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/PochhammerSymbol.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {"text" -> "H_n(x) is the nth Hermite polynomial in x"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/HermiteH.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/Polynomials/HermiteH", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/HermitePolynomial.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/ComplexComponents/Abs/06/ShowAll.\
html", "text" -> "More information"}, {}]}]}]}], Typeset`pod13$$, 
   Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, 
   Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, 
   Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, 
   Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, 
   Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, Typeset`pod33$$, 
   Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, Typeset`pod37$$, 
   Typeset`pod38$$, Typeset`pod39$$, Typeset`pod40$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False, False}, True}, Typeset`aux7$$ = {
   True, False, {False, False, False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False, False, False}, True}, Typeset`aux12$$ = {
   True, False, {False, False, False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`aux37$$ = {
   True, False, {False}, True}, Typeset`aux38$$ = {
   True, False, {False}, True}, Typeset`aux39$$ = {
   True, False, {False}, True}, Typeset`aux40$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "10", "datatypes" -> "Math", "timedout" -> 
     "InterestingMultiDimensionalDefiniteIntegrals,MathematicalFunctionData", 
     "timedoutpods" -> "", "timing" -> "4.369", "parsetiming" -> "0.807", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa14101h189d32154i28d500003g8hc3560629ehdi1494138648170584556", "id" -> 
     "MSP14111h189d32154i28d500002i29i6fc8132b919", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "9", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa14121h189d32154i28d500001beci21eibcgf8h61494138648170584556", "version" -> 
     "2.6", "inputstring" -> 
     "2*abs((A + A E^(-I \[Pi] n))/(2 \[Pi] - 2 \[Pi] n^2))"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "3", "datatypes" -> "Math", "timedout" -> 
     "InterestingMultiDimensionalDefiniteIntegrals", "timedoutpods" -> "", 
     "timing" -> "5.495", "parsetimedout" -> "false", "recalculate" -> "", 
     "id" -> "", "parseidserver" -> "13", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "13", "related" -> "", 
     "version" -> "2.6", "inputstring" -> 
     "2*abs((A + A E^(-I \[Pi] n))/(2 \[Pi] - 2 \[Pi] n^2))"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 19, 23, 29, 53.4450866`9.480482629719283}, "Line" -> 
    44, "SessionID" -> 34127120128274598448}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12}, Typeset`failedpods$$ = {13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
    37, 38, 39, 40}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "2*abs((A + A E^(-I \[Pi] n))/(2 \[Pi] - 2 \[Pi] n^2))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
         Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, 
         Typeset`pod40$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
         Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1069.4, {1821.4671875000001`, 1829.9328124999997`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
          Typeset`pod37$$, Typeset`pod38$$, Typeset`pod39$$, 
          Typeset`pod40$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$, 
          Typeset`aux37$$, Typeset`aux38$$, Typeset`aux39$$, Typeset`aux40$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa14101h189d32154i28d500003g8hc3560629ehdi1494138648170584556", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.856717793529863*^9},ExpressionUUID->"1d740366-151d-43db-95f0-\
caa968d58682"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "table[",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"2", " ", "A", " ", 
     TemplateBox[{
       RowBox[{"cos", "(", 
         FractionBox[
          RowBox[{"n", " ", "\[Pi]"}], "2"], ")"}]},
      "Abs"]}], 
    RowBox[{"\[Pi]", " ", 
     TemplateBox[{
       RowBox[{
         SuperscriptBox["n", "2"], "-", "1"}]},
      "Abs"]}]], TraditionalForm]], "WolframAlphaFullOutput",
  CellChangeTimes->{3.856717793529863*^9},ExpressionUUID->
  "4f8e72c4-781c-48a7-ac73-9ca81cac966f"],
 ",{n,1,10}]"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.856718847898324*^9, 3.8567188686762013`*^9}, {
  3.8567189240362253`*^9, 3.856718935666396*^9}, {3.8567191617382784`*^9, 
  3.8567191627761087`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"8c2de2b3-4ebd-496e-b0a7-9b704049eae0"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "table[(2 A Abs[cos((n \[Pi])/2)])/(\[Pi] Abs[n^2 - 1]),{n,1,10}]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Table[(2 A Abs[Cos[(n Pi)/2]])/(Pi Abs[n^2 - 1]), {n, 1, 10}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               TagBox[
                StyleBox[
                "Table", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], HoldForm], "[", 
               RowBox[{
                 FractionBox[
                  TagBox[
                   RowBox[{"2", " ", "A", " ", 
                    TemplateBox[{
                    RowBox[{"cos", "(", 
                    FractionBox[
                    TagBox[
                    RowBox[{"n", " ", "\[Pi]"}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "2"], 
                    ")"}]}, "Abs"]}], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], 
                  RowBox[{"\[Pi]", " ", 
                    TemplateBox[{
                    RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]}, "Abs"]}]], ",", 
                 RowBox[{"{", 
                   RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "List", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Table[(2 A Abs[Cos[(n Pi)/2]])/(Pi Abs[n^2 - 1]), {n, 1, 10}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["n", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}], 
                 StyleBox[
                  FractionBox[
                   RowBox[{"2", " ", "A", " ", 
                    TemplateBox[{
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"n", " ", "\[Pi]"}], "2"], ")"}]}, "Abs"]}], 
                   RowBox[{"\[Pi]", " ", 
                    TemplateBox[{
                    RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]}, "Abs"]}]], {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {"1", 
                 StyleBox["\"indeterminate\"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {"2", 
                 TagBox[
                  FractionBox[
                   RowBox[{"2", " ", "A"}], 
                   RowBox[{"3", " ", "\[Pi]"}]], Identity]}, {"3", "0"}, {"4", 
                 TagBox[
                  FractionBox[
                   RowBox[{"2", " ", "A"}], 
                   RowBox[{"15", " ", "\[Pi]"}]], Identity]}, {"5", "0"}, {
                "6", 
                 TagBox[
                  FractionBox[
                   RowBox[{"2", " ", "A"}], 
                   RowBox[{"35", " ", "\[Pi]"}]], Identity]}, {"7", "0"}, {
                "8", 
                 TagBox[
                  FractionBox[
                   RowBox[{"2", " ", "A"}], 
                   RowBox[{"63", " ", "\[Pi]"}]], Identity]}, {"9", "0"}, {
                "10", 
                 TagBox[
                  FractionBox[
                   RowBox[{"2", " ", "A"}], 
                   RowBox[{"99", " ", "\[Pi]"}]], Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata,\
numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.074", "parsetiming" -> "0.8180000000000001", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP46891c4dd9b75a613cih00001ibaca1cc36e5dbi", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "7", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa46901c4dd9b75a613cih00003b289gfhdiiibb0c6249686130609588165", "version" -> 
    "2.6", "inputstring" -> 
    "table[(2 A Abs[cos((n \[Pi])/2)])/(\[Pi] Abs[n^2 - 1]),{n,1,10}]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 20, 9, 9, 14.7003661`8.919903101588696}, "Line" -> 1, 
    "SessionID" -> 34127454985094183363}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "table[(2 A Abs[cos((n \[Pi])/2)])/(\[Pi] Abs[n^2 - 1]),{n,1,10}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1062.4, {455.96718749999997`, 464.43281250000007`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8567525547201033`*^9},ExpressionUUID->"a5290a6c-dc41-4dc1-a06c-\
9ee29133385f"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "table[(2 A Abs[cos((n \[Pi])/2)])/(\[Pi] Abs[n^2 - 1]),{n,1,5}]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Table[(2 A Abs[Cos[(n Pi)/2]])/(Pi Abs[n^2 - 1]), {n, 1, 5}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               TagBox[
                StyleBox[
                "Table", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], HoldForm], "[", 
               RowBox[{
                 FractionBox[
                  TagBox[
                   RowBox[{"2", " ", "A", " ", 
                    TemplateBox[{
                    RowBox[{"cos", "(", 
                    FractionBox[
                    TagBox[
                    RowBox[{"n", " ", "\[Pi]"}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "2"], 
                    ")"}]}, "Abs"]}], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], 
                  RowBox[{"\[Pi]", " ", 
                    TemplateBox[{
                    RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]}, "Abs"]}]], ",", 
                 RowBox[{"{", 
                   RowBox[{"n", ",", "1", ",", "5"}], "}"}]}], "]"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "List", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Table[(2 A Abs[Cos[(n Pi)/2]])/(Pi Abs[n^2 - 1]), {n, 1, 5}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 TagBox[
                  PaneBox[
                   StyleBox["n", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], "1", "2", "3", "4", 
                 "5"}, {
                 TagBox[
                  PaneBox[
                   StyleBox[
                    FractionBox[
                    RowBox[{"2", " ", "A", " ", 
                    TemplateBox[{
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"n", " ", "\[Pi]"}], "2"], ")"}]}, "Abs"]}], 
                    RowBox[{"\[Pi]", " ", 
                    TemplateBox[{
                    RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]}, "Abs"]}]], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], BaseStyle -> {{
                    BaselinePosition -> Baseline, FontColor -> 
                    GrayLevel[0.3]}, LineSpacing -> {0.9, 0, 1.5}, 
                    LinebreakAdjustments -> {1, 10, 10000, 0, 100}, 
                    TextAlignment -> Left}, BaselinePosition -> Baseline], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 StyleBox["\"indeterminate\"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}], 
                 TagBox[
                  FractionBox[
                   RowBox[{"2", " ", "A"}], 
                   RowBox[{"3", " ", "\[Pi]"}]], Identity], "0", 
                 TagBox[
                  FractionBox[
                   RowBox[{"2", " ", "A"}], 
                   RowBox[{"15", " ", "\[Pi]"}]], Identity], "0"}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left, Left, ".", Left, "."}, 
                 "Rows" -> {{Baseline}}}, AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {None, None}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata,\
numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.2", "parsetiming" -> "0.914", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP5826132giha0ig20545200000hi793h3af6e9f69", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "8", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa5827132giha0ig20545200001b880ge572i4a7dd3172133347439184749", "version" -> 
    "2.6", "inputstring" -> 
    "table[(2 A Abs[cos((n \[Pi])/2)])/(\[Pi] Abs[n^2 - 1]),{n,1,5}]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 19, 23, 49, 2.086168`8.071924263123819}, "Line" -> 47,
     "SessionID" -> 34127120128274598448}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "table[(2 A Abs[cos((n \[Pi])/2)])/(\[Pi] Abs[n^2 - 1]),{n,1,5}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1061.1999999999998`, {160.66083984374998`, 167.53916015625003`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.8567189420961323`*^9, {3.856719154486067*^9, 
   3.85671915543731*^9}},ExpressionUUID->"9bd398ac-9e2c-4622-89c7-\
564b07380af5"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "table[",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{" ", 
     RowBox[{"A", " ", 
      TemplateBox[{
        RowBox[{"1", "+", 
          RowBox[{
            RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "^", "n"}]}]},
       "Abs"]}]}], 
    RowBox[{"\[Pi]", " ", 
     TemplateBox[{
       RowBox[{
         SuperscriptBox["n", "2"], "-", "1"}]},
      "Abs"]}]], TraditionalForm]], "WolframAlphaFullOutput",
  CellChangeTimes->{3.856717793529863*^9},ExpressionUUID->
  "5773e06a-638e-4586-8a18-8238bc3b6931"],
 ",{n,1,10}]"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.8567525676404448`*^9, 3.856752609960269*^9}, {
  3.856753595769533*^9, 3.8567536350195274`*^9}, {3.8567537703294916`*^9, 
  3.8567537729994135`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"41bfcb9b-983c-4e0c-a973-ebc7bb7eeda7"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "table[( A Abs[1 + (-1)^n])/(\[Pi] Abs[n^2 - 1]),{n,1,10}]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Table[(A Abs[1 + (-1)^n])/(Pi Abs[n^2 - 1]), {n, 1, 10}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               TagBox[
                StyleBox[
                "Table", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], HoldForm], "[", 
               RowBox[{
                 FractionBox[
                  TagBox[
                   RowBox[{"A", " ", 
                    TemplateBox[{
                    RowBox[{"1", "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "n"]}]}, "Abs"]}], 
                   PolynomialForm[#, TraditionalOrder -> False]& ], 
                  RowBox[{"\[Pi]", " ", 
                    TemplateBox[{
                    RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]}, "Abs"]}]], ",", 
                 RowBox[{"{", 
                   RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "List", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Table[(A Abs[1 + (-1)^n])/(Pi Abs[n^2 - 1]), {n, 1, 10}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{
                 StyleBox["n", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}], 
                 StyleBox[
                  FractionBox[
                   RowBox[{"A", " ", 
                    TemplateBox[{
                    RowBox[{"1", "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "n"]}]}, "Abs"]}], 
                   RowBox[{"\[Pi]", " ", 
                    TemplateBox[{
                    RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]}, "Abs"]}]], {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {"1", 
                 StyleBox["\"indeterminate\"", {
                   GrayLevel[0.6], 
                   LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                   0}]}, {"2", 
                 TagBox[
                  FractionBox[
                   RowBox[{"2", " ", "A"}], 
                   RowBox[{"3", " ", "\[Pi]"}]], Identity]}, {"3", "0"}, {"4", 
                 TagBox[
                  FractionBox[
                   RowBox[{"2", " ", "A"}], 
                   RowBox[{"15", " ", "\[Pi]"}]], Identity]}, {"5", "0"}, {
                "6", 
                 TagBox[
                  FractionBox[
                   RowBox[{"2", " ", "A"}], 
                   RowBox[{"35", " ", "\[Pi]"}]], Identity]}, {"7", "0"}, {
                "8", 
                 TagBox[
                  FractionBox[
                   RowBox[{"2", " ", "A"}], 
                   RowBox[{"63", " ", "\[Pi]"}]], Identity]}, {"9", "0"}, {
                "10", 
                 TagBox[
                  FractionBox[
                   RowBox[{"2", " ", "A"}], 
                   RowBox[{"99", " ", "\[Pi]"}]], Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata,\
numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.974", "parsetiming" -> "0.6930000000000001", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP1486199dihbe55412c4d00003a9iig7063447416", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "18", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa1487199dihbe55412c4d0000425bca18dh75a1ha1697175660060143921", "version" -> 
    "2.6", "inputstring" -> 
    "table[( A Abs[1 + (-1)^n])/(\[Pi] Abs[n^2 - 1]),{n,1,10}]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 20, 9, 29, 39.9591654`9.354191291620527}, "Line" -> 2,
     "SessionID" -> 34127454985094183363}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "table[( A Abs[1 + (-1)^n])/(\[Pi] Abs[n^2 - 1]),{n,1,10}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1069.4, {447.96718749999997`, 456.43281250000007`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8567537799792533`*^9},ExpressionUUID->"fe9c258c-7fef-442a-9bc2-\
ae6c680df02e"]
}, Closed]],

Cell[CellGroupData[{

Cell["table[e^(i*n*pi),{n,1,10}],table[(-1)^n,{n,1,10}]", "WolframAlphaLong",
 CellChangeTimes->{{3.856761253072568*^9, 3.856761316332924*^9}, {
  3.8567614930805*^9, 3.8567615595428686`*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"6ee00ef2-498b-409c-87b7-48bcf818181b"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "table[e^(i*n*pi),{n,1,10}],table[(-1)^n,{n,1,10}]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "{Table[E^(I n Pi), {n, 1, 10}], Table[(-1)^n, {n, 1, 10}]}"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"{", 
               RowBox[{
                 RowBox[{
                   TagBox[
                    StyleBox[
                    "Table", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], HoldForm], "[", 
                   RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "n", " ", "\[Pi]"}]], ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}], ",", 
                 RowBox[{
                   TagBox[
                    StyleBox[
                    "Table", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], HoldForm], "[", 
                   RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "n"], ",", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", "1", ",", "10"}], "}"}]}], "]"}]}], 
               "}"}], PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Identity", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"(", "\[NoBreak]", 
              GridBox[{{
                 RowBox[{"-", "1"}], "1", 
                 RowBox[{"-", "1"}], "1", 
                 RowBox[{"-", "1"}], "1", 
                 RowBox[{"-", "1"}], "1", 
                 RowBox[{"-", "1"}], "1"}, {
                 RowBox[{"-", "1"}], "1", 
                 RowBox[{"-", "1"}], "1", 
                 RowBox[{"-", "1"}], "1", 
                 RowBox[{"-", "1"}], "1", 
                 RowBox[{"-", "1"}], "1"}}, RowSpacings -> 1, ColumnSpacings -> 
               1, RowAlignments -> Baseline, ColumnAlignments -> Center], 
              "\[NoBreak]", ")"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Dimensions", "scanner" -> "List", "id" -> "Dimensions",
      "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Dimensions[{{-1, 1, -1, 1, -1, 1, -1, 1, -1, 1}, {-1, 1, -1, 1, -1, \
1, -1, 1, -1, 1}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"2", 
              StyleBox["\" (rows)\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}], 
              TemplateBox[{"\" \[Times] \"", "10"}, "RowDefault"], 
              StyleBox["\" (columns)\"", {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Matrix plot", "scanner" -> "List", "id" -> 
     "MatrixPlot", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "MatrixPlot[{{-1, 1, -1, 1, -1, 1, -1, 1, -1, 1}, {-1, 1, -1, 1, -1, \
1, -1, 1, -1, 1}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBgAmIuIAaxL66+AIL2Qi2CQHjQfm/7HiB8Y88ABh/s58yc
DYS3ofxR9UNNPQDaGsDU
              "], {{0, 0}, {10, 2}}, {0, 1}], AxesStyle -> Directive[
               AbsoluteThickness[0.2]], BaseStyle -> Automatic, Frame -> True,
              FrameLabel -> {None, None}, FrameStyle -> Directive[
               AbsoluteThickness[0.2]], FrameTicks -> {{{{1.5, 
                  FormBox["1", TraditionalForm]}, {0.5, 
                  FormBox["2", TraditionalForm]}}, {{1.5, 
                  FormBox["1", TraditionalForm]}, {0.5, 
                  FormBox["2", TraditionalForm]}}}, {{{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {2.5, 
                  FormBox["3", TraditionalForm]}, {3.5, 
                  FormBox["4", TraditionalForm]}, {4.5, 
                  FormBox["5", TraditionalForm]}, {5.5, 
                  FormBox["6", TraditionalForm]}, {6.5, 
                  FormBox["7", TraditionalForm]}, {7.5, 
                  FormBox["8", TraditionalForm]}, {8.5, 
                  FormBox["9", TraditionalForm]}, {9.5, 
                  FormBox["10", TraditionalForm]}}, {{0.5, 
                  FormBox["1", TraditionalForm]}, {1.5, 
                  FormBox["2", TraditionalForm]}, {2.5, 
                  FormBox["3", TraditionalForm]}, {3.5, 
                  FormBox["4", TraditionalForm]}, {4.5, 
                  FormBox["5", TraditionalForm]}, {5.5, 
                  FormBox["6", TraditionalForm]}, {6.5, 
                  FormBox["7", TraditionalForm]}, {7.5, 
                  FormBox["8", TraditionalForm]}, {8.5, 
                  FormBox["9", TraditionalForm]}, {9.5, 
                  FormBox["10", TraditionalForm]}}}}, GridLinesStyle -> 
             Automatic, ImageSize -> NCache[
               Rational[400, 3], 133.33333333333334`], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Matrix rank", "scanner" -> "List", "id" -> 
     "MatrixRank", "position" -> "500", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "MatrixRank[{{-1, 1, -1, 1, -1, 1, -1, 1, -1, 1}, {-1, 1, -1, 1, -1, \
1, -1, 1, -1, 1}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["1", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "MatrixRank__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Nullity", "scanner" -> "List", "id" -> "MatrixNullity",
      "position" -> "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Last[Dimensions[{{-1, 1, -1, 1, -1, 1, -1, 1, -1, 1}, {-1, 1, -1, 1, \
-1, 1, -1, 1, -1, 1}}]] - MatrixRank[{{-1, 1, -1, 1, -1, 1, -1, 1, -1, 1}, \
{-1, 1, -1, 1, -1, 1, -1, 1, -1, 1}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox["9", TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,numberdata"}]}]\
, 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "MatrixNullity__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Pseudoinverse", "scanner" -> "List", "id" -> 
     "PseudoInverse", "position" -> "700", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "PseudoInverse[{{-1, 1, -1, 1, -1, 1, -1, 1, -1, 1}, {-1, 1, -1, 1, \
-1, 1, -1, 1, -1, 1}}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              StyleBox[
               FractionBox["1", "20"], ScriptLevel -> 1], 
              RowBox[{"(", "\[NoBreak]", 
                GridBox[{{
                   RowBox[{"-", "1"}], 
                   RowBox[{"-", "1"}]}, {"1", "1"}, {
                   RowBox[{"-", "1"}], 
                   RowBox[{"-", "1"}]}, {"1", "1"}, {
                   RowBox[{"-", "1"}], 
                   RowBox[{"-", "1"}]}, {"1", "1"}, {
                   RowBox[{"-", "1"}], 
                   RowBox[{"-", "1"}]}, {"1", "1"}, {
                   RowBox[{"-", "1"}], 
                   RowBox[{"-", "1"}]}, {"1", "1"}}, RowSpacings -> 1, 
                 ColumnSpacings -> 1, RowAlignments -> Baseline, 
                 ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "PseudoInverse__Approximate form"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "7", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.102", "parsetiming" -> "0.62", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP4682200bi6fbae9c00ci00000d01gh741c6hd1f6", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "2", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa4683200bi6fbae9c00ci0000416b74c872a16g73724077331436509559", "version" -> 
    "2.6", "inputstring" -> 
    "table[e^(i*n*pi),{n,1,10}],table[(-1)^n,{n,1,10}]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 20, 11, 39, 23.8820356`9.130646267819193}, "Line" -> 
    12, "SessionID" -> 34127454985094183363}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "table[e^(i*n*pi),{n,1,10}],table[(-1)^n,{n,1,10}]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1058., {635.708984375, 646.291015625}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.856761563902233*^9},ExpressionUUID->"af34990c-a241-4e4e-87d7-\
0eccabde5646"]
}, Closed]],

Cell[CellGroupData[{

Cell["Dt[(-1)^n,n]", "WolframAlphaLong",
 CellChangeTimes->{{3.8567551554380507`*^9, 3.856755185068383*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"0d766bd1-bd74-496f-9d79-f1f19b3636b0"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Dt[(-1)^n,n]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Dt[(-1)^n, n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"\[DifferentialD]", 
                SuperscriptBox[
                 RowBox[{"(", 
                   RowBox[{"-", "1"}], ")"}], "n"]}], 
              RowBox[{"\[DifferentialD]", "n"}], MultilineFunction -> None], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Identity", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], "n"]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {"3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]
         }], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[I (-1)^n Pi, {n, -2, 2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4248$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4247$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4247$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4248$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2655759$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4247$\
2655764$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4248$2655765$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4248$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4247$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2655759$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4247$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4247$\
2655764$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4248$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4248$\
2655765$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$2655734[
                    Plot[{
                    Re[Complex[0, 1] (-1)^$CellContext`n Pi], 
                    Im[Complex[0, 1] (-1)^$CellContext`n Pi]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Complex[0, 1] (-1)^$CellContext`n Pi, {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4247$$], 
                    (
                    Piecewise[{{
                    0. + 2.1380899352993947` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.1380899352993947` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4247$$], \
-2], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4247$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4248$$]], 
                    (
                    Piecewise[{{
                    0. + 2.1380899352993947` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.1380899352993947` Tan[1.5040801783846716` #]]& )[
                    If[CalculateUtilities`GraphicsUtilities`Private`min4247$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4248$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4247$$ + 
                    Rational[1, 250], 
                    CalculateUtilities`GraphicsUtilities`Private`max4248$$]], 
                    2]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4247$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4248$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2655734]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2655734[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2655734[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMxNiAL0hAB2PSgJKU7/\
XiS2rh2sF2tsGfB5/dJM3aVYrpAE3ph1N9aR7fPffc9R4dyijt93o9fdmaD5LT9BqeHlozlLNcFoK+\
O8kVaM2kSC/hs5vWxGB2gZMfQL3vqjXvpZoR48+\
v8H3Ck4ITA18N48ww0JM9RfIpS3TtGSl2ZH8y4TIhnP2Ex1vPd3ZebL/\
0MBjLiBgDSuhnbSHzqSIa0h4CXbHmLSfimz8+KI+fCs5j+\
F6ASEDfs96xItTCSEE45hN868Vm6jYmZoigRNFzp8nJc9j2Am0UE9kYZjm+\
cTZZT9sCE5Vpz82dkpt1CvLhX8cHMnYxeY9L2p0dgWFhXDD6Tsvqn3M3wPPrtvBKHq8mDvN7w5E3Yt\
gR6GU6n7Suk2ek6loX/Zyr85ovGw3y7ClT/\
y8dMG2Ww9hqGwbMDm2NV2tvGX67LbzMsevn4r5rzWfvKAFXDYdKcB8lLfg8imbKAy/\
R9unq3Do8xq2K7xidIRWscCIbZ9kvrj/uV+D1phBj7SYbkI6oZ0AEOVgXddzusoyZ4ZQokljg+\
XX9ssnGsg4l4M72tWeCMjvAPCHrlic0++lC3YlJpl/+qLiVXE41GfK+LwxkoNaK/\
gbWR1lyBR3LwEhivKCp12AOq6RGRAXLflCCxDkRDCHZL/tx3/\
zDxUogVXsK1aU8iwNXmpPwJPplgQ9AZGba3LEDR1dw22I2kTyuVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AacfuMY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[I (-1)^n Pi, {n, -12., 12.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max4250$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min4249$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4249$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4250$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2655858$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min4249$\
2655859$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max4250$2655860$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max4250$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min4249$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2655858$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min4249$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`min4249$\
2655859$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max4250$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max4250$\
2655860$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$2655835[
                    Plot[{
                    Re[Complex[0, 1] (-1)^$CellContext`n Pi], 
                    Im[Complex[0, 1] (-1)^$CellContext`n Pi]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Complex[0, 1] (-1)^$CellContext`n Pi, {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4249$$], 
                    (
                    Piecewise[{{
                    0. + 12.82853961179637 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    12.82853961179637 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min4249$$], \
-12.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min4249$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max4250$$]], 
                    (
                    Piecewise[{{
                    0. + 12.82853961179637 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 12.82853961179637 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min4249$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max4250$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min4249$$ + 
                    0.024, CalculateUtilities`GraphicsUtilities`Private`\
max4250$$]], 12.]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min4249$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max4250$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2655835]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2655835[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2655835[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMxNiAL0hAB2PSgJKU7/\
XiS2rh2sF2tsGfB5/dJM3aVYrpAE3ph1N9aR7fPffc9R4dyijt93o9fdmaD5LT9BqeHlozlLNcFoK+\
O8kVaM2kSC/hs5vWxGB2gZMfQL3vqjXvpZoR48+\
v8H3Ck4ITA18N48ww0JM9RfIpS3TtGSl2ZH8y4TIhnP2Ex1vPd3Zebr/\
wMBjLiBgDSuhnbSHzqSIa0h4CXbHmLSfimz8+KI+fCs5j+\
F6ASEDfs96xItTCSEE45hN868Vm6jYmZoigRNFzp8nJc9j2Am0UE9kYZjm+\
cTZZT9sCE5Vpz82dkpt1CvLhX8cHMnYxeY9L2p0dgWFhXDD6Tsvqn3M3wPPrtvBKHq8mDvN7w5E3Yt\
gR6GU6n7Suk2ek6loX/Zyr85ovGw3y7ClT/\
y8dMG2Ww9hqGwbMDm2NV2tvGX67LbzMsevn4r5rzWfvKAFXDYdKcB8lLfg8imbKAy/\
R9unq3Do8xq2K7xidIRWscCIbZ9kvrj/uV+D1phBj7SYbkI6oZ0AEOVgXddzusoyZ4ZQokljg+\
XX9ssnGsg4l4M72tWeCMjvAPCHrlic0++lC3YlJpl/+qLiVXE41GfK+LwxkoNaK/\
gbWR1lyBR3LwEhivKCp12AOq6RGRAXLflCCxDkRDCHZL/tx3/\
zDxUogVXsK1aU8iwNXmpPwJPplgQ9AZGba3LEDR1dw22I2kTyuVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AacvuMY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"\[Pi]", " ", 
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{"-", "1"}], ")"}], 
                RowBox[{"n", "+", 
                  RowBox[{"1", "/", "2"}]}]]}], Identity], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming n>0", "scanner" -> 
     "Simplification", "id" -> 
     "AlternateFormAssumingAllVariablesAreRealAndPositive", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"PowerExpand[I (-1)^n Pi, Assumptions -> {}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
               SuperscriptBox["\[ExponentialE]", 
                RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", "n"}]]}], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming n is real", "scanner" -> 
     "Simplification", "id" -> "AlternateFormAssumingAllVariablesAreReal", 
     "position" -> "600", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ComplexExpand[I (-1)^n Pi]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", 
                 RowBox[{"\[Pi]", " ", 
                   RowBox[{"sin", "(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}]}]}], "+", 
               RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", 
                 RowBox[{"cos", "(", 
                   RowBox[{"\[Pi]", " ", "n"}], ")"}]}]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "6", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.62", "parsetiming" -> "0.213", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP5441125icd3biaa9b5e900004g183922a4g9fagg", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "5", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa5442125icd3biaa9b5e900001g76g9d60ge144a96235443652248981561", "version" -> 
    "2.6", "inputstring" -> "Dt[(-1)^n,n]"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 20, 9, 53, 11.5478158`8.815074806960059}, "Line" -> 3,
     "SessionID" -> 34127454985094183363}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = "Dt[(-1)^n,n]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1068.1999999999998`, {591.6608398437501, 598.5391601562499}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8567551915628843`*^9},ExpressionUUID->"f162e506-38c1-4017-b604-\
290c61bd4828"]
}, Closed]],

Cell[CellGroupData[{

Cell["Dt[cos(n*pi)+1,n]", "WolframAlphaLong",
 CellChangeTimes->{{3.8567552700582047`*^9, 3.8567552889478674`*^9}, {
  3.85675549728797*^9, 3.8567554975777426`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2a84e674-0c64-47b9-9e52-3dd8277a1e1a"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "Dt[cos(n*pi)+1,n]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Dt[Cos[n Pi] + 1, n]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"\[DifferentialD]", 
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"n", " ", "\[Pi]"}], ")"}], "+", "1"}], ")"}]}], 
              RowBox[{"\[DifferentialD]", "n"}], MultilineFunction -> None], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Identity", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"-", "\[Pi]"}], " ", 
               RowBox[{"sin", "(", 
                 RowBox[{"\[Pi]", " ", "n"}], ")"}]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-(Pi Sin[n Pi]), {n, -2.1, 2.1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max9256$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min9255$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min9255$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max9256$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5236287$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min9255$\
5236292$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max9256$5236293$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max9256$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min9255$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5236287$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min9255$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min9255$\
5236292$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max9256$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max9256$\
5236293$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$5236264[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][-Pi 
                    Sin[$CellContext`n Pi], {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min9255$$], 
                    (
                    Piecewise[{{
                    0. + 2.2236135327113704` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.2236135327113704` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min9255$$], \
-2.08], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min9255$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max9256$$]], 
                    (
                    Piecewise[{{
                    0. + 2.2236135327113704` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.2236135327113704` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min9255$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max9256$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min9255$$ + 
                    0.0041600000000000005`, 
                    CalculateUtilities`GraphicsUtilities`Private`max9256$$]], 
                    2.08]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min9255$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max9256$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$5236264]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5236264[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5236264[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkehgfEJidGNMGlCS8r1eckksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu97TYxEk/\
V6vp64b80GwONnC0xNjRmKWi4LH+\
2e5BKWo4Mk1fHbHmBD0HjDyA2Lnu2nMeyFnRLvzG3yfsKhgRMNXTRnVFNT0QJI8o5GqPWNJT8xPpkx\
EhNGf8OzVcHtn+HrHwWAsY6I1SK6220LmmSQKkh4C3TDmHSP8mzs+Lo+fCsZC+\
F4Aj0A9NN6JJLGBEZwwzMf71qvN1D1MTBMeExlfOk1WnqO2FygtKU8nMMvxjYvJetEWmMhUOW7ul9y\
sU5AL/xY+EKGNyXls0vZsCfQL44rRd15W/\
5y7AZ7ftoWX4nQ1cZjfLkPeiKYnoJbpfN66To6Rqmtt9HOuLmu+bDTIi6dM/\
b90RJVeDmPYNgyYHZsar9beMvzLtvAix66fi/uBMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5WfIfo9KlghROYOMt+\
sf3xqAKvN4UQazfdgHR4PQMCyMG4YsvtHk2pHmVEksgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5gs1J3oKPvyR8Wt5HKuyZD3Q64hBblW9LexPtKQy+\
OJ8IwkxAuaevXmsEpqTKS37AclSJgTThGS/jIf+\
809XKwEUnUgUV3SsTiwpTnzT6JfFvgIeKqz5o7tObq82xazCcRprbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DcvwuJY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-(Pi Sin[n Pi]), {n, -6.2, 6.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max9258$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min9257$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min9257$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max9258$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$5236383$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min9257$\
5236384$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max9258$5236385$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max9258$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min9257$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$5236383$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min9257$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min9257$\
5236384$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max9258$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max9258$\
5236385$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$5236362[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][-Pi 
                    Sin[$CellContext`n Pi], {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min9257$$], 
                    (
                    Piecewise[{{
                    0. + 6.670840598134112 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    6.670840598134112 Tan[1.5040801783846716` #]]& )[
                    
                    CalculateUtilities`GraphicsUtilities`Private`min9257$$], \
-6.24], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min9257$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max9258$$]], 
                    (
                    Piecewise[{{
                    0. + 6.670840598134112 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 6.670840598134112 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min9257$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max9258$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min9257$$ + 
                    0.012480000000000002`, 
                    CalculateUtilities`GraphicsUtilities`Private`max9258$$]], 
                    6.24]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["n", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min9257$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max9258$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$5236362]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5236362[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$5236362[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVtuO0zAQbSn3O/wBEs9ItFyekIDusqy0QEnKe73JJLFw7WA7e+\
HnwWM3SbPtVorpAlqlD6N60hzPnDkznSeHIkj6vV5PXTXmo2BxcgNPj40Zi3kuCh7vnuQSlKKCJ1fw\
2W1jQtA7wMgpxM533ZgPQs6Jduc3+D5hUcGIhm+aMqopqNmeJHlGI1V7JpIemZ/MmIgIoz/\
h6cvh6NXo9dDBYCwTojVIrkZtIfNMEgVJD4GuGfOeEf7dHR+\
Vx88FYyH8KIBHoB4Y71SS2MAIThjm433r5WbqLiamCY+JjC+cJivPcdsLlJaUp1OY5/jG+\
WQ9bwtMZKocN/dKbjYpyIV/Ex+I0MbkPDZpe7YE+oVxyeg7K6t/zt0Az2/\
bwktxvJ44zO8dQ96IpkegVul81rpOjpGqa230C64uar5sNcjzp0z9v3RAlV4NY9g2DJgfmhqv194q/\
Iu28CLHrl+I+74xX5yjBFw3HCrBfRJxwRZRNFMeOIm2T1flxuEw7lR8h+j0qWCFE5g4y36x/\
fGwAq83hRBrN9uCdHg9AwLIwbhiy+\
0OTakeZ0SSyAAvruuXTTYVdSged7avPeUxNQPMEbJpeUKznyzVnego+/\
pHxa3kcqbJkPd9riEFuVH0t7A+0pDL46nwjCTEC5p69eawSmpCpLfsByVImBNOEZL+Mh/\
7zT1crgRStSdRXdKxOLClOfFPol8W+AB4qrPmju05urzbFrMJxHGtuoAmyfK02R7T/\
SbTjRuaA92XBN+S+A/0blPoNoW/uims7MHdmtCtCd2a0K0J3Zrw/64JNmL8V/oNXqi4fg=="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"TrigToExp[-(Pi Sin[n Pi])]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 FractionBox["1", "2"], " ", "\[ImaginaryI]", " ", "\[Pi]", 
                 " ", 
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", "n"}]]}], "-", 
               RowBox[{
                 RowBox[{
                   FractionBox["1", "2"]}], " ", "\[ImaginaryI]", " ", 
                 "\[Pi]", " ", 
                 SuperscriptBox["\[ExponentialE]", 
                  RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", 
                    "n"}]]}]}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {
   True, False, {False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "4", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.522", "parsetiming" -> "0.23600000000000002", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP151223i3b63714cd7cd000057hb8f89b0bhi156", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "15", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa152223i3b63714cd7cd000022gcd8bc072001dh8884920455003441207", "version" -> 
    "2.6", "inputstring" -> "Dt[cos(n*pi)+1,n]"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 20, 9, 58, 23.467523`9.123042178607282}, "Line" -> 5, 
    "SessionID" -> 34127454985094183363}, Typeset`showpods$$ = {1, 2, 3, 4}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Dt[cos(n*pi)+1,n]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1068.1999999999998`, {533.6608398437501, 540.5391601562499}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8567555034824033`*^9},ExpressionUUID->"efce0ba4-2a59-476d-aabc-\
d002d8b3a8bf"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{" ", 
     RowBox[{"A", " ", 
      TemplateBox[{
        RowBox[{"1", "+", 
          RowBox[{
            RowBox[{"(", 
              RowBox[{"-", "1"}], ")"}], "^", "n"}]}]},
       "Abs"]}]}], 
    RowBox[{"\[Pi]", " ", 
     TemplateBox[{
       RowBox[{
         SuperscriptBox["n", "2"], "-", "1"}]},
      "Abs"]}]], ",", 
   RowBox[{"n", "\[Rule]", "1"}]}], "]"}]], "Input",
 CellTags->
  "Limit_templates",ExpressionUUID->"06176660-de32-4b48-86be-eb7ad36b2e9c"]], \
"WolframAlphaLong",
 CellChangeTimes->{{3.856756857156563*^9, 3.85675689846677*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"dbaae8c5-3f0a-4332-8cfe-19f64bd2be3f"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Limit[( A Abs[1 + (-1)^n])/(\[Pi] Abs[n^2 - 1]), n -> 1]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {
     "Limit__Step-by-step solution", "Limit__Step-by-step solution"}}, 
   Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Limit", "scanner" -> "Limit", "id" -> "Limit", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true", "feedbackNeeded" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Limit[(A Abs[1 + (-1)^n])/(Pi Abs[n^2 - 1]), n -> 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               TemplateBox[{
                 StyleBox[
                  FractionBox[
                   RowBox[{"A", " ", 
                    TemplateBox[{
                    RowBox[{"1", "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "n"]}]}, "Abs"]}], 
                   RowBox[{"\[Pi]", " ", 
                    TemplateBox[{
                    RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]}, "Abs"]}]], 
                  ScriptLevel -> 0, StripOnInput -> False], "n", "1"}, 
                "Limit2Arg", SyntaxForm -> Limit, DisplayFunction -> (RowBox[{
                   TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                InterpretationFunction -> (RowBox[{"Limit", "[", 
                   RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], "\[LongEqual]", 
               TagBox[
                FractionBox["A", "2"], Identity]}], HoldForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", 
               "\"step\[Hyphen]by\[Hyphen]step solution unavailable\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Limit__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[A/2, {A, -1, 1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max6562$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min6561$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6561$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6562$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$3179896$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min6561$\
3179901$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max6562$3179902$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max6562$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min6561$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$3179896$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6561$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6561$\
3179901$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6562$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max6562$\
3179902$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$3179873[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[1, 2] $CellContext`A, {$CellContext`A, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6561$$], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    
                    CalculateUtilities`GraphicsUtilities`Private`min6561$$], \
-1], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6561$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max6562$$]], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min6561$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max6562$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6561$$ + 
                    Rational[1, 500], 
                    CalculateUtilities`GraphicsUtilities`Private`max6562$$]], 
                    1]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["A", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["A", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min6561$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max6562$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$3179873]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3179873[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$3179873[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMNAZifEACOhiTBpSkfK8XX1IL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJPWaJrz0ixI/uTCZcJ4ewnPN7eevFyZ+\
e5h8FYRsQYUEJvt4XMp4poSHsIdMWat5yIb/74oDx+KjiP4XsBIgF9z3rHilALIwXhmE/\
wrRebqduYmCGCEkXPnSYnz2HbC7RRTGRjmOX4xtlkbbUFJirTnps7JTfrFOTDv44PZOxi8h6XtDs7A\
sPCuGD0nZbVP+dugOfXbeGVPF5NHOb3hiNvxLAj0Mt0PmldJ89I1bUu+jlX5zVfNhrk2VOm/\
l86YNosh/G0bRgwO7Q1Xq29ZfhnbeFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l2XMDKdEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5MMv3yR8Wt5HKqyZD3fWEgA7VW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAIjPT5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DY6BuOY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$, Typeset`pod4$$, Typeset`pod5$$, Typeset`pod6$$, 
   Typeset`pod7$$, Typeset`pod8$$, Typeset`pod9$$, Typeset`pod10$$, 
   Typeset`pod11$$, Typeset`pod12$$, Typeset`pod13$$, Typeset`pod14$$, 
   Typeset`pod15$$, Typeset`pod16$$, Typeset`pod17$$, Typeset`pod18$$, 
   Typeset`pod19$$, Typeset`pod20$$, Typeset`pod21$$, Typeset`pod22$$, 
   Typeset`pod23$$, Typeset`pod24$$, Typeset`pod25$$, Typeset`pod26$$, 
   Typeset`pod27$$, Typeset`pod28$$, Typeset`pod29$$, Typeset`pod30$$, 
   Typeset`pod31$$, Typeset`pod32$$, Typeset`aux1$$ = {
   True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "2", "datatypes" -> "", "timedout" -> "Sequence", 
     "timedoutpods" -> "", "timing" -> "2.92", "parsetiming" -> "0.647", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa41921h43gd7hhf8dd3ia00002005ig5hb90ec86i3142019838491228908", "id" -> 
     "MSP41931h43gd7hhf8dd3ia00005dac1d41f98ei773", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "10", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa41941h43gd7hhf8dd3ia00005cg9b83ie46i4ch73142019838491228908", "version" -> 
     "2.6", "inputstring" -> 
     "Limit[( A Abs[1 + (-1)^n])/(\[Pi] Abs[n^2 - 1]), n -> 1]"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "", "timedout" -> "Sequence", 
     "timedoutpods" -> "", "timing" -> "2.427", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "19", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "19", "related" -> "", 
     "version" -> "2.6", "inputstring" -> 
     "Limit[( A Abs[1 + (-1)^n])/(\[Pi] Abs[n^2 - 1]), n -> 1]"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 20, 10, 21, 50.1774713`9.453083623988295}, "Line" -> 
    6, "SessionID" -> 34127454985094183363}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
   17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "Limit[( A Abs[1 + (-1)^n])/(\[Pi] Abs[n^2 - 1]), n -> 1]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
         Typeset`pod32$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1068.1999999999998`, {293.16083984375, 300.03916015625003`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, 
          Typeset`pod32$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa41921h43gd7hhf8dd3ia00002005ig5hb90ec86i3142019838491228908", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.85675691019634*^9},ExpressionUUID->"8b0493b7-6d86-4510-9979-903c07058f37"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{" ", 
     RowBox[{"abs", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"-", "1"}], ")"}], "^", "n"}]}], ")"}]}]}], 
    RowBox[{" ", 
     TemplateBox[{
       RowBox[{
         SuperscriptBox["n", "2"], "-", "1"}]},
      "Abs"]}]], ",", 
   RowBox[{"n", "\[Rule]", "1"}]}], "]"}]], "Input",
 CellTags->
  "Limit_templates",ExpressionUUID->"8b53657c-b323-403d-bca9-5cae0b5d57a5"]], \
"WolframAlphaLong",
 CellChangeTimes->{{3.8567591420847473`*^9, 3.8567591722246237`*^9}, {
  3.8567592296046844`*^9, 3.8567592570144196`*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"db5c4acc-f6ab-437b-aeac-2d1f187eb9e0"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Limit[( abs (1 + (-1)^n))/ Abs[n^2 - 1], n -> 1]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Limit", "scanner" -> "Limit", "id" -> "Limit", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Limit[Abs[1 + (-1)^n]/Abs[n^2 - 1], n -> 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               TemplateBox[{
                 StyleBox[
                  FractionBox[
                   TemplateBox[{
                    RowBox[{"1", "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "n"]}]}, "Abs"], 
                   TemplateBox[{
                    RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]}, "Abs"]], 
                  ScriptLevel -> 0, StripOnInput -> False], "n", "1"}, 
                "Limit2Arg", SyntaxForm -> Limit, DisplayFunction -> (RowBox[{
                   TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                InterpretationFunction -> (RowBox[{"Limit", "[", 
                   RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], "\[LongEqual]", 
               TagBox[
                FractionBox["\[Pi]", "2"], Identity]}], HoldForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "Limit__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Limit__Step-by-step solution", "stepbystep" -> "true"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Limit", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[Abs[1 + (-1)^n]/Abs[n^2 - 1], {n, -0.732051, 2.73205}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TemplateBox[{
               StyleBox[
                GraphicsBox[{{{{}, {}, 
                    TagBox[{
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1: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
LGXT9JAFMAu0dJiZm4T8qarCANkF+A/BhNQx
                    "]], 
                    LineBox[CompressedData["
1:eJwB8QIO/SFib1JlAgAAAC4AAAACAAAA07pPSIYE8D/NSdlKbR75P6YKS8tW
svE/05tugdDB9z/eYDWs2MnyP36UTjOf1PY/nmzwzMf48z9zUcDiosv1P57o
fSsvIvU/SK+7tcLA9D88st5GlDf2PyUlZEn8wvM/YTEQomZk9z+bnebbvqvy
PyT+FLo2ffg/rDvFYXSk8T8nO+wPf5D5P0tm4xT4oPA/si2UpTS7+j+zfmLy
Fw7vP9ptD/jn0fs/mDm9uooB7T+JY1uKCAD9P7ll0Bv2zOo/1qZ62SYa/j8X
uWcbu8PoP2RabGa9Lv8/ExPJMTzM5j+9YZeZYC0AQKEEGf2QtOQ/Fj1iXmG5
AEDpXIxUSMziPzNzFcMYUQFAlhulP8nJ4D9w4bFGDOYBQPzH+QSVwt0/fPa3
qP5wAkDOLBE94VPaP0xmpqqnBwNA8XDmWarB1j/rfP6KT5QDQKEOqOLKktM/
qcs/ijMeBECowUcDJprQPyt1aSnOswRAWnz2SzAbyz97xfymZz8FQGF/G35p
wcU/no4L/tZBBUCtPBOpR6rFP8BXGlVGRAVAXD7vjSyTxT8G6jcDJUkFQMjj
G4gKZcU/kQ5zX+JSBUCLIo9RFwnFP6dX6RddZgVAKtpR0HRSxD/T6dWIUo0F
QLlXgQxE6sI/9rLk38GPBUBBydC8+tPCPxh88zYxkgVAhVCmO7i9wj9eDhHl
D5cFQLA4P6dHkcI/6TJMQc2gBUA6V3pGuDjCP/97wvlHtAVA0S3gJOGIwT8i
RdFQt7YFQL2XjQIFc8E/RA7gpya5BUBPmc23L13BP4qg/VUFvgVA2AArq5kx
wT8VxTiywscFQIKDM8S/2sA/OI5HCTLKBUDIslNtGsXAP1pXVmChzAVAxc47
8nuvwD+g6XMOgNEFQHd4bpFThMA/w7KCZe/TBUCBQbysyW7AP+Z7kbxe1gVA
6W3YpUZZwD8IRaATztgFQCWBQn3KQ8A/Kw6vaj3bBUAZJ3kzVS7AP/UBYTM=

                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$4666083#1"]& ], {}}, {{}, {}}, {{}, \
{}}}, {}}, {GridLines -> Dynamic[
                    Map[{{#, 
                    GrayLevel[0.7]}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]], 
                  DisplayFunction -> Identity, 
                  Ticks -> {Automatic, Automatic}, AxesOrigin -> {0, 0}, 
                  FrameTicks -> {{Automatic, {{0., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.5, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.5, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.1, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.2, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.3, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.4, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.6, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.7, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.8, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.1, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.2, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.3, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.4, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.6, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.7, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.8, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}}}, {Automatic, {{-0.5, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.5, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.5, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.5, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.01, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {-1., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {-0.9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {-0.8, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {-0.7, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {-0.6, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {-0.4, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {-0.3, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {-0.2, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {-0.1, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.1, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.2, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.3, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.4, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.6, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.7, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.8, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {0.9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.1, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.2, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.3, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.4, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.6, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.7, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.8, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {1.9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.1, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.2, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.3, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.4, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.6, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.7, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.8, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {2.9, 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}, {3., 
                    FormBox[
                    TemplateBox[{0, 0}, "Spacer2"], TraditionalForm], {0.005, 
                    0.}, {
                    AbsoluteThickness[0.1]}}}}}, GridLines -> {None, None}, 
                  DisplayFunction -> Identity, PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.05], 
                    Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> 
                  All, DisplayFunction -> Identity, AspectRatio -> 
                  NCache[GoldenRatio^(-1), 0.6180339887498948], 
                  Axes -> {True, True}, AxesLabel -> {None, None}, 
                  AxesOrigin -> {0, 0}, AxesStyle -> Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], BaseStyle -> Automatic, 
                  DisplayFunction :> Identity, Epilog -> {
                    RGBColor[1, 0, 0], 
                    Dashing[0.01], 
                    Thickness[0.01], 
                    AbsolutePointSize[6], 
                    AbsoluteThickness[1], {{{
                    Dashing[None], 
                    CircleBox[{1., 1.5707963267948966`}, 
                    Offset[3]]}}, {}}}, 
                  Frame -> {{False, False}, {False, False}}, 
                  FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                  Directive[
                    GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1], 
                  FrameTicks -> {{Automatic, Automatic}, {
                    Automatic, Automatic}}, GridLines -> {None, None}, 
                  GridLinesStyle -> {
                    GrayLevel[0.85], 
                    GrayLevel[0.9]}, ImageSize -> 220., 
                  Method -> {
                   "DefaultBoundaryStyle" -> Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultMeshStyle" -> PointSize[Medium], 
                    "PointSizeFunction" -> "SmallPointSize", 
                    "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, 
                  PlotRange -> {{-0.7320508075688772, 2.732050807568877}, {0.,
                    1.9999999844306922`}}, PlotRangeClipping -> True, 
                  PlotRangePadding -> {{
                    Scaled[0.02], 
                    Scaled[0.02]}, {
                    Scaled[0.02], 
                    Scaled[0.02]}}, Prolog -> {
                    Opacity[0], 
                    TagBox[
                    RectangleBox[
                    Scaled[{0, 0}], 
                    Scaled[{1, 1}]], Annotation[#, "Plot", "Frame"]& ]}, 
                  Ticks -> {Automatic, Automatic}}], 
                Directive[FontFamily -> "Times"], 10, StripOnInput -> False], 
               StyleBox[
                RowBox[{"\"(\"", "\[NoBreak]", 
                  TemplateBox[{"n", 
                    TemplateBox[{4}, "Spacer1"], "\"from \"", 
                    RowBox[{"-", 
                    TagBox["0.7", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "0.7", "SRString" -> "0.7"]]}], 
                    "\" to \"", 
                    TagBox["2.7", 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> "2.7", "SRString" -> "2.7"]]}, 
                   "RowDefault"], "\[NoBreak]", "\")\""}], {
                FontFamily -> "Verdana", FontSize -> 10, 
                 GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "Labeled", DisplayFunction -> (FormBox[
                GridBox[{{
                   TagBox[
                    ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                    "SkipImageSizeLevel"], 
                   ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 BaselinePosition -> {1, 1}], TraditionalForm]& ), 
              InterpretationFunction -> (RowBox[{
                 StyleBox[
                 "Labeled", FontFamily -> "Bitstream Vera Sans", 
                  FontSize -> -1 + Inherited], "[", 
                 RowBox[{#, ",", #2, ",", 
                   RowBox[{"(", "\[NoBreak]", 
                    GridBox[{{
                    StyleBox[
                    "Right", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited], 
                    StyleBox[
                    "Center", FontFamily -> "Bitstream Vera Sans", 
                    FontSize -> -1 + Inherited]}}, RowSpacings -> 1, 
                    ColumnSpacings -> 1, RowAlignments -> Baseline, 
                    ColumnAlignments -> Center], "\[NoBreak]", ")"}]}], 
                 "]"}]& )], 
             $CellContext`TagBoxWrapper["StringBoxes" -> ""]], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "2.822", "parsetiming" -> "0.5650000000000001", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP136323ab30i6ae1fi9bf00001ea07facbdha0g06", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "14", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa136423ab30i6ae1fi9bf00001h990851b3f6dc5i4307842769377011871", "version" -> 
    "2.6", "inputstring" -> 
    "Limit[( abs (1 + (-1)^n))/ Abs[n^2 - 1], n -> 1]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 20, 11, 1, 5.4540688`8.48929558754227}, "Line" -> 9, 
    "SessionID" -> 34127454985094183363}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "Limit[( abs (1 + (-1)^n))/ Abs[n^2 - 1], n -> 1]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1068.1999999999998`, {196.16083984374998`, 203.03916015625003`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8567592654644547`*^9},ExpressionUUID->"1ab98942-3dda-4993-bca2-\
c9ecbbc923e3"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"2", " ", "A", " ", 
     TemplateBox[{
       RowBox[{"cos", "(", 
         FractionBox[
          RowBox[{"n", " ", "\[Pi]"}], "2"], ")"}]},
      "Abs"]}], 
    RowBox[{"\[Pi]", " ", 
     TemplateBox[{
       RowBox[{
         SuperscriptBox["n", "2"], "-", "1"}]},
      "Abs"]}]], ",", 
   RowBox[{"n", "\[Rule]", "1"}]}], "]"}]], "Input",
 CellTags->
  "Limit_templates",ExpressionUUID->"7be48dd0-fbf8-47fe-86ed-90cf89f27aa2"]], \
"WolframAlphaLong",
 CellChangeTimes->{{3.8567624013924384`*^9, 3.8567624135696363`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"67e63ffb-ac39-4c9d-8566-f682f2cdc1f8"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Limit[(2 A Abs[cos((n \[Pi])/2)])/(\[Pi] Abs[n^2 - 1]), n -> 1]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Limit__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Limit", "scanner" -> "Limit", "id" -> "Limit", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true", "feedbackNeeded" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Limit[(2 A Abs[Cos[(n Pi)/2]])/(Pi Abs[n^2 - 1]), n -> 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               TemplateBox[{
                 StyleBox[
                  FractionBox[
                   RowBox[{"2", " ", "A", " ", 
                    TemplateBox[{
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"n", " ", "\[Pi]"}], "2"], ")"}]}, "Abs"]}], 
                   RowBox[{"\[Pi]", " ", 
                    TemplateBox[{
                    RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]}, "Abs"]}]], 
                  ScriptLevel -> 0, StripOnInput -> False], "n", "1"}, 
                "Limit2Arg", SyntaxForm -> Limit, DisplayFunction -> (RowBox[{
                   TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                InterpretationFunction -> (RowBox[{"Limit", "[", 
                   RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], "\[LongEqual]", 
               TagBox[
                FractionBox["A", "2"], Identity]}], HoldForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", 
               "\"step\[Hyphen]by\[Hyphen]step solution unavailable\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
             "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
             "text" -> "Properties", "title" -> 
             "Wolfram Functions Site"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", 
             "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Limit__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {
    "title" -> "Plot", "scanner" -> "Plotter", "id" -> "Plot", "position" -> 
     "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[A/2, {A, -1, 1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max6418$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min6417$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6417$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6418$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2488438$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min6417$\
2488439$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max6418$2488440$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max6418$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min6417$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2488438$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min6417$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6417$\
2488439$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max6418$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max6418$\
2488440$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2488417[
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    Rational[1, 2] $CellContext`A, {$CellContext`A, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6417$$], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min6417$$], \
-1], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min6417$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max6418$$]], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min6417$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max6418$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min6417$$ + 
                    Rational[1, 500], 
                    CalculateUtilities`GraphicsUtilities`Private`max6418$$]], 
                    1]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["A", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["A", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min6417$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max6418$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2488417]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2488417[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2488417[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVtuO0zAQbSn3O/wBEs9IlErsCxLQZZeVFihJea83mSQWrh1sZy/\
8PHjsJmm23UoxXUCr9GFUT5rjmTNnpvPsSARJv9frqevGfBQsTm7h6akxYzHPRcHjD6e5BKWo4Mk1f\
HbXmBD0LjByBrHz3TRmT8g50e78Bt8nLCoY0fBNU0Y1BTXblyTPaKRqz0TSY/OTGRMRYfQnPB+\
OdnZGw9cOBmOZEK1BcvWqLWSeSaIg6SHQDWPeM8K/u+\
OT8vi5YCyEHwXwCNQj451KEhsYwQnDfLxvvdpM3cfENOExkfGl02TlOW57gdKS8nQK8xzfuJisl22B\
iUyV4+ZByc0mBbnwb+MDEdqYnMcmbc+WQL8wrhh952X1z7kb4PltW3gpTtYTh/\
m9Y8gb0fQY1CqdL1rXyTFSda2NfsHVZc2XrQZ58ZSp/5cOqdKrYQzbhgHzI1Pj9dpbhR+\
1hRc5dv1C3A+N+eIcJeC64VAJ7pOIC7aIopnywEm0fboqNw6Hca/iO0SnTwUrnMDEWfaL7Y/\
HFXi9KYRYu9kWpMPrGRBADsYVW253aUr1OCOSRAZ4cV2/\
bLKpqEPxuLN97SmPqRlgjpBNyxOag2Sp7kRH2dc/Km4ll3NNhrwfcA0pyI2iv4P1kYZcHk+\
FZyQhXtDUqzeHVVITIr1lPyhBwpxwipD0l/nYb+7hciWQqn2J6pKOxYEtzal/\
Ev2ywIfAU501d2zP0eXdtphNIE5q1QU0SZanzfaY7jeZbtzQHOi+JPiWxH+gd5tCtyn81U1hZQ/\
u1oRuTejWhG5N6NaE/3dNsBHjv9Jvs6K4tg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Values", "scanner" -> "Sequence", "id" -> "Values", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{"A", "\"\""}, {"0", "0"}, {"1", 
                 TagBox[
                  FractionBox["1", "2"], Identity]}, {"2", "1"}, {"3", 
                 TagBox[
                  FractionBox["3", "2"], Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata,\
numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.87", "parsetiming" -> "0.722", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP26211c4de84abiae49ec000023ai7hbi34973hf3", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "7", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa26221c4de84abiae49ec000029adhg608ee8599i6249686130609588165", "version" -> 
    "2.6", "inputstring" -> 
    "Limit[(2 A Abs[cos((n \[Pi])/2)])/(\[Pi] Abs[n^2 - 1]), n -> 1]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 20, 11, 53, 39.9472514`9.354061785513185}, "Line" -> 
    13, "SessionID" -> 34127454985094183363}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = 
   "Limit[(2 A Abs[cos((n \[Pi])/2)])/(\[Pi] Abs[n^2 - 1]), n -> 1]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1069.4, {495.46718749999997`, 503.93281250000007`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.85676241996291*^9},ExpressionUUID->"7c40c7a4-aac3-449f-b507-b12da7b27a09"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 RowBox[{"Limit", "[", 
  RowBox[{
   FractionBox[
    RowBox[{" ", 
     RowBox[{"A", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"-", "1"}], ")"}], "^", "n"}]}], ")"}]}]}], 
    RowBox[{"pi", "*", " ", 
     RowBox[{"(", 
      RowBox[{"1", "-", 
       SuperscriptBox["n", "2"]}], ")"}]}]], ",", 
   RowBox[{"n", "\[Rule]", "1"}]}], 
  "]"}]],ExpressionUUID->"e7fd002c-4ff0-4f9e-be30-56b0a857504d"]], \
"WolframAlphaLong",
 CellChangeTimes->{{3.8567690471371737`*^9, 3.85676910644728*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"1f09f869-47d9-4aef-b4c8-1fe4ac3a63ec"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "Limit[( A (1 + (-1)^n))/(pi* (1 - n^2)), n -> 1]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Limit__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Limit", "scanner" -> "Limit", "id" -> "Limit", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "2", "primary" -> 
     "true", "feedbackNeeded" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Limit[(A (1 + (-1)^n))/(Pi (1 - n^2)), n -> 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               TemplateBox[{
                 StyleBox[
                  FractionBox[
                   RowBox[{"A", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "n"]}], ")"}]}], 
                   RowBox[{"\[Pi]", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", 
                    SuperscriptBox["n", "2"]}], ")"}]}]], ScriptLevel -> 0, 
                  StripOnInput -> False], "n", "1"}, "Limit2Arg", SyntaxForm -> 
                Limit, DisplayFunction -> (RowBox[{
                   TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                InterpretationFunction -> (RowBox[{"Limit", "[", 
                   RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], "\[LongEqual]", 
               FractionBox[
                RowBox[{"\[ImaginaryI]", " ", "A"}], "2"]}], HoldForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", 
               "\"step\[Hyphen]by\[Hyphen]step solution unavailable\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}], 
       XMLElement["infos", {"count" -> "1"}, {
         XMLElement["info", {"text" -> "i is the imaginary unit"}, {
           XMLElement[
           "link", {
            "url" -> "http://reference.wolfram.com/language/ref/I.html", 
             "text" -> "Documentation", "title" -> "Documentation"}, {}], 
           XMLElement[
           "link", {
            "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
             "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Limit__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plot", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[(I/2) A, {A, -1, 1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3385$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3384$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3384$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3385$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2706434$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3384$\
2706439$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3385$2706440$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3385$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3384$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2706434$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3384$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3384$\
2706439$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3385$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3385$\
2706440$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$2706409[
                    Plot[{
                    Re[Complex[0, 
                    Rational[1, 2]] $CellContext`A], 
                    Im[Complex[0, 
                    Rational[1, 2]] $CellContext`A]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.24720000000000014`, 0.24, 0.6], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][Complex[0, 
                    Rational[1, 2]] $CellContext`A, {$CellContext`A, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3384$$], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3384$$], \
-1], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3384$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3385$$]], 
                    (
                    Piecewise[{{
                    0. + 1.0690449676496974` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.0690449676496974` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3384$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3385$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3384$$ + 
                    Rational[1, 500], 
                    CalculateUtilities`GraphicsUtilities`Private`max3385$$]], 
                    1]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Automatic, Automatic}, LabelStyle -> {}, 
                    Ticks -> Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["A", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["A", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3384$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3385$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2706409]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2706409[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines = 
                    ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 
                    Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2706409[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    All, 2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfEXQTfEJidGNMGlCS8r23xEksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu97TYxEk/\
V6vp64b80GwONnC0xNjRmKWi4LH+2e5JEpRwZNr+OyOMSHRe4TBDxI7301j3gs5A+3Ob/\
B9YFHBQJOvmjKqKVHTAwl5RiNVe8aSnpifTJmIgNGf5Nnw9YtXO8NtB4OxjEFrIrnabguZZxIUSXoI\
dMOYdwz4N3d8XB4/FYyF5HtBeETUQ+OdSIgNjODAMB/vW682U/\
cwMQ08BhlfOk1WnqO2FygtKU8nZJbjGxeT9bItMMhUOW7ul9ysU5AL/xY+\
EKGNyXls0vZsCfQL44rRd15W/5y7AZ7ftoWX4nQ1cZjfLkPeQNMTopbpfN66To6Rqmtt9HOuLmu+\
bDTIi6dM/b90RJVeDmPYNgwyOzY1Xq29ZfidtvAix66fi/uBMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5WfIfo9KlghROYOMt+\
sf3xqAKvN4UQazfdgHR4PQMCkhPjii23ezSlepSBhMgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5gs1B10lH35o+\
JWcjnXZMj7IdckJXKt6G9jfaQhl8cT4RlJiBc09erNYZXUGKS37AclSJgDpwhJf5mP/\
eYeLlYCqTqQqC7pWBzY0pz5J9EvC3xEeKqz5o7tObq82xazCcRprbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DXc+uF4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Values", "scanner" -> "Sequence", "id" -> "Values", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{"A", "\"\""}, {"0", "0"}, {"1", 
                 TagBox[
                  TagBox[
                   FractionBox["\[ImaginaryI]", "2"], HoldForm], Identity]}, {
                "2", 
                 TagBox[
                  TagBox["\[ImaginaryI]", HoldForm], Identity]}, {"3", 
                 TagBox[
                  TagBox[
                   FractionBox[
                    RowBox[{"3", " ", "\[ImaginaryI]"}], "2"], HoldForm], 
                  Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata,\
numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Series expansion at n = 1", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtX=x0", "position" -> "400", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[((1 + (-1)^n) A)/((1 - n^2) Pi), {n, 1, 5}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "A"}], "2"], "-", 
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[Pi]", "+", 
                    TagBox["\[ImaginaryI]", HoldForm]}], ")"}], " ", "A"}], 
                    ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "-", "1"}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "24"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    RowBox[{"3", " ", "\[ImaginaryI]"}], HoldForm], "+", 
                    RowBox[{"3", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "2"]}]}], ")"}], " ", "A", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"n", "-", "1"}], ")"}], "2"]}], "+", 
                    RowBox[{
                    FractionBox["1", "48"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "\[ImaginaryI]"}], HoldForm], 
                    "-", 
                    RowBox[{"3", " ", "\[Pi]"}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "+", 
                    SuperscriptBox["\[Pi]", "3"]}], ")"}], " ", "A", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"n", "-", "1"}], ")"}], "3"]}], "+", 
                    RowBox[{
                    FractionBox["1", "480"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    RowBox[{"15", " ", "\[ImaginaryI]"}], HoldForm], "+", 
                    RowBox[{"15", " ", "\[Pi]"}], "-", 
                    RowBox[{"10", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "-", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["\[Pi]", "3"]}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "4"]}]}], ")"}], " ", "A", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"n", "-", "1"}], ")"}], "4"]}], "-", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    RowBox[{"45", " ", "\[ImaginaryI]"}], HoldForm], "+", 
                    RowBox[{"45", " ", "\[Pi]"}], "-", 
                    RowBox[{"30", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "-", 
                    RowBox[{"15", " ", 
                    SuperscriptBox["\[Pi]", "3"]}], "+", 
                    RowBox[{"6", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "4"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[Pi]", "5"]}]}], ")"}], " ", "A"}], 
                    ")"}], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"n", "-", "1"}], ")"}], "5"]}], "2880"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"n", "-", "1"}], ")"}], "6"], ")"}], 
                    SeriesData[$CellContext`n, 1, {}, 0, 6, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "1", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", "A"}], "2"], ",", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "4"]}], " ", "A", " ", 
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", "+", "\[Pi]"}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "24"], " ", "A", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"3", " ", "\[ImaginaryI]"}], "+", 
                    RowBox[{"3", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "2"]}]}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "48"], " ", "A", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "\[ImaginaryI]"}], "-", 
                    RowBox[{"3", " ", "\[Pi]"}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "+", 
                    SuperscriptBox["\[Pi]", "3"]}], ")"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "480"], " ", "A", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"15", " ", "\[ImaginaryI]"}], "+", 
                    RowBox[{"15", " ", "\[Pi]"}], "-", 
                    RowBox[{"10", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "-", 
                    RowBox[{"5", " ", 
                    SuperscriptBox["\[Pi]", "3"]}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "4"]}]}], ")"}]}], ",", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"A", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"45", " ", "\[ImaginaryI]"}], "+", 
                    RowBox[{"45", " ", "\[Pi]"}], "-", 
                    RowBox[{"30", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "-", 
                    RowBox[{"15", " ", 
                    SuperscriptBox["\[Pi]", "3"]}], "+", 
                    RowBox[{"6", " ", "\[ImaginaryI]", " ", 
                    SuperscriptBox["\[Pi]", "4"]}], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[Pi]", "5"]}]}], ")"}]}], "2880"]}]}], 
                    "}"}], ",", "0", ",", "6", ",", "1"}], "]"}]}, 
                 "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Verdana", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "SeriesExpansionAtX=x0__More terms"}, {}]}]}], Typeset`aux1$$ = {
   True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "4", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.98", "parsetiming" -> "0.6920000000000001", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP5155146f632d3i641ae60000324f7ice0cbfg6bh", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "16", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa5156146f632d3i641ae60000389a34h3a73h14ae8350669649384844499", "version" -> 
    "2.6", "inputstring" -> 
    "Limit[( A (1 + (-1)^n))/(pi* (1 - n^2)), n -> 1]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 20, 13, 45, 17.1836326`8.98768992134246}, "Line" -> 
    27, "SessionID" -> 34127454985094183363}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = 
   False, Typeset`newq$$ = 
   "Limit[( A (1 + (-1)^n))/(pi* (1 - n^2)), n -> 1]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1066.8000000000002`, {655.9026367187499, 664.8973632812501}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$}],
        Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8567691172025824`*^9},ExpressionUUID->"acfa1f6b-6873-492d-97e0-\
2fa3d8e49cfb"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "arg[",
 Cell[BoxData[
  FormBox[
   RowBox[{"integrate", "[", 
    RowBox[{
     RowBox[{
      FractionBox["A", "T"], "*", 
      RowBox[{"sin", "(", 
       FractionBox[
        RowBox[{"2", "*", "pi", "*", "t"}], "T"], ")"}], "*", 
      RowBox[{"exp", "(", 
       FractionBox[
        RowBox[{
         RowBox[{"-", "i"}], "*", "2", "*", "pi", "*", "n", "*", "t"}], "T"], 
       ")"}]}], ","}]}], TraditionalForm]],ExpressionUUID->
  "828aea0f-9adc-430d-8b83-c965d764665a"],
 "{t,0,T/2}]]"
}], "WolframAlphaLong",
 CellChangeTimes->{{3.856769252057247*^9, 3.8567692663075666`*^9}, 
   3.856769332697263*^9, {3.85676938115767*^9, 3.856769383607299*^9}, {
   3.8567747199999404`*^9, 3.8567747676626234`*^9}, {3.8572879013089304`*^9, 
   3.857287902003873*^9}, {3.857287976823928*^9, 3.857287988978325*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"83ba9cd7-85b2-40b4-bf7f-2fd17431da4b"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "arg[integrate[A/T*sin((2*pi*t)/T)*exp((-i*2*pi*n*t)/T),{t,0,T/2}]]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Arg[Integrate[(A/T) Sin[(2 Pi t)/T] Exp[-(I (2 Pi n t))/T], {t, 0, \
T/2}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"arg", "(", 
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", 
                  FractionBox["T", "2"]], 
                 RowBox[{
                   RowBox[{
                    TagBox[
                    FractionBox["A", "T"], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    TagBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "t"}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "T"], 
                    ")"}], " ", 
                    RowBox[{"exp", "(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "n", " ", "t"}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
                    "T"]}], ")"}]}], 
                   RowBox[{"\[DifferentialD]", "t"}]}]}], ")"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "arg(z) is the complex argument"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Arg.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Arg", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexArgument.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Identity", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"arg", "(", 
               FractionBox[
                RowBox[{"A", "+", 
                  RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", 
                    "n"}]]}]}], 
                RowBox[{
                  RowBox[{"2", " ", "\[Pi]"}], "-", 
                  RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]], ")"}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Computation result", "scanner" -> "Integral", "id" -> 
     "ComputationResult", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"arg", "(", 
                 RowBox[{
                   SubsuperscriptBox["\[Integral]", "0", 
                    FractionBox["T", "2"]], 
                   RowBox[{
                    FractionBox[
                    RowBox[{"A", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "t"}], "T"], ")"}], " ", 
                    RowBox[{"exp", "(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "\[Pi]", " ", "n", " ", "t"}], ")"}]}], 
                    "T"]}], ")"}]}], "T"], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}], ")"}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"arg", "(", 
                 FractionBox[
                  RowBox[{"A", "+", 
                    RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", 
                    "n"}]]}]}], 
                  RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]], ")"}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Values", "scanner" -> "Sequence", "id" -> "Values", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{"A", "\"\""}, {"0", "0"}, {"1", 
                 TagBox[
                  RowBox[{"arg", "(", 
                    FractionBox[
                    RowBox[{"1", "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", 
                    "n"}]]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]], ")"}], Identity]}, {"2", 
                 TagBox[
                  RowBox[{"arg", "(", 
                    FractionBox[
                    RowBox[{"2", "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", 
                    "n"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]], ")"}], Identity]}, {"3", 
                 TagBox[
                  RowBox[{"arg", "(", 
                    FractionBox[
                    RowBox[{"3", "+", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", 
                    "n"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}]], ")"}], Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata,\
numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "3D plot", "scanner" -> "Plot", "id" -> "3DPlot", 
     "position" -> "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[Arg[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], {A, -10., 10.}, \
{n, -2.47702, 2.47702}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            Graphics3DBox[{
              GraphicsComplex3DBox[CompressedData["
1:eJyMnXeUFcXz9pcl7JJzzskAioAEgYW+IDlJUAkiOUoQRZGcJEkGwUzOSJbs
wgwZESVJBgWJyrLknF64XU/d7zzjPb93/+HwOXXq9lRXd1dX1/Tkbf1hg3aR
ERERHVNHRCR89m/JRWn2PX2a333yau+4+H0J3UKtk7qBBxeNWz1VnkkF8vr4
V79nPl19Ug7lhYUvTp5+UNcTmXzyW4J60vrklwXlk/j4qiC/4zCfYbkBH/dH
xQKd8yd051o9AeYb7e/6+ALbTh+fZJ/LxzdZO/i42C0cdyd2HzO47KMI90Tf
3/YX27pL7Ql+TDjsyfKwJ3PYE/y4cNiT5WFP5lkPXztQp3XR2AnCy/e0HHaG
/HvvvFh615QotTNz2Jk57MwcdmYOOzOHncNwt1p782qKtx45o6pXWfpWsSMO
7Aw+WjjszBx2Zj2wM/gXwmFn5rAz6/lgeqlHUaNqxIC/XM1y2Bk8amjf5vvL
JQnAzsxhZ+awM3PYmTnszBx2DsPdLpfbNZo9947Tb/66fDlaX1E7M4edwfsL
h52Zw87gA4TDzqwfdmY9sDP4nnmWw87gZRJ+VeuTXxKonZnDzsxhZ+awM3PY
mTnszBz27PB59hmbnl5zjvyw5K1KE+6qPcEPC4c9wQ8Jhz1Zz3KxJ8vjecGb
bjzeeNVPDwyeF7yZcDwv+HvC8bysB8/L8l6/uuD0K9y7SMXyEa7Xr0Lc61ch
7vWrEPf6VYh7/SrEvX4V4l6/uuDUE+71qwvSj9eN169C3OtXIe71qxD3+lWI
e/0qxL1+5eNu1yA/7NRc3LzitGWJ1M7MYWfmsDNz2Jk57MwcdmYOO4PnEg47
g9vnOqN2Bi8rHHYGLyccdmZ52Jk57Mwcdmb9aGeHeivrJ68TiNk2vc/ciO9r
xKKd75zKdeHomTIxrddmm32lYeVYtBN8lnC0k+UnSjtZHu1kebQzDHc72fYb
sb/OP8zhD+C1hMMfWB7+wPLwB5aHP7B89qnWH8BzC4edwUtZ+zuwM3hp4bAz
c9iZ9cAfmMPOrAd2DsPdD+x4NP3tvKF2Zg47M4edmcPOzGFn5rAzc9gZvIFw
2BncPtd1tTNz2Jk57MwcdmYOOzOHncNwrGtG1kdD66mRddDQeqrytJ4aWR8N
raeqB/aMHWL52amWw27gb8UG1ztnjtgNemQ95fXXyLrp0Pqr8rT+GllPHVp/
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
6FzMO95D54/e8Ruqw/GO31Bdjc4PVCcDzvUV4HzOBc51DuCI52OkngGc6xO8
4yiUV/SOo9B+2Tu/hfJvqofqNLzPG8qPkX7NI3nnyVD9knfeC9Ujeee9UD2S
ylN9ETjXdYBz3o/ar3lL731EoXjbe3/R/7xv5bmnKMS99xTFORKv0j1FIf3e
e4pCerz3C4Xiau/9QiHuvV8oxL33C/3P+1/IY5O8936hkDzsw3E47ON7X0bs
w/KwD8ftsA/Lwz6sH/bhuB324fgc9mF52Ic57MPxJOzD+wLEtx3pXgLkZ3C+
87ec76AuWuSd9+W+HewfcQ5VX86hvOPxoIzHv3Q8VrLru0lo13fN5w+X+PPh
z1Y/2gNeapq9Xwj7a87T/iIccazcn+DgPI7Ppx7Y9jhYr+25zB0Deei/JfrB
WT/yljw/gENe7m3Q350ldk5un0vrT3j/WzjYjzc1risncZ30u5uiQfBcwN2c
vezTbDmWly8lfg5eIUfNy885/Bz8dPZKbz3nP4qfh+TLrn3O4efgJ3LUbJTj
GYefg/fP0cA856slz/CzPadwJzws+cPChpXKu952Bq5nnlUpbY7lG0t42xno
lH5WvgzP+BRvOwNlc6xMl+YZX+xtZ6BH5u+epHvGqZ3P+IHhz/Uv9bYzcC3z
8Ree67n7cYJy3RLkdzOlt+3skTl7rz8fji0/IMvTUREv5HETZrO8zrjoWSm6
TS5f4vd7qwtOyeZOn2LP8c/m37j+tbNzNs7veeudmn9mcOVcxo1wV5Zrd7Vf
7IYOf10+VTeVm0Z4w7bjYysPjC7f5POcq/Pnz+duSW3b03DaqDNm88iN37Yp
lazL+FzQE4gIJM+cbtnmmOUzii2acDRLiEecXtlhkhuz89QrNVfnTf8/vOXZ
se32xSwvWe+Pnw4l+x8eMPkSb4zd1GLsSw/2PgmdH0UcPrci8aKYxLOLLdv8
2xWnZELbzl7ZH/zWo0Db8v3q/TOz+IG/IP9M3+kfon+bEjvxs1et/JCgHUy3
r4fc+fynBeWx/0W/v/7w9veF367EPNDsxu3UJRpW2tjKq/9Ze/LUr/50SUzC
c4cKv3gm0p0ieib//nP2De3Ll9/lbf+z9qS/MavT8tg7xz7v+Gbrm//DB/W5
/veS2KdnPXoC2T8tevardOU3rvL6Z2D7tU/Tz3rWHry3smtrmnp/DYxw3y58
a3+uJtHuPJm3mcfKvM0c8zbzyTJvM8e8zRzzdrPNKYN88Pl7QY5xtKpe94R/
3F1mFliu+UPmGC/MMV6YY7ww17w68am9Jz86eneZ796VddMarrx4c5nvnDfn
vpLDs8/I654tvmDkj98uddL0WXtlTatot8Gp9ovf+yKnu114WuHts7WuPehA
Zvd3ku/f6P24OdnTuStJvuDLK7J8+Uu06xCfXfWtFevWPnD2kp7dR8580eTv
3318e86KPRYlvWUaPqxydefAiMA7p4+MevPZ80YVfLLDKXbBLDm3c3dsqqcm
0YMB0wa0jXbz33ixTPZhF30c52XcvxUm9ys1eE3ymCIz09xLUOCJ8/jRrHb5
F0cFqpy416d9iTjnq47vfPB60nhn0BevZD2z+IFT89jSiU3HPzXf7JmS/Ne0
8U6z1kULHpp610TPuXiixt3IQPVfxk/pnTPeObdj/aUE8++a48c77Vo1+4mp
bLk5Y7mTOfUvK154EBFYTO28MvnAR6c6pPDxlinjs+z+N72P19p3o9fcmVkD
PwpPKLzEl3ePDmqc2yefrvCAHEtH5PPJ90xaIUWa+8vCvo/JdkO+lDnypcxz
SL6UOfKlzJEvZY72TK9zrkXFiKdOWtf6P9rDHO1hnkvawzxa2sMc7WH+RZfL
Rfe+u82ZVmBN9YOz4pzuratsb7zjoTN/xSeNqq/IGZP8yKIhfe6fctJffL1j
7KiLZsywvY1HTlyu+dVDlF/lcZ1C8qvM80h+lXkpya8yR36VuZ7fEdf7N4hj
fh49a7kzJCLe1B74XTDu+mOqHUfNC3drnanPA5Mm+duNBv6ayB0rzxvuPcRp
1p4mjbWn+hVz9CNz9CNz9CNz9CNztGen9bfAO9bf1K+Yoz3M4efM4efM0R7m
mK98fivzm4xrR8Z1oOk3I2d/NfwO5j3lzYc0HPe4boIA8wQHfksbuSKJj78e
/X7dVbEpfPzfHy93bJY6rY8nqvb6iJIZMwS4PYe7XdtVekemwFLhiYXHJ33j
Ypo9WX3cLXb7pfT9c/j0H90TUy1uSG6f/nce9Kt8N2ten578dt42U+y8bZbv
e298xq/vOr+fyFvlx1m/mm1HzvY69mw+yXBx4pMXn/X7oUrz+7ZMstx8uqrU
hrc3jzcRg/69t+XaNw7syfPnxQFTm1Uuetdn55pVGscfTRzla/+480WP7CyT
1tfO3gtKlp59LZNPvm3nsl8PmJ/D97wvfj394Suv+Z83yVcVk93/4aa5dznB
6arR8c67BbPteu+ru+a73JcmOpnyuZXif3i+npqTbnA9DZyOv7A+emEeH6/R
79ets3vmcosKPyX8cLZf0pf6PrtbiHiL9Tva7HKy+OQvN9r2U9NzGd1ixHvc
2ZzwSnR6txH9buQUp+HAV9P45DN06FMt/5xk7kvEX5nz6cVqVxK5aYX/KXzw
ljOpjnV54pQk+WUxR+vme3rDeZl4mxNlyy2t8qdTnPjTH0cvnX3zF/PI2tM0
s/Z00O/sD5EyjnzrstcflF+WccTy8BNelw/JOGL5Pl7/Ue7IOFokPFJ4a/Er
lsc4Yg5/499Nmrb1vplJljmNcqSoW2xlQvfIoMg+2cpcNFmEx5/+8J0GwyLd
TZ+Pcpss+Uv30byOH8n3T6eeQ/O78RTvHYko3fxAyvzuP8R/Llwy2F/Hif/6
3sBbbW/nx7gwif873gvI7+q5G7fn7M4ZB8/+kM83vo6I/s3CMwhvWM+2P4r8
8HO73vnuu0D+gX8XdbD/HRel9nHUqTI/LnWnzFFHyhz1mbyvWb+t6dA/+y93
Kj84dLFPradOxw/ybbq9boXzzfHXU22JWuZUXzfto5KfnXHGxf3erkDVSN0H
nTvyReSzOMHZPPZJUE/OGxeD8w/vL7A/Yvm38tr55zDJY9/E8m2b2/nnBMlj
P8Xyvb+3889jkU8t8sifsHyeFb2D8w/rx/6L5b9593Rw/jlJ8oMKV2788HDW
2D31czVq2P6myZgk18LTu2+a1DJe1qYKTM519o4puWPFydsz4nQcjRvWa9jJ
mPvm1RG3Ko2scN68JPyDiAbvVbnwxHyQ+9aG6Qt+NvAfjh8Sif8wh/8wR90y
c/gPc8kXBWIH2jiq68V7Hr/icXc/jW3/G0Pu576XLUEge4J//tm981fnRpS1
z2ut3omrWiwykORh8rylx55wer0ZXJedOmvWxpc/98SJXn23+rQTP2tevUV1
G5eelLjUyVc32Y/NljvvvHI9rlCtp6ZGo0Yn97or1J6zNk7JcqRapDvuSbcF
7oKTptvJisHfXfRnmdojiyVwk0cvu3fqyW8mu9Qx8nhBvSJz1CUyryP1h759
kNQZ+vTL826ZMrtIyf6nnb/dU+XrL4h020wvsbRt8TzuRfKrP/u2fXRlSTZ3
Ne2vb65r8UO6uxncYySfLm51r26DUrlHiFdov3jd2nQJ3V+Jzxg8+u+Ek+Md
9n+002Ta2fn4+vvmSv0Xzp9YfdZ8IfMb+wnqQpnDnsxhT+a1xJ6+eFvsybzb
34FatY4ed+rUXnBgwL9xzvpVP81NNe6h1mFi/3L++JVgHjiN3b+7NWT/XvvL
351bPzxwcixcuGX+D0+dBJ1sHqCI5AHSijz29Q2svNazQf9F0V/wjzsJL+fN
536yNX2l1ininfIj6+duteiB0+L8pfkPxuRyPxZeQfin+c5Vy304i/sh8TEt
/rr4Zu70bnfhMcKrlFmdev++ZD49F9r0We42TBWAnhv7S30x5du75tStiut+
Pp0hAD23hO9YWzXL119nC3xM8o03Fowp82Ie1XNN+N5cL8XNi8yv/LrwA5aj
PUbaY96zevBcJiB8j/1d5ZD/27bT7SG8nPBr9rlUvqLwstYOeC4jz+WMsHbz
8Y+tnQNdhV8V3tT2C57LiB2cArYfAz1ID+IK6Xenpt0XG+JGuL7PCPlaIn9+
qN0vF1rVdMml9S/H5BnaZOz4EiViSd6IvIP9NdfnYJ/O4wJ5VOY4//pv+Uw+
jvMv5sijMv/su6XXq5bYYu4/7v/C6+Mj3GP1y1VJXvFZ3NLhUL6S0/4we9Mv
bfV8nxtVo+XB5/KH2nxXv/TWreaHOLuvOSr7mm5LGs/dHLXMJDt3+fg/tc45
m2Jf3b3uzFWzLKLp/Od82LAnj2++c9Y5daBBheYt4s0S4XPmTzj7628rnTe7
j+sw4IuNppPoOfb9w919+m9wlv5VvM3Lv28z69/LWqZwva1m9raaNX5OH2/G
nG9+run0u85PNXPOC+qJ32kyv3zDLNl+qtGO4Y8ctKdOoZgi6ebcMLtb7px6
s9pjZ7787rXTr3y7o9dts2Z8k8YvnYpwO4j84mJrFv36+JaJOdR69cR+Ee4a
kb94e1rGQQfumtieByq4qyNd6Gk5LWuivnXumdz19px5N1NCd4Xw058fL1r0
WRxuNm/6dE3DEN+8oNnYQWUTummqD8i8NnUiN1b48LdzZ0r4ONLtnrfXhjrd
Q++7cZ6nR4OOnZ/Fe+Zk/M1/LvV9bPofGl4v50tR7oK/cwTtcGDOtWNn7zw2
Lc8uu/XTyCg3YUdPPxrpR7fGiI6JnuvlOhOKwzVOeLz93MLn+hN+NO/0gkkJ
3OWH49/stzCJ+6W0P0XNC41e2JfA/ST6+ozz1ZO4aete3NW400LTp+7HGa68
EhH489vZvTudiA4E6iyvt/WZ/CcjE/71TE9g24lBVZ/pCQTE/h/XOfdcT6DZ
i7ee69H3gtkOGyUPhnF6wc7nDt6vZHm8L8kc70Uyx/uPzPGeI3Oce/4f7TTS
ToP3Vlge760wx3srzPHeCnO8t8Ic58L/nZ/M756Zbe155NiV/73HPiDcNBlk
5zdaTx1ZT52WNg/vfG3z8Obg3Uaf5533wCSRPHxVyrdvsOPXmSvjd/DkRfWK
brxtSqX8eGCCQuucif3SfHgl7xWndvf0zYe1fqjn4Dnkd28MsPNz/tNXs3T8
6JaJtfODM9POD6bDqT1/da6Q36360sP5B5LHO8uGvX5p/7P193rf3a89aZ3H
fVP4CuF3S0x4mid1dpVfIjz1x6OnV2mc0a0sfLnwGs1TDvyjUmofP10hX8WN
Z5IGoH/QH2+7BZ6tv03+nhKxYX465UOEV5n7XcspzbME8LufC3+143S3e8Zc
AegfLHxMxgZpXriQV/UMED7OcreK5Uae1xS3epTL85pq9ndhB/OT8Oa2nXgu
5f/Y54J9VL+xdkA7jTyvk9TaLVBJeH/hd6ydA2iP2MG5ZvsFz6V6pB9hH5WP
upom0cIWed1uK0Z2X5843vnxQeeMPyx74LyQPeeCntE53a7ClwqPaZyl+vf1
M7sfCl8svP6U9Jec79IqXyR875ycaX7ZGeWTv/hR9LW0VxMH9iy3PKpFji+b
Tr5rXnkU3bjt0jQByA8XntlJuc60yxRAO4cJjxiSLkv2HDl88j1nJY/p+08e
n3xcwlRxl7blD+C5Phfey8qjnUbaaeKtvNtd+ALhiezvqrzYzWS37fTpKWaf
S7nYx9ywdnB/s3YwhR5avtXaDc9lRth2OnWtnfFcRtrvlLH9gudSnsf2o+oR
OziJbb8rHyr84dKEE0q9ERHYLf2SSOwz5O8sy6+kiXR/FV7EttOJXhaUd6Uf
TWFpf08rH8BzRYv+A6X6/xW5dbNzpfzZu7efXDNFui4f1H/iXfPFLzWWj9zW
ybm+qciAzk+vOYVam/PbJoTiT9QLSd24zmP8vRKqIzJSR8T37zly/x6/b+7I
++ZO/WKdt7116Y6Ty7HtOdvKtofqmvR7ZAkubCg3+vc7BvJ17lXfWuyZfqrn
0e+t4Bycv9tC3x3T76TQ92L0e2qIe/l7Z4iT+ZwFdWLMESczR70Bc8TJzBEn
M0/qPdfW/D/Oi5nHyXkx81be82LlOC9mXlLOizn/ifNilofd+Bythfe8SfPG
sCfL47yJ88ywM8vjvInz5LA/y1+V8yZuD/qF5XHexPLoL5ZHfQXOzV+U7zhk
nOA6NwfEmdf6P7m8c2CE23bMk/FvPpNvOCfj35cH5w8kvdSn6lvP+M9zjqZL
0DR0HwXnFfd543NH4ijNV7PdkJfjuBp5uXibr3MmX7znOWcMl8dj3u/+uTFF
l9xHPYYr9Rguxc/azjUzxw9+/v+P6f1l5Mn53qdTC+8v6zE2MsB2W/lawu6F
Hqb0cbdpkm+6r8rg40tzJr9Xq3M25W2E17wWtTh92jw++QYDk11oliZ/IJ30
y2Lpl0orF/ZeMnK50/7rW0lLlI1wu33Xvka5E/PMvlaj7h989lz8/mZvOcf3
5cO9+wW1D+Yr5snk3J/10P5C5VEPwPK071B5vIfF8n29+xGVR/0Ay9M+ReUx
/7P8VO/+ReXhD/zeKDi/B7omw6L7oz9OHGggdUGNpC6o2m/HmuXtnsbHi074
M/bRC5l8PFvDszmOnsru45HJP9nUZHeeANcd9e7Ss9vOufl9HO1Enfxwec9U
12UaR7IP8o3H5pXXH91aaqnT/nK198ceiAikfPV2ss0/bnNq/hNV7INyM/6n
Tu/Z37yZMfS7rvyu+TKyX5K3KkcHeJyW2FbpbOSxtD6ee0S1N/8cn9nHU9Ss
PXt91Zw+3nv4gsG7B+T18Tab7fnyZspL0z5U+/2Esyt4vryb8sy0P1X564+2
Bs+XOY9N+1aVjyprz5f3k3wa735W5d+I/yR4vryN2l/Ou89V+Z37DgfPlzlP
/qt3/6vyA6bWjDvbZrvT+FybYH3CRy/nfZ5PNnPzTK7+87P96agXd8UV7HjH
tMqSqGKN/PGmR7OzPzyfZ/g+h5J7q+Rp9dlTrC8BmccCH3Z9pV6Hl5MHighv
L3zm/WzR42ulD7D8mNjcHT+IzOrjnw4ssKvK+lw+Xmxmhslp3sjn4/DDcPck
/Ptlxkknkl92jh3e+NmDxI8dyPN78a/HvDrskyFnHNRvDLb5dp0Hjkkd0Rl5
3xwc7493kvfH611c8+3z9ZfH6UZvPaH67VqZT5hXlvmEOeYT5lllPmFO84ny
iz2/S9r+s52xnCfJPKJd4GLpM774Iec7LaOflLzpIL9RV84dynv9QeW7iD8w
J39QPtrrD8rJH5QX9fqD8mS2H1GH40gdjllgPpv3fH3n+XbA9kHtn6/vzBcV
rPLl8/Ud/F3hUy7VuPl8fef+dd+Zv/D5+s56Sqxd2GRwXD4fzy71Qq2kncOk
nVm+K1/gxsyD5ouPPppjnu0vLta4eiZu5QOHnkvri4ZLXMT6J8s87GuPzMPM
MQ8zj5Z5mHkfmYeZVzllzzd7R/61Jm5HhLvo6uVFw0ZsNbQeObIeBRb8MqlS
i9Gu6X72VKapM544K+40vBSRKjoweKWth5khefi/JA/fIMniJ9fLmpikry9/
pcu+887K/et3PMl73SD/nCxrVPfndQLfr3177XsfXjbIew/dkPVLM/i0s+63
3oUTXPnHxIy4WPBci7xuZ6mjOCF1FE/Klrpx59187tErlv8lvHKyktkC/+Tx
yUcu2fN903O53ZRUjzG+1u7LcdE53bep7ijdTx2Gpruby717xSs/tX67P+Zk
z+G+QnVB2f7dWW7gq9ncZKR/zsjto9M2yOyWIPmXrrUuUDqQ1Se/clzLT35p
m8mtS+0p+uLWE7N7ZvDp+Xm7W7jU92l97Y95tfm2975I73Jd065f38sQvySN
y3VNY3b1uzthYEo3P/GZiXt9vXpXlFuW+II/Vu6KmJvcLUA8Nu3SjgXjE7ul
iK+t1KP08bSRPvmvn55c+nj1PYftub/uwuiapSN87ezxtEnQf3LmWjTt503j
nOmNe25aUPAb01D87ULS8Yt31NvqVO1Ts3tMo9/Nvsw16p+KuO28Snq+uDnv
1NgJ/zpct7a3wvS4yIUbnTzEb+cfmK/OC2edF4jXq5Csb4MGB2IlD2wqnLB5
dZwHvV5/5721Za6bVokaZdie6qGDc6jXvn7p9PN1fESmrA9e+jaB26CyrXN4
Ndkfg0eVu2WSz243/XbfG3putdDM/j3P2Tvm8tV0U537CfQ8aOrbGWsdj7lv
rh4e/XmjAwndxcI79J75ccNhkW7FBaWb1X0lsdur1+Fg/fyL1P49r9jf/azS
d1vmr39k+gz547veX/5htnvHu5Hx7h557cP2z9cdnldnyu++XLDtw0PVIt35
g4s9PTcmsXtn7aXH3/2Wz21H/onxfjrhmDKH1t43HSYOeSG+eCK36YXv8307
61ez8Kd894890//eW7lLvvhMf3z5O0F71ng5fnvfUxGBX+fNHpl+R1Qgn5zj
JB+5r8L9bAkCG7tlONuvXVTgvYOlgnVix2h+2JV/xPP9hsF+s7y8zwvO94iW
lnijpcz/S+R8X98XfrArmP+X991UD7+3O3OWfZ8iIY33d4fY9ynY/7s6rYLv
U+QkPuRRs+D7FOlIT9Eey4PvU+Qg+XXH6wTfpyhI/EavXh/WfiHeQX1CPdQn
SJzB95zjufi94AINrTy/Fwx5fi94XefSu5dsy++rLyV5fc/3wke2voXbfzaP
rW/JR/ze+7a+hefJnKVsfQvPY9WW/xisb3mD+K8LRwbrW3j+oX43eM8R7ef3
hb3+4L/HmNdZfQ+ROOq4mKN+hjnqu5ijroZ5vNR9MUe9DXPUgzFHHQ5z1Ikx
R30O8ybLy2xbHZ3Y977MG1u23z056IGpIn77l5zf6X107e0+esFBu5/Se+eI
6/1yxPUeOeJ6XxxxvReOOPxk2ysVp/be/8T0GDEgQ6sS0e6WtV9EXi9yy/SW
/d3xoh2C8aHed0p6kuD+UuJxuI+UuN4vSlzvCyXe9uawx/+MuG++ojgc7c9w
LOu0AWMj3E1F+9xf92bouVL/nqvp/LYRgSYbSqU9/Xl06DsjpL+l7UdX9iOO
7EecXvZ39f2pgTKvXsk/47l9sL9zPhfeWvSg3+vLfNVP9EyWeHuo7Aebiv9g
H/S3+El62W/L+79G3hc2P8v5b3FZr/e+U2xysZJ3zR/b1/V5vr6fzr0wOM/f
dG8GzxHoPRdH3nMxheT9X14X7tesUXNOubzutr9nf/Tg9jWTtUP9r76dftck
PTi2RFc3h/JMwnOn+eKPiUkzu1uJl6wz9JM1DdL6+FcZnr60pnSU8gzCq1f+
5teud9IE9Hdvlkr3/pwHTvGoqYVrLMmkPJvwHLtnji7QNoePf1714O2BKfMG
oD+78IfzD829cim/T144nsuRdjrDrB6008koPI/9XZXPLLy0bafKQ08d+1zK
IT/G2gHtdKQ9ppi1m3Jpv8lp7Yz2q3yU7Rcfl35UnkW41LlpPZ7UrTlUz6ac
6tm0Hg/1bOBG+FWpZ+P6Papn0zo91LNxnd5HUs/GnOrZlOeXejbwm8Klzs1X
j9dS6hVR/yb1h4bqFVV+tNQrgsvzmje99Yoqf95br6h1dye99Ypad7db6hVZ
vom3XtFIvaKz31uvaKReUe8DRF3KMalLQb06+FHhqEsHPy4c9ecsjzpz1j9H
zsXA37V1L3pfB3hj4TjnAm8kHOdZ4FI/o/d1sJ5S3noblXe8djDSTr2vA1zq
dswUr32MPK/50WsfI/YxZB+VX+q1j/7uPK99jDyvQ/Yx8lwO2UflyT5aX0T2
UT04H2c741yD+5e4PhfpCbVn0/qmrbLkc3Fv0nH5TkH8gdbntxTNo9+bKCTv
j4CzPOzP75vUvdvpdvKtWXx6IM/fR4A886g8scn23szg0wPO8q70L7fnxt/u
B4sWJfNxyPNzQZ71ty3RbkrRFAl9esBZ/kepH2P5NzZ0e+di7z/1OxGPelv5
xbLuczwv7fF9r0Ta7+NiHx8XO/u49IuPS7/7uPiP73u18CvcNzhavmcB/2EO
f2AOf+DvYqDfmaMfwb8Qjn5kjv5ijn4Bz+CV938nV+zMHHZjDvvg3sV+8p0O
2Ic57MPf9YB9mMM+zGEf8AHCYR+Wh324PbAPeCXh8Fu+TxJ2Yw5/Zg5/Zg47
M4c/M4c/M0e/MIc/h+Faz3NE6nnQX8zRX1z/g/7qQPVI6C+WR3+xfvQXy8Oe
4FKPhPlNeVPhsCfLw55cpwR7sjzsyfphzzDc5e/LeP0/xL3+H+Je/w9xr/+H
uNf/Q9zr/yHu9f8Q9/r/BaercK//h+5H9fp/iHv9P8S9/h/iXv8Pca//h7jX
/0Pc6/8h7vV/H3f5OzXoL+boL+boL+boL+boL+boL+boL+boL/BywtFf4GXk
3lr0F99ni/5ijv5S/cLRXyyP/mKO/mKO/mKO/mKO52on32XePN1+lxnPVeCX
03sr5Y6JOZRoQt0amarG4rneOZXrwtEzZWI+W5tt9pWGlWPxXOCzhOO5WB7P
xRzPxXrwXCyP5wJv7eW+763Dr5jDT/j76fAH8BjhsBt4KbmfGXbje5thN+aw
G3PYjfXDbsxhN+awG+uH3cJwl7/3hPHLHOOXOezMHOOXOcYvc/QLc4xf5ugv
8A+Fo7/4vmj0F3P0F3P0F3P0F3P0F3P0F3P0F3P0Vxiu9cay7huKN5RTvGEk
HjAUb2jdMsUbKk/xhuqneEPlYWeu36Y4ROuiKQ4xEg84FIeoPMUhRuIQh+IQ
lac4RPVTHMLc5fvKYGfmsDN/vwx2ZnnYmTnsDD5IOOzM8hgX/Lvwf37vEv3C
HP3CHP3CHP3CHP3CHP3CHP3CHP0Shrv47sBE+e4b+oU5+gV8knD0C3P0C3P0
C3P0C3P0C3PMV+A5vfIB/p4C7MwcdmMO++B9xli5Tw/2YQ77MId9+F4+2Ifl
YR/wjcJhH5aHfVg/2s/fP6W8U0DyPA7ll1Se8ksqT/ki5ZQXUj2UF1JOeR7m
vu/KUX5GOeVnlFN+RjnlZ5RTfkY55WeUw84pEg9/8OuVBO6OD25vL1f+qI6j
od8O7PH+X5HuluRD6n+Y4m9fHu8lyuMlEz0/iR7YGXo2iR7Y+bHoKUj5N+hZ
Jnpg589JD9pfdnzx3K8Vf+J0Lt11VpMfd2i/lxE+SDj0g48UDj0tMzSpsWPk
PSdd/WKran4S8reG5WuX+6fzA2f5g4VVeg/XuAvj2plI+ajmoier6IEdGoie
laIHdqgieqZQPgp6sose+NX7wvcfLT3/UuWQnzBHvzPXOPnhnyNWn7nh9Bo6
6XzR72/p837QY9aHi7fecnJ0+axv7nkat2B9cQZRfqmD6OkjevC8nURPbtHj
jffuOEMpv9Re9PQTPXjeHjWX9f/i9A3nRKXfPo2f91j3WR1Ef/RnI7+6XFfj
SYlv7zilKS8E/asP3d6yfcFj3Wd1JD3euDqkB/ZsJ3pWih6NH0gP7PxusN//
dbb8uHTut58/VrvVF75dOOzwlvCdwmGHOsI7LD0W+b57S/eP4B2Fo53M0Z4K
Qf//01l+OPb8yyU0fyvj9G8nc4Lso1av0/Ua8bbTn/IqpUTPCtGDfh9CetDv
HUXPAMqrvC56VooePG8R4d80ybmhylqdHwIDRX+C5XNeyjxX46VAe9FfgvIh
RUXPd6IH/T5I9ESKHvQ764E9uT3o9wGiJ0L0oP0pgvKbnAFB+Z3a/gJB/rsz
Icg1rgi0kn16ccoPpBE9Q0QP2s960H7oKUb5gWjR00f0oP35RM840YP217Xc
rLBc4/b2Vo/ZZvWE9kf/lKzY84+dMVc6FpxXc+0BzQPUFj3LRA/a30r0bBI9
aH+G4ntWztq8N+aTqLiSEdePah6goehZI3o0HyV6fhE98HPpX5PF+qHuT4cJ
zyQcfjhCeEbhsMMXwtPY/lU7vGn9wSyw/qB2+FT21wHa148UPalED+xQSfTM
Ez2wA/QY2tdze2CHKqJnoejRed7OSyaXnYd1fZf53/S2862u79iv/UH7xM6i
J7vo0X296OkpejDeO5EezaOKnmyiB3buu+XjdoO23DIzXr119WkdnR8CXUT/
RjvfhvxN9LegfSL0p7DzcGg/InpiRY/ux0VPS9ondiU96m+kB3aW9d38ZNd3
tXMLu/6azHYdN3ReYwbSPvFt0bNE9MDOEp+YDKLHm/+8Y/rQPhF6Foke2Pkd
4d2C64LmV31c82/CPxSO5814clL0wmQRgVV5Ivtu3jRI17Uswh/msxztySR8
mnDokbguEGvjOo1DJA4MrLZxoG+fsov2KRJnBraLHtgtuejZIHroPDdwmPYp
w0TPLtEDuw0X/sKiswP/mpZI4wrmsBvzGLvvM+/LfBUr8xV4bpnfxnjnN42f
N0vci/NixM8F6LxYftf9jeQnyTnyXTl3xu8irn7ZttMFx77AGTjsRMNsSTQf
jt+dIOe5ZB+3IOnh7y7R/sh3fo32FBI94NwezAPcHuoXt4DowTzAzwvO+jE/
sH7qX9WP+YH1g7N+9EsNif/7SfwPO1cWnljOhWG3RrKP6G7Ho+Y5P5R4tRyd
n9YX+c4iD95G9gWHZV8Ae/Lvwp78u5Dn34U98btdRB6cfxd25t+Fnfl3Ic+/
Czvz74Lz72K8vCvys2Rfhn7pJvp7yj4F/sz6wVk/+oW/d4nf7WPXO+fak+m7
7sy/rvo/Ff6DXQdVv41Pbjg2fnhsvOcRoX0KrafOTNGD5+ou8W0ficOhv4ns
Fz6W/QL0fyzyFSQeRvslDnEySJwP/T0l/qwu52jQz3E7eFWJq3+UuBq/y3E4
nms0flf0QL63/G4l7/mXW1zi2/ODI6amKxzKj1WTeXhAo1n3hs+L0vOON0ge
vL7Ez/2tvPKKYfS8KvO56NFzEzl/cWrRuWd1+d2z8rvg+UT/QNGPda0otRNc
4mqnn7QTXNpv+pOegtLOC9JOrI/tpJ216VxV9gXO3/K74OlE/yDRj7xNEWon
OLcTnNsJzu2EH9an9sCvXhQ+SfY14F3ld2W/oP6cTH53sPwu/Ar7qaJ0/vuu
6F8n+iG/5sWParyxdmdszVwJXms440AM/C1G4nPZd6uflA3DB9P+hc7Nfeeb
xUWP7KNVXvbdZgCdx0kewCwTefCB9Lvwh4/kd2vQ+WkR+l3Iy/g1A+n8jn8X
nH8X88nH9LvoL/zuT6IH8vy76Jc6YzK0PHBkZ8zZb+a9Fr/+gJ53R0q/fyLx
GOTfl999VfZf8B/s17DvA+8v7X+yzO7L0E58N/mQfX9c28P7O7SnkOifIvoh
31aeq7icA0K/5HnMLpsvUj9vJNyum7dUj8z/JobOQ2uJvOSXVL/N59wwrwTj
mVsaT8q6Y0bKvoPWKZPSrlO8rhlZ1zSedOQ+pbfl3ifK+xnJ+2n7O8rvlpLz
ILSzmeyPcsv+CO2UuMLMkHMWtKeVyP9h12udN96S/c4Hst/B70o8YMrSOdp7
omef6IH8m/K7ieRcRtc7Oq9BPMbtAef2IO7i9iBO4/ZAntujeRj6XXD+XcRd
/LuI0/C7e0UP5Pl3EY/x74Lz76J/S9u8vVlo8/Y6DyeV/d02G1cHaJ8SmEDn
LxKHB1yRp31HoDDt71g/7TtUP+0jVD/tO1Q/7Mb6ad+h+mkfofpp36H6se5g
/7tG9r+wJ353vnDaVwZkX+nQflB/F3wI/S7VM+u5GPqFvz8OPXw+RXXOfG6l
51lj6TwrXB01+CvCoZ+/JwV/4H0r+pE52sNcn5fqe6GfOfyKOX6XOfwkTP2w
j3vteVPeC35qvO0MfS8VHPefHJbvQHn3m6Hv2mtekeqpKO5VrudExDV/SBxx
AnPvehTiaCe+I19KviMPf+M6KMhjvT5on1c5fxeV7GnEnsr5e1Lg4eZ/5vAH
5vAH5vCHMPUAPo7f5XuPoZ859DCHPdnfwLle2stDdaQan1O9Inj5yXvqdJ9T
IKb6l9u6tylVVOv90L8ru+zfveeS5g18XOugiOs5JnGtgyKudVDEtQ6KOPyW
OfyWOeYr8NnCYQeuBwPnezXBw9X/vCHn4NODcabuswLbHrwxb2rgsXOkW+0x
o++H8j+lSR6c5bGuQX6ayIOzPPqxEO3vwG08ecBk+vq1Dxt3Taz9VV7kz4k8
+ACRzyLy6JcqIi/7a+V9RD6ryMP+NUgevJfIZxN52HmTPNcBeS7wI+Oe61lq
3g7aYa32y1g8VzBOPqXzRk0ZR0lpvWD9mB9YHuOX5TE/sDzGdbj279tfZVWf
9x86Md8uKpp5QOh5zw5ssa/E13edRPHtexcZEan89rtd/ky76rbTLcv2nBuS
h8b75tWrE92Lv+5c6lI4W5/Cj3Rc27jxkmPjxpvK+wf3C+ec2cH9wjXlNYLx
4XGnXTA+PKfrznCxZ2bpF4z3FjKOfqJ5QPIbpjatU7KumRU0D4wiP8Q80Ejk
V9H8IHkDU4fWtc9EfjnND6xf8+eWOzmsn6gd4qxfOW2tX+l+5x1qD3hLag94
b2oP9Nv84Tlj84fX1G+b2P4yv9n+cqh/zUXbv8pvWX8wXa0/6D7ob+s/JqH1
H10fJR8u3zfXfFFgi/VPc8j6p65fscL3Cce4YD2Yr1gPxgvrwXhhPZjHWA/G
0Ubh+4Vj3nDbPHrthcYJ3etrtkc3Tnhe+3Gr8CZOugYFz4T2oXw+Aj3ZJH8l
eTblTe24MP02j01/7npC7ccqwtvY8aL9Eq6dOP/aIedf4I5tZyDOtl/1hIsH
+B4b8D1lk1ZI+GkCd8IH7yZNdTS0L+Z7V8D32vnHlLPzj3K+74X0ByZa/dqe
LdL+ptbOymfZdga22nZq3IjzsiYcz8t+QfYvrjdODsX/0I/v3e8LxpPHHZIP
NBW7aXwo+6N7sj+C/4fbpzCnfbEr+0rle8X+Y8T+4Nx+jCPWj3EEflM4xhFz
2ke7W6U94GjPaGkPOLcH45H1Yzwyx3jk9tO+W9sDzvYB5/Zg/uT3eTFehhYc
Oij92xFusscjS+UdslznZ34vFfK/yjr7dNqeHHlzn9L9OL93Cflrss6+//KT
LkNeuUby/vfResh6WitTzWYPH2g9A9Y7R9Y7PddgDvlGdA5C66bKIx5jjvU0
nHxx1E2JfqybLI/4jTnW03Dycp7iyHmK9iPLg4d7X6yfrMsSN6p8uPdT2si6
+d7geglSPX2i/sD3yUN+h6ynFa80G9cvyx2V5/p/yF+U9bTyo086v975X5UP
V3+O9SvXjY1mwJv7NZ/G+RnNVxCn+SQwVuZbcF4XNL9BevT9aOKa9wgjj9+V
caocv9tMflfzJKRH378mrvmTMPL8vOD8u7A/173D/tDTPEO3Rh+8dcChPFVA
8lTKsV8bJ3XL4Fslbk9j+1E517OBfyRxXW07D+g6OD7ql7srzj0wB/NvyVo2
d2L1c9zn/PrwWlHX9q2KofktsPRRcH7jvKK7WOq36XndNvZ5tR4S8YCs17ru
8PpL/qPrL3i4fB3rhz+wfvIT97boBw+X9+N4Bs+L+u1sUr8Nfkn2TRXtOOVz
FsfWvYTOX2QecAJ2HlDOdcLg7WQ/1cTOM8qLU52ttlP2U31t3OhSnsSRvITO
w7Kfcn6iefJ94vAre/5yUvJOF7Q9Uv9grtv6B/WTq7JfaGnXNeWoZ1sg9Wzg
uyU+jJoeXDc1P8njkfxN40Pyn8B7NF9xPAYeLm/G+sl/VL/m60g/eLj8G+uH
Hfhea3DUn5yy91HTPHPTsfuLm8r5vmtwXh/BkRctdDhFzYLRjyjfftOIfuXI
i16Q+7HBcT92R7kfW+/ZEPtkst+t0DinLdUngA+Wdi6jdtrxvs/pnyLL8JJ7
NE6Wc/knTjOZV6EH9qwh9qT53HXovhe834H3RMBbyzyQQuYB6EG/nJR+Acf7
IN9IfAh+UuQPiTz095Q6nztSRwTeS96bqJP55+LRU2853nOZUL9745bQexng
EUWs/CiRh345X3ZcmX+88W2c87L1B5UfTO8FgMt5uiP1ABRXh/wQnN8jAJ8i
8mdEHvrfkXNtef/CeO0cZwqL33rrvi6YvhK/gVcU+ddEnuxs6lo7G+oXc1fm
N7K/jgvwTRIHnpY4EPyRyE8SeejnemDwejJPrpV5Enow7s7LuPPGt6H6YfDD
Ih8n8tBfTs5hu8o5LOR5/IJXl/hzqMSf4CtEfobIQz/OK9fJuSS9/xXYIHkJ
9TeZHzLS/ID59qjEXRoPi3yUyGO9axO0wxpz3n7/RfN1zKGHOfZN4m/OVhkX
0C9+5fSle0gwjjaLPH6X6/SwfnGdHtYjrtPDegT5j0Qe6wvLY31heez73qZx
5H0/7l+zTTjdx2L60f0AErcYiVu0vh3jVOym9e08HrGP47oX2Ad1L9J+fV+A
616wX0Ddi7wnpe9lcP0M7MZ6EP9z/Qzsye3ReJvOGcE5jwHOdaTePOFNZ5ac
53rP4+KcJHKe663HDp3non/D+TNz9CNz9CNz9BdzjGvmaCefL+s+Oow85vPE
cj5L9jFiH+V8Pqt2C1OfgPO4knKO7L3HLM6R+IfuMQtx7z1mIe69xyzEvfeY
hbj3HrPQOuu9xywk773HzLcuB9hPvPUJcU60cG99QqhOwHu/WUiPt24hJO+t
WwjJe+9DC8l76xl83OX4E/bn9R32Zw77sx7Yn+W97+2GuJ4zkh7YPwwPcF0B
7M8c9geXftF5jOVhf3Cxs85jzGF/5vp+GenHc+F9MdwfgnHKeS3sy/g7j1hP
+4y6UGpc5HVnXsItD4+MvutQ/ONI/KP5874iP+bdHYtzrXug+h+K/DSZD+EP
2ysXyhU96oqTqHrue5vTPNTxtU14YuGw/xbhhdN1Wl7idX0PLgD5V4XDPo7w
F70c+o38rvobuPyu+s8vwiOEo3/BX7P6tb92CS8qHH5eQ/rrJfLb2sILenmg
nvC05Cfgqb38/7yP7qiXB9oLb0L3xYE39d4X52a274u5+/IH3xfz3Qu6l+7/
hHx3+36ZPi/2a5vp/lK5N8DI/QDGOz8/MmPoPhDZJ5ruIg/9iG+HU35V8mbu
vZoRa9JknRADfx4vcekMugdD3qdzB+W17Yf8GtmHppV9KOTxPl13ef8Oz9Uq
h/3dbj/NK1+65lfl8VwpGlh+MHult7LlWF4ez9UroeXLK86+3+uXduXxXJD/
NUfNRjmeyUN/1pdsPnB31d+2u/2nb4Qe8HTVejYb/oyTnsAHmQ8MT5tj+UaM
ixPFrP4rqyecfm3y7PIYFxdTWL54VpFdYyoPLY9xkdfqd3v8lnRHq6HTy0PP
+HRWf6qcg2L3vzh2I/TIcwVuvNCtyNLt7TZCD/jArO0HZ/+t3Ub0VwXJc/as
mb5d+Rdf2gg7J0lkf/da9IG8O+p2Ko9++Vn6972HJX9Y2LBSeZIP5Bl17OXZ
lTttJPnAqn8+TT+rYSW1Q5lm9pzI3fBl8JwIdm7XPjrBiwsi3EmLRz/jrs//
j9C9uG+InmmiB/3SVvRMED18n+1+us8WeiaJHjzX/Rc67avcN8JdUrpZv0Il
1un81m98xtSJtj8x7r155T+I26Tt/7vP83npsYlNsuwZ/903vsbRPTwDRM8M
0YP2Q89K0UP3uJpRdA8P9PwgejT/sybVyClrnjoDutdPNemPHxzi5vhHQa7y
qQfOG3frz6fm5vivzkbd+kLH4zix2/eU/5lUp9M/qY8+NRFvtfnnwfvjVV7y
SKae7HNhN3kuZ7V9Lh2/0n5nhG2/w+N328786ZM9G4+w2xnR44ge2E36xVkj
emC35KJn1icp/3qYfbmOr9OiZ4voQTvFfwJ9rf9oO8VPAuOsn2gcC/mhIo/2
QP5bkef54cMrFU/mezY/oD3QM1L0wM6HZudMU7jrU6fTqqrP+mux9iPffwXO
9wtpPaHk/WZLfRo45vlZluu+m+URDzBHPBBDHPFeKdE/jfTz72Ldh/xU4fjd
ciSPeIDl0R6sdzOFwz7Yb74g3wX21sFGuM3p/IU51nHm0CPjJdCC8urgLSkf
zlzPK4++9/3kPXFOvuZt242d+1DjwzqyLygg+xrve7Vx5kWK/xvK/vEC5Xne
FH6R8jyGOJ7rLfndlFQvXUt+N4U3rna7Tp26rta0pU6T0ebUt62iNf/Tmjj8
/F3iGI+GvluEcfcaf19JxtFLxPU8iDj8P2+NTHF7B0a4KQefeFKqibZHv2Ny
Rr5jAr9lefgnc/ghc9hNvmNi5Dsmuj89lczEP5MPvB/z2cNn8nrOyxz+zxz6
Z8p3zNPLd8zhh8zhh8y1HrLjgjdbJX7qrOmV4tWC74f0y/esXfmetY5rlsfv
sjzstpfk0R6Whz1ZHu1MvG7AB7cSx5uG4xKfHzn5ru6bZsj3wdPJ98Fh5zGN
g3rMtc5BPTreWR72H03yaCfLo19YP/zw/f/2f5+f4HeZQz9z6L/wWd4kJztd
ce4MSzklSaGHoftO6XcxP5yl70FjfPE4xbxxhuQx7lqSPOYTlie/MtKP6j95
7HMFUtnnCtD4CsjzBmh8KYcd4A9//jpka9dlDzRuqSHfRaot30VCOzEeLx7/
z+9o6Hcl1A7/zX3f9YCf8Hc9yG8d8VudV3fK9+Lfke/FQz9z6GeOeZi//4jn
WkHft8X8zN9xw/MuJXnYszTJw55LSB7P+6fMV81kvoJ/nlx6aWyqFPFO8/Z3
Ts5apPedukeEtxAOfztOHOPlqPCDNyf+2vBbvSc2AD17vRz6TSurR+PwE8Kb
CYd/in4j+jXvdFj478LhnydIXuuIaB7TOh/iWodDXOsk6XttaCfPP2gnz2No
J3Nap/R7WzReHBkvGq/i+4YN5Hth6N8m69OOTXz/mll5ddO2/d+F7N9y2leZ
Wj+6ZipXLZVs1JT/+/7exqJnuehBf7UQPW+Knv/r/l7oWSZ6YDe0Jz59g2ld
lv7f9/TiuQZ98MvZAgtD9/Synv/rnl60Z7DoQb9AzxXRo/c3Wu6I3TTuEj2O
2EfHEeTFPrpPgfwKkYd9WpA87AN5eV7N10Fenjd0HkfyeF60R54rdB4n8gO9
8m6q/bGNaj0bv+uy/pyrR2i8K18rHO1MLbxf4LcvPv82lM9MK7yvcPxuqv/m
0G/WWP3qh8xht7TEYR9pjxH92u/Q01s4rS/63SJaX/S7SLS+6HeU6D5qR+6j
1nVH8tKOvD+l+8dvhGeX72xS3lu/06Hn2vMelu7yjP/1XdvNWyeE4i7w+k7+
i8W1/Xn1vtMVUi+H71iBLxeO73zxPav4zhf4SuH4jhXL4ztfzFdJ+5nL96eQ
b3S7S34S7WGO72oxR3syUZ4T7WG+WtoDXjTv/+Z187pcJwPOdXewJ+S/Fnlw
lv/Kc04U0g/O8rA/6wdnedgB8l+JPDjf+wr7sDw460c/cnvKTi/1KGpUjRjw
UtUsx3ckwXH/0lyrPxCO43cPyH1H+N4Zy4OzPL6DxvLgLD/Jc24VkgdneXw3
jeXBWV78wScPv/pM6qxuS50V/Ic5/IQ5/IE5+v0zquNC/4LfEo7+ZT3oR/Bp
cu8T+os5+oU57M8cdmYOezKHPcNwqZcL3X8LO+MeWrmf04U8c9iZOezMHHZm
Djszh52Zw87gSeUeKtiZOezMHHZmDjszh52Zw87MYc/O9P4C7MYcdmMOuzGH
3ZjDbsyby/wDnks47Aku7+OrPcHfIP6GvMcxTe5xgp0hj+/1gEN+hsjD/qwf
nPWjX1h+onCWR3+xPDjLox+5/eDcftgtRu4vmiP3F8E+4LOFww7M8bzgM4Xj
uZij/awH7WQOP+xC9zjReNf7eGm8K4ffQg/uv6J5QOXhz/y7ND+oPPyc9dO8
ofLwf9ZP84nKY1ywfppnVD7dVDteIC/jJYB+Bxe/0n4HL0Mc+qPl3mD4A8vT
fKXy8BP+XZrHVB7jheVpflN5+BW3h+Y9lYe/sTzNhyoPf5N1x8i6o3Esc/hJ
A6pvhD+wPPqd5dG/LI9+BO8q9YHoL/AuwtEv4N2Ew/4sDzszhz2Zw27cHop/
jMQnhuIfI3GIofhH5Sn+UXmKf5RT/KOc4hkjcYVL8YxyimeUUzyjnOIZ5RTP
KKd9h8nuuZ9Z9ylG4nBD+w6Vp32KytO+w+QQedqnGNmnGNp3qH7ap6g87TuM
7CMM7VNUnvYd2h7ap6g8/J/1w//BJQ53aX/h49Av8blL+wuVp/2IytP+QuVp
P6LytL9QedqPqDztL1Se9iMqD79i+RLiD6jzqWD3vw7lDQKSH3AoP6Cc8gPK
KT8QkPyDQ/kBlaf8QGCJcPQjuLxPrfsO5ugX5rA/c9iZOezJfILkqZDHWOJ5
DzGXL+9h8znplS8VXiEo/0TzIXIPuZko+rF/zCL77tKi/7+/25Lex8uIfv5e
jNWTyrc/vR7Mp2Xzcas/v48X+mRtzsJF8/j2m4Nbt+s7/UYG337zwfvdvki6
JJlvv3ZwlTu03LYsyqcKfztnu3z3s+TzycM+vL8rI/Zh3k7sw9yIfcBlPXVK
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
LnOq69P6hDe95/hqz26ihznk2Z6QD1dPyPNkwFtPovMhvQ+i590fiH6Wr+it
ewnIPd4O5LkuCOs7x71Yl5ljnWWO9ZQ51kfmeC7mO6TOHLyBcOSNOZ7BuQ/3
I853WB75cD73RN4+TP2Jry4U54ZcF3rD2x6Vx/kgy+MckHl5b/tVD877mL/u
ravRfWUr7/MqTyj5f+bx3joc3beW8tpH5XGuwfJUt6P1rkPsvOHbL4PzPguc
1yNwzsOAc74FnPuX2qP5FuSl2T+Rl2aOvDRz5KWZIy/NHHlp5min7z0FmQ/D
yfP+keyg/UV20zofsrPmGahfdP2iftS8GTjnYcA5X3c/mPfYpHzX+IMJDk6+
bFYnf5KizSun9T24x5Xt/N86zO+2Fj3wk8gKlTIN3HXbpN5gOfxk5b5P33pv
9VUzS+ThJxOOtnrn3Xt7zb/C2U/ml3g4aZRx9b2YlFjvwjzvfNHDeadvvPpN
mjUrgvdf/e1tj3GPB9vjLFjvab/miz7zPm+oPvanPkdHNdil7yMkkjxMzzB+
kk708LiTOivY32Spatejj8OM35/XefRoHN40KL/DZwdwHr/gvryocF+eTTjn
zcDDtYfnJZJXO5B+nX+oPZrXpefy1Z/z+kXvNej6Re81ODuE03sNqofea1A9
9J6Czof0noJyek9BOb2noOspvaeg8vSeQmj99b5XqOvamqCe6z571k19rtfp
V/LK/ZDXjL2f6q5Z+d7Wiedn5VD+vvCd32wqliwuk/Jmwk8dWr+/SMm0Pvlz
BT84O+9REuXvCZ/xc+tut9Pj+xHXzIHgPcwPnNEDOvy+b3cm5X8I/7RilyKL
B+dQflB40SFv7HwzR16f/PyzZT9bcTe/T1442uNIO53iVo+P97K/q7y58Im2
ncrFDs5c+1w++RPWDmiPc8i2xxyxdlMu7TfbrZ19fKntFx+vY/tRudjTlPLW
z+t76Bgv2C+/JPtx3LMBnls4xgt4SeH0PnugkPClMl5YD+JAtGeC3FMq9Q/K
KwiXem/lM6T9Uneh/E/JK0rduPIIkX9d6h/AS+T9X3nlgd2SN6jtrf9084g8
4m3I55DniqrQo2qlEqcd3z0APQZ82XrSJd9+rU/NEdW+mBCp9nld6lEj2i5Z
/82QK6r/V2lPGm8eNZBA5HtLfOXb10t8xTyPxFfMEV8xR3zlyz9IfBUun+bL
+0XHNPm860G1wxy5z5b20TrfFlv6Q/vSw5arfGX0+6G8mXp8vcy3fxxZ9/Gj
lAWX6z4O7/ukSfv17bn9ZvrqXnZPaLcm9s8Z2s7vzQ2zbvxdZ1lE0/mbo5b5
zgd/FM7xQKO303+acPxcXQf3flS7+fGTj8zJf/NXm31thvbXu+InaCe/f1H/
6rryz9vDeYPNDa1+Pgc/Lxzys/e8PKJ45evOV9JOzufnSzds0f0InfeMzEvm
wydFCr8zIZdvHvu+V8HO0/Kl982Hu4vFL0xeJ5Vv/uk2LWJKzORsymW+NfK7
Pl7C+56X5h+cMPdaTKb7KCC/yFsPr7y1t55N44ok3jo05fHeujLlM2zdvu/+
gc62zt/HX7PvBfjeN7lk3y/w3z9g30fw8brefa6Oi9vefavGIS28dYYaDyTy
7k81frji3W/69unwf3yn5oa3LlTHXbTMw8xRZ8t6rsg9PBx/Yn/NvLbcz8Pj
Eftolpf3ngJcZ4L6Rh5H8yR+++/300Pv0eM77LAn9Mg+yyyUuI71hHtfHvt9
bk+49+VhN667gN143we78XvryM/w+/ITPPe1hvTDD/m8A37IHH7I793MFzv/
93vN/vevUVfJemBnPuf9Msx71vDz/9/3rN+x73P53gM6bN//8r03lKh58H0x
H6f3CDQPMMC+d+Z7P+hl+56aTx51+/yeKe6/4rwl6u1ZPqmMU5avIOOUeQPp
d6xfRyQOwTyA9W6trKfQz+c4yL/x+pvdc89wyG8frrfcd24u/s+8pvg5c/jz
f5+zh+qUkkh+Y6b3PSbNeywMwy9Je3i9cOj9miSeOij/PT+LwvAa8lysfzK9
jwP9G8Pc8+OE4ePFPqz/stifeQ7pL16nEgrnfWUG4f+/97HgXjV+DyKc/FXc
v01xJsZFuDw868H7dMx/DMOT4R5v+l2sg+Hy+axnueyPmC8NwzvJfWv8ux08
3+8L/W6U2J/zQrOovgvry5ww6+D/dW8Jc/QLv98xJcz7JrA/6/kxDE/mjTd0
3dkc5v0UvP/IepaE4bAz618h+z7Wn9Dr55rvmh2mHml2mHUwg3ccaf6Nxp2u
F8vpPAvn+yk2eMav7lPmhKmXjvPOYyo/3zvv0fuY/vc6a3nnK9Wz0Du/qfyX
Yd73nOCdl/7PewNoXdD8Oa0L/F68j0/0vi8fWCTr1CPveqTyw8PUtU4KUyf5
rrxnwXU+62S/zH41IUzd2rgwdXT0Pouud/R+itaP0fsmypeGORfW72vQ/IM4
kPmGMOfX9bzvP+r4ovdQXPnuoYE873fofU+Nu9aEqXtZKePlv+d5/72CXWQe
4PqB9sJ534d5g/drHbzzie6POnjlNU9L+jX+7Ohtj8ZpS7zt13NtyPP5NeZn
tifmVeaXZXzx+o7xxftHjC9fftt7H4I+b7y3PXpuG+1tj/Ir3vbo+Wltb3t0
/pzobY/Kwz7IL6WRfNS900Nv9n0zdM/nJ5J3Svo00Ygc+0L3fLYUnism4sWK
WTMrHyq8ZO+HO9q1Dt3zORL3hXa58luGRlHK+wlP9X2h6yU/euqrnzxR4M2z
R0aE6j0Cwh+k/e5RxjOhe1HKSH5p+PKvay9IHMrrFhGeb1qhMp++HcrrFhD+
xomCx76dGsrrVhFeJ0ve3psupFG+Gnnd5UMejC6Yx5dH+tnmf3znAllOPizR
6lQGH//N5pF8/EbnipmGH0nmy+dfsPkoXz7/93KFfu19LItPXvJayiXf7hw4
/W2Vb/Ln8+kR7svbi35fHmzfB8F2+vJm8ry+PL/YzZcHmxTmnhaMC743YIr3
fhutv43y7r/cZcJxb/B/3/ei84Pe63IjzD6rbph91qQw+6z4MPl8Ol/QcRQV
Jp/ves8X9F7cSWHun6F9sd4zMyVM/hCc74+N8u6XlaM9/32/jX+9iNnw3/up
G2H2j3XD7Psmhdmv4Xk534jnYo7n4vo3PBdztJP3fbh3Okze0ndPDu6j9t2n
Ks8VhvvWo/gw61dUmPWrbZh1OSbMvvVGmPWubpj1blKY9Q72/+868LS+vCjs
yftl2I3zn/Fh9r9RYfanbcPsH2PC7BNhB85Pop2c/4R9WB7tZw678e9CP+eF
oIf5pDD3DsWH2YdGhdk/tg2z74sJs7+74c1j0/2K/nsj63rz2Mqpf0P3Rnrz
2MppvGvcS+Nd40Ya78ppvCtvGyb+jAmzD6X5geox/PcQ0vygnOaH0P2E3vlB
86Le796G4l7vd29D9wfSPK95UVoXVI/3e7gh7v0ebojTuqDxufc7uSF573dy
Q9z7ndwQ/zHMfn9xmH299/u5Ie6G2b97v5Mb4lPC7NO938P1yf+/ys7exo0Y
iMKBg+3BmeHUBQg4AVYFqmIrEqDIkXMHF1wBKsOBa1CwgWMn/J68H/WAu/SB
2J0dkvP3htzkHW+7/tj5nj3+L4B//yP/bh5Q8xtc8xX/rvkKLv0n75P+jc/3
AOz+O/zA9/8R/q8+ML7L+SPyG0dO42vJQ5HH/hR5mp+1PxLvE/+1FL5v2/NB
wdeS/26FB1z2vE/wc+EB73t+53F/eOEB+V7XAVhXxq+lbox+jKMf47dSB0Zv
z+9r+lTuJ5/rt6xP4+j5eV135jfRv8cvhfdkXjz+WnhP5qvhLU5o32W+Ejkd
J5wLH8p7zYdeCh/K+nHdmPVgnPl1fe9XqQ8zj6778b3Gb4U/RQ9+/lJ4VfTj
8dfCq6I3v/de+Fb06fEfrQstpS60lnraVupF51IvupR6kex24iLZ7cRjstvB
ZZ8T58g+T3HOe/lf5PH4pfC/yGl8LfXGrfAF51L/v5R6/qXU25Hf8cNS+GXk
93mctdQ/D6XOTHxV6iTzfUSlrn4vdXWe4/yd5xhnX7+3T4l9ahw78/y+3Pme
Q8YbZ7z7i8Dtf3lO8ePlPsCZR+D54D/3fmfK15R3B1d8Elz5ePLEQ+EpWCce
j5z2O+jBfkR6i51kvO2P5kv9IfO9bZr34FpvwbXe0uev9RZc6y0473X/ofKU
9C0oT9H/huY+CuUpGX8tfRHKUzJeek7dBtx1Ceyt/XjjtbFXxm+Fp8ZeGWe9
GScftz/Vvku9Qvs6fkd5zeOeq31eE1x5TXDksZ7BHb8dS//PsfSZHEs/Sev3
wD5MfRGlTwP7YJx5MY59cL/KsfD4x8LL8xzm8UXza78jPHy09l1w9pH3I/vF
z0ce5vHLyH8Pe7419WTZyeR3+Hfz3ewX4+wL46z/hjs/Qh7wF+GOD8F9Llt6
+P51X5+Z7kNQPBBc8UBwxSGJc7bSz6B5DH4ufQ6a38d/BEr/w6Hw7ODW/6Hw
78yLeRlwrx9w1+flZ7OuND7xv56f+FzyJI5VvJf/OLA+vd9Zn8Z5TrM//i7s
TOEvJh6B9dP4BesBOb3OWT8+R8w6afaq1P2mPj3Jo//ZzefpJI+/a4ozpU+d
E5/PcStezXdJz4/z2uX8Nd/r83HIM/HXQx7jvNe8M+81f41fM++M/zKO3fC5
DOyDceyAz4u181/iYU+vA0cP7hNWXff0Ns4rsV/AP4/noGfqwN8GX6zn336P
+jB6zjmygeOv3deh96a/Qu/N/wLEX5/+DvnFU59+DPwfn7qWpw==
               "], {{{
                  EdgeForm[], 
                  Directive[
                   Specularity[
                    GrayLevel[1], 3], 
                   RGBColor[0.880722, 0.611041, 0.142051], Lighting -> 
                   "Neutral"], 
                  GraphicsGroup3DBox[
                   TagBox[{
                    Polygon3DBox[CompressedData["
1:eJw1nXccVfP/x++9545z7jg32RIVGWmYqYRKGpI9KklLZYSQPZuy9wjZZGVl
RVYyQqQyilJGMhKV+cXv9fT6/P44j8/rvs/nfM7nnPMZ732bDj75kJNymUzm
jDiTiSjLmUwDlW0qmcyGoo0UPkrlZB2fCY8uqaSuLrpZ5XtJJnOILrxP5TO1
TOZ5nX8wzWR21fnddLyga45WvV7ZTGYjlbuL1k7Hi6JvJVp74XeF39X1B6md
e1W+r+NQ4ftVXq9rFun8KLVb0u8l9FH4WvVzW+Frdc+T1dezRVuk+36iOofr
2idVfqDjMOEHVM6uZjJf6H47qbxSbX6ia0fqmk+E/xb9WpWX6NhZuKhyVujr
L6pzve61nepfr3tdruvbit5S93xLdfYU/lV1PtJ1nYRfzpi2l46XhF9SnZ2E
V5Vc7qxjhugfq35n4W1VXlFzXzZX/w8R7VAdm6jOibrHpyrfUbm5nqOi4yCd
a6prdlE5R+cuVX92FG6hOi/oXm2Ef1RbL1Zc7weVHUTbQ8dM1b9S9TsKtxZ9
jcrtdVyc8bWthd8p6tnVn0VqY6T686zoO4j+oX4/J3yr6s4Xfl64leifCr9c
8bdcpfJmvasWqnOz2rhReHvhG4Xf0H1vVJ2Kysd456I/rGs/0O/HRd9C5QOi
rxP9dtG30DFE+Bz1Z6XoTXSvJ1Su0LGJ8IMqv9WxufCjKv9SvY6q31Plw/r9
h/C9amMTHccIny56I+FBwmcK36S+Ttfv/+kZB6r+SbxTvr+OP1Xnfp3rL3yi
6Duq3ExHRfhN0bfTMZp3r3a66Jt8rD5crnOvl32v4XreYap/imhtVe6m4x/R
H9V1N+o591H9M3leHc+Jvp36cpTOPSO8QG32EZ4uPE9485rxsaqzRc11hglv
Kfys8OF8C/2+W7ipykaiPyU8VHiy+rOD8GTRRuv3RNXdta7xJvpWon8j+mXC
zYR/1b2aqM7jwoMZd+rzpoxT3rF+TxMeqPIZHXcKN1b5asVjv4XaPE64zrtV
ey9UPN63E+GliufQ9sJHlty3D3SveaGfW+n8UzqmCG+qchMdjwgPUHm73tNt
fGu+ZdVjb0PmXdnf8XjmjX4vFn5P5ZU1rxON9U1fVJ0+oj8g2kzhvsIPCQ9U
O43V5jEq++hYK/oOKl9QnSOF71Odz/XMjYQXqzxK5zZV/X4q7wl9OET3uqrm
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
VPt7iH4pfKzo+6LjEJ4m/FjWaxf77rUV8z/IBwMj6zeQ39Ygv6lspXJF8T9W
JbM+/EPRep0NVX7H/BHetGgej/V2PvuQxt9CvkvJuhB0I0yp62LrH05mvMSW
s04LPCr8Kfqg79VWQWUj+H/mjPBU1mfmsPCWyALI59Bpp2pe96qyZU76vqPK
Cexj6ugROs7JmQdj3WEt+k+HgGxUCbqFstex//Q/wjfA+wp/o+OUStDViD4g
sm6K99IisRwxQ325Q23fmfPe80jVsv/GVfPm8OiNM5YD5oW1FH6cZ9aUzbwD
D80+mPHeCZ33ME/Hm8IfcK+q29le5WlZjw/Gxh9Z1+FT0gZtbSw8Wn16S3go
+gjda47w2zreh+9gf06sQ3sga73EyKwxPMHUiuv8WfHaT5/hY35VO6/oYz+r
38NK/s77q50z1c6CjPV97Ln0YVuVr+l9LlS9o/WQm+j3VNGvrnhc03/4mAUl
P0c/tdOqYt3daap7Dvy57tWpZl1Qh0BHx4Su6fSq9WXozU6tWjeFfnBU1XIT
MvDXVeuw0GWdAo9UsY6LOs3q1gFNDPJCw7DfdQu8/YXw1Dr/qPrYTOWpOh4T
3hpdjs5/qmOG+v1YxbLR/1SeGJvPbaLyPnQXop+u/jetW680Xm02qVvfNFZ4
y7rl+SOEF5fczlGJdUcPwSerPJwxljW/uH/W9P8xfjQGczq+0+8JqvcDfBpz
DflfuL+ue7NivCM8RdD1/R7G1y9h7CHr/Zh1vUmxx85ElSdUPH/fVnkg35+x
A48S8GkZl2sDvX3VtC81R47Pma+FL7lMbT0v+k+x9ZO/wTvp9ydZ9+VN1uLQ
r2N17Kl2/mTNq3pcM7535Jl1/JW1DhM+cJWOucIrVe9d3e9DlWcHnQj8eauq
9R7oPw7Vu7gna/77kZL5WfRn11WM369aL3dv1nrpDfT7bvqOrqBkPhEd3pUV
4/d0fr+s6/+eMe93V9Y8DHLYo1nz7jV93xuQFTQGDhDtKeapjkZ63p+DvL1c
bS1U+Qk6jZLX4yPV382r5hvhHwfFbhNd32Nq63GV3fTxtlSdJ1jPgt71Ex1P
6/dLqvM2/Ifq9GE/zVomQX9IH46Fd9O1vwZedBL6N+H1kfPqfuYH0Qvp+hbC
J9Us7ySqswQdp+jtRD+HvgjvhuwhfL9wK+FTapZBCqq/qGK5o8SapvIj1flD
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
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwtnXXAFkUXxffJ3X1293kVuxURMZESJcRAQFFCUBHBQMCWNBGxMVARC8VC
sQsTu0ExEBGwPgOVFOzCwO/8PPvH8M7diZ3dZ3bm3nPPHbYaNOygU4pBEEyr
BkFZf7/KgmCl/q6Kg6BFQxA8Uw+CySo7V9empkGwWy0I7lbFZqUgOFp1dpd8
r+TtJQ+W/IDqX6L6lyo9qPzdunaUyhqr/XvKP6M+ntIN91L+aZUPTSSrbIHk
43S/rTPXp91WKm+q/ndT/1eqzRBde0ntn1W+q/LPqXwXyf8rBMG3Sm+or63U
/gi1n6byLVS+rtq2qQTBeWrTXGkb9ddK8lqqvyYKgjlqs7vynyu/ueq/I3lX
yZ9I3kzyRKXj9SyHaIy3q+/b1X4X5f/VtV1UdovqReq3oPtspLJVSuNVvlsY
BE+o/C7Ju0ouSW4p+Qr9XSH5NdU/OPI4Ge+WuvaO8tP1PPepv5rqtVX9x5Su
1L2uUnpc+RuUhit/uOpP0livlnyC5EMlXyL5fN1vPeXfVF9DGvyOr1P5OYHf
/T28T+Wr6r+1yq5VOlnlh+naFWrfoHaX6/6zNL5RqruJ2jyo93GPrj2s/MOq
f7nqT1B6RPmndO0Jle2hdjMk36c27dRXrP53lfykro/U892iOm8pf4vKd1b5
32q/s8pXKm2m99BH9/hNZcuVLlJ5G7WfrrJ/JF8vuZ3kFySXNMaJkveWfITk
2fotL9NYr1H/1ypdp2unqO9hStcr/7HG96Guf6YUpn7G1Wp/Z+hn30H9T1b7
R1V+osY3SddOVNuTlK6p+53+qvo3h37XP0g+RmNdqPSq8qnqTS17TrbTc05R
nVN17TSlm+v+jf5R+/tD/3aXqO6dSs+rfgfV3475q/LPlLZX/m2N53jlt1H9
qap/m9IZ6utMpduVn6vyU1XeTOV3Sp6vdKPeX5VvQu230Rw9Tv0OV5osuaPu
dZfStpLvV50P1P4Mtd9J7e9W22aSJ6n8AZUdpeefJ/l0le+g8rtUPl5lE8ue
k03VxxsqP1bljVV+i8q35/dR+SMqP07t35d8Gs+i8mkq307ytSp/SOXHqPzV
1M++v/LPq7ym57pN5U/r2m7qvyJ5StlzqpXk91Rnoa49rT7vSb0G8VtvHHtt
elfpg6rXkKZ613vp+bfTnDhRdS5R3bdU/qrK72D+q7yxyo9Uv3ep/ZYqez71
vTtLflbythpv+7Ln0ve6tlJtjtRv3Vry88p/p3S05HaSX1K+pLq76H5nSk5Z
YyRPV/8nK3+S0i6sjSo/Qm1YaFtL3lnyIMmncQ/dcwv9fodIXl/9hRrrLWWv
kW3Uz6F6j3N17QmNv4nK52t8Zyq/s67fo7af6tr+anuR6twn+W2l91grVOd9
PetnKj9A5Rfr2v0qa6L2zSuew81038m6NlJlo5RuVH5rle9U8TNuq/KWGsuO
ko+SPFJjaqzyHSp+J01V3kT3OFrjvEfvqrHaX6V0nPrqy/tmrDXvKyt0bSPW
MgkLVL+nUg+lqyTPUX+dC742QfLbknfQvbqVPMfHqu3QwHP/RZW/U3HZgUp/
6PlOUNvLlY5jLVf5LJVfVfSewTO/qHcVFfwu9lUfT6r8RcmLNOb9Jb8peVf1
dWrsOX+u7ndc4G+hs9JjjEflQ1XeTvPlV7U9QX1/qf66qvwZlc/StcUqP00y
++lS9bEB66vu/T3fiy4+pvd1h66dpbJjWO/51tXHXOWX6Nr6rJfsOVX/xt+p
/CHJl1X9zS+R3Czzesq6epTW9y66NkP3f1X3/zpfgyep/tmB1+anJF8teYzk
X9X2Ufagqr/xFWrbkefTO2utPkfGnkPPaMzVgufWHrwvlbdV+ekqP1V9nqT8
o8ofqfvfEXut+Vz9hcrvrfoPajxnqH1HPe9v6i/R3/aS56q/qupsrboHq81H
yu+F/qD6p6m8vertoLFtrvLeKn9b5ZHGPEHy3breR/erSr6M9VvyQZI7aWz3
KG2n+g/qHffS+NbW30ZKvVOP72LlD1H548rvo/tN1/3O0v066X7j1d9glT3C
Pqz+9lVfD/NN69pjrNGq/4jkFpKHqU4Xvm+llvRX9Dd4gcZyQuBvcy+V3c83
o/KH2RN07QHJO0k+nvsr/yBrgOTpKt+T+SO5veSxKr9M/R2h/g5Qf7dp/J34
fVW+u8rPUnl75oTk5pJPknwvc0a/V0nP87Hebys9T1XP97vK9lXZ7/n3cYye
tYvkFiovqvw3lXdGP1PbP3Wv7qozUHUu1rVDdf+uuvag7rW2yvtJ7ib5YeaK
2p2ie19U9O/3kMrXqOxAtT9a7W+T/Jvk/SQfFvkbWFft1wr8bWwtua3knSRf
LLmJ5N2q1gkulPyL8u2UdldqWvc30Uh5/TT/fSu/KB2nvg9hTjGXlYYwF1Q+
Q+0f1pgGsW5IflH5MbpWRZ/VP5uo7uDEa+M8lQ1Vp7fq2ukqOxqdSXWHJF5r
P1D5sSp/Qn8HqL97dW0233fouZ7p+W/XGG5S+9Fqf6Suva72x+g321Jly1XW
uMHPsI3SgZmf7S/9XVd1X1Bfgxv8HfE9baFnmqX8T7r/scr3Ufvt1e4tya3R
NyRvyv6k1L5qHfSymutcqjEtCdz2EsmHq3x/ydNr1mFHqPyTwLrt20pt1F9f
9iflt8z8bp/SvY9W5l1da6vyfio/Wflbdd9E+fFKEbqh+huk/nupzZPq/9f8
97hZ6Tzlm6u/NZqfvzLXVfd63fsHfjv6VF+L1eYCyS11/du67z+w5O9948w6
+KmhdSJ08xWSN1a7nmo/R223k7yH7t+SNVb1f1e+o1IHpWboc0p7V61zX6Py
GxN/G83VZw+VLVeapfwQ7BH1t5L1RmkzpY3rniNbVv0bMXd45yer/keBf4vV
SiPV37Ea00H0p7obstbzt+49bmPlGwXe+2bzTar+D0onoj+o/HN0J5VvkPib
7aayC6v+lvvovc3Sux6qb3S18ner/DrJ2yodr7k1J/LcYw6+q/xEPWNT5WvK
/6r2v9asu6AjoSv1U/u7VT5L/R/L/qzyS9GNlG5U+Qs8Y9E6MbrxH5l/n5ur
1oeuldxMcqr+f5f8l+qMZv+TPFBya82Z8XqeVqpzU+r3sUxpPfYzfofE9+Ke
lPdP8m9JZSfy7av9prGf8Q6VN1P57crfVrS+1zzx2tEo3x/b8U2p/hSV363y
DpL7aywnaUz3S35AaZrK7kKfUr6i9pPUfl+N8SjsE/YE+ld5I+Un6fm2DbxH
sVe1Zf4HnkPMpfbqv7nuN1Vt7lX9mYnzeyudJjmUfK3qd1P/g1T/ocRj25Hv
R+V36v1OKNqmulny1ehWSneyfmgM1yh/vNJdPI/kf9R+TMFrAN/z7So7SelN
7q9rLdXfcZLfkNxX4xqmPndW/lmN/2Td/1aVDa54Dt2h+pOUH1LxO7mTNV7f
5qGSL1X+fzxHYj0JfelW9ZUoXa+yzfU9/sZapvSY5HtV/ojy36j+oZK31P1O
0f0O0LXFrEUqn5LyIr1f76H30V/lu+r9TQy9n9E/9hz7d3v2FWwb1b9CbddS
6qnyXVR+lMY3U/JBzH+NY4DkldgPSldI7lfx2PdTmqj8wIp/01s1rra634bY
cbxf9TcucX4dpT6S26h87dj3vIVn0/2upp+i99t71P/h6m+F5NeUjtT76i/5
QI15OTam8icr3a38fQWvH9+ytyhtyj6k+12vsht43+qvjI2utvvoeY/U8x4i
eRr2Pzoge63ku9g7JA/m+2fNlfx81fbtgMR2BPbEpeqvt+QbWa+rfr8F3p/k
Tur/cMmP6nn6S15f8qWSD05s+2ADMT/RadFtd1T5gXXjGXtIXqPy8yT3Uv0b
JD9e9e/DHgI2sG7ovaUvc1LyS1V/T/+q/HLJHVR+GPur/s6T3ELv5lTNkeMl
L5D8odKJ3FPtL8zXlz6q30Pyxeg6kg9mf9NfphH71XDV317lzyo/TM9/mQqe
ATeK8/W2ajyhg8r/AqNS+6rqXyO5i9oeXbd98J7koyQnDX6HvMuqfudvle/J
+qTyO8BQ6sZH9pZcUf0LJT8iuZ/kdSSPl/xzYvxmguRU/a0n+SbWUqVp6i/W
te303EP1/B9obblD7fdU/YLqn8/enLgube5S/SWRbQNshMWR91P2y+tUP1Nf
k9XH9pLrKltdN77SWXKk8ovqXlNYW+p6JxdI3l1tPlDZlMDzbzdsItY/Pd+O
7MfYx+gv6u+Puuc8c3+9XPe8IzPWBaYE3nGh2h8cGAMDC7tJ5TtIblD7P+u2
sfvqWc+u2Pb+Stdf1zezXHUWRdbJ0K02Ca2r7a7+2rNeogNKforvXfLGKp+A
Lqb+hqi/8zWm65XfO/L++LPq7KV8Rz3fEaw9uvZgah2V8a4VWndFJ0EX2zC0
rgIehu4/TGlbjW+AxnaIxro+c4z3rnpbqq+dlIrq92/JzZTfXulf5U/TtdnK
v6V0uvIbqX0d+5E1Tu3f1z2Oyef8CXq2TVTeoPKXJO/Je1W+cdn3642+n/ka
+bNSl41SKpVc53SN9/3ANiH67oYqy1T/BdZMtdm66m+Jb+o43bej+vhLY7tK
Y5uH7iO5AA4m+QPJJ6jOQsaqPv7Wb7ytyj9A/8L+V3523d8y3/RTut9kjWOc
6v4DvlH0usT6dJiuv6T2j+rvOSr/S2XvFa1XoF/01/VXYqeXlWZWXfaG0j0q
P1zlr+r6hRXfg77LJb8D3sV8jXdu3c9wBXOr4GdbrTqN1GZ/1fmGfansPYC1
v5vSVtgoKp/PfhZ7P56q+3XVc7+ivjql1t3+Ufmeym/Nb6H6G+pan6Lf0TW6
H0Y7724btX+N51X7d+rGlF7n+UJjTZ1Tr00l1d9X+VW69mFoTBJskv1vsv50
1LUXVbajnn8Lyb1KxncPjr2Xn6Ix/Kn8YepjQ8lLNYYt2Zs0viFKvxf9XZ2n
enHF2PX96qef2ryt/Bn8Bso3K3uPZG8cpPST8v/o2gb8PmA4Gs9MtRug8cxh
fVXZxmq7Kb+J6mwjeUPJG0s+NNe50L12jI29baDyVOXPq3w3XV9fciL5Oclt
mN+SaxWv0S0lvwUOxfqufDNs6tT65TI931Z6vp01/39S+b2St2iwHog+iI31
uuqvCm0LodM8F/naa7yzquueUvY74V0EavNm3Xsle+bjetbLVHaR0utqv1j9
vKs6fdRmIfuH5BWqM1B/t1Hfo8BiVLeH0suq85vq/M7vVPLasAifAnhI1esp
6/vTmm+DlN9M47yybowLLGfz0NgXY9gYbCn02BZL7id5K91vmOSjdZ/Ldb9M
9/i+aB2bvZA9ESySe7A/bB373iep/gTVbyj5mxyr/MG69rHyfyotUf+Hqf/G
6n943boSOgy6CzrTxRV/s3yrIdfr3tvZ4zO1fVXyY1Vj7LHkQaHXnl3UZ1l9
7qjn66I+VulaT41ptcq3wZ5SKql8mdocrnwT5Ueqr79z++A5pUeUX6rUX/mt
VT5C5TX95jtGtgfnay7MrFuXQadZO/Hcv4H1ueRv4M/c3noKHVT5YSq/ke9X
5QWl1hrfcMmzVfeQ2Pr+beqrs8b5ct2//aiK3zVz4DrlR1Tsz8CvgU8BLAmd
FN20t+p/rX5/Vfm76JySz1T9gwq+1jnzGsbatUK/VZH9n7Ve93sJfRf7tmKf
1DmRf6sxkv8o+je7lPvrWlHtY6V5arcO+43KZqj+uSo/vWJ9G72btWU9fA3g
SuBM4Pkqb6K2fxetR6JPHloy3tFW95+mOttIPiI25r05/rHQWPhQlU1jTyp5
TL1jfytHMMbcp4Yuhk6Grw2MHt0IHQns/g6wuorXoEcL3jM21d8lofcSsG/m
XJhj4OxtN0verOQ9jme/RHJU8jtAh0CX6MR8UF8twDaU5uJLiK3zoPvsgT6l
8i8l3y95Y/U9MDUGhu+mc9nY2E2Mr+x3uxH3UP6Psn18taLnDmsIawdzCJ/d
72VjHvjy/kztK8EXsp/m6hrlfykbg/lXaUMwj7IxlBvYN1g3yvYZVpgzYP2S
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
ynqE/dAVvSGzLcmZk5w9eaSu3V8wvwmeEzo6ujr2EPb7CZl1AXQCzkI9KrFu
jk8a3/Sa0FwoOBUDNL5Fqd8dPht8N+iMxMK8F1qXpD5zGx0SXZLzPeYHtpGx
lWdn5g7BkSOe+YjEujwcJ7hOzHl+vzMjfwubo+8WHZMzN/V75f0So0qs6juZ
uWNwCIm/HpTY9sAHjy++Fd9P4HdwlPLHZ/a9cCYdZ9MNzezL4Yw5zppbluPP
cF5oz/6xuuiYqvmpsXB89cRzEq+J/kscEO+A+HlibImt/abk2NuvYsfqvQje
UfN75f1ybXjk5+b5iSc7OXKf9L2s5NhQ1lDWyu1Cr634x1uozh+s3+iGmbF+
eKJwxTnT5tDI/l/OuoFPxlmNcHTg6mDrwkdBx/ihatuGtZA+vq96PcB3BOcd
7jvvkfdJvOmoyLYqXJKL8/k2MnPs1DO5fXZAZi43nHq49d0znzcJxxuuN3wv
uEpw6OHSD1F5EVs5t6fPzqw7oUNxdgAxJMSerCw5tuSb2GN5GTypZoyU8TAu
bGn4JpxdA6fpSj3/aZn3IvYkzlbeNbe1H1cayt6U2ZfMmZ2c3UlMMb9lz4pj
jeHDcfYZnJdLwT8zc/+xmZjvJ2X21XHmKGePwqEiBpjYIrhVnO88vGDO3zXg
eZltAWwCzjI+M7Ouic7JWdQPZ44PBDMAOzhf8nWBz5DgLInXM3PpwTxY/76M
PXeeB8+q2bcD94R3xrsbk9lXxpmnnH2Kv711/k1cnZhPxtpKvNibqc+bfIi5
zZ4fmauJrcE1zp9ckNgWYg0nngFOKuvbXqHPatkvsT8Z/zPcUHz69MU9uffl
mXXD/SOfF/VZ7NjJ+7DH0Vcj+4+iwOfv4GPB1wLHa4L6+jx2bOhD4G81x4wS
l0W8AnELxIASV0M8A3ENnH2AbkK8Z+/I+Bs8Pmw6bDu41Ogm9NkzMobF+vVP
6PWbc+vQjRnjgZH9aZxdBL4Hn5V4X3xF76jO1+DU+bc5TdcGKH9f5lhV5gRz
A24Rttk9BZ8Hik6IL+qP0Loi56vC/RyT66eHR+4Lvha8LeKpwYbfUh9fVq1j
cv9fQuuet2Tm4rFHs1dzHjqxn8TU9NAYXk7M9eJ85O8TYxZgF/gAwM6+iP2u
HgUvrTmGlrgi4os4JwLONO8WXQ6sG72MmJ4WOQ6P/gw2Dp/v8tQcatqiG+Jb
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
                    "]], 
                    Polygon3DBox[CompressedData["
1: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
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwt01toznEcx/FfxOPZgdrmUNSIGxdyKEkubOa0yGwRw3LmzmJu2HIal6b2
zKaNhXJBLuzA1mazXSCiSKTJ5NBGDte48vr1uHi39z6/z+/7/H+/5//M2lNZ
dmhMCGEuxuNDRgjD6M0OYSARwiDu8ym4mAyhVKkMO3XyJobwxt/X6LB+T7cL
nfwoFvEW3WY85zcyQ6hGHS+QFeICr5EVYz6/i/bs9Mw4uy8rhFU+94puK1bz
ftlN/ReJ9Oz4GS/5LVmVvQt5k6wRD3ir/KS8kPfKevCW35afQRPfJduNS7xW
NgPT8cS+EdkonvJO2Wfep9uPL/GZZRut/fH/ShThhPywvET++/9Z45mPySvl
8+S540I4PTaEIWd6NcGac22XT9I5qHsAy6x1ymfak49n1r9b/4HnfAsy+Tbd
cizWb9PPkzfwDbISVLjLXN9Xnhm5+Gl9tvU5+MVzkOLrdNdju36O/h3d94n0
ncW7G+Zt8c6sN0bsOyk7Fe+cH8EC3qCbinfNL+tfw0NeLavBI35d1oWvfEA2
iG+8O+bOsDyZnhFnFfBuWbn52Yn0dxW/s3p+Qr/FszRHrJ+VnYvvHu+xZ0Uy
/S7Ed6KI98q2WZuos0+2F0vlHfJ3Zgyhy3pvfPfj8/BpaNTZpLs5vis6k93P
fnl+In2meLbOeA+eZ6s8i1fIdmCJve3mD2Atvyq7hmI+KEuZVx+x73i8J6Ti
55o1FY/4R9knPOZ1uucxwpNmZGCUl+KvuWvibwW1+lX2/wNNuIrr
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$6360946#1"]& ]]}, {}, {}, {}, {}}, {{
                  GrayLevel[0], 
                  
                  Line3DBox[{505, 1, 477, 209, 2679, 15, 3354, 849, 30, 2693, 
                   2694, 45, 2718, 1227}, VertexColors -> None], 
                  Line3DBox[{1555, 2, 2052, 304, 505}, VertexColors -> None], 
                  Line3DBox[{1557, 3, 1555}, VertexColors -> None], 
                  Line3DBox[{1561, 4, 1558, 1557}, VertexColors -> None], 
                  Line3DBox[{1563, 5, 1561}, VertexColors -> None], 
                  Line3DBox[{1567, 6, 1564, 1563}, VertexColors -> None], 
                  Line3DBox[{1569, 7, 1567}, VertexColors -> None], 
                  
                  Line3DBox[{1571, 8, 583, 212, 2167, 458, 804, 1445}, 
                   VertexColors -> None], 
                  Line3DBox[{1572, 9, 1899, 215, 1571}, VertexColors -> None], 
                  Line3DBox[{1573, 10, 1572}, VertexColors -> None], 
                  Line3DBox[{1575, 11, 1574, 1573}, VertexColors -> None], 
                  Line3DBox[{1576, 12, 1575}, VertexColors -> None], 
                  Line3DBox[{1578, 13, 1577, 1576}, VertexColors -> None], 
                  Line3DBox[{521, 14, 498, 312, 1578}, VertexColors -> None], 
                  
                  Line3DBox[{889, 29, 483, 2926, 221, 521}, VertexColors -> 
                   None], 
                  Line3DBox[{2716, 44, 586, 1298}, VertexColors -> None], 
                  
                  Line3DBox[{2730, 59, 2935, 232, 2716}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2731, 70, 2733, 85, 2951, 244, 3160, 535, 1277}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2745, 84, 3331, 816, 1538}, VertexColors -> 
                   None], 
                  Line3DBox[{2764, 99, 2745}, VertexColors -> None], 
                  
                  Line3DBox[{549, 107, 2979, 269, 2775, 122, 3332, 818, 1540},
                    VertexColors -> None], 
                  Line3DBox[{2772, 106, 2765, 2764}, VertexColors -> None], 
                  Line3DBox[{2798, 121, 2772}, VertexColors -> None], 
                  Line3DBox[{2812, 136, 2799, 2798}, VertexColors -> None], 
                  
                  Line3DBox[{2814, 149, 2827, 2828, 163, 856, 2850, 178, 3012,
                    295, 577, 192, 503, 356, 1751, 193, 1752, 194, 1753, 1754,
                    195, 1755, 196, 1756, 1757, 197, 1758, 198, 2047, 298, 
                   2252, 580, 199, 796, 592, 2049, 300, 581, 200, 2050, 301, 
                   1759, 201, 1760, 202, 1761, 1762, 203, 1763, 204, 1764, 
                   1765, 205, 2051, 303, 582, 206, 494, 302, 3119, 474, 191, 
                   1259}, VertexColors -> None], 
                  
                  Line3DBox[{1226, 2824, 162, 2849, 348, 3049, 177, 575, 
                   1050}, VertexColors -> None], 
                  Line3DBox[{2970, 260, 549}, VertexColors -> None], 
                  Line3DBox[{2053, 305, 1569}, VertexColors -> None], 
                  Line3DBox[{1019, 495, 2053}, VertexColors -> None], 
                  Line3DBox[{1055, 587, 2970}, VertexColors -> None], 
                  Line3DBox[{1159, 806, 2731}, VertexColors -> None], 
                  Line3DBox[{1160, 828, 2812}, VertexColors -> None], 
                  Line3DBox[{2730, 69}, VertexColors -> None], 
                  Line3DBox[{2814, 137}, VertexColors -> None]}, {}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{2679, 2921, 3606, 2863, 2678, 3607, 2864, 2680, 
                   3608, 1769, 2681, 3609, 2865, 2682, 3610, 1772, 2683, 3611,
                    2866, 2684, 3793, 2922, 3144, 3553, 3792, 3194, 3392}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2694, 3619, 2867, 2692, 3620, 2868, 2696, 3622, 
                   1780, 2698, 3623, 2869, 2700, 3624, 1783, 2702, 3559, 3625,
                    2870, 3226, 3892, 2933, 3150, 2271, 3215, 3200, 3029, 
                   3293, 3318, 3083, 3270, 3484, 3626, 3058, 3069, 3070, 2934,
                    3802, 2927, 3407, 3797, 2707, 3475, 3627, 2871, 2709, 
                   3799, 2929, 3408, 3798, 2711, 3479, 3628, 2872, 2713, 3801,
                    2931, 3409, 3800, 2715, 3483, 3629, 2873, 2935}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2716, 2932, 3028, 3834, 3482, 2714, 3481, 3711, 
                   3027, 3833, 3480, 2712, 2930, 3026, 3832, 3478, 2710, 3477,
                    3710, 3025, 3831, 3476, 2708, 2928, 3024, 3830, 3474, 
                   2706, 3473, 3709, 3023, 3829, 3472, 2705, 3081, 3082, 3057,
                    3539, 3849, 3287, 3292, 3291, 2704, 3149, 3868, 3548, 
                   3148, 3227, 2316, 2703, 3225, 3708, 3558, 2701, 3707, 1782,
                    2699, 3706, 3406, 2697, 3705, 3405, 3621, 2695, 3704, 
                   3404, 2691, 3703, 3403, 2693}, VertexColors -> None], 
                  
                  Line3DBox[{2718, 3410, 3712, 2717, 3630, 2874, 2719, 3631, 
                   3411, 3713, 2720, 3632, 2875, 2721, 3633, 3412, 3714, 2722,
                    3560, 3715, 3228, 2723, 3893, 3229, 2936, 3151, 2937, 
                   3869, 3216, 3152, 3153, 3294, 3311, 3084, 3271, 3485, 3852,
                    3059, 2938, 3085, 2724, 3804, 2939, 2940, 3803, 2725, 
                   3634, 2876, 2726, 3635, 3413, 3716, 2727, 3636, 2877, 2728,
                    3637, 3414, 3717, 2729, 3638, 2878, 2730}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2731, 3248, 3639, 2879, 3321, 3568, 3640, 2880, 
                   3322, 3913, 3249, 3415, 3903, 3323, 3569, 3641, 2881, 3324,
                    3914, 3250, 3416, 3904, 3325, 3561, 3642, 2882, 3230, 
                   3894, 2941, 3154, 3554, 3889, 3382, 3201, 3030, 3295, 3319,
                    3086, 3272, 3486, 3643, 3060, 3071, 3333, 3072, 3031, 
                   3835, 2942, 3417, 3805, 3326, 3570, 3644, 2883, 3327, 3915,
                    3251, 3418, 3905, 3328, 3571, 3645, 2884, 3329, 3916, 
                   3252, 3419, 3906, 3330, 3572, 3646, 2885, 3331}, 
                   VertexColors -> None], 
                  Line3DBox[{2733, 3420, 3718, 2732, 1809, 2734, 3647, 3421, 
                   3719, 2735, 3422, 3720, 2736, 3648, 3423, 3721, 2737, 3562,
                    3722, 3231, 2738, 3895, 3232, 2943, 3155, 2944, 3870, 
                   3217, 3156, 3384}, VertexColors -> None], 
                  
                  Line3DBox[{2745, 3727, 3428, 2744, 3726, 3427, 3650, 2743, 
                   3725, 3426, 2742, 3724, 3425, 3649, 2741, 3723, 3424, 2740,
                    3806, 2947, 2946, 3807, 2739, 3088, 2945, 3061, 3853, 
                   3487, 3273, 3087, 3312, 3296, 3388}, VertexColors -> None], 
                  
                  Line3DBox[{2764, 3746, 3436, 2762, 3744, 3743, 3434, 2760, 
                   3742, 3433, 2758, 3740, 3739, 3431, 2756, 3738, 3430, 2754,
                    3505, 3737, 3736, 3504, 2753, 3100, 3101, 3062, 3540, 
                   3850, 3288, 3298, 3297, 2752, 3175, 3876, 3551, 3174, 3223,
                    3875, 3557, 2751, 2962, 3735, 3500, 2750, 3499, 3734, 
                   3733, 3498, 2749, 2957, 3732, 3495, 2748, 3494, 3731, 3730,
                    3493, 2747, 2952, 3729, 3490, 2746, 3488, 3728, 2948, 
                   2951}, VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwVzrsyg1EUhuGlkhES4hCHAtcgpagVNGbcgCpNEm7CjInJMIZCF4IJwX04
JCJp5A7iCpSev3jne9e39t7/v35Q3auMRcQ+BhMRD5mIo6mIPr/nh3xXfpvv
ZNXc401e4Tvyy3wry+YuH/GbdEQDv7yjS01GlMx/SGcjas7+6MYxxCvWMGt3
5UyPX8pVuaV7kSu40HVlLum8scyfsYQZ3bl9h5/JRVnUtWUedd2nnNa13F3g
T5hHVndq/8Frck5u6h6Tf8KJ7l1mdE13c7yVfBMN87b+jR87V5AbuOb/aq4u
ug==
                   "], VertexColors -> None], 
                  
                  Line3DBox[{2775, 2969, 3662, 2889, 2774, 3508, 3663, 2890, 
                   2777, 3812, 2972, 3442, 3811, 2779, 3512, 3664, 2891, 2781,
                    3814, 2974, 3443, 3813, 2783, 3516, 3665, 2892, 2785, 
                   3816, 2976, 3176, 3552, 3815, 3192, 2980, 3300, 3316, 3105,
                    3267, 3518, 3666, 3065, 3075, 3076, 3041, 3844, 2981, 
                   3444, 3819, 2789, 3667, 2893, 2791, 3668, 3447, 3760, 2793,
                    3669, 2894, 2795, 3670, 3450, 3764, 2797, 3671, 2895, 
                   2799}, VertexColors -> None], 
                  
                  Line3DBox[{2798, 3765, 3451, 2796, 3763, 3762, 3449, 2794, 
                   3761, 3448, 2792, 3759, 3758, 3446, 2790, 3757, 3445, 2788,
                    3520, 3756, 3755, 3519, 2787, 3129, 3130, 3040, 3543, 
                   3843, 3282, 3305, 3304, 2786, 3117, 3862, 3542, 3039, 3842,
                    3517, 2784, 2975, 3038, 3841, 3515, 2782, 3514, 3754, 
                   3037, 3840, 3513, 2780, 2973, 3036, 3839, 3511, 2778, 3510,
                    3753, 3035, 3838, 3509, 2776, 2971, 3034, 3837, 3507, 
                   2773, 3506, 3752, 3033, 2968, 2979}, VertexColors -> None], 
                  
                  Line3DBox[{2812, 3266, 3772, 3578, 2811, 3921, 3265, 3264, 
                   3910, 2810, 3263, 3771, 3577, 2809, 3920, 3262, 3261, 3909,
                    2808, 3260, 3770, 3576, 2807, 3919, 2986, 2985, 3820, 
                   2806, 3107, 2984, 3066, 3860, 3521, 3283, 3106, 3313, 3301,
                    3179, 3178, 3219, 3877, 2983, 3177, 2982, 3234, 3896, 
                   2805, 3233, 3769, 3563, 2804, 3918, 3259, 3258, 3908, 2803,
                    3257, 3768, 3575, 2802, 3917, 3256, 3255, 3907, 2801, 
                   3254, 3767, 3574, 2800, 3573, 3766, 3253, 3332}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2814, 3452, 3773, 2813, 3672, 2896, 2815, 3673, 
                   3453, 3774, 2816, 3674, 2897, 2817, 3675, 3454, 3775, 2818,
                    3564, 3676, 2898, 3235, 3897, 2987, 3180, 3555, 3891, 
                   3220, 3208, 3393}, VertexColors -> None], 
                  
                  Line3DBox[{2824, 2901, 3682, 2823, 3777, 3457, 3681, 2822, 
                   2900, 3680, 2821, 3776, 3456, 3679, 2820, 2899, 3678, 2819,
                    3821, 3455, 2988, 3845, 3042, 3078, 3077, 3067, 3677, 
                   3522, 3284, 3108, 3320, 3302, 3395}, VertexColors -> None], 
                  
                  Line3DBox[{2828, 3683, 2902, 2826, 3684, 2903, 2830, 3686, 
                   3687, 2904, 2832, 3688, 2905, 2834, 3690, 3691, 2906, 2836,
                    3566, 3692, 2907, 3237, 3523, 3693, 3183, 3556, 3879, 
                   2908, 3209, 3307, 3308, 3268, 3911, 3544, 2994, 3125, 2909,
                    3043, 3525, 3694, 3044, 3846, 2910, 2840, 3527, 3695, 
                   3045, 2911, 2842, 3528, 3696, 3046, 3847, 2912, 2844, 3530,
                    3697, 3047, 2913, 2846, 3531, 3698, 3048, 3848, 2914, 
                   2848, 3533, 3699, 3050, 2915, 3049}, VertexColors -> None], 
                  Line3DBox[{2849, 3001, 3786, 3532, 2847, 3826, 3000, 2999, 
                   3827, 2845, 2998, 3785, 3529, 2843, 3824, 2997, 2996, 3825,
                    2841, 2995, 3784, 3526, 2839, 3822, 2993, 2992, 3823, 
                   2838, 3110, 2991, 3068, 3861, 3524, 3285, 3109, 3314, 3303,
                    3389}, VertexColors -> None], 
                  
                  Line3DBox[{2850, 3587, 3942, 2916, 3355, 3588, 3943, 2917, 
                   3356, 3932, 3589, 3463, 3934, 3357, 3590, 3944, 2918, 3358,
                    3933, 3591, 1877, 3359, 2467, 3371, 2919, 3368, 3936, 
                   3366, 3372, 3189, 3935, 3193, 3373, 3391}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2926, 3114, 3113, 3022, 3614, 3471, 3199, 3142, 
                   3143, 3796, 3547, 3021, 2925, 3198, 3867, 3139, 3141, 3140,
                    3020, 3613, 3470, 3197, 3137, 3138, 3795, 3546, 3019, 
                   2924, 3196, 3866, 3134, 3136, 3135, 3018, 3612, 3469, 3195,
                    3132, 3133, 3794, 3545, 3017, 2923, 3128, 3828, 3016, 
                   3112, 3111, 3122, 3863, 3468, 3269, 3121, 3317, 3306, 
                   3396}, VertexColors -> None], 
                  
                  Line3DBox[{3012, 3011, 3787, 3537, 2851, 1879, 2852, 3700, 
                   3464, 3788, 2853, 3465, 3789, 2854, 3701, 3466, 3790, 2855,
                    3567, 3791, 3239, 2856, 3899, 3240, 3013, 3190, 3014, 
                   3883, 3222, 3191, 3386}, VertexColors -> None], 
                  
                  Line3DBox[{3119, 3118, 3010, 3056, 3888, 3536, 3214, 2862, 
                   3188, 3882, 3009, 3055, 3008, 3213, 3887, 2861, 3187, 3007,
                    3054, 3886, 3535, 3212, 2860, 3186, 3881, 3006, 3053, 
                   3005, 3211, 3885, 2859, 3185, 3004, 3052, 3884, 3534, 3210,
                    2858, 3184, 3880, 3003, 3051, 3002, 3131, 3865, 2857, 
                   3127, 3015, 3120, 3864, 3538, 3286, 3126, 3315, 3309, 
                   3390}, VertexColors -> None], 
                  
                  Line3DBox[{3160, 3115, 2949, 3374, 3871, 3158, 3159, 3157, 
                   3202, 3491, 3651, 3375, 3162, 3163, 3161, 3872, 3203, 2954,
                    3376, 3549, 3808, 3165, 3164, 3204, 3496, 3652, 3377, 
                   3167, 3168, 3166, 3873, 3205, 2959, 3378, 3550, 3809, 3170,
                    3169, 3206, 3501, 3653, 3379, 3172, 3173, 3171, 3874, 
                   3207, 2964, 3380, 3541, 3890, 3218, 3116, 3387}, 
                   VertexColors -> None], 
                  Line3DBox[{3334, 3922, 3397}, VertexColors -> None], 
                  Line3DBox[{3335, 3592}, VertexColors -> None], 
                  Line3DBox[{3336, 3923, 3593}, VertexColors -> None], 
                  Line3DBox[{3337, 3594}, VertexColors -> None], 
                  Line3DBox[{3338, 3924, 3595}, VertexColors -> None], 
                  Line3DBox[{3339, 3596}, VertexColors -> None], 
                  Line3DBox[{3340, 3925, 3597}, VertexColors -> None], 
                  Line3DBox[{3341, 3598}, VertexColors -> None], 
                  Line3DBox[{3342, 3926, 3599}, VertexColors -> None], 
                  Line3DBox[{3343, 3600}, VertexColors -> None], 
                  Line3DBox[{3344, 3601}, VertexColors -> None], 
                  Line3DBox[{3345, 3927, 3398}, VertexColors -> None], 
                  Line3DBox[{3346, 3602}, VertexColors -> None], 
                  Line3DBox[{3347, 3928, 3399}, VertexColors -> None], 
                  Line3DBox[{3348, 3603}, VertexColors -> None], 
                  Line3DBox[{3349, 3929, 3400}, VertexColors -> None], 
                  Line3DBox[{3350, 3604}, VertexColors -> None], 
                  Line3DBox[{3351, 3930, 3401}, VertexColors -> None], 
                  Line3DBox[{3352, 3605}, VertexColors -> None], 
                  Line3DBox[{3353, 3931, 3402}, VertexColors -> None], 
                  
                  Line3DBox[{3354, 3360, 3937, 3580, 2685, 3615, 3361, 3581, 
                   2686, 3616, 3362, 3938, 3582, 2687, 3617, 3363, 3583, 2688,
                    3618, 3364, 3939, 3584, 2689, 3579, 3940, 3585, 3367, 
                   2690, 3941, 3586, 3224, 3365, 3370, 3145, 3369, 3702, 3147,
                    3146, 3381, 3383}, VertexColors -> None], 
                  
                  Line3DBox[{3385, 3182, 3221, 3878, 2990, 3181, 2989, 3238, 
                   3898, 2837, 3236, 3783, 3565, 2835, 3782, 3462, 3689, 2833,
                    3781, 3461, 2831, 3780, 3460, 3685, 2829, 3779, 3459, 
                   2825, 3778, 3458, 2827}, VertexColors -> None], 
                  
                  Line3DBox[{3394, 3299, 3310, 3102, 3280, 3503, 3654, 3063, 
                   3073, 3074, 3032, 3836, 2967, 3429, 3810, 2755, 3655, 2886,
                    2757, 3656, 3432, 3741, 2759, 3657, 2887, 2761, 3658, 
                   3435, 3745, 2763, 3659, 2888, 2765}, VertexColors -> 
                   None]}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{1555, 1767, 3607, 1556, 2487, 2455, 3615, 2468, 
                   2508, 1580, 3704, 1778, 3620, 1592, 1788, 3630, 1610, 3927,
                    2650}, VertexColors -> None], 
                  
                  Line3DBox[{1557, 1768, 3608, 1559, 2488, 2456, 3616, 2469, 
                   2509, 1581, 1779, 3621, 3622, 1593, 1789, 3631, 1611, 
                   2451}, VertexColors -> None], 
                  
                  Line3DBox[{1561, 1770, 3609, 1562, 2490, 2457, 3617, 2470, 
                   2511, 1583, 3706, 1781, 3623, 1595, 1791, 3632, 1613, 3928,
                    2652}, VertexColors -> None], 
                  
                  Line3DBox[{1563, 1771, 3610, 1565, 2491, 2458, 3618, 2471, 
                   2512, 1584, 1782, 3624, 1596, 1792, 3633, 1614, 2452}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1567, 1773, 3611, 1568, 2493, 3940, 2465, 2482, 
                   2520, 2310, 1586, 3708, 2313, 2314, 3625, 1598, 3715, 2318,
                    2319, 2675}, VertexColors -> None], 
                  
                  Line3DBox[{1569, 1891, 3793, 1893, 2206, 2312, 2504, 3941, 
                   2483, 2466, 2311, 1910, 2208, 2316, 2317, 2315, 3892, 1927,
                    2210, 2321, 3893, 2322, 2320, 2434, 2433, 2676}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1571, 1896, 2054, 2184, 3828, 2183, 2185, 2535, 
                   2569}, VertexColors -> None], 
                  
                  Line3DBox[{1572, 1900, 2190, 1901, 3612, 2262, 2055, 2558}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1573, 1902, 2194, 2264, 3866, 2263, 2265, 2536, 
                   2571}, VertexColors -> None], 
                  
                  Line3DBox[{1575, 1904, 2196, 1905, 3613, 2266, 2056, 2559}, 
                   VertexColors -> None], 
                  Line3DBox[{1576, 1906, 2200, 2268, 3867, 2267, 2269, 2537, 
                   2573}, VertexColors -> None], 
                  
                  Line3DBox[{1578, 1908, 2202, 1909, 3614, 2270, 2057, 2560}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1706, 2007, 3821, 1857, 1723, 2014, 3822, 1872, 
                   3846, 1740, 2157, 2528, 2577}, VertexColors -> None], 
                  
                  Line3DBox[{1751, 1878, 2042, 3787, 1743, 2514, 3942, 1875, 
                   2478, 2494, 1731, 3683, 1865, 3778, 1714, 1850, 3773, 1699,
                    3922, 2635}, VertexColors -> None], 
                  
                  Line3DBox[{1752, 1879, 1744, 2515, 3943, 2472, 2459, 2495, 
                   1732, 3684, 1866, 3779, 1715, 3672, 1851, 1700, 2636}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1754, 1881, 3788, 1746, 2516, 1876, 3934, 2479, 
                   2497, 1734, 3687, 1868, 3780, 1717, 1853, 3774, 1702, 3923,
                    2638}, VertexColors -> None], 
                  
                  Line3DBox[{1755, 1882, 3789, 1747, 2517, 3944, 2473, 2461, 
                   2498, 1735, 3688, 1869, 3781, 1718, 3674, 1854, 1703, 
                   2639}, VertexColors -> None], 
                  
                  Line3DBox[{1757, 1884, 3790, 1749, 2519, 1877, 2480, 2500, 
                   1737, 3691, 1871, 3782, 1720, 1856, 3775, 1705, 3924, 
                   2641}, VertexColors -> None], 
                  
                  Line3DBox[{1758, 2349, 2348, 3791, 1750, 2467, 2484, 2505, 
                   2344, 1738, 3692, 2340, 2339, 3783, 1721, 3676, 2335, 2334,
                    2430}, VertexColors -> None], 
                  
                  Line3DBox[{1759, 1885, 2236, 3880, 2030, 2238, 2239, 2562}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1760, 2033, 2237, 2032, 3884, 2288, 2086, 2594}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1762, 1886, 2241, 3881, 2034, 2243, 2244, 2563}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1763, 2037, 2242, 2036, 3886, 2292, 2087, 2595}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1765, 1887, 2246, 3882, 2038, 2248, 2249, 2564}, 
                   VertexColors -> None], 
                  Line3DBox[{1899, 1897, 2189, 3794, 2191, 2192, 2193, 2583}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2047, 2044, 2350, 2352, 3899, 2351, 2250, 2464, 
                   3936, 2485, 2506, 2345, 2347, 2346, 2234, 3693, 2010, 2341,
                    2343, 3898, 2342, 2232, 2003, 3897, 2336, 2338, 2337, 
                   2230}, VertexColors -> None], 
                  
                  Line3DBox[{2049, 2181, 2182, 2046, 2396, 2045, 3864, 2180, 
                   2174, 2614}, VertexColors -> None], 
                  
                  Line3DBox[{2050, 2031, 2048, 2188, 3865, 2187, 2287, 2538, 
                   2605}, VertexColors -> None], 
                  
                  Line3DBox[{2051, 2041, 2247, 2040, 3888, 2296, 2088, 2596}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2052, 1890, 1766, 3606, 1554, 2486, 3937, 2475, 
                   1774, 2507, 1579, 3703, 1777, 3619, 1591, 3712, 1787, 1609,
                    2649}, VertexColors -> None], 
                  
                  Line3DBox[{2053, 2165, 1892, 2534, 3792, 2260, 2261, 1570, 
                   2207, 3702, 2463, 2501, 2297, 2253, 2254, 1587, 3868, 2209,
                    1926, 2298, 2271, 2272, 1599, 2211, 1931, 3869, 2299, 
                   2273, 2274, 2674}, VertexColors -> None], 
                  
                  Line3DBox[{2105, 2153, 2004, 2394, 2005, 3677, 2154, 2106, 
                   2155, 3861, 2011, 2395, 2012, 2257, 2178, 3911, 2016, 2171,
                    2179, 2524, 2593}, VertexColors -> None], 
                  
                  Line3DBox[{2167, 2166, 2175, 1894, 2380, 1895, 3863, 2177, 
                   2176, 1898, 2556}, VertexColors -> None], 
                  
                  Line3DBox[{2252, 2173, 2172, 2306, 3883, 2043, 2251, 2522, 
                   2259, 3935, 2481, 2502, 2258, 2503, 2305, 2029, 2235, 1739,
                    3879, 2286, 2285, 2304, 3878, 2009, 2233, 2521, 2284, 
                   2283, 3891, 2303, 2002, 2231, 2431}, VertexColors -> None], 
                  
                  Line3DBox[{2432, 2006, 2078, 3845, 2008, 1722, 2013, 3823, 
                   2079, 2015, 3694, 2080, 2156, 2576}, VertexColors -> None], 
                  
                  Line3DBox[{2549, 3651, 1949, 2215, 1948, 3729, 1642, 1809, 
                   1624, 3640, 2356, 2399, 2437, 2659}, VertexColors -> None], 
                  Line3DBox[{2550, 3652, 1956, 2219, 1955, 3732, 1645, 1812, 
                   3720, 1627, 3641, 2358, 2402, 2438, 2660}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2551, 3653, 1963, 2223, 1962, 3735, 1648, 2326, 
                   2325, 3722, 1630, 3642, 2323, 2405, 2598}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2552, 2385, 3912, 1947, 2094, 2113, 2114, 1668, 
                   3752, 1973, 1839, 3662, 1681, 3766, 2365, 2414, 2442, 
                   2664}, VertexColors -> None], 
                  
                  Line3DBox[{2553, 2387, 1954, 3855, 2097, 2115, 2116, 1669, 
                   3753, 1977, 3811, 1840, 1684, 2368, 3917, 2417, 2443, 
                   2665}, VertexColors -> None], 
                  
                  Line3DBox[{2554, 2389, 1961, 3857, 2100, 2117, 2118, 1670, 
                   3754, 1982, 3813, 1841, 1687, 2371, 3918, 2420, 2444, 
                   2666}, VertexColors -> None], 
                  
                  Line3DBox[{2555, 2392, 1969, 3859, 2103, 2119, 2120, 1671, 
                   3862, 2169, 1987, 1994, 3815, 2255, 2256, 1689, 2229, 1998,
                    3877, 2302, 2597}, VertexColors -> None], 
                  
                  Line3DBox[{2557, 2422, 3919, 2001, 1691, 1842, 3819, 1996, 
                   3756, 1673, 1831, 3817, 1990, 1660, 1823, 3810, 1971, 3737,
                    1651, 1815, 3806, 1944, 1633, 1805, 3805, 2406, 2628}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2561, 2548, 2077, 3820, 2000, 1690, 1997, 3844, 
                   2076, 1995, 3755, 1672, 1991, 2074, 3818, 1989, 1659, 1972,
                    3836, 2067, 1970, 3736, 1650, 1945, 2066, 3807, 1943, 
                   1632, 1938, 3835, 2065, 2547, 2632}, VertexColors -> None], 
                  
                  Line3DBox[{2565, 2124, 2058, 3829, 1911, 1930, 3802, 1913, 
                   1600, 1934, 3804, 2064, 2436, 2435, 2677}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2566, 2126, 2060, 3831, 1916, 3799, 1918, 1603, 
                   1796, 3635, 1617, 2453}, VertexColors -> None], 
                  
                  Line3DBox[{2567, 2128, 2062, 3833, 1921, 3801, 1923, 1606, 
                   1799, 3637, 1620, 2454}, VertexColors -> None], 
                  
                  Line3DBox[{2568, 2523, 2121, 2089, 3849, 2130, 1928, 2381, 
                   1929, 3626, 2131, 2090, 2132, 3852, 1932, 2382, 1933, 2133,
                    2673}, VertexColors -> None], 
                  
                  Line3DBox[{2570, 2525, 2125, 2059, 3830, 1914, 1915, 3627, 
                   1602, 1795, 3634, 1616, 3929, 2654}, VertexColors -> None], 
                  
                  Line3DBox[{2572, 2526, 2127, 2061, 3832, 1919, 1920, 3628, 
                   1605, 1798, 3636, 1619, 3930, 2656}, VertexColors -> None], 
                  
                  Line3DBox[{2574, 2527, 2129, 2063, 3834, 1924, 1925, 3629, 
                   1608, 1801, 3638, 1622, 3931, 2658}, VertexColors -> None], 
                  
                  Line3DBox[{2575, 2393, 1999, 3860, 2152, 2104, 2151, 3666, 
                   1993, 2379, 1992, 2282, 2170, 3843, 2075, 2123, 2186, 1889,
                    2397, 1888, 3851, 2122, 2093, 2147, 3654, 1968, 2391, 
                   1967, 2146, 3850, 2092, 2136, 1942, 2384, 1941, 3853, 2135,
                    2091, 2134, 3643, 1937, 2383, 2604}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2578, 2159, 2082, 3696, 2021, 3825, 2019, 1725, 
                   3679, 1859, 1708, 2643}, VertexColors -> None], 
                  
                  Line3DBox[{2579, 2530, 2160, 1741, 3847, 1873, 3824, 2020, 
                   1726, 1860, 3776, 1709, 3925, 2644}, VertexColors -> None], 
                  
                  Line3DBox[{2580, 2162, 2084, 3698, 2026, 3827, 2024, 1728, 
                   3681, 1862, 1711, 2646}, VertexColors -> None], 
                  
                  Line3DBox[{2581, 2532, 2163, 1742, 3848, 1874, 3826, 2025, 
                   1729, 1863, 3777, 1712, 3926, 2647}, VertexColors -> None], 
                  
                  Line3DBox[{2582, 2168, 3890, 2301, 1966, 2309, 2227, 3876, 
                   1649, 2278, 2277, 2300, 3870, 1939, 2213, 1631, 2276, 2275,
                    3889, 2541, 2586}, VertexColors -> None], 
                  
                  Line3DBox[{2584, 2199, 2198, 2197, 3795, 2195, 1903, 1574}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2585, 2205, 2204, 2203, 3796, 2201, 1907, 1577}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2587, 3871, 2216, 2214, 1946, 3728, 1641, 1808, 
                   3718, 1623, 3639, 1802, 2398, 2615}, VertexColors -> None], 
                  Line3DBox[{2588, 3872, 2279, 2217, 1952, 3730, 1643, 3647, 
                   1810, 1625, 2357, 3913, 2400, 2600}, VertexColors -> None], 
                  
                  Line3DBox[{2589, 2220, 3808, 2218, 1953, 3731, 1644, 1811, 
                   3719, 1626, 1803, 3903, 2401, 2616}, VertexColors -> None], 
                  
                  Line3DBox[{2590, 3873, 2280, 2221, 1959, 3733, 1646, 3648, 
                   1813, 1628, 2359, 3914, 2403, 2601}, VertexColors -> None], 
                  
                  Line3DBox[{2591, 2224, 3809, 2222, 1960, 3734, 1647, 1814, 
                   3721, 1629, 1804, 3904, 2404, 2617}, VertexColors -> None], 
                  
                  Line3DBox[{2592, 3874, 2281, 2225, 2308, 2307, 3875, 2226, 
                   1940, 2327, 2329, 3895, 2328, 2212, 1936, 3894, 2324, 2542,
                    2633}, VertexColors -> None], 
                  
                  Line3DBox[{2599, 2543, 2331, 2333, 3896, 2332, 2228, 1988, 
                   3816, 1986, 3842, 2073, 2149, 2150, 2102, 2148, 3902, 2355,
                    2546, 2613}, VertexColors -> None], 
                  
                  Line3DBox[{2602, 2408, 3915, 2361, 1635, 1817, 3649, 1653, 
                   3739, 1825, 3656, 1662, 1833, 3660, 1675, 3758, 1844, 3668,
                    1693, 2373, 3909, 2424, 2449, 2670}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2603, 2411, 3916, 2363, 1638, 1820, 3650, 1656, 
                   3743, 1828, 3658, 1665, 1836, 3661, 1678, 3762, 1847, 3670,
                    1696, 2376, 3910, 2427, 2450, 2671}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{1541, 2447, 2416, 3907, 2367, 1683, 1978, 3812, 
                   1976, 3838, 2069, 2139, 2140, 2096, 2138, 3900, 2353, 2544,
                    2609}, VertexColors -> None], 
                  
                  Line3DBox[{2606, 2539, 2291, 2289, 3885, 2290, 2240, 2035, 
                   1761}, VertexColors -> None], 
                  
                  Line3DBox[{2607, 2540, 2295, 2293, 3887, 2294, 2245, 2039, 
                   1764}, VertexColors -> None], 
                  
                  Line3DBox[{2608, 2386, 3854, 1950, 2095, 1951, 2137, 2068, 
                   3837, 1974, 1975, 3663, 1682, 3767, 2366, 2415, 2620}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2610, 2388, 3856, 1957, 2098, 1958, 2141, 2070, 
                   3839, 1979, 1980, 3664, 1685, 3768, 2369, 2418, 2621}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2611, 2545, 2354, 3901, 2142, 2099, 2144, 2143, 
                   2071, 3840, 1981, 3814, 1983, 1686, 2370, 3908, 2419, 2448,
                    2669}, VertexColors -> None], 
                  
                  Line3DBox[{2612, 2390, 3858, 1964, 2101, 1965, 2145, 2072, 
                   3841, 1984, 1985, 3665, 1688, 3769, 2330, 2421, 2634}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2618, 2409, 3905, 1806, 1636, 3724, 1818, 1654, 
                   3740, 3741, 1826, 1663, 3748, 1834, 1676, 3759, 3760, 1845,
                    1694, 2374, 3920, 2425, 2445, 2667}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2619, 2412, 3906, 1807, 1639, 3726, 1821, 1657, 
                   3744, 3745, 1829, 1666, 3750, 1837, 1679, 3763, 3764, 1848,
                    1697, 2377, 3921, 2428, 2446, 2668}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2622, 2423, 2372, 3770, 1692, 3667, 1843, 3757, 
                   1674, 1832, 3747, 1661, 3655, 1824, 3738, 1652, 1816, 3723,
                    1634, 3644, 2360, 2407, 2439, 2661}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2623, 2426, 2375, 3771, 1695, 3669, 1846, 3761, 
                   1677, 1835, 3749, 1664, 3657, 1827, 3742, 1655, 1819, 3725,
                    1637, 3645, 2362, 2410, 2440, 2662}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2624, 2429, 2378, 3772, 1698, 3671, 1849, 3765, 
                   1680, 1838, 3751, 1667, 3659, 1830, 3746, 1658, 1822, 3727,
                    1640, 3646, 2364, 2413, 2441, 2663}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{2625, 2107, 2108, 1588, 3709, 1912, 3797, 1784, 
                   1601, 1935, 3803, 1794, 2672}, VertexColors -> None], 
                  
                  Line3DBox[{2626, 2109, 2110, 1589, 3710, 1917, 3798, 1785, 
                   1604, 3716, 1797, 1618, 2655}, VertexColors -> None], 
                  
                  Line3DBox[{2627, 2111, 2112, 1590, 3711, 1922, 3800, 1786, 
                   1607, 3717, 1800, 1621, 2657}, VertexColors -> None], 
                  
                  Line3DBox[{2629, 2529, 2158, 2081, 3695, 2018, 2017, 3784, 
                   1724, 3678, 1858, 1707, 2642}, VertexColors -> None], 
                  
                  Line3DBox[{2630, 2531, 2161, 2083, 3697, 2023, 2022, 3785, 
                   1727, 3680, 1861, 1710, 2645}, VertexColors -> None], 
                  
                  Line3DBox[{2631, 2533, 2164, 2085, 3699, 2028, 2027, 3786, 
                   1730, 3682, 1864, 1713, 2648}, VertexColors -> None], 
                  
                  Line3DBox[{2637, 1701, 1852, 3673, 1716, 1867, 3685, 3686, 
                   1733, 2496, 2460, 857, 3932, 1745, 1880, 3700, 1753}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2640, 1704, 1855, 3675, 1719, 1870, 3689, 3690, 
                   1736, 2499, 2462, 2474, 2518, 3933, 1748, 1883, 3701, 
                   1756}, VertexColors -> None], 
                  
                  Line3DBox[{2651, 1612, 1790, 3713, 1594, 1780, 3705, 1582, 
                   2510, 1775, 2476, 3938, 2489, 1560, 1769, 1558}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{2653, 1615, 1793, 3714, 1597, 1783, 3707, 1585, 
                   2513, 1776, 2477, 3939, 2492, 1566, 1772, 1564}, 
                   VertexColors -> None]}, {}, {}}}, 
               VertexColors -> CompressedData["
1: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
kpeWfhKnfhfpvDJZ56R9l387p34v6d63v4W/QDwQcdJ9Ckw5pZ90b9rfwkn3
n/4tXNL75mqbK/noDFOVK4HiuJHD83Xo8RkPH3b6hJUA59MljZQdtN14CMWp
3mJxqvpID+cP6wkKKZ/pfo8LBaO/blEyoMfPXcRzJeRL8gNsFVYXQZDdup3m
SfR77LPdIdh1EAeyirpfVbtL20uvUPwnB4v/WCE9gQz1ZEuoxyq5mXxkkgDs
w8dvjBFwGfPP/T9FmS8WwB4XU6tZAwogSikuaVrdKNjVUpDUbJ0QjkwJMIk5
UQiTDW712+pN2xtnUDznJornfEJ6dmN6XJEeD6Rn0i/qoeQ96qkK+G/5EPLC
t4nWUzpusH7hDYXxIwWwU/VQ7sAdtB1IitvYTyxoq1rOB7P7ca19/oCeOwpx
ru80SmGzbcP2nbmZYLVYUCdLNxICEd+A8duIr0d8CeKU/oqgUzvvq/Ahrfvl
AwGXCxnzlucf7izgcqG+3HK5dnbJ8H6s8E7P1eHwZmVo/5EVPOir4XM7cnQa
rNIflxjcIAKSURxjJopjlKA4BqWnnoR6kpAeA4IeRaTnHdJDtX/zuelG7k6l
0HdwnWeWmfT8MHpc07PKUAZ944PH5MjTcYnWKC7REotXkPSMRXo0f1MPqT19
IxutUhhcDDPzWLmvEug4/2vL+IeuH4phTtOBMYWq9PwWhPz0uZifXlt6Moti
dq/hc0DfaKd622L6vCPfnXvSPt3ggoHLq8aNdOj50wr54waYP/6remZIqMcH
6dHH9CwpXtOm+04BaNgPX/qoP/39WjLke+q5neWdZ8Mhz13PttSh49gG/pNe
2S4tAo/y+b6Wp+n5uTXyr6dj/vVepOcIpscQ6TkqoR6m7emwf/hqPqsM+G/W
OAwuo8enmr/SvNYt+NBqznC9aF963qD8uJGYf0fpKcX0dEV6VH5Rzz3DffHW
dUqgVHW13oHyl9A1zc3Y/VQEvJmyeohtm1IobX7KKDg8Ey6ZypVbDIqE7chf
++ZV3e+ztHHq+1CxBF66lNo9ffMSeiq3P9H/D+ihfte5GLX9a26VwLMtB0el
z6C/u2U2hemfHErBOu2ritUzet7QRP6aNebHUXriMT02SI/VL+ppXb45bnYU
BzbcfK7m5pQIt+7ubpD1PEwsX4txSv/skjx/ng0PYsv1XeRs6O90FuIsCbli
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
OKW/pvPa+Hiu7fi2rORnKf21FW+UdtyypuO3ePyqpvIF0o7/S6pH0ji/uPg/
9buYxsdk5ZxbaftZNf19MT1/hun5sbJyjg2JS+uc1Zo+D4cp/9vOz8G5tOOi
ePxT2nkZaZ3/Iy0urfgkyQ+trXOHZOX8Iqa8ts4VlPa5SUztZ1nTj3NZ3dfM
NA5MshNqOj/IlP9u3LWmz1GnnivpOiutfN+fOj+8ps5H+ls49buYxm+Z5jel
la/8b82HSvscDEn3q/4q/91zqmv6nG1Zr+en9NeUHSWr+d+aOleK0l9b5/Ti
cWaKSxoP+dW4ek3FAX6VM/XTSfVFkq6/0vZPpXWuLFM/UVrn10l63gXTfSXS
OleNKf/bzuP628/XkpVztMT1M1P7TdJ9KxSv7f1lVL0K6fsVtw72R+/XH71f
cXF1SfPav3q+x0fk/74Vsy9Y3L5p0rkWv8tJ/tFIxL8i7oz5TSS7kWT/vETx
lns1tJ9dVu4RIMXJxdUtkOxeSc9jqe28eU3t4/5T+Yia8oPEzfP4vCft38t0
X1tN+32/m+9mmr9muk+Neq609osxrQcQt1/pT+8LYyrP9L4AnP8LNGXnTg==

                "], VertexNormals -> CompressedData["
1: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
YsCsDUby8NbEPw2ZTc6FPQeFB36qZCEXHZoBfMaL75J69dMv62vfj5TtpvSL
Kf1O/d3r4teXkn8+SOhnUfoPGy7YBdbdKoug9Iso/ZjD2ldyOk+V5VP6iZR+
pf/acbICPuFLh8B4NT9kA/MnQgb04g4PgmG89h8PhflwfNW4HK6deym9K6W3
Mg19V9AvCd+vZfS77RjvFtVmvK8U0aFHoKuW6Ci2w4fsPF2No99K6zz3onWe
k+JP7zF8sjvxSEX7Rm9OvpHWbfG4R8tr96Tp6+u80NRMlOH9utIiydeqTZaL
K6H9Yq7E08TnaYQM1xmoM2/axnrDFgvsijHa57j4vBzXTa1A40KRg3aQ+Ey4
joIem1qlEeBbpTGA14V3lDITgtL1ib59/BXwauODgP+9lfUA1751GPC79B2i
btE1yLq4eEqBP66/6pTjBfHYVUdJfLXle8V4bEyH2cTunULeF/aOu3jwlEFK
/GpEz+Ljda5TFy7+uX0uiX8+PdBU0b+mcdH+NC6qvSwB3o3C9VfDIa7yTFB/
dbJuk5kf/F4n4Lya78ObTy3A3XGdVW1GfdevND7z5nY/Mo7aUxXaObFrOtCP
OF63yPuPkYy6rxMdx0Bca8ZZUmfv25IBwD+mQQ8jcxM9Ceaf+qBP4HKjMoI6
cjsZeUQy54Eh69Z/khXX/WLczv/r9HUCST1bqxeknu2li7ci7cdnJRjFViH2
z5krCnz2vyH1A+eXJfUDuy4a8sio0SCxB+Xz/TnhE3qxRCvzvtryBZT+FKUX
h/b+YKJtKrGl9HXod/dC3pepHOd98d/FdZ+aiY2dDcrYSl7fJXW2R7cgdbav
S3bOWVlqsiySfncR/W6eG4fPkyVRfKRC+yeIn1LcmeJvXAifZxSvQ/F3vYNW
z1z2p+wJxetTvDLUmdFk3rv8t+4FFNc9ArwfWahZt7aamvVpt9E6tKy6oL9L
Xscu0D+3ZFmo/UuV1O9iyQHXob3AqKNbkso/mtaJPUfrxK69nhffJ9/pMOa/
gb5fg+vlWjDq65afW3h9XWXtx/Rv3OOmffDLFbzzsoGOL65zO+fGGcg/xPWL
WPKxY9TvXUf7i/lbMur0stofCPWEO7ti+kqQH2IryPdwYNSLIPqhlCDfIJ9x
b/cr3OPWZ963VXX95jPOx79B/on5L/PncXXv5+L5k/Y360fhfJ5QRr1iKyX1
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
fBjrW5WBj23fCkNvVX8g8+hO6urUfEjr6oTWdMladj4x+HJvvZ6JGdKzYbEZ
c6pcZ47XouWnIB61ZNJLwF/FrYfvmh4z167c45n0svGW40MqPJW2NbrxeOSG
O9KkgWlOlpnHpfEP65626HFEOjb5vL6n/ztp2Q2+5yKvFvjrWsYnvNq/lN5w
CVjk0uqK1Pvg6FKV2z+QZWiSOFirs2Sddt8ins3p+cFUz++met47nOi91lSP
ZVA91tl2UTan37Ae2+uw3OCDsVBfRbfi9oU/xVgvJVuuPsfppfdUL32neimQ
UY+CVddCh1GP4sKeD9svR3w6yqo78av3RzK71w3P6JDljusedKZ1DA7RfP4Z
NJ8/xfKJhLtHsJLi+yn+nVFP4CWjbgDfHlX9cVYeMs9HVT+dx3n750gx1xmw
VLMOgL2adQC20nvimD8rn5bFh3WP3pS2H9/v7mOTN6Bm3RqCe/Tq3peP3JVn
kzuqckNMz7q3zrdf1XvrwehejzI+PK5u3q+qdSFY968t1Lx/vZhxz1pPzXvW
/H3envQeUCy952tUq9pb7t5uPYq/pnjHpOQsrj5JCF2/MXT9ejPyeLcz7uc6
0Hu4rPtBrHuU+H7rRsY92Qzdr3Aege+3fvKbAPlFmE+n5VfB3sPnKXrruHuv
mYL7kqFDBw06OfS74H7lOKh7/CwB38fE8ufrwxsx4lS9GOc1lxnn3dNoPgbr
/d/iyvNU977Mfwt/HA+syLhHw1rvRhBPsGD60erepyiu+yysOG1x1b0prns0
xfVdvA8uZuR3vZDcK7Cj0gXvnNoy4iQsnP8u3heU3TfBfNJpHjLGbRj3Rr8r
uZ/yq+94DvrmnNzRUJjPzIrD/936JBivoCRvk3Wexbr3oe49DnXzmf/TfHrT
8+VfvWfxmt6n6HiQ0HdvRuiP0fh8bXpO3QGdU6sbn1c3L0XV8x0ex/vdfca7
83olCr9PmsU4F1bWflX1POtd5ljGu8k1Ge/8yhjv55ZWkveC27OWUVcwnfFu
aSzjvVHmPX2GfFjn3RmMdzPzlLx3iefDE8Y7kjy9qvls+VOL571Fdc9/Lyg5
z1X1vPUR4/z0il7h7w19YcRLbWndTr6eZwtat3MwrfPJ1yeZM0UxjofrfAbu
uGpdWP3Pjo9Je1jxRnxv3Z7WRVE1ftuOEb+tiOK3rPiwLeX/5VP7x1z8eTON
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
                "]], {}}, 
             Method -> {
              "ShrinkWrap" -> False, "DefaultBoundaryStyle" -> Directive[
                 GrayLevel[0.3]], 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "RotationControl" -> "Globe"}, {
             DisplayFunction -> Identity, 
              PlotRange -> {Automatic, Automatic, All}, DisplayFunction -> 
              Identity, Ticks -> {Automatic, Automatic, Automatic}, FaceGrids -> 
              None, DisplayFunction -> Identity, Axes -> True, AxesLabel -> {
                FormBox[
                 TagBox["A", HoldForm], TraditionalForm], 
                FormBox[
                 TagBox["n", HoldForm], TraditionalForm], None}, 
              AxesOrigin -> {Automatic, Automatic, Automatic}, AxesStyle -> 
              Directive[
                GrayLevel[0.65], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], BaseStyle -> Automatic, BoxRatios -> {1, 1, 0.4}, 
              BoxStyle -> GrayLevel[0, 0.35], DisplayFunction :> Identity, 
              FaceGridsStyle -> Automatic, ImageSize -> 264., Lighting -> 
              "Neutral", Method -> {"DefaultBoundaryStyle" -> Directive[
                  GrayLevel[0.3]], 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "RotationControl" -> "Globe"}, 
              PlotRange -> {{-9.999998571428574, 
               9.999998571428574}, {-2.4770182108384224`, 
               2.4770182108384224`}, {-3.0490696318149753`, 
               3.1071347716381146`}}, PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02], 
                Scaled[0.02]}, Ticks -> {Automatic, Automatic, Automatic}}, 
             Method -> {"ResolveAsTriangles" -> False}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "3DMathPlot"}, {}], "\n "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[Arg[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], {A, -10., \
10.}, {n, -2.47702, 2.47702}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max805$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`max807$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min804$$ = -0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min806$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min804$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["A", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max805$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["A", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min806$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max807$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1899037$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min804$\
1899042$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max805$1899043$$ = 
                 0, CalculateUtilities`GraphicsUtilities`Private`min806$\
1899044$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max807$1899045$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max805$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`max807$$\
 = 0.5, CalculateUtilities`GraphicsUtilities`Private`min804$$ = -0.5, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`min806$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1899037$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min804$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min804$\
1899042$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max805$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max805$\
1899043$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min806$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min806$\
1899044$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max807$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max807$\
1899045$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    
                    Arg[($CellContext`A + $CellContext`A 
                    E^(Complex[0, -1] $CellContext`n Pi))/(2 Pi - 
                    2 $CellContext`n^2 Pi)], {$CellContext`A, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min804$$], 
                    (
                    Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min804$$], \
-10.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min804$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max805$$]], 
                    (Piecewise[{{
                    0. + 10.690449676496973` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    10.690449676496973` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min804$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max805$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min804$$ + 
                    0.02, CalculateUtilities`GraphicsUtilities`Private`max805$\
$]], 10.]}, {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min806$$], 
                    (
                    Piecewise[{{
                    0. + 2.6480442313655055` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.6480442313655055` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min806$$], \
-2.4770185646982172`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min806$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max807$$]], 
                    (
                    Piecewise[{{
                    0. + 2.6480442313655055` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.6480442313655055` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min806$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max807$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min806$$ + 
                    0.004954037129396434, 
                    CalculateUtilities`GraphicsUtilities`Private`max807$$]], 
                    2.4770185646982172`]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["A", TraditionalForm]], 
                    RawBoxes[
                    FormBox["n", TraditionalForm]]}, AspectRatio -> 1, 
                    ImageSize -> 264., ClippingStyle -> Automatic, FrameLabel -> 
                    Automatic, RotateLabel -> False, PlotRangePadding -> 0, 
                    ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min804$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["A", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max805$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["A", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min806$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max807$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVt9v0zAQbim/f8N/\
gMQzYmMP7AEJ6GBMGlCS8t5b7DQWrh1sZxv88+Czm6RZu0oxHaApfTjVl+bz3XffXe/JkYzSfq/\
X01et+SA5SW/\
g6bE1QznLZSHIu9NcUa2ZFOkVfHbbmpiaPcrhByXed92a91LNwPjzK3wfeFJwMPSrYZwZRvVkX0Ges\
UTXnpFix/YnEy4T4Ownfbr1cnf3+faOh8FYRmAMVUK/aAuZZwo0TXsIdM2atxzEN398VB4/\
FZzH9HtBRUL1A+sdKyAWRgrgmE/\
wrZebqbuYmAFBQJELp8nJc9j2Am0UE9MxneX4xvlkbbUFBjXVnpt7JTfrFOTDv4kPZOxi8h6XtDs7A\
sPCuGT0nZXVP+dugOfXbeGVPFlNHOb3hiNvYNgx1ct0PmtdJ89I1bUu+jlXFzVfNhrk+VOm/\
l86ZNosh7HdNgw6O7I1Xq29ZfidtvAyx66fi/u+NZ+9owRcNRwqwX2UpODzKJopD7xE26erc+\
vwGHcqvmN0hlSwwolsnGW/\
uP54WIHXm0KMtZtsQDqingERzal1EcftHpsyM8xAQWKB59f1yyYbyzqUgDvb154JwuwA84SsW57QHK\
QLdQeTZF/+qLiVXM40GfJ+IAydUrVW9LewPsqSK8hYBkYS4wVNvQZzWCU1AhUs+0EJEucgGEKyX/\
bjvvmHi5VAqvYVqkt5FgeuNKfhSfTLAh9SMTVZc8cOHF3BbYvZRPKkVl3E0nRx2myO6X6T6cYNzYEe\
SkJoScIHercpdJvCX90Ulvbgbk3o1oRuTejWhG5N+H/XBBcx/iv9BsB1uKY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "ContourPlot"}, {}], "\n "}]}],
    Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Interactive plot", "scanner" -> "Sequence", "id" -> 
     "Plots", "position" -> "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`SequenceScanner`Private`iv$1622860$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`SequenceScanner`Private`nn$1622860$$ = 3, 
                 CalculateScan`SequenceScanner`Private`xmax2$1622860$$ = 
                 1.5366096182372169`, 
                 CalculateScan`SequenceScanner`Private`xmin2$1622860$$ = \
-1.5508771774946717`, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`SequenceScanner`Private`nn$1622860$$], 
                    3, 
                    Style["A", Italic]}, 0, 6, 1}, {{
                    Hold[CalculateScan`SequenceScanner`Private`nn$1622860$$], 
                    3, 
                    Style["A", Italic]}, 0, 6}, {{
                    Hold[CalculateScan`SequenceScanner`Private`iv$1622860$$], 
                    True, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
1622861["integer `1` only", {
                    Style["A", Italic]}]}, {True, False}}, {{
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmin2$1622860$$], \
-1.5508771774946717`, 
                    Subscript[
                    Defer[$CellContext`n], 
                    "min"]}, -3.094620575360616, -0.022571213607386897`}, {{
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmax2$1622860$$], 
                    1.5366096182372169`, 
                    Subscript[
                    Defer[$CellContext`n], "max"]}, -0.00713377962872741, 
                    3.080353016103161}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    
                    PaneSelector[{
                    True -> Manipulate`Place[1], False -> 
                    Manipulate`Place[2]}, 
                    Dynamic[
                    CalculateScan`SequenceScanner`Private`iv$1622860$$]], 
                    Manipulate`Place[3]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Manipulate`Place[4], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[5], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1624302$$ = 
                 False, CalculateScan`SequenceScanner`Private`nn$1622860$\
1624303$$ = 0, CalculateScan`SequenceScanner`Private`iv$1622860$1624304$$ = 
                 False, CalculateScan`SequenceScanner`Private`xmin2$1622860$\
1624309$$ = 0, CalculateScan`SequenceScanner`Private`xmax2$1622860$1624310$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`SequenceScanner`Private`iv$1622860$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`SequenceScanner`Private`nn$1622860$$ = 
                    3, CalculateScan`SequenceScanner`Private`xmax2$1622860$$ = 
                    1.5366096182372169`, 
                    CalculateScan`SequenceScanner`Private`xmin2$1622860$$ = \
-1.5508771774946717`}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1624302$\
$, False], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`nn$1622860$$, 
                    CalculateScan`SequenceScanner`Private`nn$1622860$1624303$$\
, 0], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`iv$1622860$$, 
                    CalculateScan`SequenceScanner`Private`iv$1622860$1624304$$\
, False], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmin2$1622860$$, 
                    CalculateScan`SequenceScanner`Private`xmin2$1622860$\
1624309$$, 0], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmax2$1622860$$, 
                    CalculateScan`SequenceScanner`Private`xmax2$1622860$\
1624310$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Plot[
                    
                    Arg[(CalculateScan`SequenceScanner`Private`nn$1622860$$ + 
                    E^(Complex[0, -1] $CellContext`n Pi) 
                    CalculateScan`SequenceScanner`Private`nn$1622860$$)/(2 Pi - 
                    2 $CellContext`n^2 Pi)], {$CellContext`n, 
                    CalculateScan`SequenceScanner`Private`xmin2$1622860$$, 
                    CalculateScan`SequenceScanner`Private`xmax2$1622860$$}, 
                    PlotRange -> Automatic, ImageSize -> {300, Automatic}, 
                    Epilog -> Style[
                    Text[
                    Row[{
                    Style["A", Italic], "=", 
                    If[
                    CalculateScan`SequenceScanner`Private`iv$1622860$$, 
                    CalculateScan`SequenceScanner`Private`nn$1622860$$, 
                    SetPrecision[
                    If[
                    CalculateScan`SequenceScanner`Private`nn$1622860$$ != 0, 
                    CalculateScan`SequenceScanner`Private`nn$1622860$$, 
                    "0.00"], 
                    Which[
                    Abs[CalculateScan`SequenceScanner`Private`nn$1622860$$] < 
                    1/10, 1, 
                    Abs[CalculateScan`SequenceScanner`Private`nn$1622860$$] < 
                    1, 2, True, 3]]]}], 
                    Scaled[{0.1, 0.9}]], 12]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`SequenceScanner`Private`nn$1622860$$, 3, 
                    Style["A", Italic]}, 0, 6, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 1}, {{
                    CalculateScan`SequenceScanner`Private`nn$1622860$$, 3, 
                    Style["A", Italic]}, 0, 6, ImageSize -> Tiny, 
                    ControlPlacement -> 2}, {{
                    CalculateScan`SequenceScanner`Private`iv$1622860$$, True, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
1622861["integer `1` only", {
                    Style["A", Italic]}]}, {True, False}, ImageSize -> Tiny, 
                    ControlPlacement -> 3}, {{
                    CalculateScan`SequenceScanner`Private`xmin2$1622860$$, \
-1.5508771774946717`, 
                    Subscript[
                    Defer[$CellContext`n], 
                    "min"]}, -3.094620575360616, -0.022571213607386897`, 
                    ImageSize -> Tiny, ControlPlacement -> 4}, {{
                    CalculateScan`SequenceScanner`Private`xmax2$1622860$$, 
                    1.5366096182372169`, 
                    Subscript[
                    Defer[$CellContext`n], "max"]}, -0.00713377962872741, 
                    3.080353016103161, ImageSize -> Tiny, ControlPlacement -> 
                    5}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    
                    PaneSelector[{
                    True -> Manipulate`Place[1], False -> 
                    Manipulate`Place[2]}, 
                    Dynamic[
                    CalculateScan`SequenceScanner`Private`iv$1622860$$]], 
                    Manipulate`Place[3]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Manipulate`Place[4], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[5], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVtuO0zAQbSn3O/wBEs9ILWjFCxLQZZeVFihJee9s4iQWrh1sZy/\
8PHjsJmm23UoxXUCr9GFUT5rjmTNnpvPsSARJv9frqevGfBQsTm7h6akxYzHPRcHjD6e5JEpRwZNr+\
OyuMSHRu4TBGYmd76Yxe0LOQbvzG3wfWFQw0OSbpoxqStRsX0Ke0UjVnomkx+\
YnMyYiYPQneT7cGY1e7wwdDMYyAa2J5OplW8g8k6BI0kOgG8a8Z8C/u+\
OT8vi5YCwkPwrCI6IeGe9UQmxgBAeG+XjferWZuo+\
JaeAxyPjSabLyHLe9QGlJeTol8xzfuJisYVtgkKly3DwoudmkIBf+\
bXwgQhuT89ik7dkS6BfGFaPvvKz+OXcDPL9tCy/FyXriML93DHkDTY+\
JWqXzRes6OUaqrrXRL7i6rPmy1SAvnjL1/9IhVXo1jFHbMMj8yNR4vfZW4V+1hRc5dv1C3A+N+\
eIcJeC64VAJ7pOIC7aIopnywEm0fboqNw6Hca/iO0SnTwUrnMDEWfaL7Y/\
HFXi9KYRYu9kWpMPrGRCQnBhXbLndpSnV4wwkRAZ4cV2/\
bLKpqEPxuLN97SmPqRlgjpBNyxOag2Sp7qCj7OsfFbeSy7kmQ94PuCYpkRtFfwfrIw25PJ4Kz0hCvK\
CpV28Oq6QmIL1lPyhBwhw4RUj6y3zsN/dwuRJI1b5EdUnH4sCW5tQ/\
iX5Z4EPCU501d2zP0eXdtphNIE5q1QU0SZanzfaY7jeZbtzQHOi+JPiWxH+gd5tCtyn81U1hZQ/\
u1oRuTejWhG5N6NaE/3dNsBHjv9Jvaru4bg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "800", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"arg", "(", 
               RowBox[{"-", 
                 FractionBox[
                  RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", "n"}]],
                     " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "\[Pi]", " ", "n"}]]}], 
                    ")"}]}], 
                  RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]]}], ")"}], Identity],
             TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Alternate forms assuming A and n are positive", 
     "scanner" -> "Simplification", "id" -> 
     "AlternateFormAssumingAllVariablesAreRealAndPositive", "position" -> 
     "900", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Simplify[PowerExpand[Arg[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)]]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{"2", " ", "\[Pi]", " ", 
                 TemplateBox[{
                   FractionBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"arg", "(", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", "\[Pi]"}]],
                     " ", "A"}], "+", "A"}], ")"}]}], "+", 
                    RowBox[{"arg", "(", 
                    RowBox[{"1", "-", 
                    SuperscriptBox["n", "2"]}], ")"}], "+", "\[Pi]"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"]}], "+", 
               RowBox[{"arg", "(", 
                 RowBox[{"A", "+", 
                   RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", 
                    "n"}]]}]}], ")"}], "-", 
               RowBox[{"arg", "(", 
                 RowBox[{"1", "-", 
                   SuperscriptBox["n", "2"]}], ")"}]}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "PowerExpand[Arg[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], Assumptions \
-> {}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{"2", " ", "\[Pi]", " ", 
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", "\[Pi]"}]],
                     " ", "A"}], "+", "A"}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}], "+", 
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]], "+", 
                    FractionBox["1", "2"]}]}, "Floor"]}], "+", 
              RowBox[{"arg", "(", 
                RowBox[{"A", "+", 
                  RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", 
                    "n"}]]}]}], ")"}], "-", 
              RowBox[{"arg", "(", 
                RowBox[{
                  RowBox[{"2", " ", "\[Pi]"}], "-", 
                  RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}], ")"}]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "floor(x) is the floor function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Floor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/IntegerFunctions/Floor", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FloorFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod10$$ =
    XMLElement[
   "pod", {"title" -> "Series expansion of the integral at n = \[Infinity]", 
     "scanner" -> "Series", "id" -> 
     "SeriesExpansionOfTheIntegralAtn=Infinity", "position" -> "1000", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[Arg[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], {n, Infinity, \
4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"arg", "(", 
              RowBox[{
                RowBox[{"(", 
                  RowBox[{"1", "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " ", 
                    "n"}]]}], ")"}], " ", 
                RowBox[{"(", 
                  TemplateBox[{
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "n"], ")"}], "2"], ")"}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "\[Infinity]", ",", 
                    RowBox[{"{", "}"}], ",", "2", ",", "2", ",", "1"}], 
                    "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                   InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                  ")"}]}], ")"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False, False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "I", "word" -> "i", "template" -> 
        "Assuming i is the imaginary unit${separator}Use i as ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "\"i\" -> \"ImaginaryI\""}, {
        XMLElement[
        "value", {
         "name" -> "ImaginaryI", "desc" -> "the imaginary unit", "input" -> 
          "\"i\" -> \"ImaginaryI\""}, {}], 
        XMLElement[
        "value", {
         "name" -> "Variable", "desc" -> "a variable", "input" -> 
          "\"i\" -> \"Variable\""}, {}]}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "10", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "4.684", "parsetiming" -> "1.036", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP5811261566bi04c14ce00005dbgge9iag7g61hb", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "5", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa5821261566bi04c14ce000024i063i63i185a176235443652248981561", "version" -> 
    "2.6", "inputstring" -> 
    "arg[integrate[A/T*sin((2*pi*t)/T)*exp((-i*2*pi*n*t)/T),{t,0,T/2}]]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 26, 13, 53, 18.8871458`9.028741272948341}, "Line" -> 
    8, "SessionID" -> 34130971233423827070}, Typeset`showpods$$ = {1, 2, 3, 4,
    5, 6, 7, 8, 9, 10}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "arg[integrate[A/T*sin((2*pi*t)/T)*exp((-i*2*pi*n*t)/T),{t,0,T/2}]]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1088., {948.8544921875, 954.1455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.857287998925044*^9},ExpressionUUID->"0b25f56e-6101-44ba-93fe-\
321f706a434f"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"arg", "(", 
   FractionBox[
    RowBox[{"A", "+", 
     RowBox[{"A", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]", " "}]]}]}], 
    RowBox[{
     RowBox[{"2", " ", "\[Pi]"}], "-", 
     RowBox[{"2", " ", "\[Pi]", " "}]}]], ")"}], 
  TraditionalForm]], "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.856774781531392*^9},ExpressionUUID->"64cc6645-5c32-4e1f-bbea-\
922cf3f9c836"]], "WolframAlphaLong",
 CellChangeTimes->{{3.8567748107532043`*^9, 3.8567748282180557`*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"70222616-d7c8-4572-b7de-53b827bbb6f8"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "arg((A + A E^(-I \[Pi] ))/(2 \[Pi] - 2 \[Pi] ))", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Arg[(A + A/E^(I Pi))/(2 Pi - 2 Pi)]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"arg", "(", 
               FractionBox[
                RowBox[{"A", "+", 
                  RowBox[{"A", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "\[Pi]"}]]}]}], 
                RowBox[{
                  RowBox[{"2", " ", "\[Pi]"}], "-", 
                  RowBox[{"2", " ", "\[Pi]"}]}]], ")"}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "arg(z) is the complex argument"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Arg.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Arg", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexArgument.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Error", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", "\"undefined\"", "\[NoBreak]", 
               "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "A", "template" -> 
        "Assuming \"A\" is a variable${separator}Use as ${desc} instead", 
        "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"C\", \"A\"} -> {\"Variable\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Variable", "desc" -> "a variable", "input" -> 
          "{\"C\", \"A\"} -> {\"Variable\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Unit", "desc" -> "a unit", "input" -> 
          "{\"C\", \"A\"} -> {\"Unit\"}"}, {}]}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "2", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.874", "parsetiming" -> "0.717", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP694516c0gb3i2a2gd300000013f8gdif669900e2", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "20", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa694616c0gb3i2a2gd30000006201e48b012i1ch28458888475783217078", "version" -> 
    "2.6", "inputstring" -> 
    "arg((A + A E^(-I \[Pi] ))/(2 \[Pi] - 2 \[Pi] ))"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 20, 15, 20, 38.0510055`9.332941023028612}, "Line" -> 
    33, "SessionID" -> 34127454985094183363}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "arg((A + A E^(-I \[Pi] ))/(2 \[Pi] - 2 \[Pi] ))"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1088., {123.3544921875, 128.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8567748380671096`*^9},ExpressionUUID->"b20dd3da-88b0-4a8d-87a5-\
621a136d6b5f"]
}, Closed]],

Cell[CellGroupData[{

Cell["pi", "WolframAlphaLong",
 CellChangeTimes->{{3.8570952681933384`*^9, 3.8570952684746237`*^9}},
 CellLabel->"In[7]:=",ExpressionUUID->"c0088a09-c50d-4ffb-a561-e1b46744060e"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "pi", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Pi"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox["\[Pi]", PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Decimal approximation", "scanner" -> "Numeric", "id" -> 
     "DecimalApproximation", "position" -> "200", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"N[Pi, 79]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             PaneBox[
              TagBox[
               GridBox[{{
                  StyleBox[
                  "\"3.1415926535897932384626433832795028841971693993751058209\
749445923\[Ellipsis]\"", LineIndent -> 0.54, StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
                "Column", 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], FrameMargins -> {{0, 10}, {0, 0}}], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More digits", "input" -> 
         "DecimalApproximation__More digits"}, {}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Property", "scanner" -> "Numeric", "id" -> "Property", 
     "position" -> "300", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Element[Pi, Algebraics]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              TagBox["\[Pi]", HoldForm], "\" is a transcendental number\""}, 
             "RowDefault"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Number line", "scanner" -> "NumberLine", "id" -> 
     "NumberLine", "position" -> "400", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"NumberLinePlot[Pi]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{
              GraphicsBox[{
                TagBox[
                 TooltipBox[{
                   PointSize[0.02], 
                   RGBColor[0.24720000000000014`, 0.24, 0.6], 
                   PointBox[{3.141592653589793, 0.05654866776461628}]}, 
                  "3.141592653589793`"], 
                 Annotation[#, 3.141592653589793, "Tooltip"]& ]}, ImageSize -> 
               330., Axes -> {True, False}, 
               PlotRange -> {{2.199114857512855, 4.084070449666731}, 
                 Automatic}, AxesOrigin -> {0, 0}], "\"\""}, "Labeled", 
             DisplayFunction -> (FormBox[
               GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], TraditionalForm]& ), 
             InterpretationFunction -> (RowBox[{
                StyleBox[
                "Labeled", FontFamily -> "Bitstream Vera Sans", 
                 FontSize -> -1 + Inherited], "[", 
                RowBox[{#, ",", #2, ",", 
                  StyleBox[
                  "Bottom", FontFamily -> "Bitstream Vera Sans", 
                   FontSize -> -1 + Inherited]}], "]"}]& )], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Continued fraction", "scanner" -> "ContinuedFraction", 
     "id" -> "ContinuedFraction", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"ContinuedFraction[Pi, 29]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                
                TemplateBox[{
                 "\"[\"", 
                  "\"3; 7, 15, 1, 292, 1, 1, 1, 2, 1, 3, 1, 14, 2, 1, 1, 2, \
2, 2, 2, 1, 84, 2, 1, 1, 15, 3, 13,\"", "\" \[Ellipsis]]\""}, "RowDefault"]}},
               GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
              "Column", GridBoxItemSize -> {"Columns" -> {{
                   Scaled[1.003]}}}], "Column"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "More terms", "input" -> 
         "ContinuedFraction__More terms"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Fraction form", "input" -> 
         "ContinuedFraction__Fraction form"}, {}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Alternative representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "AlternativeRepresentations:MathematicalFunctionIdentityData", 
     "position" -> "600", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Pi == 180 Degree"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{"\[Pi]", "\[LongEqual]", 
                RowBox[{"180", " ", "\[Degree]"}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Pi == (-I) Log[-1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{"\[Pi]", "\[LongEqual]", 
                RowBox[{
                  RowBox[{"-", "\[ImaginaryI]"}], " ", 
                  RowBox[{"log", "(", 
                    RowBox[{"-", "1"}], ")"}]}]}], HoldForm], FrameStyle -> 
             None, FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Pi == ArcCos[-1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{"\[Pi]", "\[LongEqual]", 
                RowBox[{
                  SuperscriptBox["cos", 
                   RowBox[{"-", "1"}]], "(", 
                  RowBox[{"-", "1"}], ")"}]}], HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "AlternativeRepresentations:MathematicalFunctionIdentityData__More"},\
 {}]}], 
     XMLElement["infos", {"count" -> "4"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement[
       "info", {"text" -> "cos^(-1)(x) is the inverse cosine function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/ArcCos.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/ArcCos", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/InverseCosine.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/Constants/Pi/27/ShowAll.html", 
           "text" -> "More information"}, {}]}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Series representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "SeriesRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "700", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Pi == 4 Sum[(-1)^k/(2 k + 1), {k, 0, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{"\[Pi]", "\[LongEqual]", 
                RowBox[{"4", " ", 
                  RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                    FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], "k"], 
                    RowBox[{
                    RowBox[{"2", " ", "k"}], "+", "1"}]]}]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Pi == -2 + 2 Sum[2^k/Binomial[2 k, k], {k, 1, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{"\[Pi]", "\[LongEqual]", 
                RowBox[{
                  RowBox[{"-", "2"}], "+", 
                  RowBox[{"2", " ", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{"k", "=", "1"}], "\[Infinity]"], 
                    FractionBox[
                    SuperscriptBox["2", "k"], 
                    TemplateBox[{
                    RowBox[{"2", " ", "k"}], "k"}, "Binomial"]]}]}]}]}], 
              HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Pi == Sum[(50 k - 6)/(2^k Binomial[3 k, k]), {k, 0, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{"\[Pi]", "\[LongEqual]", 
                RowBox[{
                  UnderoverscriptBox["\[Sum]", 
                   RowBox[{"k", "=", "0"}], "\[Infinity]"], 
                  FractionBox[
                   RowBox[{
                    RowBox[{"50", " ", "k"}], "-", "6"}], 
                   RowBox[{
                    SuperscriptBox["2", "k"], " ", 
                    TemplateBox[{
                    RowBox[{"3", " ", "k"}], "k"}, "Binomial"]}]]}]}], 
              HoldForm], FrameStyle -> None, 
             FrameMargins -> {{-1, -1}, {3, 3}}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "SeriesRepresentations:MathematicalFunctionIdentityData__More"}, \
{}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {"text" -> "binomial(n, m) is the binomial coefficient"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Binomial.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/GammaBetaErf/Binomial", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/BinomialCoefficient.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/Constants/Pi/06/ShowAll.html", 
           "text" -> "More information"}, {}]}]}]}], Typeset`pod8$$ = 
   XMLElement[
   "pod", {"title" -> "Integral representations", "scanner" -> 
     "MathematicalFunctionData", "id" -> 
     "IntegralRepresentations:MathematicalFunctionIdentityData", "position" -> 
     "800", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Pi == 2 Integrate[1/(t^2 + 1), {t, 0, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{"\[Pi]", "\[LongEqual]", 
                RowBox[{"2", 
                  RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{
                    SuperscriptBox["t", "2"], "+", "1"}]], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Pi == 4 Integrate[Sqrt[1 - t^2], {t, 0, 1}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{"\[Pi]", "\[LongEqual]", 
                RowBox[{"4", 
                  RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "1"], 
                    RowBox[{
                    SqrtBox[
                    RowBox[{"1", "-", 
                    SuperscriptBox["t", "2"]}]], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Pi == 2 Integrate[Sin[t]/t, {t, 0, Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FrameBox[
             TagBox[
              RowBox[{"\[Pi]", "\[LongEqual]", 
                RowBox[{"2", 
                  RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
                    RowBox[{
                    FractionBox[
                    RowBox[{"sin", "(", "t", ")"}], "t"], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}]}]}], HoldForm], 
             FrameStyle -> None, FrameMargins -> {{-1, -1}, {3, 3}}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "More", "input" -> 
         "IntegralRepresentations:MathematicalFunctionIdentityData__More"}, \
{}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> 
           "http://functions.wolfram.com/Constants/Pi/07/ShowAll.html", 
           "text" -> "More information"}, {}]}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux7$$ = {True, False, {False, False, False}, True}, 
   Typeset`aux8$$ = {True, False, {False, False, False}, True}, 
   Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "pi", "template" -> 
        "Assuming \"pi\" is a mathematical constant${separator}Use as ${desc} \
or ${desc} or ${desc} or ${desc} or ${desc} instead", "count" -> "6", 
        "pulldown" -> "false", "default" -> 
        "{\"C\", \"pi\"} -> {\"NamedConstant\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "NamedConstant", "desc" -> "a mathematical constant", 
          "input" -> "{\"C\", \"pi\"} -> {\"NamedConstant\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Character", "desc" -> "a character", "input" -> 
          "{\"C\", \"pi\"} -> {\"Character\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "MathWorld", "desc" -> 
          " referring to a mathematical definition", "input" -> 
          "{\"C\", \"pi\"} -> {\"MathWorld\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Word", "desc" -> "a word", "input" -> 
          "{\"C\", \"pi\"} -> {\"Word\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Movie", "desc" -> "a movie", "input" -> 
          "{\"C\", \"pi\"} -> {\"Movie\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Particle", "desc" -> "a particle", "input" -> 
          "{\"C\", \"pi\"} -> {\"Particle\"}"}, {}]}]}]}, Typeset`initdone$$ =
    FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "8", "datatypes" -> "", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.362", "parsetiming" -> "0.084", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP4295143ae80i0d409d630000502716cc12dhaag5", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "11", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa4296143ae80i0d409d6300002727fg94744geh975481992349747128482", "version" -> 
    "2.6", "inputstring" -> "pi"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 24, 8, 21, 15.3183816`8.937787832387118}, "Line" -> 7,
     "SessionID" -> 34129691295363000168}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "pi"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{
     1066.8000000000002`, {874.9026367187499, 883.8973632812501}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.8570952753652496`*^9},ExpressionUUID->"85079625-7b70-4f09-9b40-\
7b2308cdc94a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"2", "*", 
    RowBox[{"abs", "[", 
     RowBox[{"integrate", "[", 
      RowBox[{
       RowBox[{
        FractionBox["A", "T"], "*", 
        RowBox[{"sin", "(", 
         FractionBox[
          RowBox[{"2", "*", "pi", "*", "t"}], "T"], ")"}], "*", 
        RowBox[{"exp", "(", 
         FractionBox[
          RowBox[{
           RowBox[{"-", "i"}], "*", "2", "*", "pi", "*", "n", "*", "t"}], 
          "T"], ")"}]}], ","}]}]}]}], TraditionalForm]],ExpressionUUID->
  "a16a63c0-a2b1-4949-aaa1-946dddc018eb"],
 "{t,0,T/2}]]"
}], "WolframAlphaLong",
 CellChangeTimes->{
  3.8572878341330585`*^9, 3.857288331261758*^9, {3.8572884719385386`*^9, 
   3.8572884862799063`*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"13ce647d-9e00-4d2b-9a81-ec7964604867"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = 
   "2*abs[integrate[A/T*sin((2*pi*t)/T)*exp((-i*2*pi*n*t)/T),{t,0,T/2}]]", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input", "scanner" -> "Identity", "id" -> "Input", 
     "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "2 Abs[Integrate[(A/T) Sin[(2 Pi t)/T] Exp[-(I (2 Pi n t))/T], {t, 0, \
T/2}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"2", " ", 
               TemplateBox[{
                 RowBox[{
                   SubsuperscriptBox["\[Integral]", "0", 
                    FractionBox["T", "2"]], 
                   RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["A", "T"], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    TagBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "t"}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], "T"], 
                    ")"}], " ", 
                    RowBox[{"exp", "(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "n", " ", "t"}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], ")"}]}], 
                    "T"]}], ")"}]}], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}]}, "Abs"]}], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement["info", {"text" -> "abs(z) is the absolute value of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Abs.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Abs", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/AbsoluteValue.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "i is the imaginary unit"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/I.html", "text" -> 
           "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/i.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Exact result", "scanner" -> "Identity", "id" -> 
     "Result", "position" -> "200", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{"2", " ", 
               TemplateBox[{
                 FractionBox[
                  RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", "\[Pi]"}]],
                     " ", "A"}], "+", "A"}], 
                  RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]]}, "Abs"]}], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Computation result", "scanner" -> "Integral", "id" -> 
     "ComputationResult", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"2", " ", 
                 TemplateBox[{
                   RowBox[{
                    SubsuperscriptBox["\[Integral]", "0", 
                    FractionBox["T", "2"]], 
                    RowBox[{
                    FractionBox[
                    RowBox[{"A", " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"2", " ", "\[Pi]", " ", "t"}], "T"], ")"}], " ", 
                    RowBox[{"exp", "(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "\[Pi]", " ", "n", " ", "t"}], ")"}]}], 
                    "T"]}], ")"}]}], "T"], 
                    RowBox[{"\[DifferentialD]", "t"}]}]}]}, "Abs"]}], 
               HoldForm], "\[LongEqual]", 
              TagBox[
               RowBox[{"2", " ", 
                 TemplateBox[{
                   FractionBox[
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", "\[Pi]"}]],
                     " ", "A"}], "+", "A"}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]]}, "Abs"]}], 
               Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Values", "scanner" -> "Sequence", "id" -> "Values", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> "", "primary" -> "true"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TagBox[
              GridBox[{{"A", "\"\""}, {"0", "0"}, {"1", 
                 TagBox[
                  RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"1", "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]]}, "Abs"]}], 
                  Identity]}, {"2", 
                 TagBox[
                  RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"2", "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]]}, "Abs"]}], 
                  Identity]}, {"3", 
                 TagBox[
                  RowBox[{"2", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"3", "+", 
                    RowBox[{"3", " ", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", 
                    "\[Pi]"}]]}]}], 
                    RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]]}, "Abs"]}], 
                  Identity]}}, 
               GridBoxAlignment -> {
                "Columns" -> {Left, Left}, "Rows" -> {{Baseline}}}, 
               AutoDelete -> False, 
               GridBoxBackground -> {"Columns" -> {{None}}}, 
               GridBoxFrame -> {"Columns" -> {{True}}, "Rows" -> {{True}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.5}, 2}, "Rows" -> {{1}}}, 
               FrameStyle -> GrayLevel[0.84], BaselinePosition -> Automatic, 
               AllowScriptLevelChange -> False], "Grid"], 
             LineSpacing -> {0.9, 0, 1.5}, LineIndent -> 0, StripOnInput -> 
             False], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata,\
numberdata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Grid"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {
    "title" -> "3D plot", "scanner" -> "Plot", "id" -> "3DPlot", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot3D[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], {A, -5., 5.}, \
{n, -1.51513, 1.51513}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            Graphics3DBox[{
              GraphicsComplex3DBox[CompressedData["
1:eJyFfXd8z9f3P4LU3mq0qora1KgVzpuqvaraau1doyhq1qi9asSoTe291Qhu
iJEIFcSMFRJCIiJLkMhXX+/zvK/P63B/v/yTR56Pk3Pvfd5zzz333Pu699Nu
A9v0TJcmTZpFmdOk8Xj7u9qWnEGpqXl8Bx5NbJ1SJ0mNKLxlnN/gZPJtnL2o
d/FcGi/i9csvnbol0aJ/P7zX2Durxk92qNT+5TfxtC1LnvG/hGTUeN8xcY0X
1IuhE5aetBr/1NITQTst+UQFvL8lf4/2WfhDjQ+y8CBKY/0EHwEekOmGn9/g
I16r3fIEvBvLr3fr13hP1n/UXR8X8IJcn03u+mu8N9ff291ejR/n9h5z86Px
wswP8+mSfILn/DmT+vQ7E69mVL/8JPepNC7wDDz63LXis1Wy5hn4mTKZhibG
v9A8A189rZZfpzJxmmfgzy09UZpn4Gss+QeaZ+AbLPyy5hl4u1Xp8+Q55at5
Br6I5cEz8KWsHzwDf8z1Ac/Al3P9wTPwk9xe8Az8CfMDniWf4Plot5cTbrR+
rr7fVPTFx6U8NM/A07wp3GtqvzQu8Az8h40VtoR2fK15Br69TYlp+8ISNM/A
01l6YjTPwHdZ8uGaZ+D7LPyK5hl4wvzMJYqU8tM8A/+b5cEz8PWsHzwDT0lx
1wc8A9/E9QfPwL/l9oJn4G9S3PyAZ8knePbvm1B9zr5IVT3TqguHGmXQPAN/
6Jm4e1SddJpn4OWyLS01vNcbzTPwGZkbP036JknzDPyxpSdW8wx8tiUfoXkG
Pt/Cr2uegZe+sSrd4UanNM/Ax7E8eAY+ifWDZ+APuD7gGfgUrj94Bl6K2wue
gYcxP+BZ8un0G2EqcOc07zZZPIXfCFM7FrWOnOPr4XL6jTDlPaZAg/O/pXE5
/UaYeuLvWzPf96+E3whTuyw9ccJvhKmnlvwT4TfCVJyF3xR+I0xNvOUX0CbL
GeE3wtQtlnf6jTB1n/U7/UaY2sb1cfqNMPWQ6+/0G2FqDrfX6TegR9utS/Lp
tOcQ1WjZzvD0nT4Q9hyipnRpsfru/fTCnkPU6RKRPx3undbltOcQlflqrrJl
brwW9hyiplt64oU9h6jslnyksOcQldfCQ4Q9h6jkWfmLZujkL+w5RL2+4pZ3
2nOISsv6nfYcoiZwfZz2HKIycP2d9hyi/Li9TnsOUZOYH6c923w6eQ5UZVsU
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
faHtyfemh9Yz/XK5ekml42lJnR3HAholK+iJyZiv/uqDUZTY2NVh7uJnqujd
zwvUfYt/1q5y97FZ7tHhG8Pr5Rr4nCB/ZGTKsdX7Qmlm5z/S+t9KpqeMhxWs
nxrT6intG3yqC5VI74J85o5+q1b/Fk/Lq531LXQrk8aLbA9Xjb96RVOT/i2a
6J1D40vfeAwa8UEal8/tPr4R63JrfGPJfOObP0vnqrni+4Tvg06pjz9fFNdm
TAyN7nbl47yj9tPrbHty7/kjlFoMPlX4m7d21a3Vtl51al2k1c+T/OdUiKfI
X9db+PGQgUcq3npA+Z4PWf+iwyWKiK/z6HVKNE0YfuNDrw0n9HoQ46vtxKS3
4+K0Xg8CL8945HKrPsT1URW5PtBzaI/bP/TJ8p+dnNF6gNdjXMiTQZ4gP3TG
tL7XXu6mKw3d9ffslKbD3HprKN9MC1dXGV/FuGgXoV113Two5kFtZR7q9v3d
0gP8r9tx7f/Ts62PhYM3lZZx4ZcIfgnzJtrbJYt73GX5JTnXrd9jVTG3vdGT
Qx5Dr5y+T2MT0w9NWhqmNv++J+3At3h3r7Ez2j8NpoNue/B95rYHWsz2MN1t
P7B/msf2s8ptbxrPxfZ22G2fGEeUi+1zkdueFdszxbA9b21hjQuKuueuZ9Gf
3ONioXscwf4pksfRLve4c/G4o8k87la5x6kL8qt5nE5zj2vYOe3jcV3L7Qe0
/CP2A8KvKvhV4T+VwX8qg/9UBv+pDP5TGfynMvhPZfCfyuA/lcF/KvhPMS8T
5mUx/5Jh/iXD/EuYf9Fe4Bkt+ask5lkyzLNkmGfJMM+SYZ4lzLOIG4G3tvB7
0u8p+D0hryAfMqtbwFt/qFqyfM/KfpY/7B1zekL2K1EqUym3H2tcbPGuzN1v
SXmC/JECh94svxOnqrvl6Xy3450zz7XjefiBppafuUqdXx33rrw8TLG/Uh+s
/v6zAdHBOr6FfEFL/h/67dy+Wve/u0p72c/fGNWg+ZyUU3To3pmtP+8eT/sY
b5kp/HzPgYN03LiB/fOetcPe8nmLvip7oliVIo8Uy6vx1SNz+Z+4quNS+PNR
3Ua95SeIPovqfnvj4oeKy1Wlc/z+oDldlfoJ+g9xPIl+acA8P/OtlzDz0VP6
+u9xjYq9xWfn9+25+Zfb1LZE8JMFtXP7/jK/0Wcr3+IeH5X1S45J6zo+de1v
LX2za3xCx0yZxtV/Q9dPrsw3JFMmjadOODIz/dokepZ26f6/2nhofPSmgdln
eMRRlrFlto6o/loBf7rs62Kf+D+hYp9kyFfwaQoBb/708InNg5/SuDZTn/Te
nt4FvOI3WzpdaBdPPfPNavpVj8wa31X2RUiTpJf0ef/G383JllPjVTM2+PHk
X6m08nzTDCkRuTXeeVDjfquWpXMxjnoq4KXdejReg/X0c5er8X+43PHuemq8
EteznLtdaK/6ntvVNqbe1Ynzn6G9asf5H1q1zX2X0rn50XgY8/PYzSfqr35j
Pq+4+dd4MvN/xN1fGh/L/dXG3b8aT8v922/UhcyTHp5B3KIahs+7lmbaARLx
jEI8M35RYKOFXreoAcdjDYp8tHvu9nOU4/Ega77GvP/1gqvWfI3596v6s75a
/jZOGHCiS2z11ie9RJyjEOcIeQV55H+AX/r2j5KFq9t5fugHPnRHeNW/Nj9T
/RMC863zeEapf/hl+iv3PXKV3PPTgx9DED9Qu16Xv05/JpBEPECIB0Q8rNdT
Yp2l4+TqpTqPORd6T91mP9CsxIUGmVe9Hb/l3Tj4/L2MGxf8E/gX8YNC/CDi
DYV4Q8QVyhBXKENcoRBXiPhHIf45fGDdm9w3Y3S87dMrKG3rj0NlvKEM8YYy
xBvKEG8oQ7yhEG+I9QgZ1iNkWI+QYT1ChvUIYT0i7J9g/6v7WrzpeCz8Hzdv
Yj1ChvUIGdYjZFiPkGE9QliPYP7CeBnP4yK6pGWHhPk04jO3HQp5MsgT5Au7
7VavL16Eue1WzNeE+VplteIBVYjn69ot3fEAOcejwnjEPIj6B7y516Ftn4v0
z3R3uZhnb8a5yxXrIMI6qOWf7nUQ5Lu0cfsx5KOyhLjlh4/7T34DhW3/uc7E
VlHqPrfrYGKpCXPuhtBPPx898UPvUD3/Hm5Zd8jkYhdlXKEQV1zd5tYDHqYk
uPWIPIPOS4i4TiGuE/kWQr5F5Dd0viLuz6gVARdy+Wa9+9kH/8VR33odq5t/
alpXcrvgkAMR2TROuyonrB2QQjkWXRh964sPNB78KKJ/4QsvqNTls4XTjk6n
8YGfrArzrhhLw4vOGt5s2ksFPNOOLQfzFn1M1xOXTPtvPZuNcdfCtdP/i8f2
/b62ccPlqQT5LCWrL3UVfkZf/fH9pDeTMrggP7J9zyulyidQ2Qbtw27UzqLx
sM92dtx97hXN8Ki05qeROTX++bDk2I++TONK37NyG/+2eVzQ/91Pn1YPzeDh
+tMt78vyVNopj3YR5Cu7y9XyT7jcRu56anws11O52wUeKB+3azU1ii5VLYqe
8Lp+3Yh4lfFECA1y8wYeyIN5K+rmGfWn3sxzVne/aPwi90uiux81XpP7Mcbd
7xpvzf2e+0DaNJk9YlXjl0UyjxsdQ+XuDu5760godbhZyFWoYYwq78ZV2y5b
au/JeE/Gzwrx8+RDlh7ameTWExLq1iPsjQz2RgZ7I4O9kcHeCPYm7IoMdkUG
uyKDXZHBrrSdCPsx2ZuCvQm7Uga7Uga7UrCrWtUyDCz91q4gP7pWhdae79qV
MtiVMtiVMtiVMtiVgl15Hzv0U9cCOIccr1q3O9O5X7s3FH2pW/iJSjn1ebPv
lnvk9vZ8oXHIz6wX8XhXyde00Hl+XvnxefKWL/okZPH7QOOVP+64rsvy51oe
ek7zOX/IA0+bt8yb2n7x5Fn0SOYLcem1nno+eULmnH+qcch7pTSd9se855xX
Tyvu5Yig2Pu+fbdseaXP770+cjq13Iv7Wt55v0SUlgfeY1XBmgU7PKQeVXsu
rJQ1TuvZNdpV/MWHIRqH/N4H/yxt/PwubXXsQ+HejyCqcXjAd49G/qvlS/2T
tOPyn4f4uwP7vo5+LM/6SZYLeed9F5e1PPB9XB9uF0kegMv2+or7QD5mPpl/
jbu4XyAv+YS87C/ud5e0E+DSHhaK+0Zgb2yfLmm3C53fleh7QiAv7ZnHhdYT
EXLVv8zRlxqX4wXjCPtQ/l/6R2b/Lq0L4wX44Bl3fVM9UrX96/si+Hsi2D/w
WifHzPc78ELbOfCPQ8/9vj5XvLZb530dMdpudX2qXV15acZjbW/AwwpM3R9T
6ai2H+Db+Psp2A/wOQOH/rqorm0nwM+wfvS7rA/6HfhHXH/0L/Ca3N6Fzu+t
ND/oL8kn+kXyj37BedFtHSvkCnd56H4BXnTP0TY5a9l5TuBl+Xs69AvwvP8c
3Hq+3SvdL8BTOl2rULxZou4X4I/4Oz70C/DVXUv3XdM5SvsN4EP29hrUqkGY
7i/gP3WYHLf+S1/dX8Bn8XeF6C/gQ1kP+kuWi/4C/pDrif6S7UJ/SR4WOr9D
1LyhvyTP6C/ZL875KEwdbNJ9xOgb6V3OeSdMrXtQp9O6jelcznkkTM3j70yd
80iYSq7w8NuoqclivghTV7ot+6Ru8STh/3FPSJzw/2Eqx8IsA/wORQs/H6ZO
JP+WoXdsuPDnYWpppbIXD84+Lvwz7hW5Kfyzrcfph8NUTi7X6VfD1E6up9Ov
hqmr3C6n/7R5cPpDmzenP7R5dvo9u1+c4ytEfTTUL2tUloxifIWomObXqlw+
5CHGV4g6xd9fO8dXiKqakuLxVdk3YnyFqNs7SrTJNfWlGF8haip/9+0cXyGq
Uu7forfXjRHjK0TtmVpzZFLVR2J8haifanY9c3ruCTG+cD9JiBhfth7n+ApR
Fblc5/jCvSjxYnzZ7XKOrxBVhXlwji+bN+f4snl2ji+7X5z9Fah69p0y7EKA
7K9AtWLq81WHuqcX/RWorvC9BM7+ClQfT5oTXrhiquivQDXnWM8aMd1eif7C
vSUJor8C1eAque8sPiv7K1AFhAR1vZks+ytQ1ci/cd+OSn6iv3DPyS3RX4HK
n/U4+8su19lfdj2d/WW3y9lfNg/O/rLvY3H2l82zs78CVQ/uF/QXzsNPrnm8
xqeZPXV/AT8zr2WJhivs/gKeme/rQH8BXzbpUvInU+3+Av5ptadX+my3+wv4
Br4nBP0FvNyiYtNSXtr9BbzHn6NOzHZF6P4CHlFn4bLrvez+An6X7y1Bf0k9
6C9ZLvoL+EauJ/oLeFFuF/pL8oD+Ao57XdBfwP2ZZ/QX8CncL2J8kWF8kWF8
kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kWF8kRhf
+t4SwzxFhnmKDPMUGeYpMsxTZJinyDBPkWGeIsM8RYZ5igzzFBnmKTLMU2SY
p8gwT5FhniLDPEVynsL3KYY4kAxxIBniQDLEgWSIA8kQB5IhDiRDHEiGOJAM
cSAZ4kAyxIFkiAPJEAeSIQ4kQxxIhjiQ3h8HRpJhnUWGdRYZ1llkWGeRYZ1F
hnUWGdZZZFhnkWGdRYZ1FhnWWWRYZ5FhnUWGdRYZ1llkWGeRYZ1Fcp2Fc6qG
fAUZ8hVkyFeQIV9BhnwFGfIVZMhXEPIVIi9BhrwEGfISZMhLkCEvQYa8BBny
EmTIS5DMS+D7L5l3BS7zq8AN+VKS+VLgMi/qvGfmnTwnyTwncOQzRd6SZN7S
eS/NO3lIknlIWa7IH5Ihf0gyfyh5EHk/MuT9SOb9ZL+gv/B9HPKBIk9OIt+o
cUM+nJDnFPltqufMo4r7at7JYxPytyIvTTI/DNyQT9byIj9MIk+uvx805IEJ
eWCR1yWR/3dJfkT+VvMJ/u82WdP1eXSCKtds3u3PA5I1/xsmNv9xeP4X6vsv
/x748O3/gf8B4v5t8H+b9aQdNWv1o1l63tR6bruqF0io90zzDz2fCP6h52zB
xNd7H4Vp/tezngJl2q2plfOW5v8X1jNA8H+L9bSutuqjDC/vaP6hZ3H9J17e
/cI0/9BTVPCP+gyqdehxy2sxmn/oqXrgVdr9l2I1/9BzSvCP+sza2HRWhxid
9/adsnztqM4jYlWFXD96d5mu4wTfFldbDA5fFad6+ca/3txExxW++US+HfxP
Yj1dvv71j7MLEjX/0OO7c/LL/K5YzT/0PBP+Cnr8groc2Vg+QvOcl+XXCv8z
keVrrF0TVPlsqOa5OZfbP/2cwg0OPdI8Q89z4X9Q7tIK3llydo/TPEPPbe8v
c1Z7mKB5hp4A4X9QnyVZLu/IGJqi/Q/0TFm7Prf/Mz2P+La/0+TzZR7Rar2f
X/+gVfa6/nvGD2f7a0GpUS81Pz8wPqJUi1Vd+kRqHr5jfPfRoUPHb3ug2wX5
LtfLjDu4LEHXE/IJm7J1W7wrjZ6/Nll29UjdOtK3elx9Oz7/8sXqxhN7PlZD
J6WtsWi9He+dMeTV17OetjM6Tb+367W2h2qsZ+HshHplz9nx3mlDXn0d67lX
7UKj/Qeeans4yfKzRfy2luX3Tc3asttyO96uyuVe9u05d1dXez/rpCgXvEFP
3SpjslZfq+3cBT1Hf3INu1FRz+NaT3kRv61hPd/kejWiiJcdb1dhPdOflGzz
yzU7fkss1Wrmt6XvqcZBWZ5nWJZB8++2z/uqy+kKPo2T7PVRPs7feov1URzr
OVL9o6avpqdo/ieyno83PGvvMdleH+U15MljWU/Qino9Lvo80/znZvlIsd55
zvITMmx7PTT+oeZ/Ape7uvC+hy1Gaz/sgp5dYr0DPYv6XczXvKS9PoWe3+LP
ZKtWOkXzDz1yvRPDeqr1fXi1Qh97ffoH6/nzaaEFXZtm0PxPt/BLakpQux7N
5tv5BLc9X1OJn6ZsD4y08wmnDXnvCawn982vnpcJtPMJa1nP7tBPmn3gZ+cT
/Ax57/GsZ3WaAuF/z47R/B9n+SwiPzCW5b17jOt1L9jOD6zmcj2+Hvho3Sg7
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
t3V/AZf9BVz2C3DJP3DJM3DJJ3DJG3CML+H3yOD3yOD3yOD3yOD3yOD3CH5P
+Dcy+Dcy+Dcy+Dcy+Dcy+Dcy+DeS/o3nEULcIuIcQpwj4hbCvCPiHMI8JeIW
Qtwi4hxCnCPiFkLcIuIcQpwj4hZC3CLiHEKcI+IWQtwi4hxCnINxAfm/cqSW
VN1DZHxCiE9EPEOIZ0R8QohPRDxDiGdEfEKIT0Q8Q4hnRHxCiE9EPEOIZ0R8
QohPRDxDiGdEfEKIT0Q8Q9ucduIy2IlL2olYp5BhnUKGdQoZ1ilkWKeQYZ1C
WKeI9QgZ1iNkWI+QYT1ChvUIGdYjZFiPkFyPYH9q+HetAr/clFbzpvdfeD2I
fRnIn3lQYdOuX1L0u4TA13ykDsXNsN9nBD7S0m+/zwh8nSX/SI8X4Jst/Jrm
E/hCxvFuI/AlrAfvNgIfwuVuZj6Br+R6gk/gftwu8Al8GPODd76AI88g8jxk
yPOQIc9DhjwPGfI8ZMjzEPI8Im9DhrwNGfI2ZMjbkCFvQ4a8Dcm8DefHCPlD
kSckQ56QDHlCMuQJyZAnpD6Zf+68teo7eUIy5AnJkCckQ56QDHlCMuQJqbUz
j6px5FHncZ4ZeUV8P1XT2tfIrvHZla78OqBgEuerPTT+aMrUlcfTRFM9Sz5a
50u7/hiwp/mKa1Tcwu/ovOjN6iWbFV3sT1Ut/I3GlWdopbkLI+iZlU/OrPOc
r2PS+lzpnkDdrXJ1/dXsq+MLZOj2huZy/ZGXW8f71DW4/sCnNc1xIKxDKnXj
+gN/E1RkcP+/4ijx9TjP+mme6vum/t14Il8H/9s0qOCGpMX/3IMfUM2b1B84
rcVFXX/gVav3PJT06zNdf+Cf5Vv799Cxr5k3Pa5VuzNNhiT+7eEC/1gvN+J7
BsA/8DyJWWemrZTO1ZPrD/zbiUXGPt+bSMT8A/+j+LeT/qlxn0ox/1rP1R++
zvX9JV1/4KUOXG7yVetYXX/gyZ9cCG2bnKr5B96nQbhXleCMuv5YR5Tn7ytR
f70efPY6bFobD11/4LNHelwYWSJJ2w/wpz9+9WxThwdUgusPvNLrvaWyd7lM
Vbj+wF/tvfFpyx/jdP2BU9be2YdEpXGh/nr9+Me5M5OrfSC+c7fvLanF9Qde
sX9736Pn0rl6cf2Bfzbs1sCoSS+oPtcf+PWlvSp3u3qfinH9gTcalaNHBXVJ
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
               "], {{{
                  EdgeForm[], 
                  Directive[
                   Specularity[
                    GrayLevel[1], 3], 
                   RGBColor[0.880722, 0.611041, 0.142051], Lighting -> 
                   "Neutral"], 
                  GraphicsGroup3DBox[
                   TagBox[{
                    Polygon3DBox[CompressedData["
1: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
0F+l9kuVS/0kdU5/cWI7RXnYhsz/TybrqsqPLjkXqByibELVRBwOr37JeT7l
BCuVHCtXbPzqzFbukTiOqXim6kJUC7kMfC28rdm9y3euV3IOVfnKjpF12ZXg
TqljrLMS6y/d+0ngnalrDJSrld0mnZKAl6SOeypGLX/qWT1zxRVSx30U09b3
U6qPV02IauP1bUA56bzUNqpi16OKjqGcB70m9XNWvH12antA8WfVdXfj+CCu
/YrU60SxbtUqHsTa2C7ZkDoeIZk5oeg4nWS4agVlJ8te7gUuy9gFsrNCf3+h
75j0DYi+BVKuXd+ANGFcD9V6FB1Hki3RM/IzuSZxPanibAsDf0cjP0Y5rRdS
x020bs/L7EPZifKP9F2Z8nlli85l6DnoezHVdammtC/zt9D7ShxjUX2ybKYZ
qe005Rf07Zjq21SbenbifS1bWPlE5baU45I9qvOqfq8v45dnOn1EYpkj+7dL
Fv/RM5XPuD1nvaI8n/Jcynddmjr2pByHvmNSHZXqfFTHpNiMvq9RfavkSRI4
H6k8kfJFx0TW4/Lvz0psR8l+H5pYzsjG75E6rnM9vFap47lTEucp5dsq13GZ
5GrofMr3qesYVFegWjHVjDUu+nsx+bD6bml4YrtFPkHl1LU/l5QcA1Ft9iBo
eY49yJp5S/o+dJ3D4cxXAf4jBdtVqllVHY7qcfSdgr7ZqAv9OLBM/rTgeury
0M3Q1aljbZLVqttXDb/q7XtHjo9dB29Taj9Ea0913NLXzaCvp45JaV3pew19
o7Eh8ylUM9Uh9bcV+v5CteiqP9c3dVqjqhtXve910FcUXAkt21VDLT1+NHRe
0TkC9dF3H8rBHFF03XGgvErR9drXZM9zTGJfUj6laqWUS1Tt06upY4XSU8oH
1So4L6nvQfSdRkPZnKlrw3S/z6WOJ0o3KbCv77/yeg8c/z3n+iHVrsu2UQ7q
mkxfS28PoT1G/2FFf3uob8ZUC6qaJsUW9B2m5LvkfO/E8St9izFCtn/qWJ5k
mnw5+XSq3VU9ouoS06K/gVKMTnnWcsp5FWwvn5/Yp5Bfq2+R9F2Svm15I3W9
nPbm2MS+g3xc1emrPrxl0d+S6HsTfeuh+nzJ1SaJa5vlPyoHuC61z6O4qL7r
mZz5TaqLl011bNHfGHTLsGrTlmX1aZekjh0r7yabRutXzyrhHZxVdLxuWLa/
VHOrb1VWZXJ1ZWrfQ7b3s6n1vewQfVelb5T0jZX8UvlH8pPkr8pfiBL729q/
8oceT22jy+YJS45Fqo6rUPJ7VdxS8RH5m6rjlb8qv1L+5b4l72XVO21LnXdX
rlnfcuibjv2hzQPH+rTXrk0dE1C+WN/sKMaunLS+x5GeOSeLrzyTdy3U16lr
mFTvVCo5Hqrc7vrUNo3shO2p68xUozUyk4eqUVfd9MTMV41Kjquqnk25MMWg
ZsX+Vlf1qfp+dmRke0x6fFXqWIZiFPIhVuRdJ6dvSSRvhpbsN8p/VJ2z/DT5
a/tI1qW2wyT3zohsh8wHP5XarpWfom94Vces75teS+3nyOZXLFExrsWx7RnV
Y6guQ9/JjMnWpGIikofy51T7qxrgX+QLpZZ9kr2qP1Yd8qFF272S580Tx1ak
X1R7r+/m9P2PatGfTB2TUgxE3wHqe8CK2n+p5aP8Pvmf8g3lI+q7Ku3Ls0rO
wyoGeG3s7waHZTJQslo5buW69wsc65OM+iV1bZlqxu5KnY9RnYm+V6iuHKbs
rcR5ilN5fotT59iUv1Ytb69MLml/6Hst1TfuSF3Tpro1xVkUb1Edu2KhqsmX
DVeJuR4vuGbontS5HNWx6HtPfb+k+nPFHFQL3ErfhaTOwynXr+8AajL2a+iF
ib/FCKHlS7Y5FDMfmMUwFctUzba+Sd8t/ZvaN5A9PD+1Lar6Cn0HpBhMb/n9
qetItU5eTm07yg6/KXVMRvUJ72R2jnIrG1L7D/KF9T3Q45lcLVty7F41EqMS
56w/4b5HJ34mikUtTG3Hqt5D3xrrO+t/5HunzgWqlmBNah9DvoZqpttmeueG
1HEM1YEoBqv7a1dyHblqyItFfzet+TqX/E2vvu3dI7s2tV0uW1S15X2y/v8H
riPnVQ==
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwtnAf8luMXxt/32c9rZSRFKQ2ViCSljPYwGlJIJU0ppcgsoUWRlZARGVlZ
iew90t9eGSHJigYySv7X1/V8Pt2f7vOc+xnv/dzPOde5zrl/dU4Z0+v0oFQq
vRuVSvpXOjYtld7T/8+HpdIDean0QVIq3Sr5NClvkfyO5BskD5N8g+RWGn+v
5Ks0/kbJX6nVUf9IHRujsQdJv0D9S3XsGunaSH5I8vWSb5X8ssZcLXmArnel
5MclXya5j+RLJO+r8fMkX6jx0yT3lPyW5Ccl3yP5KY2fJfkEjZ/O86pVk669
jq3S2Oelv1L9ftLPku51yddKHiT5WskHasxtkqfpnNmSe0l+R/Izku+TvFHj
X5A8WePvl/y5Wi3pujIn0q1Xe079idLfK93PkpdKPlfy3ZLrZaXSmZrgv8v6
Per/JP3j0k+Q/k7pD9b97pQ8S9ecK7ml5IWSr5B8veT3Ev/+UzV+nuRjpH9d
8qPS3yW5seTrJZ8v+SLJ+6R+PxdIvlhyfZ1fkfyZ5FaSP0r8e0/X9eZL/kXP
1FPPVo51bQ18Usf7Sp6v1oljOu8Mje8lOZBcV+frFqVrNO5wjQ91rLd0S9VG
qZ9KWUP6rwLfr4HGbyP5c13nEMkNJW8n+UvJbSSfrP8nl3zPROd/ovNvVb+j
+t11/Xoar2GlFRrXUp0Xdd9B0t+u1kVjfpJcTfqzJdeSXE3tdPVfVbtI/bt0
3tO8K8m7Sn41cn+BWlfJU3W/g4pzD2Z9S3+W5H3UflB/hebnFZ3/kK5zoJ5n
B40bLN3zaueo/5n0rxXv4yDp1+l5/8f70LkTJWe6/h6S12g+Wuv6X0i+Q+d2
07l9pH9c570p/Rk6VkPH/tD1xqpfXf3jpI81flfpP9H5Lfi2dH2pSh9xP8mR
9LtIfk/65pL/J/lqnd9Kg47X+Ufo/xsln6u2p/pV1B7Q+DmS26jfVm2e+heq
1Vf/Fd3/UulH6vpVdf5rkmdKHi25muQPdf2LNbahxp4g+YXI99tD7Sv1n9H4
szS+t8ZvW/Hv5Pc2VPtO+s90/rXqH6LjJ0n/ueS5kg+V3F/yVJ2/n87fqt/z
gn7PbrHn53qNOVz9l6Wfwfeg6++i8V9Jfrv4XltL3lPzo27pfd6Xzl+Z+X1g
L1pJn/LcutbTameov43aAPWfU5ugfqjn2Unjl+v+zXT+JTrvlpLX3PbS/6rr
9VM/V7+HrveLflMD6c/TsTo6dgZ2RPJJkiuSn9L48ZJ76nhF4z/F3kjXWbqe
ki+Svqb0a3W/53W/OaHfzzCN2Uljpkt/gORAx1+S/k7JfSXvL/lHyddL7ix5
D8krJN8ouUvJNgpbdbfkEyQfKHmt5MWSh0tuL/lfyUsknya5s+So4nfMu8am
YlsflX6Y+u10bKvGz8ts+/aU/IXkJySPltxNclLxmmHtYMOx5bwj3hVr6lHJ
D2v8UPWP0LHNOv9myd1K9hn4jjmSO0quLvlDyYdpvhZLvkXyAsmfJPYnZ2je
b5d8qPSPSJ4n/W3o1XYPPSfDNXa+rtdd/QY6tlq6TWqt1R+kY9/p3L01Zlv1
V4b+PlmzrN0JOrZAurk6v1PJ1+Ta20vfV/1z+CZ0/i3SH61+XR1bJf0CycdJ
3lfy95KP1phXC/txh+SHpB8i+XDJf0teKPkkyQdJ/kXyLMmtJG8r+Q3Jl0k+
WHIu+TXJoe7fKfQ7+1m6iWrVC3v7tPSzJR8quYrGLJd8heTWknfAzkjeS78p
wZ6EticdU9tH7GRvXTtQ66j+qTo2QroLdf7uhf16VuOrak2O1NpcpraL+jur
jVD/JbUL1L9H4/trfAtdY53GXyn5MMk7Sv5f7jXCWjldx27Sg9wv/UD1W+nY
r9LfJ3mA5JaSN0peJHmw5EMl/yH5GsltJVeV/K7kqyUfIXkXye/k/sb41s7U
sdt0/XOlr6L+Mj3/E9Jn0h8t/Vgd+zH1mmftj5J8o8bXToyDPgxtT1nzrH2+
mWsTvzPeHWv4SslP4lN17aqSm0reK/VaZ82fKd1Vun+uC76l/ttqu2b2HfiQ
RzX2FR2LuRfvUPLDusYccJjO2VnPdk9i+9tF8g4VrwHWQksd6yFdm2J9/MZv
qHgNsBbwwQcm9ndB2e8I//eLjr2BvdLxphr/oORruJbknSQP1HUu5NvV+FM1
/n3p78MfSF9H+ncl38O3Jbm25K95hyX7whGSWxb2aiNrVPLP+k1P6lqnS19d
8n0af7n0R+r8KgXe2FIyhsD/PyD9VZKP1vEd8TeSH5Q8SvJeFX8TfBuHgEmk
W5vY/54t/X4V+wx8R1NsmnR763nuUv9ynVNf+saSL5C+mlojvsXIOsa8rfEr
sHnqj9PxehrfS2Oma2ysNpPfomecpH51tSbS/aFjb+jZp+r4QI2fqf8/lPyJ
2t267jiNeURjD1bbpLG/6vrv6voX6foHaPyGxP5rkuT9K7bx2PpmzJF0m9Q+
VH9KZPzxh+SPJE+T3Lzib5JvE4xxkHQfY2PVHyN93Yp9Cr6llo4dLN2f2H3J
+0vuCnbV817M+cxZZnxVKtsn4u++DY0twBj7afx++g038fzYdF17Z53TWPLf
GnOt7reL5CaS/5F8neQ+GnOHrvmLjt0A9k99bfzuTOmqaHxt6X7R+Ms1vgX4
SPJMXf866Y/PbUuxqcN0/+bS367+DB27Wromkm9k/iRP5fvOjL8XSL5E19s2
M36/T/IMyYM0fr3kvfVMp2j8cWqNpOupYyn2IzOeX8j1NL4HNlP9o3TseN1/
B+n3xPbqeWdJv73klyQv0piZkh/Tdf+SfJx+44HMrY7fDD6RPF7yThrfUPIf
Ov9qjW+m55kvearGXaF7nZTbV+OzTycWyn0N5rxK7jl7TvfYWvJcrgqNVcAs
TRLbOGzdjpIb8+1qzIm6dwvd+zzwlO4/CVut9op0R8bGlmDMlZJ3lH4v9Tfo
2OyKv8eLJR+je16g80/MjT3AICMT248p4BvpJxG/6f+/JdfQ9VcSA2GDJXeM
bA/vknye5E7gbMmDc9tf/NnkxPbuAtam9GdL1yLxelqnMc/lfmf4v5Elv0ti
JGKluyW/pbHN9PxTWO9qB+AbCv+3SWNGV+wTLsH/RvYVtxfP31byNpLnF7/3
MMl5xRgFrNJWbQv+JzG+bSb9P7ljZGJlvmm+bWIyYgFsErZpotoI9etr/E/S
TUrsWxtExmNzJZ/Ntyu5rPvdIXma5A6St5M8r5iPVpLjin3U+XzLkX3XzZIn
SW4jOa0Y04HtOgCCK/bhm9R9MLJvX5MYL72g9z6uYowzVXK7yNgHn7hY725I
bF+Jj54o/SGRffcF0u8sfXNd/2fd6/zE+HAv6X/IjdHAathQbOmlamPAQ9L/
Lt0Zeh8P690cpPa7rtUc/Kn+dmpLJZ+pcQ/q/Jfxz4kx2sO638DY2G2Vji2S
7inJYysFpgodo/3AXCX21XUj42MwBdjiELXfcmNEsCI2Elu5OjEf8SzYXdf7
InH8vYQ4UvJ5iX197ch4Dhu6r+T1oW0rGAesc7DaevWnJsbDjTV+Q27MAnY5
TO1P8FnieKApdkLyuYnx4J6Sv5P8rX7vIv3eE3X/NZJ7JsbzgfSv58b4YP2a
ap/mtpHYysvU5uS2GdiOqhr/peSzEuOr3SPj3wmST5ZcU/K3uTEUWGpX7Lz6
ZybGXzWk/ya3TcI2TVG7XP3xifHdbpHx7smJbed2kt/Pzbncp+c/LjYXAycE
NwRmADuAeQYXsU0j1pf014bGGDvmxtTYjyWRsTacCNwIPuHNxDYH27MTsWRu
n4Bv2EHyx7ljBmKHGmof5Y5RiFVqq63MzfHA9WBzX0qMzXaSvHNojNY7MXeV
RMbLC9XeUD/UMz+jZzspcTxRiYznjk0cv8SSl+XmjIhF8en4djgqYk9iULgB
MBuxCSATLAeG6SoxjIxtuieON/7VOa/m5sjgysBAYKGbJb+CrdDzLNbzHKVj
7fC3fDNgSX1PSyTfKnlyxT4SXzld7SqeN3csxG/gt4AxwNObQ2OPbonx9N+S
X8zN2cHd4XNfS4ypwPN/hMZaYNaFepYesbFsz9yxEDFRH76d3Hifb4JvAx9y
ZmiMh28Bs4BdftGxdnxfeuYl6i/Dnurax0jfQv2tXDP3/IF9y5qDYyRvrzED
ZTvqw69kxihglTUaf7j0dQr7t6uecVLq3wu22oJPz42BwEJ/ST4yN4eD/YZj
+1O6A9R2U/97HTtC+kTX+LZkTgpuqjr+tWSfje+Gg+D9wyH+y7nSH1+yzzyx
+B57SN5Dzz8gN6bDfhEjgvXA7GD3n/A5uTkL1g+c5z+sV13vO56H+YUr07GL
SsYco1L7N2KfI3T9cbyL1LE4MTn+dmHhPzpLPyG3PyH2aSl5jOSBGr9Ocj+1
cdLtnlqPj8ZX31v4g24af05ue8vvqwcvhz0o8NWvakPVP1XtD/WrwTGpXy81
twDHgH+/KPHY9YU/5/eMU/9QXe+M3O8fPmAt61X6Bmr/lPyb70/sn4glW2v8
WLCc9JslT1d7JPEYxh4l/fm5eRf4l6vUDo7t/4j120s/vvgeiS0iyd1zv/+9
8UVqJ6S2f8eoX136/tLXSI1dwCSnFPMHVgQzfp277VV8D99ljmmJbbHJ03St
zWrL1b9M13sot0+9K/J84GvxOeDfPiX7oh8L/MWcM/esCdbG5Trn4dwcAlwC
Nvpi6W7UNTaqf4/0XSteY6y1qZIX5Y6ZiZ2xAf2lm516rm+VvoPGN9AcHaG5
+qlkfrC2Wiu40ZL5RDAMa59vAGzTRMe6Sb9B8j7qT0s9d/N0vSMq/qb4tmbg
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
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwtmXWcVVUXhi8z586959ANQ3d3NxJ+iCDdKR3SAlLSId0hiHQJSAqINEgr
3R3yARKSDvk977fOH+9v9nr22nHOPXuvtfdkaNWtdteIQCDQIlYgEORvhnAg
0A3wAvufyECgohsIXIGNcQKBTdibUVEvEFgCywDLi50P3cevTigQGAZbi72P
vl5EBQJpYS8pt+fveOwJ6DFtN+F3FaVgnGXU3YX9iH0RJYRNht2HrcS+jJLA
5sLuwOZiX0AJYKNhq1Ajyh4PsBPeHTsZesy4zfnbmjHboOKU21I/kPnNoe4E
7DdYV9pG0/YodX2xZ6PKsDfYy1Fr7CQoNuUTPGcz2jVH05lLHNhJ2Cl0Gs2D
JdGzUb6GrqOUmg/sBuVutOuOUsNywZ7BRmGPRnlgDWHJeb/bNTe0iv5ywJ7g
9xT9g1Lhlx32mPIwfIajxLAw7DisEXZjVALWATaY553L856ClYF1h30HWwy7
AMvBeIt4/pb87i7aiE9O2G+wIdjRKA/z2IpK0rYpbQfSdi5tt8BKwJrAGqNu
jP8rrCysFfaXqAcsN2wb/U3FnoZ+pbwdVk7vF3sY/S2gv22w0rDmsGaoO23L
Mp9esPHYS/G7hF8+/HbSxxzY92gX5S/w+wa/xdjb8HuEX2lYF9go2ELYOVgx
fROwdDzjMezjqBCsGSwVbD/2AVQE1hKWBnYI+zDKQnkTY/XnnSRF2ZhHLfwG
4rdC82CMp/hVh/WGLYBtgT2E1YYNhv0E2wN7BntD+1ewhegRbBo+KVBi7Cs8
e2d8vkJz8Euo9QG7hC6jJGg2c3nCPJ6iicytGX7zKNdBs6ibAGsPW4zdGM2H
TYd1gi3FbooWwGbCqtLfRsr9YB/5/hMyjzb4LcRuiObp98PvJmwyc9mp50Wl
YdGw5vg0Q0vxqwi7ChuL31b9Hqg4rCVsPj710Bz8JsGGwp5S/x6Wm3dQlOdd
BEtL21zw3OgecxsIu0/5FX4vUXnYANg92HPsZ6gcbBDsAew1dnb6K0h/38L+
hsXA/kWf4Hec8VdRroamUx7BXIbg9wS/d7C3qAJ+g2GPYG+wc9JfYfq7DpvA
/LbDf0MlaTue9xXCJx7KSH8NYJthHnYkWgyrA8sG+8L/7ofT31r6y6g9B9YQ
1h+2DJYJ9imsEWwAbAUsM+wzfw0Ogq2CrWEuuWHPmesL9BLlwq8eLCnjbcFn
K0oOS6C9k/r22B3QTNrGg52FnUPnUU786mrPpe1GfDah7LBasHaMO5Jx18HS
wfLD3tBmMvYUtJn+CsM+wgK0j4UW41eD7ymC599AXWfskfi9pq8EqAyuVWi7
E1aJ+g6w9qgXfaTHtxDsA+Xp+MxA7/D7oHWEXtB2Pj6J9O6xj+FXD5/6aAN+
BWBvYe/Qe/QzLC/sNeV/UQzaAavgP9sI+lukvRf2CawtrA3qid8vsGL+76Hf
aA5+Qca9gH2e35diIFOUrY8pihXwP9EG2kZSeYryUX0L+KXDz4GdxTgZ4cde
2AhYYd7VI9p/r+8hZN/aRO3t+B5D6+lvArwUfs/gP2j/Ddl6G0f5CD6H0TrF
INh42FHsK4zxjjFuwCbB/oBdg32AhWl/Dfsuc4kLy+7vOYkci++K843o70dY
NKyY8gDt0bBO+HZE34dt32rsx8GklAviUwA1gXXFpwv6IWzxsCksxLiXqb/O
uLEZNyv1Y+Cj0SH8GitWUZ5POQXlIvg2xa9HlOUl38EOwn5HP+MXgUrwMvfo
G8RvPf0fxfcI+iNs+/4sxWvlOY7FDsWQBdpXYaNg+5W/oLWwi7ARsL3YZ+jv
Jf1s93OG5IxzkLpe+h3x6+9YfqQ8aTltL8CGOrZHaq9cDTsD6wvboN9R8Ux5
A6ynfkfseWiR1iHsW8f2Fu0xq7Tnw0bDDmCfYy6vtea09tBR6lpQN5XyBsU3
5hef+e2D9cQ+Sf1XenbazkTz8fsT1h42GXuS3gNsASwVrDh2c8b4mjFOwDo5
FrcVv+fq+0Pj0WHqmlI3kfIMrVHtq7BWsJmU99F+r95/2OLrJNhB7N/RsbDF
12mwymg18+3Bd/CaucdhzgupT0N9ScYsofngM4R2g9GKsOVArTUG5TqU++Hz
DRoM2w37HNYNu6s4bKWfJ4aUe1DXFXsPftX1G2qNa5/Fby+sJqwPdm/ts8pp
lJugg2HL0UbBRmq9op/Clsu1dW0vzkO5Gu0+R+1c24u0J00OW45WCzYCDUe/
wxrARmp/0f6J9odt/x3q2n5ahHJ9+qqHusAW+fvpR/hq7Vsh29fyUa6JTw3U
Eb9p9DUVbQzbHvqVa3tiQcp18KmNOru2v2ufPxC2mDEMtotyFbWRD+oDm4TP
RLQubPt+J9gUyh7lLPhkVp+wpvg00dhhy5nruBZn4jsWyxXTG7iW2+aEfYZd
Rfusa+eKjLBPsMujlrDFsPSwcvLhm+xH38tgWWCVYBWVZ+K3FJYJVkHvHb8B
+I2HRcLSagxYLVg71BbNCls8bEjb5ZSzUq6MXwf8BlE/Dhah/A+WGn2B31hY
QHki9qcUa+D3HewjdjRKiarj1xDeAE0KW1yq6dp5IS7l7PhkQ3Vhs/yzxmv4
ItQsZLlPOsplFRtRC/wmwqJgGbCrMm4d+h4Fe4OdGCXS96Z9E/aWchK9P/yq
aj+FvcdOhpKialq/sCD9pcdOp28GVkXxkbXRW7mP9g/mUkm/E0yHxJew2Mo/
YOthfWHvYQlg1fSNYSfQfkFdftfOJTqfrPTPMPp9lcsqp53rn5MUF3SW0plq
mn+e0ntRbqIcZbaf9yr2fGScisrV0GnGDYQtH1BesMnPO7Q+dNbTmW+Gn9vo
W4tRHKBNOdpORr9ij0NBym+Y7xKUAr/+5CsHKG+EF0d1ta+j24rl2CfQNvz6
wq7AbmLfQr/4uehfsLPY5zSGa+c6ne9W+zma9oNvKF9XTovPf9EWWFXlKpTj
4/sn4+fT76E1rXxSsQuWF/aBOZ/gOaYph0XvsMvqWZWrRljd+5Dluw8Z4zbs
DtrhWn6mPG29nxdp7b/Ctxj1iaLsuXPofKl3rvwaHdM5GJ/yWqvKsYN2Rsig
eESbe9Q/D9qZKCNsG75x9VzYy1C0zm/aq3VGCdp3kx72NmR9T4GXVU6OXUTr
nPL9oH1zafArrXUJexy0bzMdrIJnv9dYeBRKqVwSHeeZbuubpt9d9FdT8Zz6
M/guRElpW9ezeXXRpQeqjF8a/NrqmwraOTgZfrd5tsf08ypo5+Asrt1d6A5j
rZ9Dao89RvtU+F3H3oH+oe4ILCnsCvZa9AB2QuPAbip+K2+F7YPFg51XXEa3
YIeUy8IuYS9Bf8GKa09kfg+CFiPT+meh//L7XoVfQ9thfWAXYZexr6DNfr6W
0rG9WXv0beXUsHbUJ0Yr6S+7Z+f77UHLDZQj6PyfV/kLPqn0/VCXC5YfNhw7
DdoNy+1ZnE7t2J6mve2un9P0gI3FHqfYgF8u2CDapUBbaZvNs73pHfWRyEH7
XdvXYpQko1hor2t77AfKIRRWvudajl7esTimeBbbs7uHMo7FQMVC17NYkdmx
PFT56EPaZocNYB7J9J6YS1bPzh8VHYuzirdxPbvfKO5YfFKcCnp2R1HKsfiu
OB/ybD91YHGx46EjrsWPWDBPc0OHYL1h5yif1neJNsEKwUZSTof2MZc8nuWi
Ix3LEZUrFvYsX2sHG4T9LUrvWW7WETYEeyjK4FlO1sSxfEZ5TbRnOdmXjuVH
ypPSepYzNncsx1Guk9qzPLEzbAT2SJQR9jXsNOXjzO8P3Q+5dk5+DLuv7xLt
8nOuqo7d2+j+JoFn+VU1x+6BdB+U0LPc4j+O3Rfp3ii+Z/lzP33z2EtRPs9y
5T6whdiLUF7P8uJBsJXYq1B+z/LsIcqFsNegAp7l911ho7HHoEyenScaOZYP
Ki9M4VnuWNux86bOnYk9y/9qOHbu0/kvkWd5Wn3HciHlRMlgL/3fVb/vOu0R
+JTUt8b7+Bt7BUrFe3nMmt7Omu6OvYs+nuGT3LX7gBg0Rvc12iNd+/3voWf4
31NuqbsLlkJHWCcUD59Mrn2z14O2/2ofzuzamrqBHsCuwbK6tm5vB20v056W
zbV1exc9hd2FxVXMxG4btLF+gMWBtcJurTM7fmNhp9E86nvBvkYJ8cmpHFZl
xRWeowfPcYrnTUubWzzrYfRSsQ+/I/jFxu8WdRX4m0fnFlgcyndglfib2rU9
6Tz6G3YDltK1O6VTyGGMsbpTCdn99MWgxQzFjkT4fYs9GF1gnjE6n8OnYidW
bq37IdoVDdn5RGtA50KdDwuH7PykNaCzic4o+u7PRFrMV+wvRP/9YDdhj7Re
GSNXlK3p85EW8xX7i7iWM9yJtHs53c+VhT339zjtdWuYUyatA9diUyt8wrrD
052Pa99OL+wY3kHckOUMNyJtrWnNlfZzkKuRFt8V50v6MeBSpMUExYbisLwh
O0fre9+hexZUMGTnNu0NOp/pnFYgZGfmHvzdjb1HuRr9LaefKhH2HofgX1/f
OXapCPvtB8Byh+wco3Whc5LOS8P9u4wH8BnaVxXztS5oVxVNozwM/1DYyklo
s0V5je7GdbaEecoBlYvwN1HY7iCjlavAWmvPxa8MrGzQzuQ6m+8P2f3bWdQG
v9Q6A+BXErtU0M7GOiNH6FzMu5rq/D8VCKSh3yf4/oK9RWc82BKYG7b7waQ6
A+JYkXbro6x+K37b0FN81sE/wIrhWxzFYsywzgKUGyl2M+6XtAvACmMXCdp5
VOfS57TfTT839A3C1sDeK64qDwrae9T7nO7/X2Ox1hWKwedH/38sa7Dfo7eK
ldpPlM8F7Xyhc0Y3f37ah3rq3lj5L3OpSbkWqkBdNeb3UfmNctCgnTN13uyD
oigP0W+GXoTsLkR3IsMZ8wh6RbtWWpewpvg0R39hu4zRmHIT1JK6Ptpz8J2J
nZzyDt7p5/j9CztJP6f0HvDThVps5fjKyXTvgt9nusMM2912CthuWFPsxGG7
206ltQtrpxw2bHfMKXUHAWsRtnsj3R8lZ4yl6J7OIWG7A09N3WH8OmI3ZpyH
+NWG10U3sXNQHw82m3ZzlGvi1wB+H1Zd70p7MnYnPQusHXYH9DBkd4W6Myyq
mI4e0fZ/TRmNmA==
                    "]], 
                    Polygon3DBox[CompressedData["
1:eJwN0L8uQ2EYgPFX/52qKImtGxHCxgW4BBEJaxsX0F6AoYKUiqQWtbAyNFQM
ykDCDejUa2iikzRi9Bue5DlP3u/9zjnze7XtaioiisihlEQsZyJuMcxH1MUD
HPFxOiKPBA/ZiEXtED+eJxDo6AvaMX49FzGNJ31Ju7KrjW/edccjRnwFz2Za
Zi/Q46vau9k3zExGVLUaZnmzENHnXS+/hTY/0xr44vfaJi75iVaxo4ycszva
LhK+5o4Pfu3OG3zyda1p9hQFM2Wtgin+5/9s2NvCndbAnD5wZt+3vNrxgnM9
pf0Dtt4q5Q==
                    "]]}, 
                    Annotation[#, 
                    "Charting`Private`Tag$4002083#1"]& ]]}, {}, {}, {}, {}}, {{
                  GrayLevel[0], 
                  
                  Line3DBox[{305, 1, 298, 227, 1566, 16, 1579, 31, 2102, 663},
                    VertexColors -> None], 
                  Line3DBox[{715, 2, 1236, 268, 305}, VertexColors -> None], 
                  Line3DBox[{717, 3, 715}, VertexColors -> None], 
                  Line3DBox[{721, 4, 718, 717}, VertexColors -> None], 
                  Line3DBox[{723, 5, 721}, VertexColors -> None], 
                  Line3DBox[{727, 6, 724, 723}, VertexColors -> None], 
                  Line3DBox[{729, 7, 727}, VertexColors -> None], 
                  
                  Line3DBox[{293, 8, 300, 1237, 269, 729}, VertexColors -> 
                   None], 
                  Line3DBox[{731, 9, 230, 1254, 293}, VertexColors -> None], 
                  Line3DBox[{735, 10, 732, 731}, VertexColors -> None], 
                  Line3DBox[{737, 11, 735}, VertexColors -> None], 
                  Line3DBox[{741, 12, 738, 737}, VertexColors -> None], 
                  Line3DBox[{743, 13, 741}, VertexColors -> None], 
                  Line3DBox[{747, 14, 744, 743}, VertexColors -> None], 
                  Line3DBox[{307, 15, 301, 271, 747}, VertexColors -> None], 
                  Line3DBox[{1591, 30, 1878, 232, 307}, VertexColors -> None], 
                  
                  Line3DBox[{1593, 46, 1608, 61, 1623, 1624, 76, 1650, 91, 
                   1893, 243, 1665, 106, 1919, 279, 121, 1703, 136, 1717, 
                   1718, 151, 1743, 166, 2115, 618}, VertexColors -> None], 
                  Line3DBox[{1606, 45, 1591}, VertexColors -> None], 
                  Line3DBox[{1620, 60, 2113, 617}, VertexColors -> None], 
                  Line3DBox[{1647, 75, 1620}, VertexColors -> None], 
                  Line3DBox[{1662, 90, 1648, 1647}, VertexColors -> None], 
                  Line3DBox[{1688, 105, 1662}, VertexColors -> None], 
                  
                  Line3DBox[{1701, 120, 1918, 278, 1688}, VertexColors -> 
                   None], 
                  Line3DBox[{1714, 135, 281, 1701}, VertexColors -> None], 
                  Line3DBox[{1740, 150, 1714}, VertexColors -> None], 
                  Line3DBox[{1754, 165, 1741, 1740}, VertexColors -> None], 
                  
                  Line3DBox[{1756, 181, 1770, 196, 1909, 261, 365, 211, 302, 
                   287, 961, 212, 962, 213, 963, 964, 214, 965, 215, 966, 967,
                    216, 968, 217, 1231, 264, 1307, 371, 218, 373, 1232, 265, 
                   219, 969, 970, 220, 971, 221, 972, 973, 222, 974, 223, 975,
                    976, 224, 1235, 267, 372, 225, 304, 289, 1793, 210, 1780, 
                   195, 2126, 666}, VertexColors -> None], 
                  Line3DBox[{1768, 180, 1754}, VertexColors -> None], 
                  Line3DBox[{1593, 475}, VertexColors -> None], 
                  Line3DBox[{1606, 486}, VertexColors -> None], 
                  Line3DBox[{1756, 488}, VertexColors -> None], 
                  Line3DBox[{1768, 499}, VertexColors -> None]}, {}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{1566, 1876, 2353, 1794, 1565, 2354, 1795, 1567, 
                   2355, 2164, 2483, 1568, 2356, 1796, 1569, 2357, 2165, 2484,
                    1570, 2358, 1797, 1571, 2623, 1877, 1923, 2301, 2622, 
                   1986, 1914, 1987, 2274, 2359, 1925, 1798, 1572, 2360, 2166,
                    2485, 1573, 2361, 1799, 1574, 2362, 2167, 2486, 1575, 
                   2363, 1800, 1576, 2364, 2168, 2487, 1577, 2275, 2365, 1801,
                    1878}, VertexColors -> None], 
                  Line3DBox[{1579, 2169, 2488, 1578, 994, 1580, 2366, 2170, 
                   2489, 1581, 997, 1582, 2367, 2171, 2490, 1583, 1355, 2014, 
                   1584, 2654, 2015, 1879, 1924, 1880, 2625, 2003, 1928, 1929,
                    1927, 2276, 2624, 1926, 1881, 1585, 2368, 2172, 2491, 
                   1586, 2173, 2492, 1587, 2369, 2174, 2493, 1588, 2175, 2494,
                    1589, 2370, 2176, 2495, 1590, 2177, 2496, 1591}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{1593, 2081, 2371, 1802, 2101, 2333, 2372, 1803, 
                   2103, 2675, 2082, 2178, 2667, 2104, 2334, 2373, 1804, 2105,
                    2676, 2083, 1011, 2106, 2331, 2374, 1805, 2078, 2655, 
                   2039, 2137, 2069, 1932, 2647, 1988, 2076, 1989, 2072, 1990,
                    2128, 2325, 2375, 1934, 1806, 2107, 2677, 2084, 2179, 
                   2668, 2108, 2335, 2376, 1807, 2109, 2678, 2085, 1013, 2110,
                    2336, 2377, 1808, 2111, 2679, 2086, 2180, 2669, 2112, 
                   2337, 2378, 1809, 2113}, VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwV0DkzQ3EUhvGjQGgEKUhjlCbRGiP2oHeHBrHEmhQxo/QRYl+iiDE+Dp8o
VSy/W7zz3POc9/yLO1m9TBo9EZHIRl9EPRPxNhiRw5qscxfY4j57I6YHIta4
c+6VG8UzKXOn+MJ96BX1VrkT7pkbwWNZ4ar4xL3rFfSWuU0ukZv+iLH01n7c
vGSXT99PZ75pP2H+w8CmNxZ1fsy/0pVt/ko6vqfcXLvdMi/oHeGjue3uW+a5
Q+6BG8YDKXH7eJ/+B/dfenNchbvjsrgns9wu3nJDuCMz8g97KiPh
                   "], VertexColors -> None], 
                  
                  Line3DBox[{1608, 2181, 2497, 1607, 1016, 1609, 2379, 2182, 
                   2498, 1610, 2183, 2499, 1611, 2380, 2184, 2500, 1612, 2309,
                    2501, 2016, 1613, 2656, 2017, 1882, 1933, 1883, 2629, 
                   2004, 1937, 1938, 1936, 2277, 2628, 1935, 1884, 1614, 2381,
                    2185, 2502, 1615, 2186, 2503, 1616, 2382, 2187, 2504, 
                   1617, 2188, 2505, 1618, 2383, 2189, 2506, 1619, 2190, 2507,
                    1620}, VertexColors -> None], 
                  
                  Line3DBox[{1624, 2384, 1810, 1622, 2385, 1811, 1626, 2386, 
                   2193, 2511, 1628, 2387, 1812, 1630, 2388, 2196, 2515, 1632,
                    2311, 2389, 1813, 2019, 2657, 1885, 1943, 2302, 2649, 
                   2005, 1991, 1915, 1992, 2278, 2390, 1945, 1814, 1636, 2391,
                    2198, 2519, 1638, 2392, 1815, 1640, 2393, 2201, 2523, 
                   1642, 2394, 1816, 1644, 2395, 2204, 2527, 1646, 2396, 1817,
                    1648}, VertexColors -> None], 
                  
                  Line3DBox[{1647, 2528, 2205, 1645, 2526, 2525, 2203, 1643, 
                   2524, 2202, 1641, 2522, 2521, 2200, 1639, 2520, 2199, 1637,
                    2518, 2517, 2197, 1635, 1886, 1940, 2297, 2631, 1941, 
                   1634, 1942, 2632, 2298, 1939, 2020, 2630, 2312, 1633, 2018,
                    2516, 2310, 1631, 2514, 2513, 2195, 1629, 2512, 2194, 
                   1627, 2510, 1033, 1625, 2509, 2192, 1621, 2508, 2191, 
                   1623}, VertexColors -> None], 
                  
                  Line3DBox[{1650, 1887, 2529, 2279, 1649, 2206, 2530, 1651, 
                   2397, 2207, 2531, 1652, 2208, 2532, 1653, 2398, 2209, 2533,
                    1654, 2313, 2534, 2021, 1655, 2658, 2022, 1890, 1944, 
                   1891, 2634, 2006, 1948, 1949, 1947, 2281, 2633, 1946, 1892,
                    1656, 2399, 2210, 2535, 1657, 2211, 2536, 1658, 2400, 
                   2212, 2537, 1659, 2213, 2538, 1660, 2401, 2214, 2539, 1661,
                    2215, 2540, 1662}, VertexColors -> None], 
                  
                  Line3DBox[{1665, 1889, 2402, 1818, 1664, 2403, 1819, 1667, 
                   2404, 2218, 2545, 1669, 2405, 1820, 1671, 2406, 2221, 2549,
                    1673, 2315, 2407, 1821, 2024, 2659, 1894, 1954, 2303, 
                   2650, 2007, 1993, 1917, 1994, 2282, 2408, 1956, 1822, 1677,
                    2409, 2223, 2553, 1679, 2410, 1823, 1681, 2411, 2226, 
                   2557, 1683, 2412, 1824, 1685, 2413, 2229, 2561, 1687, 2284,
                    2414, 1825, 1918}, VertexColors -> None], 
                  
                  Line3DBox[{1688, 1896, 2562, 2283, 1686, 2560, 2559, 2228, 
                   1684, 2558, 2227, 1682, 2556, 2555, 2225, 1680, 2554, 2224,
                    1678, 2552, 2551, 2222, 1676, 1895, 1951, 2299, 2636, 
                   1952, 1675, 1953, 2637, 2300, 1950, 2025, 2635, 2316, 1674,
                    2023, 2550, 2314, 1672, 2548, 2547, 2220, 1670, 2546, 
                   2219, 1668, 2544, 2543, 2217, 1666, 2542, 2216, 1663, 2280,
                    2541, 1916, 1888, 1893}, VertexColors -> None], 
                  
                  Line3DBox[{121, 856, 122, 857, 123, 858, 859, 124, 860, 125,
                    861, 862, 126, 863, 127, 1283, 340, 864, 128, 1284, 341, 
                   129, 865, 866, 130, 867, 131, 868, 869, 132, 870, 133, 871,
                    872, 134, 1246, 282, 135}, VertexColors -> None], 
                  
                  Line3DBox[{1701, 1901, 2574, 2287, 1700, 2573, 2238, 2419, 
                   1699, 2572, 2237, 1698, 2571, 2236, 2418, 1697, 2570, 2235,
                    1696, 2569, 2234, 2417, 1695, 1900, 1957, 2638, 2286, 
                   1958, 1960, 1959, 2008, 2639, 1899, 1955, 1898, 2027, 2660,
                    1694, 2026, 2568, 2317, 1693, 2567, 2233, 2416, 1692, 
                   2566, 2232, 1691, 2565, 2231, 2415, 1690, 2564, 2230, 1689,
                    2285, 2563, 1897, 1919}, VertexColors -> None], 
                  
                  Line3DBox[{1703, 2420, 1826, 1702, 2421, 1827, 1704, 2422, 
                   2239, 2575, 1705, 2423, 1828, 1706, 2424, 2240, 2576, 1707,
                    2318, 2425, 1829, 2028, 2661, 1902, 1961, 2304, 2651, 
                   2009, 1995, 1920, 1996, 2289, 2426, 1963, 1830, 1708, 2427,
                    2241, 2577, 1709, 2428, 1831, 1710, 2429, 2242, 2578, 
                   1711, 2430, 1832, 1712, 2431, 2243, 2579, 1713, 2288, 2432,
                    1833, 1714}, VertexColors -> None], 
                  
                  Line3DBox[{1718, 2433, 1834, 1716, 2434, 1835, 1720, 2436, 
                   2437, 1836, 1722, 2438, 1837, 1724, 2440, 2441, 1838, 1726,
                    2320, 2442, 1839, 2030, 2290, 2443, 1968, 2305, 2642, 
                   1840, 1998, 1997, 2648, 2306, 1969, 1841, 1729, 2445, 2446,
                    1842, 1731, 2447, 1843, 1733, 2449, 2450, 1844, 1735, 
                   2451, 1845, 1737, 2453, 2454, 1846, 1739, 2455, 1847, 
                   1741}, VertexColors -> None], 
                  
                  Line3DBox[{1740, 2591, 2254, 1738, 2590, 2253, 2452, 1736, 
                   2589, 2252, 1734, 2588, 2251, 2448, 1732, 2587, 2250, 1730,
                    2586, 2249, 2444, 1728, 1905, 1964, 2640, 2291, 1965, 
                   1967, 1966, 2010, 2641, 1904, 1962, 1903, 2031, 2662, 1727,
                    2029, 2585, 2319, 1725, 2584, 2248, 2439, 1723, 2583, 
                   2247, 1721, 2582, 2246, 2435, 1719, 2581, 2245, 1715, 2580,
                    2244, 1717}, VertexColors -> None], 
                  
                  Line3DBox[{1743, 1124, 1742, 2456, 1848, 1744, 2457, 2255, 
                   2592, 1745, 2458, 1849, 1746, 2459, 2256, 2593, 1747, 2321,
                    2460, 1850, 2032, 2663, 1906, 1970, 2307, 2652, 2011, 
                   1999, 1921, 2000, 2292, 2461, 1972, 1851, 1748, 2462, 2257,
                    2594, 1749, 2463, 1852, 1750, 2464, 2258, 2595, 1751, 
                   2465, 1853, 1752, 2466, 2259, 2596, 1753, 2467, 1854, 
                   1754}, VertexColors -> None], 
                  Line3DBox[CompressedData["
1:eJwNzLlOAlAQheEhkdWlsdPK1gIs7EVkBzEhBK1tVcBYaqK44Fb5OFpb6hv4
GiagDV9x8p/5Z+7dOB52B4mI6MtPKuIkE3GTi0jiTjqihKcy5lJY5Mr4lYy4
5dL6LlfBM7njMljiqvjt7p7L6ntcDftyyW1mI871X/4QE1LWj/DTu218N6+5
67mv6OvcH/7LVFbtruxm+occ2Fexjnm7N/8s6Bdy7a5m19AH8mDOYZ1rYsH9
hHuURXODb+FQnrglbHJt3HL7zL3IsrnF7+NIXrkVbHMdnAO4qCRz
                   "], VertexColors -> None], 
                  
                  Line3DBox[{1768, 2099, 2605, 2344, 1767, 2681, 2098, 2097, 
                   2674, 1766, 2096, 2604, 2343, 1765, 1471, 2095, 2673, 1764,
                    2094, 2603, 2342, 1763, 2341, 2602, 2093, 2672, 1762, 
                   2071, 1973, 2643, 2327, 2131, 1974, 1976, 1975, 2077, 2326,
                    2601, 1971, 2070, 2033, 2664, 1761, 2080, 2600, 2332, 
                   1760, 1466, 2092, 2671, 1759, 2091, 2599, 2340, 1758, 2680,
                    2090, 2089, 2670, 1757, 2088, 2598, 2339, 1755, 2338, 
                   2597, 2087, 2115}, VertexColors -> None], 
                  
                  Line3DBox[{1770, 1140, 1769, 2468, 1869, 1771, 2469, 2260, 
                   2606, 1772, 2470, 1870, 1773, 2471, 2261, 2607, 1774, 1402,
                    1871, 2034, 2665, 1907, 1979, 2308, 2653, 2012, 2001, 
                   1922, 2002, 2293, 2472, 1981, 1872, 2051, 2686, 2050, 2262,
                    2685, 1775, 2473, 1873, 1776, 2474, 2263, 2608, 1777, 
                   2475, 1874, 1778, 2476, 2264, 2609, 1779, 2477, 1875, 
                   1780}, VertexColors -> None], 
                  
                  Line3DBox[{1793, 1913, 2621, 2296, 1792, 2620, 2273, 2482, 
                   1791, 2619, 2272, 1790, 2618, 2271, 2481, 1789, 2617, 2270,
                    1788, 2616, 2269, 2480, 1787, 1912, 1982, 2645, 2295, 
                   1983, 1985, 1984, 2013, 2646, 1911, 1980, 1910, 2036, 2666,
                    1786, 2035, 2615, 2322, 1785, 2614, 2268, 2479, 1784, 
                   2613, 2267, 1783, 2612, 2266, 2478, 1782, 2611, 2265, 1781,
                    2294, 2610, 1908, 1909}, VertexColors -> None]}, {
                  Opacity[0.45], 
                  
                  Line3DBox[{715, 978, 2354, 716, 994, 750, 2701, 1431, 1560},
                    VertexColors -> None], 
                  
                  Line3DBox[{717, 979, 2355, 719, 995, 2366, 751, 1432, 1479, 
                   476}, VertexColors -> None], 
                  
                  Line3DBox[{721, 981, 2356, 722, 997, 753, 2703, 1433, 1561},
                    VertexColors -> None], 
                  
                  Line3DBox[{723, 982, 2357, 725, 998, 2367, 754, 1434}, 
                   VertexColors -> None], 
                  
                  Line3DBox[{727, 984, 2358, 728, 1355, 1356, 1412, 2682, 
                   1477, 1554}, VertexColors -> None], 
                  
                  Line3DBox[{729, 1171, 2623, 1173, 1258, 1358, 2654, 1359, 
                   1357, 1416, 1415, 1417, 1418, 1532}, VertexColors -> None], 
                  
                  Line3DBox[{731, 985, 2360, 733, 1000, 2368, 757, 1435, 1481,
                    1546}, VertexColors -> None], 
                  
                  Line3DBox[{735, 987, 2361, 736, 2492, 1002, 759, 2706, 1436,
                    1562}, VertexColors -> None], 
                  
                  Line3DBox[{737, 988, 2362, 739, 1003, 2369, 760, 1437, 1482,
                    1547}, VertexColors -> None], 
                  
                  Line3DBox[{741, 990, 2363, 742, 2494, 1005, 762, 2708, 1438,
                    1563}, VertexColors -> None], 
                  
                  Line3DBox[{743, 991, 2364, 745, 1006, 2370, 763, 1439, 1483,
                    1548}, VertexColors -> None], 
                  
                  Line3DBox[{747, 1176, 1177, 2365, 748, 2496, 1008, 765, 
                   2710, 1440, 1564}, VertexColors -> None], 
                  
                  Line3DBox[{961, 1155, 1226, 2610, 943, 1140, 927, 2688, 
                   1426, 1555}, VertexColors -> None], 
                  
                  Line3DBox[{962, 1156, 2611, 944, 2468, 1141, 928, 2689, 
                   1534}, VertexColors -> None], 
                  
                  Line3DBox[{964, 1158, 2612, 946, 1143, 2606, 930, 2690, 
                   1427, 1556}, VertexColors -> None], 
                  
                  Line3DBox[{965, 1159, 2613, 947, 2470, 1144, 931, 2691, 
                   1535}, VertexColors -> None], 
                  
                  Line3DBox[{967, 1161, 2614, 949, 1146, 2607, 933, 2692, 
                   1428, 1557}, VertexColors -> None], 
                  
                  Line3DBox[{968, 1407, 1406, 2615, 950, 1402, 1401, 1411, 
                   2683, 1478, 1553}, VertexColors -> None], 
                  
                  Line3DBox[{970, 1163, 2616, 953, 1147, 2685, 1419, 935, 
                   2687, 1533}, VertexColors -> None], 
                  
                  Line3DBox[{971, 1164, 2617, 954, 2473, 1148, 936, 2693, 
                   1536}, VertexColors -> None], 
                  
                  Line3DBox[{973, 1166, 2618, 956, 1150, 2608, 938, 2695, 
                   1429, 1558}, VertexColors -> None], 
                  
                  Line3DBox[{974, 1167, 2619, 957, 2475, 1151, 939, 2696, 
                   1537}, VertexColors -> None], 
                  
                  Line3DBox[{976, 1169, 2620, 959, 1153, 2609, 941, 2698, 
                   1430, 1559}, VertexColors -> None], 
                  
                  Line3DBox[{1231, 1228, 1408, 1410, 2666, 1409, 1303, 1223, 
                   2665, 1403, 1405, 1404, 1299, 1476, 1531}, VertexColors -> 
                   None], 
                  
                  Line3DBox[{1232, 1257, 1230, 1251, 1229, 2645, 1305, 1304, 
                   1343, 2472, 1225, 1250, 1224, 1301, 1300, 2684, 1414, 1447,
                    1489}, VertexColors -> None], 
                  
                  Line3DBox[{1235, 1234, 1233, 2621, 960, 2477, 1154, 942, 
                   2699, 1538}, VertexColors -> None], 
                  
                  Line3DBox[{1236, 1170, 977, 2353, 714, 2488, 993, 749, 2700,
                    1539}, VertexColors -> None], 
                  
                  Line3DBox[{1237, 1252, 1172, 1238, 2622, 1308, 1309, 730, 
                   1261, 1178, 2625, 1344, 1311, 1312, 756, 2627, 1445, 1490},
                    VertexColors -> None], 
                  
                  Line3DBox[{1254, 1253, 1174, 1239, 1175, 2359, 1310, 1259, 
                   1260, 2624, 1179, 1240, 1180, 1313, 1262, 2626, 1444, 
                   1530}, VertexColors -> None], 
                  
                  Line3DBox[{1307, 1256, 1255, 1354, 2646, 1227, 1306, 951, 
                   1342, 1341, 2653, 1353, 1222, 1302, 934, 2644, 1446, 1512},
                    VertexColors -> None], 
                  Line3DBox[{1491, 1442, 2601, 1298, 917, 1339, 1338, 2652, 
                   1352, 1218, 1294, 899, 2642, 1336, 1335, 1351, 2641, 1214, 
                   1290, 881, 1333, 1332, 2651, 1350, 1210, 1286, 864, 1330, 
                   1329, 1349, 2639, 1202, 1282, 846, 1327, 1326, 2650, 1348, 
                   1195, 1278, 2637, 828, 1324, 1323, 1347, 2634, 1191, 1274, 
                   810, 1321, 1320, 2649, 1346, 1185, 1270, 2632, 792, 1318, 
                   1317, 1345, 2629, 1181, 1266, 774, 1315, 2647, 1314, 1493},
                    VertexColors -> None], 
                  
                  Line3DBox[{1492, 1441, 2375, 1316, 1264, 1265, 2628, 1183, 
                   1241, 1184, 1319, 1268, 2631, 1269, 1187, 1242, 1188, 2390,
                    1322, 1272, 1273, 2633, 1193, 1243, 1194, 1325, 1276, 
                   2636, 1277, 1197, 1244, 1198, 2408, 1328, 1280, 1281, 2638,
                    1204, 1245, 1205, 1331, 1284, 1285, 1212, 1247, 1213, 
                   2426, 1334, 1288, 1289, 2640, 1216, 1248, 1217, 1337, 2648,
                    1292, 1293, 1220, 1249, 1221, 2461, 1340, 1296, 1297, 
                   2643, 1443, 1529}, VertexColors -> None], 
                  
                  Line3DBox[{1494, 2655, 1413, 1263, 1363, 2656, 1364, 1362, 
                   1182, 1267, 2630, 1368, 1369, 1367, 2657, 1186, 1271, 1373,
                    2658, 1374, 1372, 1192, 1275, 2635, 1378, 1379, 1377, 
                   2659, 1196, 1279, 1383, 2660, 1384, 1382, 1203, 1283, 1388,
                    1389, 1387, 2661, 1211, 1287, 1393, 2662, 1394, 1392, 
                   1215, 2443, 1291, 1398, 1399, 1397, 2663, 1219, 1295, 1400,
                    2664, 1496}, VertexColors -> None], 
                  
                  Line3DBox[{1495, 1449, 2600, 916, 2460, 1396, 1395, 898, 
                   2442, 1391, 1390, 2585, 880, 2425, 1386, 1385, 863, 1381, 
                   1380, 2568, 845, 2407, 1376, 1375, 2550, 827, 1371, 1370, 
                   2534, 809, 2389, 1366, 1365, 2516, 791, 1361, 1360, 2501, 
                   773, 2374, 1448, 1516}, VertexColors -> None], 
                  
                  Line3DBox[{1497, 1009, 2371, 766, 2497, 1015, 784, 2508, 
                   1031, 2384, 802, 2529, 1189, 1047, 820, 2541, 1190, 1063, 
                   2402, 838, 2563, 1201, 1078, 856, 1093, 2420, 873, 2580, 
                   1108, 2433, 891, 1124, 909, 2597, 1460, 1523}, 
                   VertexColors -> None], 
                  Line3DBox[{545, 2675, 1451, 768, 1017, 2379, 786, 1033, 
                   2386, 804, 1049, 2397, 822, 2543, 1065, 2404, 840, 1080, 
                   2415, 858, 1095, 2422, 875, 1110, 2435, 2436, 893, 1126, 
                   2457, 911, 1462, 2670, 489}, VertexColors -> None], 
                  
                  Line3DBox[{1498, 2667, 1010, 769, 2498, 1018, 787, 2510, 
                   2511, 1034, 805, 2531, 1050, 823, 2544, 2545, 1066, 841, 
                   2565, 1081, 859, 2575, 1096, 876, 2582, 1111, 2437, 894, 
                   2592, 1127, 912, 1463, 2680, 1524}, VertexColors -> None], 
                  
                  Line3DBox[{1499, 1011, 772, 2500, 1021, 790, 2514, 2515, 
                   1037, 808, 2533, 1053, 826, 2548, 2549, 1069, 844, 2567, 
                   1084, 862, 2576, 1099, 879, 2584, 1114, 2441, 897, 2593, 
                   1130, 915, 1466, 1525}, VertexColors -> None], 
                  
                  Line3DBox[{1500, 2668, 1012, 776, 2502, 1023, 794, 2518, 
                   2519, 1039, 812, 2535, 1055, 830, 2552, 2553, 1071, 848, 
                   2569, 1086, 866, 2577, 1101, 883, 2586, 1116, 2446, 901, 
                   2594, 1132, 919, 2602, 1468, 1526}, VertexColors -> None], 
                  
                  Line3DBox[{1501, 1013, 779, 2504, 1026, 797, 2522, 2523, 
                   1042, 815, 2537, 1058, 833, 2556, 2557, 1074, 851, 2571, 
                   1089, 869, 2578, 1104, 886, 2588, 1119, 2450, 904, 2595, 
                   1135, 922, 1471, 1527}, VertexColors -> None], 
                  
                  Line3DBox[{1502, 2669, 1014, 782, 2506, 1029, 800, 2526, 
                   2527, 1045, 818, 2539, 1061, 836, 2560, 2561, 1077, 854, 
                   2573, 1092, 872, 2579, 1107, 889, 2590, 1122, 2454, 907, 
                   2596, 1138, 925, 1474, 2681, 1528}, VertexColors -> None], 
                  
                  Line3DBox[{1503, 1461, 2598, 910, 2456, 1125, 892, 2434, 
                   1109, 2581, 874, 2421, 1094, 857, 1079, 2564, 839, 2403, 
                   1064, 2542, 821, 1048, 2530, 803, 2385, 1032, 2509, 785, 
                   1016, 767, 2372, 1450, 1513}, VertexColors -> None], 
                  
                  Line3DBox[{1504, 1464, 2599, 913, 2458, 1128, 895, 2438, 
                   1112, 2583, 877, 2423, 1097, 860, 1082, 2566, 842, 2405, 
                   1067, 2546, 824, 1051, 2532, 806, 2387, 1035, 2512, 788, 
                   1019, 2499, 770, 2373, 1452, 1514}, VertexColors -> None], 
                  
                  Line3DBox[{1505, 2671, 1465, 914, 2459, 1129, 896, 2440, 
                   2439, 1113, 878, 2424, 1098, 861, 2416, 1083, 843, 2406, 
                   1068, 2547, 825, 2398, 1052, 807, 2388, 1036, 2513, 789, 
                   2380, 1020, 771, 1453, 2676, 1515}, VertexColors -> None], 
                  
                  Line3DBox[{1506, 2672, 1467, 918, 2462, 1131, 900, 2445, 
                   2444, 1115, 882, 2427, 1100, 865, 2417, 1085, 847, 2409, 
                   1070, 2551, 829, 2399, 1054, 811, 2391, 1038, 2517, 793, 
                   2381, 1022, 775, 1454, 2677, 1517}, VertexColors -> None], 
                  
                  Line3DBox[{1507, 1469, 2603, 920, 2463, 1133, 902, 2447, 
                   1117, 2587, 884, 2428, 1102, 867, 1087, 2570, 849, 2410, 
                   1072, 2554, 831, 1056, 2536, 813, 2392, 1040, 2520, 795, 
                   1024, 2503, 777, 2376, 1455, 1518}, VertexColors -> None], 
                  
                  Line3DBox[{1508, 2673, 1470, 921, 2464, 1134, 903, 2449, 
                   2448, 1118, 885, 2429, 1103, 868, 2418, 1088, 850, 2411, 
                   1073, 2555, 832, 2400, 1057, 814, 2393, 1041, 2521, 796, 
                   2382, 1025, 778, 1456, 2678, 1519}, VertexColors -> None], 
                  
                  Line3DBox[{1509, 1472, 2604, 923, 2465, 1136, 905, 2451, 
                   1120, 2589, 887, 2430, 1105, 870, 1090, 2572, 852, 2412, 
                   1075, 2558, 834, 1059, 2538, 816, 2394, 1043, 2524, 798, 
                   1027, 2505, 780, 2377, 1457, 1520}, VertexColors -> None], 
                  
                  Line3DBox[{1510, 2674, 1473, 924, 2466, 1137, 906, 2453, 
                   2452, 1121, 888, 2431, 1106, 871, 2419, 1091, 853, 2413, 
                   1076, 2559, 835, 2401, 1060, 817, 2395, 1044, 2525, 799, 
                   2383, 1028, 781, 1458, 2679, 1521}, VertexColors -> None], 
                  
                  Line3DBox[{1511, 1475, 2605, 926, 2467, 1139, 908, 2455, 
                   1123, 2591, 890, 2432, 1209, 1208, 1246, 1207, 1206, 2574, 
                   855, 2414, 1200, 1199, 2562, 837, 1062, 2540, 819, 2396, 
                   1046, 2528, 801, 1030, 2507, 783, 2378, 1459, 1522}, 
                   VertexColors -> None], 
                  Line3DBox[{1540, 2702, 752, 996, 2489, 720, 980, 2483, 718},
                    VertexColors -> None], 
                  
                  Line3DBox[{1541, 2704, 755, 999, 2490, 726, 983, 2484, 724},
                    VertexColors -> None], 
                  
                  Line3DBox[{1542, 2705, 758, 1001, 2491, 734, 986, 2485, 
                   732}, VertexColors -> None], 
                  
                  Line3DBox[{1543, 2707, 761, 1004, 2493, 740, 989, 2486, 
                   738}, VertexColors -> None], 
                  
                  Line3DBox[{1544, 2709, 764, 1007, 2495, 746, 992, 2487, 
                   744}, VertexColors -> None], 
                  Line3DBox[{1480, 1545}, VertexColors -> None], 
                  
                  Line3DBox[{556, 1484, 929, 1142, 2469, 945, 1157, 2478, 
                   963}, VertexColors -> None], 
                  
                  Line3DBox[{1549, 1485, 932, 1145, 2471, 948, 1160, 2479, 
                   966}, VertexColors -> None], 
                  
                  Line3DBox[{1550, 1486, 1425, 1422, 1423, 1424, 1421, 2686, 
                   1420, 952, 1162, 2480, 969}, VertexColors -> None], 
                  
                  Line3DBox[{1551, 1487, 2694, 937, 1149, 2474, 955, 1165, 
                   2481, 972}, VertexColors -> None], 
                  
                  Line3DBox[{1552, 1488, 2697, 940, 1152, 2476, 958, 1168, 
                   2482, 975}, VertexColors -> None]}, {}, {}}}, 
               VertexColors -> CompressedData["
1:eJzsvXk81d/2P66JIoSKSlI0KqS5sBSVpNKcBkqahDRJKmmWpFGDSqgkqaSS
InI4xmSeM5/ZmJCh8jv3WqfX+/O6v/113eFz7/1+7/nz+VhnvdZee+211157
7b1HWu1Zsa2nmJjYDUkxsV5iol89RP2a5HemgQ8nBxjyIqWLQYRPGwaXNzVw
YVrkMIF0R+5vPGiG2fFpDWzg7GissqhPB4dlymbix+sgSm/AU52HlWDCkbjI
8kuAq4/Cm7c8rgafuW6l9wpKwXfI4X3aA+IhtH3VvQ9pfPggUb8z1yYfmk0F
a4+6xEHW8q+GQ1o4UJK6tkHmRzqYum7QS6xmQOPji4IDqiz4Nfb4d8+hseD/
6tOogRtiIAPp85F+MdKHIP9w5N+I/D1Rnhsojw/KY4/yR6L8i1B+ensrsb0i
fArqR5umH5I+nx3N/Kl2oBqKvhqaTllR8Rs3SZ/Ve6WSAPT2xj2a7ErR89T8
JE9GcoH5S+zVjw0U/zOH+sq93MyGW0pHXC/t+QxrY94+ldGshYaGRXPuVZXD
460VQcXceCgLf/JRO1sA1SOWOPEVisDMRXvcfBkm2ITcyVnhzIVmc3HnW2aZ
0HrL5VHw1Njfeu5APfuhnncifR3StyB9CfLnIP9lyH8VylOL8jxCeUTyn0L5
L6D8IpyD7f1Ia68x6mcGTT8kfUpej/2p71wDQzTfsQwesH7jW3bfTmsbVg0v
3/iujfxU/hvPTHM4P9OGD5fV+bOl9xb9xmGqsaFjOAciii/H+xlnQfqoDvVN
d+vA/7aTzKXkSrA1bvs1ODQBiltPyW1LrILTKy/onrhaDNmDqyQHezGBl973
l20jF2L2j97IupQFc9hFgwc5UXoWG/c/7ZmN9OFIPwvpC5C/M/LPRP6pKM89
lMcG5RHJr4vyh6L8IjwN2+tGa+9m1M8zmn5I+kyuj1uZvKAWBj29dF/2Fuc3
/iT/wq6mkTVwoe6BpGJK5W9cUSMq/iRPAGL5d2Xdmkt/404hI+YuFnBhkV3N
g3scqt/zp52IUKhmwcg+Rx22P0uBq8cXqAT4VYPy4n2H7ieXwnSt1qHi0vEQ
q2BzWnoLDzzrbh3+9jQbbL9WqEi/joUm1HMPmp4/Iv0ZpLdB+kvIXwH5T0X+
InlyUB4ZlEeEO6L882jyD8L2tuT9z/YGon7O0/RD0ifH6PXlsPpaKN8sXTlk
Ju83HqPqv+rOqxoIHF41IlSL/RvXa28UVxpTDaP9ApX6f6H6Udt98dyNPB6E
j2NFFXMLfuMjh/gf8Q1iwyjZQ6YPFNNhbO7+tSPX1EBYYbGpSUYZsCNzxjxx
iAeZaLGRiyN48PbhB8namzlgNDPjYQmb0nNP1PMD1LMk0gcj/TykV0P+L5E/
C/mL5BmB8iijPCJ8Isr/gib/bGzvSFp7o1E/ATT9kPR5dVRIwFiHOjiad3vD
SAf+b9zHyyckT7UWoi2G6o+Z8wc773vx/bmMaujF8VbVEKf6sc/U5mJegHB8
eUXtSB33hfJ7SqO+np/FAUbZUKm1iRlgV6f+5FhxDVg7JiktOFkOA5oyt2yN
EM6PiwsWtf7iwTaDJ7l841wwz17GmCMV91vPvWh6fob065F+DdLvRP6WyF8a
+YvkOY7yvEV5RHgvlP8ETf5AbG8PWnvvon4iafoh6VP+m+QQ1eg60DN+v+fI
ZMFvfJXxA3k361qY65g4obyM4nPz3pz+9f1qwOhhLnvBZeq7SuaH9H4oC+D8
/PF7lnpS88LyRoaT0lWhnllB6YeyM+FSsfESi8m1MHL2ixNf68rByeLT3Zf8
eGDMq7rDH8cHtd6XwCssF2TOfyq1GvWXehb5jSikV0J6KaR3R/7KyN8R+Yvk
WYryhKM8Inwwyn+CJv8NbO88WntF+gGafkj6vOYeX1haUAcxbXCudR+F9z8x
4vrBI7Vw0c9yaO8h3D/EFU5LpIbXgLnx8Wcy0dR3rz+cUNVmJIAs6zO+2yVK
fuO1tv2OKIZwYPaPF02LtLKg6PPMSwlLakEt8aSR4qAKOLqCz9ncGg8751Tq
qszgg/pVq54RRbkwoFfR6dkTyHq2RvohSC+D9HnIXwX5OyN/kTwClEcb5RHh
l1H+ZJr8p7G9a2ntlUT9XKDph6TP/9rz/449/9c/d+L/bP/833ijE/9nxxv/
jZ878X92/Pzf9WCn/P/s9eB/8xud8v+z8xv/zdf97+TrIgtfpu8aIYBh06R2
BXpReHgva/+H06tgavrGzR57y0D80MkzGs/YcMMsc+KmaSmg2ys6afB0BvRC
3A3x2YiXHwXFhR5sSN+iaL/mfDI0DxmoXavG6PZ3Vfcfk75VzYY7i66Ly5/4
BEW3Nm0cas6A4Yi7I16AuHxZY4b3Og64X32q9f3NZ1BkfzGNuM4AGcQdER+E
OMdTYvFyVw60PAl78+RMGri++5H5OIgBFYhXIO6CuEhO/6VntGS/1YLto5H7
8/Wo+e5clPtCB/U6KKk1/hEVxgOV09GJFXc4IH52zJhqyXSY/GJhR+k7BgxB
vO1MJ66FuIhP86vwuAlZdWA533THRSsB3Mh459cjiAPzClO+5Wulw9FxUj5P
YxhwFfHpiB9GnCQPCf9H86frp7t66G6/dLffu2tX/+zxwsLxUozj5TuOl791
HLV6hN3a2yCMx7dr7domXkjESd+lzyMi/0biQ6Knx7F0nL6OEPF/PTxvULZc
HRhYzl2ieZ73V/Ohy0kfRyT8b+Xzt8r5oAv9/KP0T7JPEX6hYts+c1kBnF2/
fWKfbcWwpMxa+X4JCxyHDp+l8jMejhx0eC8bFwMmiO9E3BnxnVc5Yha5LCgz
SgltyIiHlO0O409ExxD5d/e7XfFJOr01WcdLALZFezWN20qIctqinLUo5yea
nF/mN9w9so8P9nPejZNzLyLipHmfJM8/io9W8MCyralsaK5hNpUWp8DSgNHW
ZQsZMBFxDuKmiI+4NmPvp18s8C7dsHHHowRg7ZCFrJwYGIV4EOIcxEn2s0d3
caODJAcYEuw8jeGpYG+afff6LgbsRjwEcVvEvxQfmRFjwAHPU+uaZs/6DOcy
83wvn2NAPuLOiJ9B/MH6UffCpwvjmMVLY8qSEmHmVbMnoY0xEIB4C+JzECeN
l5NTEvqU2XEgfOaxs9NGp8G3ps9bD/sy4Bji/ojXI+6rKlbStJgNiU9Xn2ma
mQRP3+RutBVjwEPESxB/hjhpPZ59eMrQt5c4sDN754rJuWnwy9CzYewrBnxG
3AzxH4grHt2Wu3oDG1LcLG9ZnE8CH6aOIb8vA4YhXoG4L+Ikv7HxoK7hi4cc
kDN9vKl2ZDqs8zE9ERHFgDWIiyO+GvHd7VLfVKzZYBTctnv52yRw6WnPZ0gz
wAHx9YifQJzkD5/vDb+W9JQDCgpycGKq8LtFWSsfMxgQhHhfxNcg/jS8dhpn
m5B//it7n49JIFbnrh8lw4AXiO9FvBfipO92t70Dg3tXeAnXJ6czneuyHiZB
3zKTeWlSDFBC3BtxScRJdtXd/g1vlc2zX8WG8M/BM+dvSwLVaZOZQ/ow4APi
nxEfhTipf7trz+USzqd7zxPy31tg2dQ7CW67NmjUtcUAB3EW4ncQJ7W3u+PX
5kDuhykT2CCmYWe2wy0R3L+5WCbVxIA94gqIeyBOyrd0188URdkNGSTDBlO/
khNrmhKAf+vuAsOSGChBfCPiAsRJ+Yd/lL9NSGFmVNWyoKpxz55NKxJg2bWT
K2RTYyAJ8VbElyNO8rfdnadI8y/puyQ5SfKQ9EnSP0nPJHsg2Q/JTkj2TLJ/
kp2TxiNp/JLGKcmfkPwPSR6SPyT5T5KfJPlzkv8n8SHNR6T5i6Qf0nxKmn9J
8ywpHiDFDyQ9k+IfUrxEGhfuF/scPSvOhtTwfsfTUxNAf4wXKBbGQG+juSXn
dNkwf5OXgiEvETZ9yn7L/R4DdneSh241Y8MvnvcaZbMkuBLGaivuyYC+NwIK
NCzYID6U4zflVhLYTJaUc5ZkQHyk2oI5wn43tL+wR/VDEsjW7i6zlCHjJD6k
75LkJLXrmGzfmekcFphEjpNvHpsAe4rmO3olxsChfptWlpzmw84FlvL9H+eB
6dbjaWNWx4Gpvp12RDgXvN9kuyd/ywQFl1ov1bWxcHTXBZcjERw48VhSwWNT
OtinXz+0PIUBS81ifTmJAvg8pWf61uZC6GH807dfXyZoK2189/EyD87/qnr1
YlwOeAyucbT6HAuSHxf3NNjKhYZFjhPmDcwEm2XrwurGxkLCxnYpSYMq+Jor
f7tu0heYw9w4JW0RE/IOnng6qYwHLYO+z7JqyQGL6Imn5rTFQm95dtx3fy6k
mJ8wK3+fCXHvBOnKi2PBXlftTNTVKpCxaXSeJl4s9P964YcOMWHB5q8BZop8
kHS6mH7ZLReigxhFT5XiYKf6oOeKGVwwGz2gxmVKFtzl/zp1zToWCtXlBwz7
UAWx21mV7QeKQVPe7XqhJxNmtrPXeU7hw0nV/N02mbmw6t6iIYbj4sDav2/v
/VVcOFPoNGG3Uxbo+YY4qu7vPh/1wpBPifVcCLzr+dzibBbEbpNwlHfsfrs2
v25IzyvjAkfhXd3zjVlQOHPhifl23dez6b2BIVaRXJgqc7p43c9MGDWzrd9o
89hu93t8wopwtTNcyOq5UKncNhMuDtXXfzQ7Fiykd1q/1BPa2y31Hv1DM2Dz
/sr8KQqx3bbP0OpJh1bzOSCVvDRlX046HN2q6+nHYsCEQbYRt+J5wDKLTDn6
Jgf2+D9QVK6OBaUFh1QrZnHhVqT8y0GBGZC74qXDELlYOKAw3bfgAgfqPJdb
tsWkQciK2pd9XjJg67Z4iV0lfHiwdd0nnSv50Nel8rLX2TgiTmqX5j7bun2D
2JCmGLqjeFgiSLimW66qiIGDDzbvWu/FBofZ8y1Sw5MhhKX0uX4cA1SWj7eJ
ucuCuPzdcQ8eMqE99rL4q/sxcHZobbZXHA92Gj5fPTskB2Q0v+R0CGKJ+Jg7
3J67+TwIrdK/fmFALvi9LF25uiMWXL3Fd4w+zoPYF7xBj9qyIX3BS/WgOLI+
g8UntNp3cCCzXUpdTzYDcpTyC7LrGTDOOG2Hx1ku1PxqN77skAlDx4zfZDuH
/N0D2L+bsX9NsH+NsX+vYf/KY/++QHl6ojzOKM9m1P9t1H8f1P9J1MNm1EN/
1IMoHrtmuv2q3MVqCFk8fVb9IWr/wnuZLjeQXwPxSS6qkq+pfVL16fEajol8
KN1fEbrVk9rXDhsxhlnYiwvbzdZ940zMhpfsRkFodR30lTb5cGsKCxjfZl93
KEmAfWOOeX37WQX9b/mP9lQpgfApg4c8DmUS4649SN8b6cOQ/hny7438Y5D/
77wWymOB8tDlL6HJfwX1EEzTQ1DV611Pg2vg8uTsxjcqlB5qxjdwR2ZWQ36/
9/ceSlR2Se8xrf/5/bMFwvVO6dMzXCr/47DiyhcpSy48qqpT7Tk3h6on2TNY
++EpFjxmdGj8nJoEE00aDCL0q4E1afuaxoQSyLSTM7PJZUL/1uhBt7R4wC+T
59+bkA3hA/bMir4VC+OQvhDp05FexH8p8r+O/EW4PcpznyaPO8ovoMlfjXrI
o+mBZD82ERx5/zU1sN5nVauM6R/2eY/orJ3mVQVrvCdYvhGj9jHtyjvefnnH
g4s9teIHbqD2988uTFU6XcIGz/S+n6Nep8P12A5zf41aGHTcY8I+XjkkzTsy
/RwnHr4882RmRQr9p9PlPltm5cMvedd1UgfiYNzazHsuywUQ8WFLoHpUAahu
vKStEh8Hxf1ct3tsrgXz5fXX/SZVQL+gKqcPvSi7Yh8uu8HoxYEL8lbsk6Op
eo8MBYXpw0p5cMPIrTg/hZIz6tn8nP3vq2D5nDwbxVlUu7bxar8VW9eA+qPo
pzx7FrwSK4tJGsAGqDw/5FivRJi11jUopjQG5KJve15T40Jp1NUbH+0yQPV4
fUFi71hQax04w1K+Csqti0afDiuCS4/yR93WZoLXzDc+uTFsSLa3unjQLwUe
cY6nHp/LgOabpl7ZihxYE+JqqrM1FV7EbS5rcWDAN8SNEH+G+AuURxPlmYHy
eKSPcRUfx4FxBzOt2W9TYWrF8Of8www4j/hAxHUQ7y59IuOWgvdZFjjtjvkQ
L2xPidUaJadrMZCCuDviZYiT2nUL9VCMeghAPeQc7eTz4Gf0n/kY6HbyyUT8
KuL6iJP8kjqOu7HlneOOieMuvYfSAKuXAri+LkqeFV4Ih08acKXb46Bny1On
SUlcWG9utOOTShYEPplePXUz5Yct0R4Goz389qtoP0Y0+0lGeztJszce2ucN
tM9ytGdLtOf+aM+ezzvHxWznznGxWaFzXFzFcTQQx1EijiMR/1M47txw3Inw
/ThOfWjjdDOO61W0cb0b/YAFzQ+Q/Or/a/6TNC//vfOv9o4+BlNlefBz0Mt0
QU4WPN3/9V7x2dh/2TybuSBGcE1cAH3zxh/RbcuH0KxTGxh344h+j0TPGK7z
Z3+43nvsmD/5w0WRvD/7w+vmdz8NFK4L1F0/mjaey4VtxeXp7kpk+kd95x6J
+i4AmWkp9hUORaCrtqiMPZIJLeek/qy3Ncoxf9ZbZE7jn/X2yYp7ZJNwXF8O
YjQuGpEF7ici7ZYJx3XDiJpodWU2DKnu8CvTT4SxkTdOiHNioCJ36PR7/Tlg
+P2C7PlxqeCvduhVgg0DEsY4nvumwYL2c44pwWtiYUax7EPbLTHA6bAZxJLk
g65LjwCFnbkwsyTqR5pcHKw7uWXd3GE82L4/erl9UxbsHFCVcPpiLHyXDbY5
rcCFue9d22MMM2B66gSoamfA89OXVYx682CTQuIxs3dZoPvBmpnlGkvk/xn1
/Cu3U88hqGc9/cbvofP5YDHXXeFLjzzI/pYyY6FO3O/+bRzHXzypTw3kLtDl
+Jym7Plse2B5aq4AeuzMuVr1kaoTyxwyK0xbngej35s47bLMo+r9Zia5X1vC
hqtKrhGf21Oh1UZlWU+XGujjOtTFvk85/BjvM+rZ2Xh4XPU9JsRW6N88Pkaf
0KuAuRpHnfdKUvbJOH6l7WoTG/xm2Sy41Eb5K8ctPcZov+eBM7dxs9xGyl+N
N9y7PNWlCoKSoz8klVD7jG09rmVsmV8DQ28/08ocyeoS10A+z2l8nPC7J2nf
jUU5/VHOIGyXFbbLENuVfneFo8ElPuSnNQ+cwsiD65OWG1Wsj4Nm1E9P1E8b
6kfEfxjq0wX1KcIzUP+qNP2fxv5q3/E/+0vUvznYvxI/Q9rjx7JhzV2nmPAj
ifDkifizfdUxxHjmwfTr7439OWCVpLbp8bB0GJTopr/zAwMav7/+83ydorzl
z/P1d0bnfN1IyKOS4hwSvWlv7Xd66mwoOzlj3uxdidDT9JrARUDGhwQ+lVoW
zYegU/PnlYBwfhxiI2NzMA7WVyTXq3pyYOxQ1hB2ahpUfL8avjCUQYwHRHoj
xcN0/O6z1UEOfbkgKZFwMnlMBqypt4tMbWLA6eeduE2/TjwPcZL+f88LhPiB
FG/8vXEFKf4pHLDiynVlAYwZ4p3FnFIAJY0qtdzAf3288b+9HiHZP0OsU28Z
qzv1xjrRqbd/1XrEGMdFKo6LHjguLNA+d4p32uFUtMPu0vdGuzVEu32Mdkua
r0uiOuOBdRgP9MJ4gDQeWyMPrEnT4MJS5ezdxqcyIPaoqvOqfrHwFL8bdL/z
u72COr9LWgf96ij9sx+7Utrpx3LXdPqxkq16OaY+LLh/PvrT22Am5L+dvOKi
bwyYb0i5qijGB3+VJKfcxbnAP7/hc4FUHBx6OoZlN4IL13dEreFZZYCPYWOU
S89YYlyhjnwGI59PyEfUX/Q8AymuI+VbSHxEuJu0mfWq4mrQUzGol1Gj5vFp
9zeePGUvgAVDpY+NPUPVh2xSnWFX+oQLXgOMDlxWo+o23fzk1s1hsyBXujm3
4VQK1BdobHzHr4aDKxcFexiWgXdS0+r0qfHQa+/y0X+Kx4J9d3w/JYzHTqtK
DvlTPBZXtyt9Qo86WDg1Nv5BRwXMitm6dddGyv6XWhlcGWbBgdcxWyNlZ1Dn
XMaUbwuIHsWHbSkTmQG3qPqxn5YXIrZyq8Bd0MZROUbZ/1H3QLlNdjVwaKS+
Xtgpyg90IL3nX0k/Hr+7h/ZdM5TzPcqZgO1ajO3SxXaZPCu6WdPGg8BlJ11X
6+eC9ayQnx1946AG9baPprfffhL1HI16FuEbsF8u0/pFB/tRl9aP57DfZ2O/
s6+7BVquEsC0gkO9g5kF0CGnOuhNQhxUB8SbjIngw7Ov9nU/p+bD4K/SoLI/
jhg/53h18nlS1MnntHwnn3+Vvf2r7aq79vb32pXWBoWXf7KrfqX7GX+yK864
u1Ji/f51diXCY/oxgm+VC+Bd9Xq/W+VUnPlS3dv90UIuxJm8E4xro9aV2Tde
bpBexoeopklBySpUndsTrCdn0+rJH5iIH2DeZYGMpGXh+FRqnS461xBLq/Nv
C7n8rnk8B+IlsiM0b2fAGFszHWePWrA/72crt6MCdnw/WfBzGGUnMvquO3ff
ZMGNkUvPxwQnwRWsh7+L9fD3sR7+R4lqxCKGADY4pLKV2IVQMGeP1NbeTFiD
5xTq8ZxCAJ5TkJAztx7dUAW6b61HvegoBtuDg5+MEs4zO5TOH59czAPl+/LV
1+pzQN5i20OvllgI39ymrBvGh1tu0z6rjcsHnXMmj3c4xEEm1vN/odX/DxXT
89ylL4w31zxfPLQhEaKCQh98bYkh0pO+uwvPZXyjncsgyUPSA6m9l1Gf3rTz
DqOxX+ywX7Zjv5D0SeqvruyEbg9d2RvJbknnaEj2HC7H8hp0jwcPJ7nwG3oV
dDleNB7d23QiuRrEXb+JtTRS+aKzM8qtZKcL/ckqrn2QA7UOTcfzRBdp54mG
7BQL2eLDhY77vW4xxSg5rcQu57pnssFhmErTscvpkIbnmHzxHNNuPMeUv7Gn
krRsDbxpfRq7/kAZiGd6v9y9KB7qJPt/Vd7Bhs87lC5+j0+CbPujSbtkGcDF
81NReH5qNp6fKr3RR+rDCeE64lXUV1PdQvDdMMf6Y1kc5BH4k+Qhyd9Ve0n6
IemTpP/XZT5vr5yqAVnNe1cGvqf8vE+60zDzj9XQ92XQqSFfKHrR+cGftPN0
PU+vUnrF50H+5cyEqirKHqq/CHZVCjjwalFf12Xl1HmxPDzHNwzP8WksZQec
6l8Lhy03RcREl8Nnw6dDzHPioTnksVeisD36eeOdIgZ9gbtDFyq/MmLCRceJ
+1dcYMNT2QHNa04nw+xEl5E71ITrFDxXeIF2DvE78gEaH9J3RXLmopxKtPOG
pHaR9EDSG0nPpH5xyluhsGx4LWw/37z5uA51PrGfzVcv7qIa4L8sLWFNpOh1
Cedq3dYXTKr/wQfdya8uLZhE5Xuz331YlZjFBU3VQbUH/Cl7U8XzrSPxfKvm
FO9dCqW1kKnT9/2ArApgXpu44uaiBBh+eMl8rdQqmNhnR7TE/WLozXFpf3+T
Ce29X//Y/kRo327jggNHpsBJd7WlPacyoD+etw3F87aGeN6WxIf0XZGc9HPB
9HZp0dpF0gNJbyQ9k/rFaM/Dnvcu18Kvs3UL00ypewCaI25ZyL+sAdfp86ce
G0+ta0TnzXvSzl9P1ruatylFAAeOmkw28aHsJ3/Cetb+kzy4+VzHx+xV/m/8
BJ77jhKd+x6jr9JxtA5UFO5kXvCrhO8dK6uZvgmQFy419YdeNSx5VfdBLL4E
xgqW54nlMuFcSYBlczQbWN7Mkkc3U+B81JJnjgYMCMFz6FvwHPo6PIdO4tMx
uvO7yvjdZvwuXc5I2vl0Uru0UQ/7aXog6Y2kZ1K/XM9lDhyQXwtzI2PnRrdT
+OD3rgPEvtaAoXaqQq94ig/pHoYQ51fjjRdXATv0yY/ky5Qfdp0xZ3lILQ8M
R3ewxNsp/2CG9yFE430IY+V2uhWW1MHoUY8PuYxkwQKzT0UpuQnQ+GS8fMWp
apj60F4x6WgpBNl+2nTzBxM8ioJHf01lQ/9EizRGWQrsefRpi6YxAz7i/QzD
8X6G/ng/A53PE+RD+i5Jzq7aRdIDSW8kPYv6xYDWL7NOBz81rK8Fk+iOa2Iz
qPNxJceuHn0sXgsZp6J9JdopPqL7SdbR7us42P/CgLuOVXCydgDDKpOS86Vu
MtNcgQ8+1bxICRtqXVON94RMx3tCOv78q4Ox94y1c0xZ4KtYu1GJnwCv7u1V
uXSnGmZwDr8MfV8Kay+yHJ70i4chBas2PBPO9zJHbwScbU2BeKeMWykmDNiO
95ao0u4tIfEhfZckZ1ftIumBdK9LGeo5k6ZnUr/8d3z9e46v/85T/1nz1H/j
wP+sOPC/66z/rHXWf2q+4v+WvAQpj0TKR/21+VIRTs+zdTfPScofkvKW3c1D
kr77t+YPSXrobt6P1C+kfCAp3/jX5sNJ+e3u5rFJ+eHu5pNJ/LubBya1tyv9
kPR5Y2Jpef/hAhizyCfT9Q/35jnsl3y3q4wLssc+5IUmku/zEeG6VqoXdK6w
4VfQ/XuLvNLgQ3Jb7CuZOjic5qS9Rq4SFAYEzK3YSta/Q+jzzKo9VTBGI8x7
9NMv8HHjNwN9ayYYXbTt492XD59TTYcoWuWC6fb4vR4DyPf/fKkafDPLnQ9c
83Zf37A8aHPhFzisi4Preimmp4yq4OCPI3b+s77A2VVX9y80Zf6Wh37vkKyC
7ZYobh3MNHIfqTKJBVNnXTB6XUTpf+ttR//z09gQYL/jtZ4NVXf0FPXDo+ln
sPHcSYvCeOAUO/6DgRll587xPUo3zaoGhRF5K2e1UnHCJ2c/bZMSPrxYeyTP
Of1Ll+Nu1OkBReqyXJDXD7MZtIzqX71JA95srGHBiuRDHppvUn7fZ/WVdp/V
el2vuobr1eBbMPPRrielEHdGz6CXePzv+6yaaPdZSXlMD+xnLoAfQf2Wl2QU
gPvNvfrGyXFwdnK8B9hWQ7+MU73b9UvhRcz+oRfqmMR7tERyTpUTc799lA0T
POW5nkppv/HG666eU95xIHzXSH6JSdZf6CGepodLK79ezAwQgPbCEyEPtSg/
c7pCTnJkUBWo2mvrbVGl9OzSYXKpaUEN5BpbvXk+mprHWT/GDhhylAcvonTb
5X3zwfCap/72sBqQ41+2H79M+P872UGfH8WDqrLD1tAeQrtlHZrMdy+C93I3
na3HUnUITQbiAW7XOSBprPa0oIhalznU6Lu0WVbDgtdyds+mUPNX3IBeHUGs
Gvhkesgk4zEVz7fNurj0M68aJl7rM2Yc/OW9fPS45YiNcqzCNT44ho/Uiqmm
/PD6rKYnOyZwwbOFefa+H2Un9HiPda5Xas7pWoD8g3sVNlVAjan+J6Ziwu/4
zYMWv4UImBFDX1RBcuJ6loVZMUSqFX4ecY4Jjq1HDGO214LM+7pe0dMqIMD9
9v0JEgnE74rwHbGhA42uc2HV3rVc9Qqq3lj2gNypSyv54NPPetzeiVS7lFAP
PWn3Ez4TK7baN7IG4tNO6+YmUXrb+bg2ZVpkDTyxUQ5kGFF6DnM2ax8plPeA
5e7kTywqDg9XuuMIO2tg7+b0ZK1DlJ2Q7p9UHLn4RssRAexT917NeUbtF5tY
847s7sWDrRGL80N0qLpE+vpo0+1tTWaz6mDB/EfV0osqoXxrzuedRxJ+r3de
0dY7pqVKGbZjq2HgBD/1nhdKQDVsrJNHEhMyovddjRlVB0/Eft331KiEQq2n
exrtu17vWLtqfUhfwYNtCj9eDVSj1qf+jqp7VpsKAM5v3R00nGoXab1jLF13
7P3VGmg/t8pYp5TSm/ingKHJC4XxSIhzyQlvSs/uppfSPWJr4bXX8z5nk6h1
a/28cWmlsTVgkNLL8ezarvMJV8Wu2Q4aWgWX1VSGmS2g4kaVA7MjW+7z4NZ6
6bKQ/pQfpucTFIeumS54XQfGBlNjAwWVcPXOsqiH0Qm/8wNWtPxAbbCaKfeg
0H9Kj7o/e10pxJ5Z8qS0kQkDhps51AXUwY9G6XNb8ivh6ev0fjVvu84PzKld
f1gjgwdGh9UfBPhRci59G3r98g8BXErVbrs/pKxLPQyd8vW+TkkNnLgjk9l6
k9Kbg6VdVl1QLRisbXsw7yKlZ4uO7WHK1bUQd9xMPHcilX9739PriMX3Gmjc
3qfHnZyu82w9n+U0fN1WBU/k91uNe0fJaSkZ+ONFCw+UJq35ajrkD/UemL/6
iPmr9RJ9LVO+1sHY3JKl82azwOde6VuD8gRi3myMbxIv80Y1TO9fwjR7Xgo9
3pfO6i8RD6n9No+XrRHy4Q8wl5vKAuPkQtcHJV3nzTJ3bRq6vh8fklhXQmIW
U3KqF+5c2LChCj56LtzYJ6jrvNmcaS5yi8RqQXXJuVd7qii9fZrLm+bEqoU1
e/eHjRhK6Xk20qvQ6En5Z5I8IvmTafLT87qfUD+jafoh5ZNdH2cs9HGrhqku
kr00zgv9rEHG9akdTDDH/hqD/XUP+4v03a7sQWQ/j2n2Q8onk+yTZOfKOC5O
0sYFqR9J4040TufRxindrkh+gGTPxW/k2poXV0PFIt3plwQlIJORfiG8mAmD
0C/NR790Bf0S/btRNHsm+T2SnyTpgeSHSf5c5P9baf6f5K/8cH6ZQ5tfrHA+
sqLNR3T/mU6b7wpwvnuBfnszzW8/WWEQGFVZBds836wTLywGqaFP1ms9ZBLn
X9J3RThpfhfFAw60eIB0bzYp3iDFJ6J4JpAWz5DiH9J8LYPx1R1afCWKx1bQ
4jFR3KKC8cNBjPekMN57hPEeKU+7DbRGFK+qAj+F6Sutrb8A60uV8dLVTKjE
+FOPFn/SvzuSFreQ4ltSPDwH9aBG00MrxtsatHibFJ+L1hcqtPWFJ65HNGjr
EVK+qwHXO69p6x3R+mgMro9I+bfTuP4Sx/XXc1x/3a5NOfSwkQ+zWb1KV6fk
g6nt+5tFV+PAHNd992jrvs/I34eQ39PFdaUprit/9wuuQ2Vo61DRPc/utPYm
4zo3kLbOFa2L5WjrYrb3hQER2/iQ3n87/8BWis8gXF8foK2vSfk9K1y/P8D1
uzSu96fjen8KrvdJebOrmE/YS8sniPJ1DbR8HSmPsQfzHmqY94jGvMdq/G4d
7bsRmFdxouVVftsz5mGaMQ8jwkn3P9tjnkeSlueh65mU7zovH3fdSY0NThN7
T5uyLREGtJUOlBdQ91rT9SCiP0KjP/ei99Y1mmw4qsDp1dcnEe6H30iTq6fO
+3BQnixav9PzVwfcWpcNWMqGheuGeDUZJsF0p/E+Xj0Y4Ii4CeIzEL/3aPhH
g3VsiNIc9hwOJ8FlQ50H0yQYoHJup7m5MC5IDGdc1otNhvxn2aWSE8j7TSL6
FBp9w7IW43IfNkQeHfHIV5AMcaZV06doMkC6fm3P6FA2FK1OEZxdkQLG/T0L
JsxiEOcpGaQvodGr5L79aR3OBhfGeis5hxS4ETZixCLdP9xXPKDyxY/gWphS
mRS28CoV/9DjzziXU0e14tkw29I8e3J4CjgrXJrIMSTvUzORfg6NXqlx3ukX
SWzYfHm3jGtyCgwefT83ez4DRt+qz4tOZ8PG3lpee+tS4Ji1/+iIReS6hTFI
b4H0LkhvNrjYvC6DDTEjV1c/bEqB7OA3r6xMGMR2iXDSuoaO0/nnIH+SHkjy
kOTvSh6S/KR1Mb1/Sfon2RWJntS/w9HejtLsjTguCPZJsmfSeBHlndwx77Qb
804ketJ4JI130j4LiZ7kT0h+ieTfSH6VRE/ynyQ+ehfM+/ZQYMPM1llfFWQT
4Yz/8ty2shiinF35W9J+DR0nfffJF+3HtePYEFojNSz2RCJI6NtzB9XEQBDi
bxHvi/h2rfweM1ayIeJaxRqORRIk+p30sevNgE2pYwtn3mHDiyENysfzkmH+
8Tx9zYkMEMyd6hr6hg0PXVpVm7ekwHSrmzUpsxlgzX7uopAo/K5NX+1BjBTo
IX5g81cjBkgOeWp9TDh+xYpY1WbfUkAneHGymgkZF7WXXo9E4k+ShyQ/qb0k
/WTtWsc8ocQGPZ1hvkUaibAseLlHbxaF69JwUr+Q5vHu8ifN+8Nwf9Mf9zej
cX8zrV7jxhND4fiddfzSJekkCD0a45vXTsbrcf86G/evc3D/Ogb9w3maf/DE
OoRQrEOYg3UIYUWC0dsvCf3Dq+XHntxOhpUrxi1/PJqMk/zbT6xLOYx1Kaew
LuVmxk2D28FsiC+00t6skwL2qtn94qcx4AbiCYjvQZzkn92wTqka65TcsU5p
zZGOalUGG8y/v9Vo80+B6Lr2zMC5ZJw0f3lifdpgrE9zwPq07Yf3hrd+ZgOv
bffZCZwUGF5utffjH3AuHSfM48OwXlEJ6xUTsF5xbfPk1eeE+NKGSUnRLSmg
cq3FO+z/gHdX/kl1MWt9PrFBIXpwSW5BCnw+sHjt/j/dE4u4PA3vrv5t1ffW
nP0gtOd0g7l8d6GeWW0uKsAAO8T9aHh37YexW399yyPh+vb1e9s3silgteKK
/nAdClel4d21/8s3pa9In2PDlG8DdHrZJ8PUa3eTpUZSuA4NJ51nIdWTWF17
+3aKFRs+KU1fZPwsCQZPeBH+qj+FJ9Pw7voNiHHPVZjFhoaFM+5OyU2Ettrw
Zx1NFF5Pw0l+jzTPkviQvkuKE0jtJennyyf1BtdjbHCP1/8ip5sMMnJu0+KH
kfuF1I/EOIpgPyR7I8V7JDsnjQtSnEkaj6TxS4rPu+tPiOsRkn8j+EPSuqm7
/pm0HiTNF6T5hbRu7e58R1pHd3e+3obxzGuMZxIwntmI8U8gLf7hY7x0F+Ol
aRgvbcX4KhDjKzGMr/phnNZS+D/jNBJO4kP6LklOUrtI8a035t/0MP+2BPNv
83rb6EktEIB9k53qFN8CcGpcUpkSHQcmeE/mTdo9maR1ioj+Bo1+65vbyUe2
V8EsztHQQ1e/wAdYfqCvJRMgM7D4oX8V/LLw2pmkVQymcd6p+q5M0MT7Xc/g
/a4X8H5X0vpLRH+aRs/R+pwm11AFto6+tUc6ikHFrrBAMZgJPyteeWmPqIZS
N72Rhw+WwMQczVtiTCZk4/20DXg/7Ua8n5Y0b5LobVPVrqxcUw2Ngqy3j/uU
wsWPcfUOlUw4lKA1fNG+ahimZBcYt7QUNngyzMsamGCE9+v2wft1o/B+XVI8
QKK3sVJPO+tZDdc/vjX0uVUKX10X3TzUMx5ObTowu+NmNXgdqBtq9bIU7o5d
2SdUIh6m4/3ALrT7gUlxjoj+GI2exJ8kD+m7pPiNRE/SJ0n/JL2R2kuiJ9kP
yd5IdkLqXxI9abyQxhdpHJHsmURPiutIfoPkZ0j+hBTXiehv0ei3N+fsSDnI
h5lVc/v4Hc8DmbnH9mWbxkFwf9mNbSp8yLmYGuR9NxfuakfkcZTjYDDew3wd
72HOxnuYSfGeItJ7IX0O0pdhffINWn0yCSfpTfKaddVbGzZ4F0SFZRYkgVqs
2KodcuT4lqQHEj0JJ/WXqL6ukeDP/97v0vkodMFHlN8Q+3IMQhqqQTlP8vD6
tdT+16iYcYuvcrigaWS9bJ3QTzQFqKt9WlADuvueD9P/UAZPrvTQ0dlJ1fWt
ynE7NV6GA0bpEtd6zKf2SRvXVpT7Xa2Cwc5n+qb9oPadmxFXpOGk/TI6f9K+
GKm9zSi/HsofhPKn0/jY0va/6HoQ4aT3W+n6JMX5zNRO3DSlE7+EOImevdY8
ZagtG4z0t72WL08C6WVhehry3cedmdXXxtmxwSpK/6kXJwn0kx5O+ijEfzVY
qLbWC2BN2b7wSZZFcFWqsnGcCpOIi9q7C+sbZ9PqG0n1io1YJ9mXVidJP99B
ikPmYX3mAKzP7PDurM+k8xlIqzPkYZ1nJNZ5diXncawXzafVi5LqSLurB3rd
aXf1Q6pTJemt57fOftyC/Xgd+/Fv1Sep3rW7eibVx9L1TxrXXxorGHX+Qn87
Ib7f8GuF0Ddw2PSB3+KIOGn8kvwA6btd+Q2Sf/jf/q5T/NkzsxzYwLo7UeDT
nAQv4wad3jtQ6Ad+pUqpC/EnWeNuawpxvoXYk21C3OrDQchwZkNhs820PprJ
8ErDz9NkKAOkIjpxb0EnvnPC/xlXw/sk1fA+yTi8T/Is23elKUsAhxb8utFX
vwg2D9bxHa/IJNKL2mUzVitqqlYNHNMJ33a2ipqn+sgWxT9ZwQOTRxMjfUbl
w7McZ7Xvt2rg6q0RS5+NK4cPkYaZnl7xcN5io7Gh8LtjDL3q6/WKwHGKuL+6
IuXHFFe+2zhkNwcCNBVst1lQ9vzIbfHlrJHVMMePqXcjh6pPuIe4Ng0n8THD
+5Z98L5lWWxvHd7b/A7bS5KfzsePdm+zJOphA+pBhF/Ae5vraPc2i/Tpivok
2cM/qr2kfv9308M/yt7WY3t7Y3sXYnu7a2+k8SXqryDsLwH2VzPex7gC72N8
j/cx0vEIxAeavTGVfSGAhQtsmemhheBw/L4ns5XykzfWGW7q4ydcb60qt7gp
T/W7QOt53EdFDlgXPnOWssqAgVpjc32W1IBNrB1/fHwZ3PdbfqR5N9Vfb359
bdCo58I4Vu+ju1qoOCpkcjlfu6UarDztD2ZZV3aJhyEfDeRD+u4oM6lze54L
IHNCznfNl4XA+rRpvd0f2sVH+a1QflJ7X+D94RK0e8h18L7KXoM776sMxvsq
SfQi/vT7z//Z/IM/bTh8UNi/p06wG4teFcIqr7fNP4V6GKamf1pKiE9ezCqL
F/Z77bKWQ7F/0E9Fv1L5CUL9C6wNwhh/0P/9WxNSRgj1b9C2/LmRUP924nbv
vIT6Xz97W8dwof7V55zc//UP/R4g39b45k/vG2yLiRJsofR8dH1IWqNvFYhr
vl3m8ge7EuF9aLiIz1rk09V36XJ21a7b+hydHlv4wJrqETl6NTVf95tY8vGw
UJ5BZ1f1jpOj5BmXo/3lgxoXnD/9YO67SNW/he8+csaZwwLVxEKf4xdS4KOV
9NCcpzXACd53aN3ccmgziZ7Xej8exqRVvLY8JgA3Rv7wSu1CKLazv7i2JA48
54QvEyzlgpHGJ9NBpRnw8fLw/DfKseCOuC7iUYirI58TyKcI+XzA71bgd1vw
uyI536Kcg1FOET4W2+VIa9dN1E8ZTT+Bz83vTYsTQNOQ2kAfNyquu9kY9/R7
WTW8WHhn8HeNP9wHInGlNGoxD15vXloWLE355yFbEkcaZ7Fh3+PnihFX0yGn
XD17XGAt5B83n2h4oQL4L0B5gUYCuH9eePbm6CoYMfntu3heERwVj9s/bQ4T
eshmRtY84ILMzdlnrD9kguQ5lTsPF8eCboTNTHEh7mYVMVQiIhNkNhmnqAvx
c8hHEfk4I59M/G42fpeL3/3tt1FOW5RThJdiu17Q2hWA+qn9K/Vjtft2Wtuw
anj5xndt5CfK3q5zZRoN+9SCWdFKNb/vVD0qKc40mGps6BjOgcjiy/F+xlmQ
gXHjA4wb7TBuLGk9JbctsQrOrLyge+JqMWQPrpIc7MUEPsafDIw/52D8SXpP
hIP075B+FtIXIn9n5J+J/LuqO9VH+cNQfhFOqi/djHp7TtOb5PXYn/rONTBU
8x3L4AG1Xgup15M+uaIGBL8G7Gia+4f13duBO+2P18JzrkzYh1FU/ZX6sCOT
LVdUgdU4xfCzd6h8xZsHp2606/NAqYfX2r5cqg58wUSP9psabMi3+n5MXDMV
7O+unpxWXA1ftzBvtEwpg/hX8w7oasbDlpjNKwpdeXCh1dl3WEc2nLS8bn6H
GQua/l+lRx3nAVfj0aq7bdkQ+urc4sC4WNiNfKqRTxzyEX3XCL/7Cb8rwkNR
TnmanKOwXRa0dr1A/fD+Sv3EqPqvuvOqBgKHV40I1aLs81fsfV37HzUQ/s3y
fEc5hXOMXl8Oq6+F8s3SlUNmUvVvvTQ33g+eXwcNLwaVqPTl/8ZJ5+/azCsL
tF5Vw7EZQVPLIqj1o7b74rkbeTwIH8eKKub+4f5wsw9PrHfwoWZYyuljOyn7
IZ2Pk7b/nsTpx4GL81mqw2ZmwNjc/WtHrqmBsMJiU5OMMmBH5ox54hAPa3Sh
0iKkBibUOB9fuLAcelx0eeDsHw8ymAd+i3lgI8wDk97ZlET6YKSfh/Qj93E4
u4TtUX27Xq9KOhfMfEdvTfgVC2ooz0uUh4XyLEd5RqM8HR6d8ojaNQLbq0xr
ryS29zS2V4RPRH2+oOkzEvXJpelzNvbXSFp/tWB/Hab1VzTaTwDBft78nfaj
nWGSsWNGLRjIdXhY76POU3yQP3zI2b0OIh8/fHs9hKJ/eElZYzWrGmKdza2m
TqX881svx0Cjz3wocZ5h03KfqmNP3NIzSWYtBxgeTaZvR2aCE1972v7WGmjt
P/hKdkA5lDDSkzOT48HGnH9uiiwfxg+oHmu+PxeMt94dN3lgHIQal8o29udD
bW7TUie7XNCP+Oz4TT4ODiCfb8inCPmIvhuH3w3H74rw1yhnHk1Of2zXR1q7
tFA/+n+lflYZP5B3s66FuY6JE8rLKHrnWF+FjP21oHLtZPIScco/uLbvGLkj
pw5cJxoniO8UUPMg4fxRmaZ1RfBgoT+RW/jR8QWFK5kf0vuhLIDz88fvWfqH
OsbdF26LB8wQgFyfyNn9Sil8OZ6TYtDOScl4301TDODAjsZ1/F5yWXCp2HiJ
xeRaGDn7xYmvdeXgZPHp7kt+PMRk8dSWGdXCqFrOujd9KyD9aanTmMZ4YOB+
lhruZ8ngfhbpPd8opFdCeimkz9WbI2GlI8TD4webp+XCW63cJffGxoE7yqOM
8jiiPB9QnuEoz2eUR9SupdjecFp7+2N7LbC9Inww6vMETZ87UZ+SNH3ewP6a
R+ivAFp/iewEaHZyGO1EmWYn8t8kh6hG14Ge8fs9RyYLurQrkp2Q7IHe76T+
NY64tCxqKh9kvoYYn8nJBd6uNK5gHLm/uuoXkv5Jeibpk6Q30vj6d/F7/2n+
jRS3kOIc0rxDmqdIcQspziHFLaQ4hx63iHB6nEOKW0hxzgH5Rve9Ah4oqxcr
zVbIhdBhlfM4HeT4hBTPkOITUjwjkp8Un5DiGVJ8QopnSPEJKZ4hxSekeKa7
dvLvsk75T1uPaAcHbE7hV8OHtHdx1+ZSfoC0How/rftByl4AQ0a/L4w8RZ3b
ndny1naFGxe2yM1UaP9AnYcN3D1F+bY/Cwzbd9/cV58E+rZL7KU3VsP4Fouv
vgNLIX3rDG1vDhOGuNtNnCts56AFl6Y3mmVDuNTJ8Xm+sTAYcSnEwxCfjXxG
IJ9U5CP67kP8rjZ+V4RPRzk30OSMw3Yp0tol0k8kTT+kPMO/S57n3zVvQ8of
/rPyhO67TklsWsYF6a9bF80tywCP6KaJTf/GeUJSHpV0Lik4Jaf84Gcu8PQs
mWuv5oLkgoIZW3xqYfqW8jeHXSqgeJZRc+noBMhXOW3nOJcHldeeJK01zwb/
4/4X7vrHQvrUMpPKBRwwU56zZ6n5Z1CftmrnN3cGHDg+94fxu2q43tJr1oze
ZTB44+xL8kOp9j4suZDb5zAH+m3wjr/oRsUb0tt3uK/gCOBh3NTP3DrKHkT1
ANm0eoAxK41+ZGypApcdFkn8UMqPBQVIqW++wYbmjYcTHr5OA6UW+Veeq4X6
0tGEVRp54LL7h0PfOXHQonF51LcxXJjzKDX3qmMGWOXeuP1IPBZ+fAsc7DKi
DgoM788xGVsJgx5c0BlrR9m5zs1RV+c688F43YN53n6U/h8nXMpUDKyBVXPm
251QoMb1G8I9AyEDrt+qVK6B2Q/eHHwWRdn5dv0zYc4qXJBf+urrqWPZYBPs
rfriuABsl3k/q5leCPOTn0n7lMbBUaclTVNWc+Fjy4jTZ+syQNlOyUlTldrP
fXlvV/GKJhb8OjzB15pN2ZXC1qa7S0OqoOzA1wsR4yk7MT30tKylqBamGUne
W97nL891xtLOV6p+OMua6i6cf9fOy1uVTPXL44j8iK3ZXAgaeGr/4oe5YDHx
WVI8WwAXk7cacuYWwWGrpZfaFJkwyWRfzptTXDih+GuJ+q5MWL3XzKBoFiX/
AafNlSmH2DAzcFOUU/vn37jmhvXLed7V8N65zbXSg4of3Hs2pgo218Hxe/XH
M02oeZ90b0nFcJhUvLYGYj+uOiy/jJLf8pT+m/VnuNDr2Yi8X69zoPCGpHJm
mABcX2obKScUwuM3httlfsVB47DEb9d3cCHO/rHUjRGZwBnQJFg5gZJ/okH8
F8Y4NvDzb5wpVabmZcnA53c0Fath7cPHv5yYf9jvFvB6MJTrYK/U/Y/1Dyg9
k+JhfYyXxtLiJVG8+o4Wd43C+E0d47dxGAe+xTiQg3GgKJ8WTsiniRPyaUG0
+HMU8g9B/pW0OJMUT5LiRlJ8SIoDSfHe8aq+Kt+2V0NAsIvqHH3Kfvx+DOFp
GHCg+V2yrO2XDEjmtM31aefDtn1TX10rzgd1jfsH39wQ9vudeKvBwnVhgGvM
xQeqGfDl2nm9E40M8Jl1bZ77qzqIy5G+8YVXCU1fAvZWRFF+I9GkxihFTwAz
jC3vP/xK+eF4Mesn7wfVQt2RXgfrR1D+gbRPkYH5+auE/YgozOdnYv7/IWE/
4hxtP0KA+wtxtP0IUb9L0PqdhfRhtP2IfOTviPwzkP8nlOcuyrOLfg8Gyh9K
24/4jO09S9iPeEbYjxhCiz8j5ywyDZrMhx+jYl6mMwsh0+hBYXptnZB/9PJN
01mgvLuOcac0AQ7cUM5+kcuDetPqqZdLc0D7YPbgX43Cef/cuUcaezlgypB7
und6GlTe2jlisT8DclwCUl231ECx1jfx8WVl8Lrx0sF6R8rOe2fn78vaxoXt
PkUy51dTceO1kTa1H9dUw0E3abOw0ZQd0ufBTJxnN+I8OxrnWRE9fd6XYJzt
dcaRA9pLBA67V6SBrsKkIfCIAU54DmUdnkOZiedQSO3qr3p6oYUkFzYfqFqa
o5EBD3IL9EqaGTAKz8UU4LmYQjwXQxoXx3GeSsF5SgXnKZLf6MofkvJXdP/f
Urukv7gNFzzmM4JaRmfCZ1fbns80YiEBzxktwHNGR/CcUVf+nP5dHZy/PHH+
WofzlygPqUjLQ3ZX/qYTFlFFQv7aL5c4nBPyfxrQV7NeyH8FnttKpZ3b6mo+
pfNvxfamY3v52F7XW9s8JVZywSl98bk8fgZUS7ebtqvEwgg8v3aKdn6NFIe0
oD28RHsoQXvwQHtbj/bGQnsj2T/JztvOL7t5fy4HMtTHtjL1PsPUmeetpdwY
4IbnEM/gOURfPIdIildJ3xXtw3aM/Z95Znr+WeQPRXxeD88blC1XBwaWc5do
nucR89UielJekY6Tvkvf5xLxJ8kf5da3lfeWDf3PqDHd7FLg5qzyx72F/Xik
6MXKyRVskNVoEws2+QRr7zVZbFzJgEik/3G6k/4G0jsh/a8JnfSrkf690Sqj
F69ZsMV/BztpZDyonVhaxguOgUjEbREfjThJzj26ixsdJDnAkGDnaQxPBXvT
7LvXdzFgN+IhiNshLnH7mNQGLQ4MKlwaOqckFZ5bjg1oOsaA4KmHfB6bccDj
4mzlrR6f4ep57ai1lxnQG+l7In0w0j9G+kNIfxnpdx64s+V7AQt40M+FyYoH
ceO0jGMxMWCDeDPiEoiT+uXklIQ+ZXYcCJ957Oy00Wnwrenz1sO+DDiGuD/i
9YiT4i4SPq344+z9ZzgwPPzu9RO+aRDEzdM59owBL1znzMq+KdRPZs5yM7F0
OHjh9SP/twzQRnpxpH+M9EFIL4n0+5BeqmyfzuYGFnz5MDDc3joBTGwiLn7/
HAMyiFchvhhxkt1uPKhr+OIhB+RMH2+qHZkO63xMT0REMWAN4uKIr0ZcxKf3
uP//8UjHfV7K3LsdxIFz82ZabZ+cDkyZpWc6YhhE3Bvxo4jHdoHHbvqsvLuV
JfTj/l8NzyeAh3ZzaWFmDMQjboq4J+IkP0DqF1I/kvqF1I+jzrN04mtYMO7m
vdRNpsJ+sXw/y+5TDIxBfCbiSxAn9Vd37ZY07kjjlDTuSOO09wcx7aNC+d++
vP+u0CQB3F1KNhkJ5e+LeDLiHoiL2tVj3N/nZ0h+kuRXSX6S5Fc1Br06PSSI
BfdCRjTYCZiw+9v8mgGPY2AS4gGI2yJO8p8kehH/uzT+888t8Xa2YoPfkfu9
Ip4ngSHjXWFhfwbcQ31mv+7UZwnq8zbiMYgXIT6aYFckO0ygjZeLOF7iaOPr
AuIkP0PyS135T3p9CMmfk/w/aV4jzYPenDHJlj3YsOWYwYdS4frn+Y85AHlC
v/HzxKbAmWzY8WPbuR7ZiVDflrEurikG/LWW3hq0kg0lE3/cnGGRBA2SdhM3
9GaAjdaRvIUb2XBbZsYCM88kYOmPLrbvJ4zb36+e82yb0A7ftNsfiE6Cl7U5
ST4yZJzEh/Rdkpykdm2oKPo240/nWyp6ts82SgDxNfYWV1JiiOssRp+JshxZ
YdzeY+nlxbMzwEyyb15VK4O4Ho/VWQ4fE7iQqW28Tm5YFjjqli7ebRlLzGOQ
9tdE/i0S/Vgj+jFS/if0osWaHD0ezLrBmlm4LBt+jTfwu+Mb+7tuQZ1Wt0Da
7xbNg/K0eZCUN3OdbdduuVGot+GPa97ez4bGUYk9nF7GEuteRPlDO8wfLsD8
Ialuypk90zxgOA9GbA9a/rI9C6Zv26yT5xlLrKP79FVrsNteLmRFqSV5z8oE
rV0KSplascR6UQOfMXG5a3kgXGxsKLqWDQ2Lbn5tfh4Lq9X9Dn5hciAv1rFP
iFM67PhZsKB/BgOst8VL7Crhw8Ot6z7pXMmHvi6Vl73OxhFx1lHXS+eE8nzQ
qt95WyjPkbvhqRlCeTT32dbtG8SGdMXQHcXDEkHCNd1yVYVwvKOff4p+3hb9
PCnvMRH5JCEfceQz5g63524+D0Kr9K9fGJALfi9LV64W2hUpr6KO9C+Q3hfp
g8UntNp3cCCzXUpdTzYDcpTyC7LrGfAM8RwaTvruXhxfPBxfWji+fsl09osE
9ks/7JfNqM87qE9x1KdoPbIV8y2vaPkWUX3sNUI+KhrzOVm0fJQ95n9KMV90
HvNFObR80Z0u8kUhf2W+yALlDybki5Ro+SISTqqDFdXThqM8RdguV2xXFraL
RC/Ct9DyfjdCp4w+/4MDD03qDZ9IZEDEumKzOXUMIk7a1yDFPyQ7J+Gk+uQF
57h27WPZcCDLun/K0UQIbVb1u1RNxkn7tg44HhNxPO7B8dhj9vvxe1fzweTJ
0p4SGnkwcdHjUS2zKft8iPsvprT9F03crwHRfk1j5/5OCe7vKOH+zuaI1Re8
b/HhjOaGm48L88C3X1mD1GaK/2PcVxLgvpIIH437UMdo+1AkeUj7Vn8hJ+Kk
c6z0fS5Su2Rw/ysB97+ccP+rq30uUntJ+18kPYjOn86nnT+l75eR+l1E/+9S
b/CfVlfw73Le4T/l/IIt2mEYbd03D/3YZvRjIejHSPsg3eXzBfVwgjZfWOG8
7IvzsgTOy92lJ5034c2/c6DvDC5MHKR0x883A9KPJt07Kxv7F/qh76eQ7Io+
f4nwv3bfSoQD4u/+xv0s0j6UyN6O0eztb92fItlhd/eturJPuv5JOEn/dH2S
9NBVu+hykuLwrYg/oOGiONMb8T60OJP+/t1evNd9LO09u0J8n64c36drwffp
SPfPi/gPxPvtHWj321/H/bhDtP24Prh/Z4v7dwW431eB+31huN83U4Wv/1wY
h+/v6bZtjlwuGCi17HUWxuGkdwTScP8xGfcfh+L+o+i7pPcL3uM+ZhPuY4rw
U4R3E+jxgwq+s6aK76y9o72zRpqvRfvU9bR96mTc19al7WuL3o+4jO9H+OH+
eCLuj3/H/fGZHYqqA/sKYMyXVs3xv/LhmnuJ4417ccT3L0T8fXC/vhr360V4
f3x3w5v27sZR3Pf3p+37k977INUPkOoxlPBdkgO0d0k0sZ7hDa2egV4nbIHv
pCzCd1Iq8J0UKVynP6ftk5rgO2XStHfK1LHuIpRQd0F/Z0SEi96FsaS9CyOS
/xVNftJ7HwvwnZoW2js1H1Fvj2l6I72D0x/rZDbQ6mRE7+/cob2/o431Nj0L
OuttTI/+MnF4L4C2APbsq+mF0P/Z5zfSYkyQwfeDWvH9oCDaO2Ibsf6nPbiz
/keEm+K7RR60d4vKsY4omlZHZI91R3q0uiPSuR7SOZ1e+H5TEO39JtI5Hfp5
nI34ntR4fE/qPr4nRdqnVsP3v7Tw/a+Od53vf5HOy4i+SzoXk47vZ8XR3s8i
nYshnX8hvedFwrWwTiyCVieWhfJ8psnjiPVmRlhv5rB3/bySUgGouYX13K9T
BGdG5nq8HciENajPUajPu7T3uR5i/Zsf1r+JcDHsxwBaP47AOrpHtDo60TtZ
l9He5NFuf6HdBqPdFuL7VkX4vlV/fN9KxEcZx8tV2nghjbslWAc4nVYHSHp/
cBDWE7Jo9YTb0J/sovmTV1iXKO3cWZc4Pq1/64a9Atiw44Wik1whaB866vkm
Lw7Woz+ch/6wjPZulDXWSUpinaQIH4h+2Ibmh0X1ljNp9ZavsT5zP60+cwDO
I344jzjhfDQA56PHOB9Z4btL3vjuUiW+uyTisw7nQXfaO0ot+C7SeNq7SE04
70fivH8O4wdpjB9CMH64gfcTTsP7CRfj/YQiPnPwXaH5tHeFUvCdoADaO0Gk
d3UDsF5XFut1Se/5OmLd7w2s+1XEut9srB8uwvphP6wftse4ThXjuiiM6ySw
DlkH65CLsA7593jH+LCB9i5PENYzs7Ge+QzWgRzAOhAf2js4pPdujGj39A7H
eqc42j3AylgPswfrYbwI78Xo0N6Loft/BtYjaWE90mGsR1qKdT5hWOeTRXuf
hXTubxPW6zII77OI6niXdMGfxEfUrsnYLpL8ov2FN7T9BZLeSHoW9YshrV9I
/djdfhftX9+n7V+fQPw1bb97La0+YQ3u12wg1DOQ6pFE9VSnUQ83UQ+i+q5P
2C+52C+kujVXgpykdo1EPRfS6vdI9YHWeC/rbNq9rGMwznxDO7/WgffKsvFe
2Ul4ryzJHuzxntsWvOfWE++59SScFz6D9/R64z299/CeXtJ54dNIf5tGT/ou
SX5Se0X6mUPTzw6831UX73eVxftdRftQObR9KJF90vNX83Bf/iLuy8/FfflK
xAtcOnFvxEn0pH0uO8QjafUPJPz24OxR0UZVEP5LiqM/+wv8jFU4utOUScRF
7dqN60pd2rryO95zKI/3HBrgfYkyhPsSObiefUfLh3d1nyT9/MhfK88tbNcb
Wrv+UXKK8iePCfubdFyUR42k3VsoypfeJ+RL6fe+/qP40P3qeNo5o1F9LNwj
bvJg+7umj1HfKD2Izm054fmmyT5uRasj66BkYo37xsZKaNOecOhDbAJE4/kp
Np6fasXzU78cp8jttuTDFI2Y/cPn50G0o1t/Z4O43+9QHKO9Q3ERz23Nw3Nb
0Xhua+nYq+tW3amCAvP6hEDlYmizXiUz7SiT+F2R/FqPeml+fMEGz9JeKWPG
pv9Fu+jn0Uj6EZ3je4nn47LxnF0unrPj4Tk7fbxnyQPvWZLFe5ZI9HT+9HOC
pPFCumeVfh/psKip5sd+CWCna/qksyeF66O10dPvj2aCnKyu0frjbPCImr/i
w/xk8P9UfzJFmUG8T1XEX3SvafRfOa5J53Dn43nYbDwPq43namvxXO1rPFdL
ou+KP+nd2HWC24JAjxpwSnE/viadkrMVzzsfpZ13vrJwZEjdPB78nAoRYt+o
87n98fy1O56/Jt3TTnoPTh3PiY/Bc+Ir8Jw4b9+6dWXL6qDyvOmsi9srgXez
Y1LxuQTid0U439z8QcEFART0XLu0rbiky3YF3HvkOcW2FpqHTbsW+I3SzwO8
N4BBuzcgHu8fiML7B97gPQZNeI8B4D0GdPpI2n0FJP6k9wFNPyr86NlRA1YH
K8yW86j1L+leCDe1WeW9xflQ5DFibdBcKm8guu/CGu+dIL0jQHrfsBDvuxiB
912E430XnN4h188118HY2GCj/QYs+ObAqi2uTCB+V4Qv+daqsXBXFfjpT5Sd
GlX2F+2i3+NB0g9JD9L4XSv8Lkn+ruQkyUM6r+f+3ei4f0IN9OCPPxWxmd1l
v7t7FD5Pe8KDmmtPfY9MKCDaG+mdBdK7jWFon800+5RUNQlqvFUHoU+4JkPj
KyEudfnqaSEJxO+K8Aofef93DQJgh5Tffi/5h/oBwj0hpHdInfJWKCwbXgvb
zzdvPq5Djbt+Nl+9uItqgP+ytIQ1sWu/RHrP2m19waT6H8J4dvKrSwsmUfNX
9rsPqxKzuKCpOqj2gD+V7yL5E/p705pTvHcplNZCpk7f9wOyKoB5beKKm4sS
YPjhJfO1UqtgYp8d0RL3i6E3x6X9/U0m8d0Hut9bjn6PRE/iT5Knq3aR7jcT
6UeLph+SPrvbL6T+JdnDI96EaHZ9Nez4qFj2fQVlV6T5bkL60uhrwIXTxS+m
vC+n4hn6vEl6v0P0jlIyrjcLcL1Jmpcldje+CzauhaI7u27YyFSARWLjvkvN
8cTvinD9Q+F2W/WF8bK685E11YVdtiuyxWyDyusasNeTrG3QpvyJzsGMxro2
Pjj6rH02Y+xfxmn0OMpvrMHhnpJsqFirPTPQ6hMxHjuI6+tFtHdOQ8Z8H+9h
WA32iZ+3emSXwK2fTxrlC5i/+eQQ4jpPb7Pki3c5UD1qvsKoxswu5VThlc8/
clG4PjOZl9mzidIDPV4lxb0eGD8b0O496CpOpsf5v+0Z83g/MI/ngPnA0bT3
u4twn5eD+7ytuM8rQ8tD0vd5Se+Yk/RA1+dL7Jc9tH6xcrxV4S8hgOTb92V7
/MwHC9mShrX34uAM5mklaPu8JDv5/4o7t5CogyiMb1qRmJcKXC2yqxvShYow
omJEwYqSTHpREmpLWCi2xcwgKszCxMKWXrJCu1DZKpQlWQiVFGtoLoSVyFZa
qV3wUqJBpmGC37B14GPdoHo9DLNz+8+c+X5z9mh7L/TeSsF5l2AdZop1eJRw
Xrae2Xeh+WwBdGn23bHv+pmr8lpPRocamxS3KKjilVp43r73U7pTZUEnD4ZO
flVw22jsJzliPwmG3n5OcFu2XzFu6+s5yPZhIzhChuAI7Lwb7bmWBq6RAK7x
FlzD1/OOld8ALjxFcGFv55qv59d28J0dgu+w8fT1/NK8qV/wJja/zC9inIv5
XZovF4KXBRK/jvmNrbeM1T0pnWrfm7zr00Na1Nc7G2Nt7U4VCn43CH5XJrgz
81c1BzwpuHMe/GGD8IeZ/yzzLGt7WFV2qKGnS8Uvdk3xr/HUw3h0+f6K6LXr
O1T7Lcdgnd3THj/wTYfgm9nLV24q7/6o4qOG2sYPePqVBF78ALx43iRLnrv5
s4qaXbLv0Kw2lZBU//JJ42OVCt46D7y1GLy1zxE9+d2RTrXsstVYe6BFle6q
Tzs96KR50GR5B8qbwLtjwLvHVI3wbtYe1n5v/W0Ad64V3JmNJxt/Nl8rwcFn
Cg6u5z1WzDu79zGezu6Vul916Be7t7J78ZlLsyrCTg2P/9I4d/fFFlX23u23
e2yNSsG8mzDvRYKzs/u4XoclYh0mkvs+Gwf53bHvtxn8vRX8PVjwd7mfeNuX
mH7C9kOmz+j3PGbsz0z/YfpS9TiT9XVop3JfSD7un9SsInJ+hIffc9LzS/8u
07X0eWoT5ynTzbTOliV0Nukn6HdiQcLfSAeXvwgu3ya4vHyfpu3fweUXCC7/
t/RSF/RS88MRvTTANaKXRqK8FeWPofxoddT7o9RR++B/3oX/6c2PXY13Bcni
XUE93hXcEO8KmO7N3htIXZ35+YnQ7Zug2/dDt9d5FVcI7sZ4gb53mMT7UsYj
dDvl/UXb54B3WATvkOMg82VrTs3uWez+qO1rhf0L8ok/Rz7xF8gn/oXkGWf3
dG2vFVze1zzsA7DbYM+BnelsLB+0r/nrT8A+EfbdsDM9luXFZno7y+vN+sv4
CJsXxrPY+tH154v62byw9rNxYPPC1glbn0OIQwwU8aHhiK+ZJOLCtiL+NBfx
p4cRf7oH8bxGxPOWI57XgnjYOYiHXYN42ATE4U4QcbjMzuphv8vayfrFxiEP
/z8ZIP5/Uu8n8l33DLzrnuvru24SJ3UV8UqrEK/E2s/Ke6v/f/0ui6eT4+Nr
ntzP5PtleYQNiI+eKOad1a/bOf9KUdrhuuHzObvX8K3PM4+5y9+aQ2I6VMHm
D9ZSm8fvnWoxlG8rHvb7L/gXOg2/3N8N9sb8hnaVMS3y60H7U9W0xS88KKRL
3e4ve5Sa+UaNbzh7c+e6Gmpn+WF1/WbUb0P92h6B9gyd/709LO6M9YuNw78e
HzZfrPyfjs9ox+Enr+4cpA==
                "], VertexNormals -> CompressedData["
1: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
zZOvUvMEl7lhIbW5LXD8XA+/hFgqenYhTm7mMO2v+67V532p4WlqQR5yc0/N
ehqLVosrKivOpsOhLyPx35+2oJAxzbVnU9NQ77tfsfbj/86xY1nm2DNpA+pn
wlpQnlhV0wq3bCSyMMewJokG0x33NtDXtyDvmLdHZziUIA6vlldLDtBgFjXH
FmSZY89pZwvX3dmCcrJuVSRsKkU3rtHLI2RoMGSb8yBAoxmlhPYUeehXowXW
nAHTDHvhovOu89qirXBXdnxEwug9yg8Wuvijl/DDUt+BzV0tILzvmF+McQYK
C/g2Jpj87xx7CsscW+h64ch6sVbYP12W44paNDrjfa4i9jsNJsryShLZW6H1
odyOMws+oeidI5yZPf/OsSNZ5thZXlF5iQtb4bj9ucBnkSFopV/6RV+2f/dg
H2SZS7ddQP7ekq3op6/P2PIj7ijXiTtEhpsOz6aPeibOaEWv86cEO+x+hXbV
rSko5qT/M5feyjKXtj0imk/ci+6mcNnie0c4/ch7ld97FBPyo9o7OlxYfgG7
Qm4sfwM1l9aj5tJu1FzapYfjG4ED8vBesh3jMI8rqBzj0FfzbSKRwDNXVzH/
y75MyHyVle38jgaljdnDGLft61KXEOeBdtekEp9nzp8tL8yT+N85ql+uDZYH
zuxbEEfIAw8lVpJ4iorbY/lBLXGqX1BkCCwLdbPG8jPnz/2fZi+18w9QYc6f
lc/U3CXwgW0myd0EPpCvOz8P48OcJ9udU1T433lySp7FHYxnOVv+MD4/p88v
H5/PjCjIxbiZvXf/f8T9eVyPT9QHjKsU2SmKUEkqiVAJcSwJEdmiJIlIKLKX
IksiCVlalIhK2pRCYlJkqbTv+758SspO9MxMc/ne9/XcvZ7ff79/z2tec811
ZuZsc855i5PvSiaJHCTf5eLJf4e1Tfif8WTzOxc+EH52eimdIOuvqLvQm6z/
QvgIyrelFs88CB/uWTZlEz5w8eSIzT8V/icfhI+pfcTnE50wf1KGzyeoJsZ9
J+fz23hLcs7h8JHDmficw5PW1z7knAcmrgnG9wI0h24rw/cCpn+vzCb3guuP
/YTXH3tegz25dyB/SmEVvnfQOkgznNy7oPe55J7CaqE9w6acS4EMA7mN5J5y
ceOZvLixuPKFx1gOwDTzAh0sB2D/ykVUDnBx4DO8OPDfzcu928Mq0fj9V3uV
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
+wvrDB5Xkv2tXfGG8B+u+Cb7YP5D/I1qyn8ON6SQhxvy83YK3a+LT9MDyfhp
p6roeMed3fs7rciS7C/Mqeje345rW8l5g+hLz+PxeQP/6GP0vGmxexHF0+99
OyfT8ykbE/uQjC977k/Hx03qouf5rHVjMj7P8DytDz3Py8S0yX2BUsUBZfi+
gNy57vuyhOFEzOXhRORWzqX3y+52dA4Zf/vBRzq+aZEevY8u8kai+D7CynPy
9D7e1DVRx/cdzoompuD7Dg8/1B0n953FOeEb69v/lcMZ3LSGyodczRMZZLzM
2JFUPuSfL6DyZIZ22lAsT0Dozy8qT1b7xNiSuHqgsJIwlkvQrHzJmMilY45v
nbF8g41rug5g+QYX3g6fReRbDutjP5jXx37pga1UHsrlpNDxYjavqDysWD+M
yk+LJePFsfyEELdvVH5m9TDPwKcvzVQs81BHCfKcJvcQjNqff9ca/hHyvk7d
Q+RngaoeXWf77yC6ziZDJSpvJbWbqJ6VOWVA5e2L+W+Hk/ztBIUM+l7z2PoX
fa/ZvW6/HHnH8XJ3oHnd85+70LzuIVaa5LvgtU/pCv4umuxSTL97HwpD2xYm
Qt3PZNiR8BDFu+s+e3G/Db4qJcuFjihAwlnCyxaER6E/LRE7Il+3wv2RQ7W0
NYpRu8H2MNObEWiD0GjbDPlWSNaob+vsV4Gy9UaM/fLkHopq9zc1/yyAwbc7
0nSNKtGfRJVU274BaGvMi2fLjgtAROd675VVlcg0fMChAfc80fAAOZVkNXw+
R145GDGhCo0STvvhedAeXc1zHvIG+7OBIy9Tunl1qevVg/ZguPAEpS+YVJUo
eakS3f44N8Pe6gP4j/JYSvL97r66SudvuqjkiueHmIVj6fzyht/pelRCy5/g
9cDVayl0PRqeP+j6Y2CuMF4/PHaIpOvvuvtdk/xvSNqbNPy/cPxRlw35379x
6ZQ/w5aL6mL+gPP5BMqfVSoZtle+54FdsKq7WZ+HKOX15hDh362gOs1sL6Yj
b09HN0I/sXUppR+ySaHnYeG+o5fIvsy49Iruy96vNlSPq1kO7k/O1UH9+VSP
W0dm0fk17x8m88Bfta10nspb3fMH9jOldG/f7vk5fE9bHr6nuViJwazoQnQz
Ya2T37AotDxzqJvQATx+T9HKFZpFSP7NiIT5GZFou8IYCY8NreB+aDWhQ56X
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
ho6W9RVCf5+hQO9x4scWt0B1aJ/g5G0lKNV6fL7J5UJ0vkzP9tbkZhBf92Nf
xZRCFFYepLzKtRoZW915uHVMA3hYa42Sb81FJe+kvx6NrMd+otJqw64aeMb6
IL1ifZDOsT5IEjU++/+8KoPre57dfa9WgobeVvtWVdwIAq8NNp4nKiCyxt34
+LxsNOSD9plVq5rhc3jp5bi1lZArIz0tZPUL9PbOCgM0XwD3rDVT9++qRMkq
g3JlfoehgRr2If2siJ/lYFbduxIJD7hlf21+GiqaP8JF810zKFyqWDjUsRyl
R85Zo1BcgPpJZbkHYjvt2Lbo+8YOpejpuhWN4W0VaNvI+RtvpDb862NznNfH
Zr21gaEN9hfS8u5/GWATg5Qz/k4Jw3ZyzAM9C13sF7gOfCoxSTkU+Xe47g/C
9vaIll80r3LiLw9nkrepWdRE8ypF76wbeF6lCl3sdauT1It9qx6/5Ru2/58d
tB/shO183/yTFU9W+qAxl39uIna+mHK2OZ4f+Wa926KK5/eOkT9I5te49vcA
qQMVLTd8QNb51uI2rQPl+pYc4fUt6Xo22VKxpgJmLVz5LFQsF9CXPxvHVjaB
kn/obDu7SjgufvDW89Pv4AxcmvkiuhnivkxbYoQqYdnXmiwP5VjwmIV9FAUs
H8Z+3FbwrhKtf2A55kFKEJiXowgXDQGoz9h3fvjZSnR1aUfCy9UpELapYe/T
nGZINLhQKj2sEs05MNV4y8lsmKQS+EpCshlEZ6hlz/hUjjTrh6o39CkCp6td
P6MGN/2zh6V49nBP/YR7slc5u3Qnzy7l7M9Anv3JxdMQz57MZvE0UdJcfV6U
jgKLp3H25xPeeM7O/MizM3uyJ/syu/Ejz27k9cX6Zx/2ZAfy7b33zN4LXe4x
5IBaEYROtb7Tz7AaHgarPT4h1gBXZ60WUlAuxXaNVpHBoSK4YvJozMLkJtBV
qD7auqgchNZvm6w9OAVMduu6KwcJ4InyjqyOm+XI9vRtk4SWOPAZs7XQ/YsA
hqa8/r6krRSFrz1yQu94Hrj4rbOQ2NcMbyQLX/yZWIzcRp+v7EythBf2B26f
r2kAW9lkU5fxBWiATXHItuF1IDPhs32NTB1E+zv/WWiVA4ZddQ3p7+rB9MXm
lyTe3lO/i9URM26T9wi3wDlSYq1V8M10+Y+VjQ2gzvJeslneizLLe3Gf2HiA
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
1dcEM7618+pruLqYKF5dDKeXY3uol2lj9TLjefUyNkxf72X62vP/o46Gq3+P
59XRBDL9foTp9570PldfI8rqa3az+houz0qP5VndYnlWMbz7vondd+7+nmf3
9zu7v9fZvdPn3bsfPdyv+z3cI+68Ofdgn/PPLWdnHubZmeMY/l0gw7+bxvDv
ODw7Ex6enTLDp3vL8Olecfh0PLy5XIY318TDj2th+HGfnCLcD+3PBK2BE01/
3G9E/i9KFMh73FidwpdJkTlgMchiXkhULVokKRpG3u/+SKZsXTq5AHRKqj7L
/ilBUvtKF5P3vpjgR6t+dBUiv6Our+NupCPzD9dv7z/VAiYMx62e4bjVMBy3
iQ2mW7J75SOv8cMMFp6qRJu3xWiS98ee8Nr6uH11yT6UjaSXKoYsm1+PVii5
/SLvmD3hsvWEv8bhrIXwcNZ6wlPbfrDIzGV8AZiYHrm3bXgdGvz0pSN5p365
fvnLPxOLIdlkU0lnaiXqU7/rLnnXtmb4aPk8fLTdNRY/l7SVQk5t/SG943mo
1i5/K3kf77Xs9yCRBeWoWEp/67Z1r5H/vFI5oygB7OXhnU1jeGdvihV6KSiX
olF/j5L3emQ+5xt9r+dwzdoZrlk/hmsW/0hj8AG1IiQb3XK3n2E1itzhHkve
/Tn8sliGX6bD4Zf1UD/VUx0Wh1N2juGUrWM4ZatYPoYir06Kq4ea1QNOWSoP
p4x7J/XrAaesnodTxtUrBfDqlbi6JCteXdJbhlN2gYdTxuXxfuLVJXH5uua8
+qMnDKdMl4dT9pLlabTz6o84PDJ3Hh7ZWa1FJE8GAm4M3rblZDbyXFmVRPJk
ONwxCx7umMbhRpJvA9OyNxa/XJ2CXFeMsCX5Nlv65Lwpe1aJxvbe83fhmRg0
TybAPGiiAIwYjlgQwxFrZjhip7TTSP4Pan6ecub56Xfox5Les0n+D4cX5snD
C3uSLrpNsaYCqXQuSgoVy0WnnXvRPKJPDBfsNQ8XrKe6np7qdIYy/K9NDP9r
N8P/6qlOp6d6HA7/60gP+F/8d2oO/2uc1//G/+qpXqanuhgO/yuUh//VU11M
T/UvHP5XEA//i8P50uXhfL3bEEfyxMB8fFvTJOVQCJj/mOahcXhek3l4XnJW
YsOcxlXB79RZl5+u9AG9JHVTkm9WnegzhOShCefpPSb0JSqDaB7aa4bPpc/w
uYYzfC7bC31pftq6lYXHyXct11w4QL7rznC4NBgOVxDD4XI4uX2ljVQVmq2l
FzTQJgaUv1+aTPLo5jOcLDmGk/WR4WRxuFfqPNyrLoZvNYLhWzkxfCsVhlcV
zsOrSmX4U6YMf2o9w59yrsqPMHYohXval0vC2yrAwfTPJpIHmMvwpwx4+FMW
LaOXDHUsh5CWKboKxQUQNnvYJZJP+I7hTC3h4Uyh7rxEEO3OS4QSlpeYH6a/
Z5VBJRr3SNRY9xKCNPm+S8/PE0A6w41qYLhRNxluVHZ8oq3niQo0MEB36fF5
2bCg8dZZkif5m+FDfWf4UGYMHypdP/jgn1dl6KfGh+vv1Uogae7mnyTfciTD
gVJgOFAfGQ7UmR7wmw4xPKZUHh5THMNdkmW4SwUMd+kLw1EyYThKKgxHqZbh
Ih1juEgPGS7SUYZbtILhFtUx3KJVDIfIgodD9JjhEJ1hOEQvGA7RAIYrFMhw
hbwYrtB8hhN0heEEGTGcoCCG+xPEw/2J1Drd/OBKFhwcsipipWkdLJwYsYPk
63L4Pj8Yvk8Yw/d5YDD36ZA+efC+ayHJ+4X6Q+IlJO937tuv6xTb89Hcste3
G9szwMLl+xKSP3yG4fUYMryePQyvJ3bqc939v3JQaLHX6vu6VaA1WimF5CEn
MFyeJQyXp4rh8rgcP9SR5pmJPoVuyh7TVA/Tf0VPIfnM8xgOTiEPB8ef4d0A
w7vZy/BuxjNcG3Uerg2HR2PL8Gh+MjwaDi/m/cn/jRdziOHFOPLwYnqS/xz+
SzwP/4XDZznNw2fpqe5vFcND2cjwWTR5+CwD/298FlTByyPi5tnEcFW4eTic
lGIeTgqHbzKGh2/CvS9weaHL2PuCOMMxqYnuxjEpZzgmHM7IQYYzYshwRvIY
PsgYHj7IWoYPcofhgwgYPsgyhvchwsP7KGY4HfkMp6OD4XRweReavLwL7j2o
jfcexOUnbOflJ3DvOOt57zhGrC/6YPvuvujurC86L58KcflUXF/uFF5fbq4/
9iJef2zuXb62h3f5ibx3eVfW1zqG19daifWpfsb6VHewPtU3Wd/jL7y+x1z+
cACvTp/rSzyS15eYdx4Qdx64PsONvD7DPdULc32Af678332Ae6oX5vr6qvL6
+nL9dU/y+uuuYn1x01lf3AGsLy7vf//lS3N9a4/z+tYms/6ujqy/603W35V7
P3rBez/i983j4gavHXPdUvXKkGWfETHPWoORS1u/gEvWLdDfbBahw+AOq0xM
h8hPIyk90P8cecdHO6s7/8jMDoJAi7v0HZ+LR+n/3/lUwKdz8dhsXjx2cqud
xNH1pXDQ2WCPjnYm+nFvb6HNGQHIvN3XNMC7FEJbZ/285Z0JFvM84qotBfCo
hz6Wb1i/yru8fpWqrP/kZtZ/0pv1n8xmfSbXsj6TwazPpCTrJxnC+kmKsX6S
eayfZB7rJ/mA9ZN0Yv0kbVg/SWPWT9KU9YecwusPaVZd1x//LzqtHncA/y/k
lOoXkf8dxPo6GvL6Om5nfRo1WJ/GLtancQfru/jXqbvvoh7ru+jL4iSHeXES
KRZXOcmLq3DxxnU99Ev8zOuXGNpTXxcWj33fQ//Dd/8/9j/k6owGsjojK1Zn
NC7OP3Z930xwcRLqU+bZgP1CiflO0rU99nfKsvvo83RzDiTMX7Uxw6Ya1Wit
vLN0eSMMYv2dLrP+To6sv1PmtqId893yQaxz11l39xxUd+eM9acVLf/0/hee
3n/C+juJpXf3dxrF+judvm1v2OmZhwZJ/14XPrIY7XHSE6gr/Ve35czr76Q7
XmWe2cRs9DYMllkerUVL1mseCS7Gdgfr7xTA+jspsP5ON3vA1+upX5ME68v0
ifVl0mZ9mbg+Swt5fZa4fkrDWT+lcNZPyYn1TVLj9U26xuqqvrK6KnVWVxXL
u6df2T19x+6pP7unHuyevrhWm7nGqhR0jU59v2ecgU4nhS7VvSYA0dez5pbq
lqGOvUN17b7fR36DkazezpZ/93obu9de7F5z/WPX8frHcvc6lHeve+oXxPUF
GsHrC8T1+Snl9flZyPr5zOP18+HqZOP/n8LOPZ7L6w/g6aL7ZJtyWdIoWhe3
VEKnWRdlSuWyNEQbKiqVGnLpsiLTkgiplZEol0rWVDs/WYSU3OOLr0p8UdJs
+Am/c54+h9fO7/fd79/v63md73nOeZ7nXN6fz/uAt+cB5MmyfK77XD7XV8bV
Cwy8alHTzN3dK9xFeOPl6QMoesif48H5c+J0X/qKltUjmalrZw9cL8Upa7R9
tNTI+h18OCacD4eNpwrceMrmn++4+Sfz2GDw2FSCx+Zk1bCzCcpirFK4ZLqr
bj62nmKo3tU25KXx4Lw0p67Yfjwppw6/E4V5+wVUYMmBsE9n35QMembmcp4Z
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
eohDsNuUcs2WzKsanhuNqQ1vQurT3ZdS3lEF3LkSuHMHcGcN4MJdcF72GeDC
anA+xT04nyIOzqdg8QnmXHzCNPC6dKhyXpfZC51So2uw5RrTsBG5V3GvomrE
L8VtaGJHXVLv+N/R9tVdzT4BaViU6uOgF9I+GOdwmItzYL6XBPC97APfC7cP
M5hfeWm7jnAO+7yYEqt3nXH4bW+acA57Yub9nn75B2hU9pb7J3wTsPuO6xEH
XdoH4x8qufgH5mnZx3laOoDzWgDn3QCcF+fMF86vL50702rK18exZ6iNcH69
4s6YyXfNCtDEPi/VpQdOYH/NLy4GWLYPxj+85eIfmF/lDvc7i1tQuPH3uAXG
8TM5L8rrlgrhfoMyOrPI/aLi324J96uh9/vHWx1q8fjums57bxJRxhX/Uq9v
SL/cNxT65XKy+gLfgDSUOm++0C8snmEaF8/gC56Tr8FzEgqek83hGbR8dFrP
o4WUj38/GCKUP1BnIPTLiOHnzEm/oL8yM4R+4er/X3EI8VLiEDS5OIRjEFdw
mIsr0IK4AncuroCdJ7KGO0+E5YUVQl5YMOSFsfzTgad/P8eB5fNWQT5vHOTz
Mg98AnjgY8EDHwp5uLO5PFxt8FFPBx+1KvioWV5tIp9XC57ek5ynl6vnYJ5s
CnhKO8BTKgFPaTfkya7n8mT3g3/SivNPSovrXgtx3clS4rp3Qly3OsR1S/Oy
uoF/dSPnQWU+1dGcT5V5U83h+mi4nuUxbQY/6jLIY5KWn6ULeVjJkIcVDHlY
0ZBvZc/lWx2A/10NeVXsf9fD/zpB/hT7X2nnQkrLU3sO5+FGcOfh6sH5uTrc
+bl1f4XpJ5Pv7ZEx51V9Cq+igIkL1G6Q720mxOmFQpzeXYjT+x7ycH/i8nBn
7PQsIeVjlbxoofw+UexRWn6q97E/6xpLULBNUeNTuybkGNdkWpH1HIns5de4
9pci9U2ePxsovUSTmopH3Kp/gRrkksOHWVcgxzR5fRvRM6Sf+nriFcsmNCb7
t5F+RyuR2o6E2hHkPS6d/4dyzI/NyH1M0Fq9O0+RZNVJn4sOlajvX34HF5B5
Xc8Fw3Xkdxxjpi/8bjjzM+F3P4gTKOTiBNJjV4wj5WNv86hqWv79nzJVaPlj
diSdIfXB0zOtdGh9dFN05Gh9ZkuJK1idG7yB3BdW6G/9id7XsEdGsvS+Mj9/
1k3aATdpZD+j7ZAZdHM5bYfSt4fG15P2CU/pKiK/Y7ny6o30970x651o+1jb
K/1AysFRaq1TaDmpvsU/0/Z50uepROqD25UKVWl9aj+Ml6ftU3dm731Sf6xR
vVWL1n/q+s9saPsELHbbQNoBaxZtC6Lt4FMRpGx5vhqb3Zru4rD8CXZ0rttn
VtCKNNMW29J2e/H8ng29/mXtjmP0evzS5WPaProHo/No+eNGr5pJyx8wzYin
7YMtflah9XE68OgTWp8fouZ+Q9tB/xQOofW3m3FWqH/vV8oTyP3iju9ahPut
MsgV7vc/1himAw==
                "]], {}}, 
             Method -> {
              "ShrinkWrap" -> False, "DefaultBoundaryStyle" -> Directive[
                 GrayLevel[0.3]], 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "RotationControl" -> "Globe"}, {
             BoxRatios -> Automatic, DisplayFunction -> Identity, 
              PlotRange -> {Automatic, Automatic, All}, DisplayFunction -> 
              Identity, Ticks -> {Automatic, Automatic, Automatic}, FaceGrids -> 
              None, DisplayFunction -> Identity, Axes -> True, AxesLabel -> {
                FormBox[
                 TagBox["A", HoldForm], TraditionalForm], 
                FormBox[
                 TagBox["n", HoldForm], TraditionalForm], None}, 
              AxesOrigin -> {Automatic, Automatic, Automatic}, AxesStyle -> 
              Directive[
                GrayLevel[0.65], FontColor -> GrayLevel[0.25], FontOpacity -> 
                1], BaseStyle -> Automatic, BoxRatios -> {1, 1, 0.4}, 
              BoxStyle -> GrayLevel[0, 0.35], DisplayFunction :> Identity, 
              FaceGridsStyle -> Automatic, ImageSize -> 264., Lighting -> 
              "Neutral", Method -> {"DefaultBoundaryStyle" -> Directive[
                  GrayLevel[0.3]], 
                "DefaultGraphicsInteraction" -> {
                 "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                  "Effects" -> {
                   "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                "RotationControl" -> "Globe"}, 
              PlotRange -> {{-4.999999285714287, 
               4.999999285714287}, {-1.5151341593408139`, 
               1.5151341593408139`}, {0., 3.1830984071094983`}}, 
              PlotRangePadding -> {
                Scaled[0.02], 
                Scaled[0.02], 
                Scaled[0.02]}, Ticks -> {Automatic, Automatic, Automatic}}, 
             Method -> {"ResolveAsTriangles" -> False}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"minput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "3DMathPlot"}, {}], "\n "}]}], 
   Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Contour plot", "scanner" -> "Plot", "id" -> 
     "ContourPlot", "position" -> "600", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ContourPlot[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], {A, -5., \
5.}, {n, -1.51513, 1.51513}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max16588$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`max16590$$ = 
                 0.5, CalculateUtilities`GraphicsUtilities`Private`min16587$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min16589$$ = -0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min16587$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["A", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max16588$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["A", TraditionalForm]], "max"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min16589$$], \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max16590$$], 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$6056998$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min16587$\
6056999$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max16588$\
6057000$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`min16589$\
6057005$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max16590$\
6057006$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max16588$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
max16590$$ = 0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`min16587$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`min16589$$ = -0.5, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$6056998$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min16587$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min16587$\
6056999$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max16588$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max16588$\
6057000$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min16589$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min16589$\
6057005$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max16590$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max16590$\
6057006$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    ContourPlot[
                    2 Abs[($CellContext`A + $CellContext`A 
                    E^(Complex[0, -1] $CellContext`n Pi))/(2 Pi - 
                    2 $CellContext`n^2 Pi)], {$CellContext`A, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min16587$$], 
                    (
                    Piecewise[{{
                    0. + 5.345224838248487 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    5.345224838248487 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min16587$$], \
-5.], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min16587$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max16588$$]], 
                    (
                    Piecewise[{{
                    0. + 5.345224838248487 Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 5.345224838248487 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min16587$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max16588$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min16587$$ + 
                    0.01, CalculateUtilities`GraphicsUtilities`Private`\
max16588$$]], 5.]}, {$CellContext`n, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min16589$$], 
                    (
                    Piecewise[{{
                    0. + 1.6197467797498488` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.6197467797498488` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min16589$$], \
-1.5151343757885818`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min16589$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max16590$$]], 
                    (
                    Piecewise[{{
                    0. + 1.6197467797498488` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.6197467797498488` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min16589$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max16590$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min16589$$ + 
                    0.003030268751577164, 
                    CalculateUtilities`GraphicsUtilities`Private`max16590$$]],
                     1.5151343757885818`]}, FrameLabel -> {
                    RawBoxes[
                    FormBox["A", TraditionalForm]], 
                    RawBoxes[
                    FormBox["n", TraditionalForm]]}, AspectRatio -> Automatic,
                     ImageSize -> 264., ClippingStyle -> Automatic, 
                    FrameLabel -> Automatic, RotateLabel -> False, 
                    PlotRangePadding -> 0, ColorFunction :> (Blend[{
                    RGBColor[
                    0.6289616235599298, 0.1492484931715877, 
                    0.1355916685740444], 
                    RGBColor[1., 0.634378576333257, 0.1868009460593576], 
                    RGBColor[1., 0.8955367360952163, 0.5821622034027619], 
                    RGBColor[
                    1., 0.9953459983215076, 0.826535439078355]}, #]& ), 
                    FrameStyle :> Directive[
                    GrayLevel[0, 0.5], FontColor -> GrayLevel[0.25], 
                    FontOpacity -> 1]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min16587$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["A", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max16588$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["A", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 2}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min16589$$, \
-0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "min"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 3}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max16590$$, 
                    0.5, 
                    Subscript[
                    RawBoxes[
                    FormBox["n", TraditionalForm]], "max"]}, -1, 1, ImageSize -> 
                    Tiny, ControlPlacement -> 4}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}, {
                    Manipulate`Place[3], 
                    Manipulate`Place[4]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/APkPiMeNsEH5CADsakASUp3+\
vFl9TCtYPtbIM/Dz67SZq1qxTTAZrSD6f60jy+e+656z04kFHa7/V6+\
qI1HySn6RU83bdmKGe5LAR9d5wr0JpJkV7AZ9eticHsACc/\
gHrfZWveSzUjxp9f4fuEJwUnBr4axplhoCe7iuRTlujaM1Ls0P5kwmVCOPsJD7cfb22/\
fLHlYTCWETEGlNDP2kLmU0U0pD0EumTNW07EN3+8Vx4/FZzH8L0AkYC+\
Y71jRaiFkYJwzCf41vPN1E1MzBBBiaJnTpOT57DtBdooJrIxzHJ843SynrQFJirTnptbJTfrFOTDv4\
oPZOxi8h6XtDs7AsPCOGf0nZTVP+dugOfXbeGVPFpNHOb3hiNvxLBD0Mt0PmpdJ89I1bUu+\
jlXZzVfNhrk6VOm/l/aZ9osh/G0bRgwO7A1Xq29ZfjnbeFljl0/F/\
dtaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5UfMfoDKlghRPZOMt+\
cf1xtwKvN4UYazfZgHREPQMiyMG6qON2h2XMDKdEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2UsX6k5MMv3yR8Wt5HKiyZD3PWEgA7VW9NewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpVqC7lWRy40hyHJ9EvC7wPIjPT5o4dOLqC2xazieRRrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DZrcuNY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "ContourPlot"}, {}], "\n "}]}],
    Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Interactive plot", "scanner" -> "Sequence", "id" -> 
     "Plots", "position" -> "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`SequenceScanner`Private`iv$1721045$$ = True, 
                 CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`SequenceScanner`Private`nn$1721045$$ = 3, 
                 CalculateScan`SequenceScanner`Private`xmax2$1721045$$ = \
-4.993815670531455, 
                 CalculateScan`SequenceScanner`Private`xmin2$1721045$$ = \
-51.883875068327114`, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[CalculateScan`SequenceScanner`Private`nn$1721045$$], 
                    3, 
                    Style["A", Italic]}, 0, 6, 1}, {{
                    Hold[CalculateScan`SequenceScanner`Private`nn$1721045$$], 
                    3, 
                    Style["A", Italic]}, 0, 6}, {{
                    Hold[CalculateScan`SequenceScanner`Private`iv$1721045$$], 
                    True, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
1721046["integer `1` only", {
                    Style["A", Italic]}]}, {True, False}}, {{
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmin2$1721045$$], \
-51.883875068327114`, 
                    Subscript[
                    Defer[$CellContext`n], 
                    "min"]}, -75.32890476722494, -28.673295666418262`}, {{
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmax2$1721045$$], \
-4.993815670531455, 
                    Subscript[
                    Defer[$CellContext`n], "max"]}, -28.438845369429284`, 
                    18.451214028366373`}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    
                    PaneSelector[{
                    True -> Manipulate`Place[1], False -> 
                    Manipulate`Place[2]}, 
                    Dynamic[
                    CalculateScan`SequenceScanner`Private`iv$1721045$$]], 
                    Manipulate`Place[3]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Manipulate`Place[4], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[5], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$1722586$$ = 
                 False, CalculateScan`SequenceScanner`Private`nn$1721045$\
1722591$$ = 0, CalculateScan`SequenceScanner`Private`iv$1721045$1722592$$ = 
                 False, CalculateScan`SequenceScanner`Private`xmin2$1721045$\
1722593$$ = 0, CalculateScan`SequenceScanner`Private`xmax2$1721045$1722594$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`SequenceScanner`Private`iv$1721045$$ = True, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`SequenceScanner`Private`nn$1721045$$ = 
                    3, CalculateScan`SequenceScanner`Private`xmax2$1721045$$ = \
-4.993815670531455, 
                    CalculateScan`SequenceScanner`Private`xmin2$1721045$$ = \
-51.883875068327114`}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$1722586$\
$, False], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`nn$1721045$$, 
                    CalculateScan`SequenceScanner`Private`nn$1721045$1722591$$\
, 0], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`iv$1721045$$, 
                    CalculateScan`SequenceScanner`Private`iv$1721045$1722592$$\
, False], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmin2$1721045$$, 
                    CalculateScan`SequenceScanner`Private`xmin2$1721045$\
1722593$$, 0], 
                    Hold[
                    CalculateScan`SequenceScanner`Private`xmax2$1721045$$, 
                    CalculateScan`SequenceScanner`Private`xmax2$1721045$\
1722594$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> 
                  Plot[2 Abs[(
                    CalculateScan`SequenceScanner`Private`nn$1721045$$ + 
                    E^(Complex[0, -1] $CellContext`n Pi) 
                    CalculateScan`SequenceScanner`Private`nn$1721045$$)/(2 Pi - 
                    2 $CellContext`n^2 Pi)], {$CellContext`n, 
                    CalculateScan`SequenceScanner`Private`xmin2$1721045$$, 
                    CalculateScan`SequenceScanner`Private`xmax2$1721045$$}, 
                    PlotRange -> Automatic, ImageSize -> {300, Automatic}, 
                    Epilog -> Style[
                    Text[
                    Row[{
                    Style["A", Italic], "=", 
                    If[
                    CalculateScan`SequenceScanner`Private`iv$1721045$$, 
                    CalculateScan`SequenceScanner`Private`nn$1721045$$, 
                    SetPrecision[
                    If[
                    CalculateScan`SequenceScanner`Private`nn$1721045$$ != 0, 
                    CalculateScan`SequenceScanner`Private`nn$1721045$$, 
                    "0.00"], 
                    Which[
                    Abs[CalculateScan`SequenceScanner`Private`nn$1721045$$] < 
                    1/10, 1, 
                    Abs[CalculateScan`SequenceScanner`Private`nn$1721045$$] < 
                    1, 2, True, 3]]]}], 
                    Scaled[{0.1, 0.9}]], 12]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`SequenceScanner`Private`nn$1721045$$, 3, 
                    Style["A", Italic]}, 0, 6, 1, ImageSize -> Tiny, 
                    ControlPlacement -> 1}, {{
                    CalculateScan`SequenceScanner`Private`nn$1721045$$, 3, 
                    Style["A", Italic]}, 0, 6, ImageSize -> Tiny, 
                    ControlPlacement -> 2}, {{
                    CalculateScan`SequenceScanner`Private`iv$1721045$$, True, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`rowTemplate$\
1721046["integer `1` only", {
                    Style["A", Italic]}]}, {True, False}, ImageSize -> Tiny, 
                    ControlPlacement -> 3}, {{
                    CalculateScan`SequenceScanner`Private`xmin2$1721045$$, \
-51.883875068327114`, 
                    Subscript[
                    Defer[$CellContext`n], 
                    "min"]}, -75.32890476722494, -28.673295666418262`, 
                    ImageSize -> Tiny, ControlPlacement -> 4}, {{
                    CalculateScan`SequenceScanner`Private`xmax2$1721045$$, \
-4.993815670531455, 
                    Subscript[
                    Defer[$CellContext`n], "max"]}, -28.438845369429284`, 
                    18.451214028366373`, ImageSize -> Tiny, ControlPlacement -> 
                    5}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    
                    PaneSelector[{
                    True -> Manipulate`Place[1], False -> 
                    Manipulate`Place[2]}, 
                    Dynamic[
                    CalculateScan`SequenceScanner`Private`iv$1721045$$]], 
                    Manipulate`Place[3]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Manipulate`Place[4], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}, {"", 
                    Item[
                    Manipulate`Place[5], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({None, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfER0TfEJidGNMGlCS8r1eckksXDvYzjb48+Czm6RZu0oxHaAp/XCqL83ju+eeu97TYxEk/\
V6vp64b80GwONnC0xNjRmKWi4LH+\
2e5BKWo4Mk1fHbHmBD0HjDyA2Lnu2nMeyFnRLvzG3yfsKhgRMNXTRnVFNT0QJI8o5GqPWNJT8xPpkx\
EhNGf8Gz4env4YueVg8FYxkRrkFy9bAuZZ5IoSHoIdMOYd4zwb+74uDx+\
KhgL4XsBPAL10HgnksQGRnDCMB/vW682U/\
cwMU14TGR86TRZeY7aXqC0pDydwCzHNy4ma9gWmMhUOW7ul9ysU5AL/xY+\
EKGNyXls0vZsCfQL44rRd15W/5y7AZ7ftoWX4nQ1cZjfLkPeiKYnoJbpfN66To6Rqmtt9HOuLmu+\
bDTIi6dM/b90RJVeDmO7bRgwOzY1Xq29ZfidtvAix66fi/uBMZ+\
dowRcNRwqwX0UccHmUTRTHjiJtk9X5cbhMO5WfIfo9KlghROYOMt+\
sf3xqAKvN4UQazfdgHR4PQMCyMG4YsvtHk2pHmVEksgAz6/\
rl002EXUoHne2rz3lMTUDzBGybnlCc5gs1J3oKPvyR8Wt5HKuyZD3Q64hBblW9LexPtKQy+\
OJ8IwkxAuaevXmsEpqTKS37AclSJgTThGS/jIf+\
809XKwEUnUgUV3SsTiwpTnzT6JfFvgIeKqz5o7tObq82xazCcRprbqAJsnitNkc0/\
0m040bmgPdlwTfkvgP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCTZi/Ff6DQlOuEY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Alternate forms assuming A and n are real", "scanner" -> 
     "Simplification", "id" -> "RealAlternateForm", "position" -> "800", 
     "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], Element[A \
| n, Reals]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"2", " ", 
                TemplateBox[{
                  FractionBox[
                   RowBox[{"A", " ", 
                    RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"n", " ", "\[Pi]"}], "2"], ")"}]}], 
                   RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]]}, "Abs"]}], 
              "\[Pi]"], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ComplexExpand[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"2", " ", 
                SqrtBox[
                 RowBox[{
                   RowBox[{
                    SuperscriptBox["A", "2"], " ", 
                    RowBox[{
                    SuperscriptBox["sin", "2"], "(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}]}], "+", 
                   SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"A", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"\[Pi]", " ", "n"}], ")"}]}], "+", "A"}], ")"}], 
                    "2"]}]]}], 
              SqrtBox[
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{
                    RowBox[{"2", " ", "\[Pi]"}], "-", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]}], ")"}], "2"]]], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "900", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              TemplateBox[{
                RowBox[{
                  RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", "\[Pi]"}]],
                     " ", "A"}], "+", "A"}]}, "Abs"], 
              RowBox[{"\[Pi]", " ", 
                TemplateBox[{
                  RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]}, "Abs"]}]], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FunctionExpand[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"2", " ", 
                TemplateBox[{
                  RowBox[{
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", "n", " ", "\[Pi]"}]],
                     " ", "A"}], "+", "A"}]}, "Abs"]}], 
              TemplateBox[{
                RowBox[{
                  RowBox[{"2", " ", "\[Pi]"}], "-", 
                  RowBox[{"2", " ", 
                    SuperscriptBox["n", "2"], " ", "\[Pi]"}]}]}, "Abs"]], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{
                SuperscriptBox["\[ExponentialE]", 
                 RowBox[{"\[Pi]", " ", 
                   RowBox[{"Im", "(", "n", ")"}]}]], " ", 
                TemplateBox[{
                  FractionBox[
                   RowBox[{"A", " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "n", " ", "\[Pi]"}]]}], 
                    ")"}]}], 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"n", "-", "1"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"n", "+", "1"}], ")"}]}]]}, "Abs"]}], "\[Pi]"], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "Im(z) is the imaginary part of z"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Im.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Im", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ImaginaryPart.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod10$$ =
    XMLElement[
   "pod", {"title" -> "Alternate form assuming A and n are positive", 
     "scanner" -> "Simplification", "id" -> "PositiveAlternateForm", 
     "position" -> "1000", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FullSimplify[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], A > 0 && n \
> 0]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"2", " ", "A", " ", 
                TemplateBox[{
                  RowBox[{"cos", "(", 
                    FractionBox[
                    RowBox[{"n", " ", "\[Pi]"}], "2"], ")"}]}, "Abs"]}], 
              RowBox[{"\[Pi]", " ", 
                TemplateBox[{
                  RowBox[{
                    SuperscriptBox["n", "2"], "-", "1"}]}, "Abs"]}]], 
             Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at n = \[Infinity]", 
     "scanner" -> "Series", "id" -> 
     "SeriesExpansionOfTheIntegralAtn=Infinity", "position" -> "1100", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[2 Abs[(A + A/E^(I n Pi))/(2 Pi - 2 n^2 Pi)], {n, Infinity, \
4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{"2", " ", 
              SuperscriptBox["\[ExponentialE]", 
               RowBox[{"\[Pi]", " ", 
                 RowBox[{"Im", "(", "n", ")"}]}]], " ", 
              TemplateBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"1", "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", "n", " ", "\[Pi]"}]]}], 
                    ")"}], " ", 
                  RowBox[{"(", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["A", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "2"]}]]}], "-", 
                    FractionBox["A", 
                    RowBox[{"2", " ", "\[Pi]", " ", 
                    SuperscriptBox["n", "4"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "n"], ")"}], "6"], ")"}], 
                    SeriesData[$CellContext`n, 
                    DirectedInfinity[1], {}, 2, 6, 1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"n", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["A", 
                    RowBox[{"2", " ", "\[Pi]"}]]}], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["A", 
                    RowBox[{"2", " ", "\[Pi]"}]]}]}], "}"}], ",", "2", ",", 
                    "6", ",", "1"}], "]"}]}, "SeriesData", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                    ")"}]}]}, "Abs"]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {True, False, {False}, True},
    Typeset`aux3$$ = {True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False, False}, True}, Typeset`aux9$$ = {
   True, False, {False, False, False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "I", "word" -> "i", "template" -> 
        "Assuming i is the imaginary unit${separator}Use i as ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "\"i\" -> \"ImaginaryI\""}, {
        XMLElement[
        "value", {
         "name" -> "ImaginaryI", "desc" -> "the imaginary unit", "input" -> 
          "\"i\" -> \"ImaginaryI\""}, {}], 
        XMLElement[
        "value", {
         "name" -> "Variable", "desc" -> "a variable", "input" -> 
          "\"i\" -> \"Variable\""}, {}]}]}]}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "11", "datatypes" -> "Math", "timedout" -> "", 
    "timedoutpods" -> "", "timing" -> "4.331", "parsetiming" -> "1.131", 
    "parsetimedout" -> "false", "recalculate" -> "", "id" -> 
    "MSP7061db409f8hgec868d0000623c17did6c369gg", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "17", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa7071db409f8hgec868d00003cb1d3afig1363f43454770973695860617", "version" -> 
    "2.6", "inputstring" -> 
    "2*abs[integrate[A/T*sin((2*pi*t)/T)*exp((-i*2*pi*n*t)/T),{t,0,T/2}]]"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 1., 
    "Date" -> {2022, 3, 26, 14, 21, 33.8228596`9.281785221987398}, "Line" -> 
    3, "SessionID" -> 34130986352712131918}, Typeset`showpods$$ = {1, 2, 3, 4,
    5, 6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = 
   "2*abs[integrate[A/T*sin((2*pi*t)/T)*exp((-i*2*pi*n*t)/T),{t,0,T/2}]]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1077., {936.3544921875, 941.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.857289693883855*^9},ExpressionUUID->"cbefee1c-9f41-4a69-a5ba-\
67d0e708afc3"]
}, Closed]]
},
WindowSize->{1141.2, 585.6},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1. Inherited,
FrontEndVersion->"13.0 pour Microsoft Windows (64-bit) (December 2, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"59f6d3ec-f19b-451d-b480-a94f004f560c"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 494, 7, 41, "WolframAlphaLong",ExpressionUUID->"eb6390d7-4651-4294-abea-686cbb5ea74a"],
Cell[1077, 31, 60531, 1238, 2212, "Print",ExpressionUUID->"6bfe5312-5dc8-4b2f-b998-c4f069df1fe4"]
}, Closed]],
Cell[CellGroupData[{
Cell[61645, 1274, 864, 20, 35, "WolframAlphaLong",ExpressionUUID->"737ffd26-f411-44bf-9853-b766e9dbd5e6"],
Cell[62512, 1296, 45948, 899, 984, "Print",ExpressionUUID->"a5b51f39-3e36-4e1d-839a-e68c1dc6ce49"]
}, Closed]],
Cell[CellGroupData[{
Cell[108497, 2200, 653, 14, 35, "WolframAlphaLong",ExpressionUUID->"7d634c96-146d-4854-952f-22c8bb07b575"],
Cell[109153, 2216, 30835, 612, 601, "Print",ExpressionUUID->"73f9094c-a882-4151-82f9-dad1e8b60e7b"]
}, Closed]],
Cell[CellGroupData[{
Cell[140025, 2833, 736, 19, 35, "WolframAlphaLong",ExpressionUUID->"370d7ef0-9ab0-4c9d-8b00-d710ab334561"],
Cell[140764, 2854, 10202, 213, 207, "Print",ExpressionUUID->"d6332e7e-20c2-457d-a97a-e9f289ed3555"]
}, Closed]],
Cell[CellGroupData[{
Cell[151003, 3072, 177, 2, 35, "WolframAlphaLong",ExpressionUUID->"bf2a3020-0ff3-441b-bf21-4220dedc73cf"],
Cell[151183, 3076, 9460, 183, 195, "Print",ExpressionUUID->"df61eeb5-7827-4137-9936-cb2f2ba6e335"]
}, Closed]],
Cell[CellGroupData[{
Cell[160680, 3264, 757, 21, 37, "WolframAlphaLong",ExpressionUUID->"a4f5bfb8-b253-407e-8951-e55932167c21"],
Cell[161440, 3287, 284847, 5139, 2291, "Print",ExpressionUUID->"1d740366-151d-43db-95f0-caa968d58682"]
}, Closed]],
Cell[CellGroupData[{
Cell[446324, 8431, 802, 23, 49, "WolframAlphaLong",ExpressionUUID->"8c2de2b3-4ebd-496e-b0a7-9b704049eae0"],
Cell[CellGroupData[{
Cell[447151, 8458, 11331, 233, 584, "Print",ExpressionUUID->"a5290a6c-dc41-4dc1-a06c-9ee29133385f"],
Cell[458485, 8693, 11697, 237, 261, "Print",ExpressionUUID->"9bd398ac-9e2c-4622-89c7-564b07380af5"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[470231, 8936, 840, 25, 43, "WolframAlphaLong",ExpressionUUID->"41bfcb9b-983c-4e0c-a973-ebc7bb7eeda7"],
Cell[471074, 8963, 11219, 232, 574, "Print",ExpressionUUID->"fe9c258c-7fef-442a-9bc2-ae6c680df02e"]
}, Closed]],
Cell[CellGroupData[{
Cell[482330, 9200, 271, 3, 35, "WolframAlphaLong",ExpressionUUID->"6ee00ef2-498b-409c-87b7-48bcf818181b"],
Cell[482604, 9205, 23139, 458, 649, "Print",ExpressionUUID->"af34990c-a241-4e4e-87d7-0eccabde5646"]
}, Closed]],
Cell[CellGroupData[{
Cell[505780, 9668, 186, 2, 35, "WolframAlphaLong",ExpressionUUID->"0d766bd1-bd74-496f-9d79-f1f19b3636b0"],
Cell[505969, 9672, 108714, 2074, 924, "Print",ExpressionUUID->"f162e506-38c1-4017-b604-290c61bd4828"]
}, Closed]],
Cell[CellGroupData[{
Cell[614720, 11751, 243, 3, 35, "WolframAlphaLong",ExpressionUUID->"2a84e674-0c64-47b9-9e52-3dd8277a1e1a"],
Cell[614966, 11756, 102362, 1943, 835, "Print",ExpressionUUID->"efce0ba4-2a59-476d-aabc-d002d8b3a8bf"]
}, Closed]],
Cell[CellGroupData[{
Cell[717365, 13704, 729, 22, 39, "WolframAlphaLong",ExpressionUUID->"dbaae8c5-3f0a-4332-8cfe-19f64bd2be3f"],
Cell[718097, 13728, 61085, 1147, 465, "Print",ExpressionUUID->"8b0493b7-6d86-4510-9979-903c07058f37"]
}, Closed]],
Cell[CellGroupData[{
Cell[779219, 14880, 756, 22, 39, "WolframAlphaLong",ExpressionUUID->"db5c4acc-f6ab-437b-aeac-2d1f187eb9e0"],
Cell[779978, 14904, 33063, 658, 316, "Print",ExpressionUUID->"1ab98942-3dda-4993-bca2-c9ecbbc923e3"]
}, Closed]],
Cell[CellGroupData[{
Cell[813078, 15567, 697, 20, 45, "WolframAlphaLong",ExpressionUUID->"67e63ffb-ac39-4c9d-8566-f682f2cdc1f8"],
Cell[813778, 15589, 58194, 1109, 633, "Print",ExpressionUUID->"7c40c7a4-aac3-449f-b507-b12da7b27a09"]
}, Closed]],
Cell[CellGroupData[{
Cell[872009, 16703, 660, 19, 37, "WolframAlphaLong",ExpressionUUID->"1f09f869-47d9-4aef-b4c8-1fe4ac3a63ec"],
Cell[872672, 16724, 69234, 1344, 785, "Print",ExpressionUUID->"acfa1f6b-6873-492d-97e0-2fa3d8e49cfb"]
}, Closed]],
Cell[CellGroupData[{
Cell[941943, 18073, 906, 23, 35, "WolframAlphaLong",ExpressionUUID->"83ba9cd7-85b2-40b4-bf7f-2fd17431da4b"],
Cell[942852, 18098, 234383, 4108, 1913, "Print",ExpressionUUID->"0b25f56e-6101-44ba-93fe-321f706a434f"]
}, Closed]],
Cell[CellGroupData[{
Cell[1177272, 22211, 670, 17, 36, "WolframAlphaLong",ExpressionUUID->"70222616-d7c8-4572-b7de-53b827bbb6f8"],
Cell[1177945, 22230, 9110, 180, 262, "Print",ExpressionUUID->"b20dd3da-88b0-4a8d-87a5-621a136d6b5f"]
}, Closed]],
Cell[CellGroupData[{
Cell[1187092, 22415, 178, 2, 35, "WolframAlphaLong",ExpressionUUID->"c0088a09-c50d-4ffb-a561-e1b46744060e"],
Cell[1187273, 22419, 40349, 831, 1043, "Print",ExpressionUUID->"85079625-7b70-4f09-9b40-7b2308cdc94a"]
}, Closed]],
Cell[CellGroupData[{
Cell[1227659, 23255, 805, 23, 35, "WolframAlphaLong",ExpressionUUID->"13ce647d-9e00-4d2b-9a81-ec7964604867"],
Cell[1228467, 23280, 245205, 4315, 1888, "Print",ExpressionUUID->"cbefee1c-9f41-4a69-a5ba-67d0e708afc3"]
}, Closed]]
}
]
*)

